
STM32F207ZG_VCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007974  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08007af8  08007af8  00017af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb8  08007cb8  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  08007cb8  08007cb8  00017cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cc0  08007cc0  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cc0  08007cc0  00017cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cc4  08007cc4  00017cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08007cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d50  20000208  08007ed0  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002f58  08007ed0  00022f58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d95f  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002afc  00000000  00000000  0002db90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00030690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  00031238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022678  00000000  00000000  00031c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f497  00000000  00000000  00054300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd0b0  00000000  00000000  00063797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120847  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039ac  00000000  00000000  00120898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000208 	.word	0x20000208
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08007ae0 	.word	0x08007ae0

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	2000020c 	.word	0x2000020c
 80001c0:	08007ae0 	.word	0x08007ae0

080001c4 <strcmp>:
 80001c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001cc:	2a01      	cmp	r2, #1
 80001ce:	bf28      	it	cs
 80001d0:	429a      	cmpcs	r2, r3
 80001d2:	d0f7      	beq.n	80001c4 <strcmp>
 80001d4:	1ad0      	subs	r0, r2, r3
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b976 	b.w	80004dc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14d      	bne.n	80002b4 <__udivmoddi4+0xac>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d968      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b152      	cbz	r2, 800023a <__udivmoddi4+0x32>
 8000224:	fa01 f302 	lsl.w	r3, r1, r2
 8000228:	f1c2 0120 	rsb	r1, r2, #32
 800022c:	fa20 f101 	lsr.w	r1, r0, r1
 8000230:	fa0c fc02 	lsl.w	ip, ip, r2
 8000234:	ea41 0803 	orr.w	r8, r1, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800023e:	fbb8 f7f1 	udiv	r7, r8, r1
 8000242:	fa1f fe8c 	uxth.w	lr, ip
 8000246:	fb01 8817 	mls	r8, r1, r7, r8
 800024a:	fb07 f00e 	mul.w	r0, r7, lr
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	4298      	cmp	r0, r3
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x66>
 8000258:	eb1c 0303 	adds.w	r3, ip, r3
 800025c:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000260:	f080 811e 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000264:	4298      	cmp	r0, r3
 8000266:	f240 811b 	bls.w	80004a0 <__udivmoddi4+0x298>
 800026a:	3f02      	subs	r7, #2
 800026c:	4463      	add	r3, ip
 800026e:	1a1b      	subs	r3, r3, r0
 8000270:	fbb3 f0f1 	udiv	r0, r3, r1
 8000274:	fb01 3310 	mls	r3, r1, r0, r3
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	b2a4      	uxth	r4, r4
 800027e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000282:	45a6      	cmp	lr, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8109 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8106 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	2100      	movs	r1, #0
 800029e:	eba4 040e 	sub.w	r4, r4, lr
 80002a2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa8>
 80002a8:	2300      	movs	r3, #0
 80002aa:	40d4      	lsrs	r4, r2
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d908      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	f000 80ee 	beq.w	800049a <__udivmoddi4+0x292>
 80002be:	2100      	movs	r1, #0
 80002c0:	e9c6 0500 	strd	r0, r5, [r6]
 80002c4:	4608      	mov	r0, r1
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fc 	bhi.w	80004d4 <__udivmoddi4+0x2cc>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0303 	sbc.w	r3, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e2      	beq.n	80002b0 <__udivmoddi4+0xa8>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7df      	b.n	80002b0 <__udivmoddi4+0xa8>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8091 	bne.w	8000420 <__udivmoddi4+0x218>
 80002fe:	eba1 000c 	sub.w	r0, r1, ip
 8000302:	2101      	movs	r1, #1
 8000304:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000308:	fa1f fe8c 	uxth.w	lr, ip
 800030c:	fbb0 f3f7 	udiv	r3, r0, r7
 8000310:	fb07 0013 	mls	r0, r7, r3, r0
 8000314:	0c25      	lsrs	r5, r4, #16
 8000316:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	42a8      	cmp	r0, r5
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0505 	adds.w	r5, ip, r5
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	42a8      	cmp	r0, r5
 800032e:	f200 80ce 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 8000332:	4643      	mov	r3, r8
 8000334:	1a2d      	subs	r5, r5, r0
 8000336:	fbb5 f0f7 	udiv	r0, r5, r7
 800033a:	fb07 5510 	mls	r5, r7, r0, r5
 800033e:	fb0e fe00 	mul.w	lr, lr, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80b6 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 800035c:	4628      	mov	r0, r5
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79e      	b.n	80002a6 <__udivmoddi4+0x9e>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa25 fa07 	lsr.w	sl, r5, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fbba f8f9 	udiv	r8, sl, r9
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	fb09 aa18 	mls	sl, r9, r8, sl
 800038a:	408d      	lsls	r5, r1
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	431d      	orrs	r5, r3
 8000392:	fa00 f301 	lsl.w	r3, r0, r1
 8000396:	fb08 f00e 	mul.w	r0, r8, lr
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003a0:	42a0      	cmp	r0, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	42a0      	cmp	r0, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1a24      	subs	r4, r4, r0
 80003c2:	fbb4 f0f9 	udiv	r0, r4, r9
 80003c6:	fb09 4410 	mls	r4, r9, r0, r4
 80003ca:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9502 	umull	r9, r5, r0, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2d0>
 8000404:	ebb3 0208 	subs.w	r2, r3, r8
 8000408:	eb64 040e 	sbc.w	r4, r4, lr
 800040c:	fa22 f301 	lsr.w	r3, r2, r1
 8000410:	fa04 f707 	lsl.w	r7, r4, r7
 8000414:	431f      	orrs	r7, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c6 7400 	strd	r7, r4, [r6]
 800041c:	2100      	movs	r1, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa8>
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	f1c2 0120 	rsb	r1, r2, #32
 8000428:	fa25 f301 	lsr.w	r3, r5, r1
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa20 f101 	lsr.w	r1, r0, r1
 8000434:	4095      	lsls	r5, r2
 8000436:	430d      	orrs	r5, r1
 8000438:	fbb3 f1f7 	udiv	r1, r3, r7
 800043c:	fb07 3311 	mls	r3, r7, r1, r3
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	0c28      	lsrs	r0, r5, #16
 8000446:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044a:	fb01 f30e 	mul.w	r3, r1, lr
 800044e:	4283      	cmp	r3, r0
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0000 	adds.w	r0, ip, r0
 800045a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	4283      	cmp	r3, r0
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3902      	subs	r1, #2
 8000466:	4460      	add	r0, ip
 8000468:	1ac0      	subs	r0, r0, r3
 800046a:	fbb0 f3f7 	udiv	r3, r0, r7
 800046e:	fb07 0013 	mls	r0, r7, r3, r0
 8000472:	b2ad      	uxth	r5, r5
 8000474:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000478:	fb03 f00e 	mul.w	r0, r3, lr
 800047c:	42a8      	cmp	r0, r5
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0505 	adds.w	r5, ip, r5
 8000484:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	42a8      	cmp	r0, r5
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3b02      	subs	r3, #2
 8000490:	4465      	add	r5, ip
 8000492:	1a28      	subs	r0, r5, r0
 8000494:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e707      	b.n	80002b0 <__udivmoddi4+0xa8>
 80004a0:	462f      	mov	r7, r5
 80004a2:	e6e4      	b.n	800026e <__udivmoddi4+0x66>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f9      	b.n	800029c <__udivmoddi4+0x94>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4643      	mov	r3, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4628      	mov	r0, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4641      	mov	r1, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	4464      	add	r4, ip
 80004ca:	3802      	subs	r0, #2
 80004cc:	e747      	b.n	800035e <__udivmoddi4+0x156>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	4465      	add	r5, ip
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x12c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e706      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d8:	4631      	mov	r1, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa8>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  const char *tokenSeparator = ".\n\r";
 80004e6:	4b56      	ldr	r3, [pc, #344]	; (8000640 <main+0x160>)
 80004e8:	60bb      	str	r3, [r7, #8]
  char* token;
  int toggleVar = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fb5b 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f8bf 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f905 	bl	8000704 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004fa:	f005 fb6b 	bl	8005bd4 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  unsigned int cnt = 100;
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	613b      	str	r3, [r7, #16]

  // Filling a vector with dummy consecutive data
  for(int i=0; i<VCP_BUFF_SIZE_2;i++)
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	e016      	b.n	8000536 <main+0x56>
  {
    msgVCP_2[i] = 0x30 + (i % 10);
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	4b4e      	ldr	r3, [pc, #312]	; (8000644 <main+0x164>)
 800050c:	fb83 1302 	smull	r1, r3, r3, r2
 8000510:	1099      	asrs	r1, r3, #2
 8000512:	17d3      	asrs	r3, r2, #31
 8000514:	1ac9      	subs	r1, r1, r3
 8000516:	460b      	mov	r3, r1
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	440b      	add	r3, r1
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	1ad1      	subs	r1, r2, r3
 8000520:	b2cb      	uxtb	r3, r1
 8000522:	3330      	adds	r3, #48	; 0x30
 8000524:	b2d9      	uxtb	r1, r3
 8000526:	4a48      	ldr	r2, [pc, #288]	; (8000648 <main+0x168>)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4413      	add	r3, r2
 800052c:	460a      	mov	r2, r1
 800052e:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<VCP_BUFF_SIZE_2;i++)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	3301      	adds	r3, #1
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	f241 3287 	movw	r2, #4999	; 0x1387
 800053c:	4293      	cmp	r3, r2
 800053e:	dde3      	ble.n	8000508 <main+0x28>
  }

  while (1)
  {
    // tokenize command recevied in CDC_Receive_FS(...) (file: usbd_cdc_ig.c)
    token = strtok((char*)bufferVCP_Rx,tokenSeparator);
 8000540:	68b9      	ldr	r1, [r7, #8]
 8000542:	4842      	ldr	r0, [pc, #264]	; (800064c <main+0x16c>)
 8000544:	f006 f9b6 	bl	80068b4 <strtok>
 8000548:	6078      	str	r0, [r7, #4]
    if (token != NULL)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d0f7      	beq.n	8000540 <main+0x60>
    {
      if(strcmp(token,strCMD_1) == 0)
 8000550:	493f      	ldr	r1, [pc, #252]	; (8000650 <main+0x170>)
 8000552:	6878      	ldr	r0, [r7, #4]
 8000554:	f7ff fe36 	bl	80001c4 <strcmp>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d130      	bne.n	80005c0 <main+0xe0>
      {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800055e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000562:	483c      	ldr	r0, [pc, #240]	; (8000654 <main+0x174>)
 8000564:	f000 fe76 	bl	8001254 <HAL_GPIO_TogglePin>
        memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000568:	2240      	movs	r2, #64	; 0x40
 800056a:	2100      	movs	r1, #0
 800056c:	4837      	ldr	r0, [pc, #220]	; (800064c <main+0x16c>)
 800056e:	f006 f88d 	bl	800668c <memset>
        toggleVar = !toggleVar;
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	2b00      	cmp	r3, #0
 8000576:	bf0c      	ite	eq
 8000578:	2301      	moveq	r3, #1
 800057a:	2300      	movne	r3, #0
 800057c:	b2db      	uxtb	r3, r3
 800057e:	617b      	str	r3, [r7, #20]
        if(toggleVar)
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d00e      	beq.n	80005a4 <main+0xc4>
        {
          msgVCP_len = sprintf(msgVCP, "LED ON\n");
 8000586:	4934      	ldr	r1, [pc, #208]	; (8000658 <main+0x178>)
 8000588:	4834      	ldr	r0, [pc, #208]	; (800065c <main+0x17c>)
 800058a:	f006 f973 	bl	8006874 <siprintf>
 800058e:	4603      	mov	r3, r0
 8000590:	4a33      	ldr	r2, [pc, #204]	; (8000660 <main+0x180>)
 8000592:	6013      	str	r3, [r2, #0]
          CDC_Transmit_FS((uint8_t *)msgVCP, msgVCP_len);
 8000594:	4b32      	ldr	r3, [pc, #200]	; (8000660 <main+0x180>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	b29b      	uxth	r3, r3
 800059a:	4619      	mov	r1, r3
 800059c:	482f      	ldr	r0, [pc, #188]	; (800065c <main+0x17c>)
 800059e:	f005 fbed 	bl	8005d7c <CDC_Transmit_FS>
 80005a2:	e00d      	b.n	80005c0 <main+0xe0>
        }
        else
        {
          msgVCP_len = sprintf(msgVCP, "LED OFF\n");
 80005a4:	492f      	ldr	r1, [pc, #188]	; (8000664 <main+0x184>)
 80005a6:	482d      	ldr	r0, [pc, #180]	; (800065c <main+0x17c>)
 80005a8:	f006 f964 	bl	8006874 <siprintf>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a2c      	ldr	r2, [pc, #176]	; (8000660 <main+0x180>)
 80005b0:	6013      	str	r3, [r2, #0]
          CDC_Transmit_FS((uint8_t *)msgVCP, msgVCP_len);
 80005b2:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <main+0x180>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	4619      	mov	r1, r3
 80005ba:	4828      	ldr	r0, [pc, #160]	; (800065c <main+0x17c>)
 80005bc:	f005 fbde 	bl	8005d7c <CDC_Transmit_FS>
        }
      }
      if(strcmp(token,strCMD_2) == 0)
 80005c0:	4929      	ldr	r1, [pc, #164]	; (8000668 <main+0x188>)
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff fdfe 	bl	80001c4 <strcmp>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1b8      	bne.n	8000540 <main+0x60>
      {
        CDC_Transmit_FS(msgStr,sizeof(msgStr)-1);
 80005ce:	210d      	movs	r1, #13
 80005d0:	4826      	ldr	r0, [pc, #152]	; (800066c <main+0x18c>)
 80005d2:	f005 fbd3 	bl	8005d7c <CDC_Transmit_FS>

        while(cnt != 0)
 80005d6:	e01c      	b.n	8000612 <main+0x132>
        {
          HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
 80005d8:	2101      	movs	r1, #1
 80005da:	481e      	ldr	r0, [pc, #120]	; (8000654 <main+0x174>)
 80005dc:	f000 fe3a 	bl	8001254 <HAL_GPIO_TogglePin>
          HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_7);
 80005e0:	2180      	movs	r1, #128	; 0x80
 80005e2:	481c      	ldr	r0, [pc, #112]	; (8000654 <main+0x174>)
 80005e4:	f000 fe36 	bl	8001254 <HAL_GPIO_TogglePin>

          msgVCP_len = sprintf(msgVCP, "cnt:%u ", cnt);
 80005e8:	693a      	ldr	r2, [r7, #16]
 80005ea:	4921      	ldr	r1, [pc, #132]	; (8000670 <main+0x190>)
 80005ec:	481b      	ldr	r0, [pc, #108]	; (800065c <main+0x17c>)
 80005ee:	f006 f941 	bl	8006874 <siprintf>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <main+0x180>)
 80005f6:	6013      	str	r3, [r2, #0]
          CDC_Transmit_FS((uint8_t *)msgVCP, msgVCP_len);
 80005f8:	4b19      	ldr	r3, [pc, #100]	; (8000660 <main+0x180>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	4619      	mov	r1, r3
 8000600:	4816      	ldr	r0, [pc, #88]	; (800065c <main+0x17c>)
 8000602:	f005 fbbb 	bl	8005d7c <CDC_Transmit_FS>

          HAL_Delay(1);
 8000606:	2001      	movs	r0, #1
 8000608:	f000 fb3c 	bl	8000c84 <HAL_Delay>

          cnt --;
 800060c:	693b      	ldr	r3, [r7, #16]
 800060e:	3b01      	subs	r3, #1
 8000610:	613b      	str	r3, [r7, #16]
        while(cnt != 0)
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1df      	bne.n	80005d8 <main+0xf8>
        }
        HAL_Delay(500);
 8000618:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061c:	f000 fb32 	bl	8000c84 <HAL_Delay>
        cnt=100;
 8000620:	2364      	movs	r3, #100	; 0x64
 8000622:	613b      	str	r3, [r7, #16]

        // OPTIONAL: send 5000 characters
        CDC_Transmit_FS((uint8_t *)msgVCP_2,sizeof(msgVCP_2));
 8000624:	f241 3188 	movw	r1, #5000	; 0x1388
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <main+0x168>)
 800062a:	f005 fba7 	bl	8005d7c <CDC_Transmit_FS>
        HAL_Delay(100);
 800062e:	2064      	movs	r0, #100	; 0x64
 8000630:	f000 fb28 	bl	8000c84 <HAL_Delay>

        memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000634:	2240      	movs	r2, #64	; 0x40
 8000636:	2100      	movs	r1, #0
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <main+0x16c>)
 800063a:	f006 f827 	bl	800668c <memset>
    token = strtok((char*)bufferVCP_Rx,tokenSeparator);
 800063e:	e77f      	b.n	8000540 <main+0x60>
 8000640:	08007af8 	.word	0x08007af8
 8000644:	66666667 	.word	0x66666667
 8000648:	2000028c 	.word	0x2000028c
 800064c:	20001614 	.word	0x20001614
 8000650:	20000010 	.word	0x20000010
 8000654:	40020400 	.word	0x40020400
 8000658:	08007afc 	.word	0x08007afc
 800065c:	20000228 	.word	0x20000228
 8000660:	20000224 	.word	0x20000224
 8000664:	08007b04 	.word	0x08007b04
 8000668:	2000001c 	.word	0x2000001c
 800066c:	20000000 	.word	0x20000000
 8000670:	08007b10 	.word	0x08007b10

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b092      	sub	sp, #72	; 0x48
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0318 	add.w	r3, r7, #24
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f006 f802 	bl	800668c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000696:	2302      	movs	r3, #2
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069a:	2301      	movs	r3, #1
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069e:	2310      	movs	r3, #16
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a6:	2300      	movs	r3, #0
 80006a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006aa:	2308      	movs	r3, #8
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006ae:	23c0      	movs	r3, #192	; 0xc0
 80006b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b2:	2304      	movs	r3, #4
 80006b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006b6:	2308      	movs	r3, #8
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 ff36 	bl	8002530 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80006ca:	f000 f91f 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2103      	movs	r1, #3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 f96e 	bl	80029cc <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006f6:	f000 f909 	bl	800090c <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3748      	adds	r7, #72	; 0x48
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	; 0x30
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	4b75      	ldr	r3, [pc, #468]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a74      	ldr	r2, [pc, #464]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b72      	ldr	r3, [pc, #456]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	4b6e      	ldr	r3, [pc, #440]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a6d      	ldr	r2, [pc, #436]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b6b      	ldr	r3, [pc, #428]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b67      	ldr	r3, [pc, #412]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a66      	ldr	r2, [pc, #408]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b64      	ldr	r3, [pc, #400]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b60      	ldr	r3, [pc, #384]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a5f      	ldr	r2, [pc, #380]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b5d      	ldr	r3, [pc, #372]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b59      	ldr	r3, [pc, #356]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a58      	ldr	r2, [pc, #352]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b56      	ldr	r3, [pc, #344]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b52      	ldr	r3, [pc, #328]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a51      	ldr	r2, [pc, #324]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 80007b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b4f      	ldr	r3, [pc, #316]	; (80008f4 <MX_GPIO_Init+0x1f0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007c8:	484b      	ldr	r0, [pc, #300]	; (80008f8 <MX_GPIO_Init+0x1f4>)
 80007ca:	f000 fd2b 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2140      	movs	r1, #64	; 0x40
 80007d2:	484a      	ldr	r0, [pc, #296]	; (80008fc <MX_GPIO_Init+0x1f8>)
 80007d4:	f000 fd26 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	4844      	ldr	r0, [pc, #272]	; (8000900 <MX_GPIO_Init+0x1fc>)
 80007f0:	f000 fb7a 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007f4:	2332      	movs	r3, #50	; 0x32
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000804:	230b      	movs	r3, #11
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	483c      	ldr	r0, [pc, #240]	; (8000900 <MX_GPIO_Init+0x1fc>)
 8000810:	f000 fb6a 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000814:	2386      	movs	r3, #134	; 0x86
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000824:	230b      	movs	r3, #11
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	4835      	ldr	r0, [pc, #212]	; (8000904 <MX_GPIO_Init+0x200>)
 8000830:	f000 fb5a 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000834:	f244 0381 	movw	r3, #16513	; 0x4081
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	482a      	ldr	r0, [pc, #168]	; (80008f8 <MX_GPIO_Init+0x1f4>)
 800084e:	f000 fb4b 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000864:	230b      	movs	r3, #11
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	4822      	ldr	r0, [pc, #136]	; (80008f8 <MX_GPIO_Init+0x1f4>)
 8000870:	f000 fb3a 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000874:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000886:	2307      	movs	r3, #7
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	481d      	ldr	r0, [pc, #116]	; (8000908 <MX_GPIO_Init+0x204>)
 8000892:	f000 fb29 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000896:	2340      	movs	r3, #64	; 0x40
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4813      	ldr	r0, [pc, #76]	; (80008fc <MX_GPIO_Init+0x1f8>)
 80008ae:	f000 fb1b 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008b2:	2380      	movs	r3, #128	; 0x80
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <MX_GPIO_Init+0x1f8>)
 80008c6:	f000 fb0f 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008dc:	230b      	movs	r3, #11
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_GPIO_Init+0x1f8>)
 80008e8:	f000 fafe 	bl	8000ee8 <HAL_GPIO_Init>

}
 80008ec:	bf00      	nop
 80008ee:	3730      	adds	r7, #48	; 0x30
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020400 	.word	0x40020400
 80008fc:	40021800 	.word	0x40021800
 8000900:	40020800 	.word	0x40020800
 8000904:	40020000 	.word	0x40020000
 8000908:	40020c00 	.word	0x40020c00

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	e7fe      	b.n	8000914 <Error_Handler+0x8>
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_MspInit+0x48>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <HAL_MspInit+0x48>)
 8000928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092c:	6453      	str	r3, [r2, #68]	; 0x44
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_MspInit+0x48>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_MspInit+0x48>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a07      	ldr	r2, [pc, #28]	; (8000960 <HAL_MspInit+0x48>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_MspInit+0x48>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	40023800 	.word	0x40023800

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x4>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr

0800098e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr

0800099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009aa:	f000 f94f 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <OTG_FS_IRQHandler+0x10>)
 80009ba:	f000 fda3 	bl	8001504 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20002b48 	.word	0x20002b48

080009c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
	return 1;
 80009cc:	2301      	movs	r3, #1
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <_kill>:

int _kill(int pid, int sig)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009e0:	f005 fe0c 	bl	80065fc <__errno>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2216      	movs	r2, #22
 80009e8:	601a      	str	r2, [r3, #0]
	return -1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <_exit>:

void _exit (int status)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffe7 	bl	80009d6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a08:	e7fe      	b.n	8000a08 <_exit+0x12>

08000a0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
 8000a1a:	e00a      	b.n	8000a32 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a1c:	f3af 8000 	nop.w
 8000a20:	4601      	mov	r1, r0
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	1c5a      	adds	r2, r3, #1
 8000a26:	60ba      	str	r2, [r7, #8]
 8000a28:	b2ca      	uxtb	r2, r1
 8000a2a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	697a      	ldr	r2, [r7, #20]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dbf0      	blt.n	8000a1c <_read+0x12>
	}

return len;
 8000a3a:	687b      	ldr	r3, [r7, #4]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	e009      	b.n	8000a6a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1c5a      	adds	r2, r3, #1
 8000a5a:	60ba      	str	r2, [r7, #8]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	3301      	adds	r3, #1
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	697a      	ldr	r2, [r7, #20]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	dbf1      	blt.n	8000a56 <_write+0x12>
	}
	return len;
 8000a72:	687b      	ldr	r3, [r7, #4]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <_close>:

int _close(int file)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	return -1;
 8000a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr

08000a92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa2:	605a      	str	r2, [r3, #4]
	return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <_isatty>:

int _isatty(int file)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	return 1;
 8000ab8:	2301      	movs	r3, #1
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
	return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae4:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <_sbrk+0x5c>)
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <_sbrk+0x60>)
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <_sbrk+0x64>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <_sbrk+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d207      	bcs.n	8000b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b0c:	f005 fd76 	bl	80065fc <__errno>
 8000b10:	4603      	mov	r3, r0
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1a:	e009      	b.n	8000b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <_sbrk+0x64>)
 8000b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20020000 	.word	0x20020000
 8000b3c:	00000400 	.word	0x00000400
 8000b40:	20001678 	.word	0x20001678
 8000b44:	20002f58 	.word	0x20002f58

08000b48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b5a:	490e      	ldr	r1, [pc, #56]	; (8000b94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b5c:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b70:	4c0b      	ldr	r4, [pc, #44]	; (8000ba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b7e:	f7ff ffe3 	bl	8000b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b82:	f005 fd41 	bl	8006608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b86:	f7ff fcab 	bl	80004e0 <main>
  bx  lr
 8000b8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8000b98:	08007cc8 	.word	0x08007cc8
  ldr r2, =_sbss
 8000b9c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8000ba0:	20002f58 	.word	0x20002f58

08000ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <HAL_Init+0x40>)
 8000bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <HAL_Init+0x40>)
 8000bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_Init+0x40>)
 8000bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f947 	bl	8000e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 f808 	bl	8000bec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff fe9c 	bl	8000918 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023c00 	.word	0x40023c00

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x54>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f95f 	bl	8000ece <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00e      	b.n	8000c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d80a      	bhi.n	8000c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c28:	f000 f927 	bl	8000e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_InitTick+0x5c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000028 	.word	0x20000028
 8000c44:	20000030 	.word	0x20000030
 8000c48:	2000002c 	.word	0x2000002c

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x20>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a03      	ldr	r2, [pc, #12]	; (8000c6c <HAL_IncTick+0x20>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	20000030 	.word	0x20000030
 8000c6c:	2000167c 	.word	0x2000167c

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <HAL_GetTick+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	2000167c 	.word	0x2000167c

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff fff0 	bl	8000c70 <HAL_GetTick>
 8000c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_Delay+0x44>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000caa:	bf00      	nop
 8000cac:	f7ff ffe0 	bl	8000c70 <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000030 	.word	0x20000030

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	db0b      	blt.n	8000d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 021f 	and.w	r2, r3, #31
 8000d48:	4906      	ldr	r1, [pc, #24]	; (8000d64 <__NVIC_EnableIRQ+0x34>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	2001      	movs	r0, #1
 8000d52:	fa00 f202 	lsl.w	r2, r0, r2
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e30:	d301      	bcc.n	8000e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00f      	b.n	8000e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <SysTick_Config+0x40>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3e:	210f      	movs	r1, #15
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e44:	f7ff ff90 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <SysTick_Config+0x40>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <SysTick_Config+0x40>)
 8000e50:	2207      	movs	r2, #7
 8000e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	e000e010 	.word	0xe000e010

08000e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff2d 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8c:	f7ff ff42 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	f7ff ff90 	bl	8000dbc <NVIC_EncodePriority>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff5f 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff35 	bl	8000d30 <__NVIC_EnableIRQ>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ffa2 	bl	8000e20 <SysTick_Config>
 8000edc:	4603      	mov	r3, r0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef6:	e16f      	b.n	80011d8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	2101      	movs	r1, #1
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	fa01 f303 	lsl.w	r3, r1, r3
 8000f04:	4013      	ands	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 8161 	beq.w	80011d2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d005      	beq.n	8000f28 <HAL_GPIO_Init+0x40>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d130      	bne.n	8000f8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68da      	ldr	r2, [r3, #12]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5e:	2201      	movs	r2, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	f003 0201 	and.w	r2, r3, #1
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d017      	beq.n	8000fc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d123      	bne.n	800101a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	691a      	ldr	r2, [r3, #16]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	6939      	ldr	r1, [r7, #16]
 8001016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0203 	and.w	r2, r3, #3
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 80bb 	beq.w	80011d2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	4b64      	ldr	r3, [pc, #400]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 8001062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001064:	4a63      	ldr	r2, [pc, #396]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 8001066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106a:	6453      	str	r3, [r2, #68]	; 0x44
 800106c:	4b61      	ldr	r3, [pc, #388]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001078:	4a5f      	ldr	r2, [pc, #380]	; (80011f8 <HAL_GPIO_Init+0x310>)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a57      	ldr	r2, [pc, #348]	; (80011fc <HAL_GPIO_Init+0x314>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d031      	beq.n	8001108 <HAL_GPIO_Init+0x220>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a56      	ldr	r2, [pc, #344]	; (8001200 <HAL_GPIO_Init+0x318>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d02b      	beq.n	8001104 <HAL_GPIO_Init+0x21c>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a55      	ldr	r2, [pc, #340]	; (8001204 <HAL_GPIO_Init+0x31c>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d025      	beq.n	8001100 <HAL_GPIO_Init+0x218>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a54      	ldr	r2, [pc, #336]	; (8001208 <HAL_GPIO_Init+0x320>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d01f      	beq.n	80010fc <HAL_GPIO_Init+0x214>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a53      	ldr	r2, [pc, #332]	; (800120c <HAL_GPIO_Init+0x324>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d019      	beq.n	80010f8 <HAL_GPIO_Init+0x210>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a52      	ldr	r2, [pc, #328]	; (8001210 <HAL_GPIO_Init+0x328>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d013      	beq.n	80010f4 <HAL_GPIO_Init+0x20c>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a51      	ldr	r2, [pc, #324]	; (8001214 <HAL_GPIO_Init+0x32c>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d00d      	beq.n	80010f0 <HAL_GPIO_Init+0x208>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a50      	ldr	r2, [pc, #320]	; (8001218 <HAL_GPIO_Init+0x330>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d007      	beq.n	80010ec <HAL_GPIO_Init+0x204>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a4f      	ldr	r2, [pc, #316]	; (800121c <HAL_GPIO_Init+0x334>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d101      	bne.n	80010e8 <HAL_GPIO_Init+0x200>
 80010e4:	2308      	movs	r3, #8
 80010e6:	e010      	b.n	800110a <HAL_GPIO_Init+0x222>
 80010e8:	2309      	movs	r3, #9
 80010ea:	e00e      	b.n	800110a <HAL_GPIO_Init+0x222>
 80010ec:	2307      	movs	r3, #7
 80010ee:	e00c      	b.n	800110a <HAL_GPIO_Init+0x222>
 80010f0:	2306      	movs	r3, #6
 80010f2:	e00a      	b.n	800110a <HAL_GPIO_Init+0x222>
 80010f4:	2305      	movs	r3, #5
 80010f6:	e008      	b.n	800110a <HAL_GPIO_Init+0x222>
 80010f8:	2304      	movs	r3, #4
 80010fa:	e006      	b.n	800110a <HAL_GPIO_Init+0x222>
 80010fc:	2303      	movs	r3, #3
 80010fe:	e004      	b.n	800110a <HAL_GPIO_Init+0x222>
 8001100:	2302      	movs	r3, #2
 8001102:	e002      	b.n	800110a <HAL_GPIO_Init+0x222>
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <HAL_GPIO_Init+0x222>
 8001108:	2300      	movs	r3, #0
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	f002 0203 	and.w	r2, r2, #3
 8001110:	0092      	lsls	r2, r2, #2
 8001112:	4093      	lsls	r3, r2
 8001114:	461a      	mov	r2, r3
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800111c:	4936      	ldr	r1, [pc, #216]	; (80011f8 <HAL_GPIO_Init+0x310>)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800112a:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <HAL_GPIO_Init+0x338>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800114e:	4a34      	ldr	r2, [pc, #208]	; (8001220 <HAL_GPIO_Init+0x338>)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001154:	4b32      	ldr	r3, [pc, #200]	; (8001220 <HAL_GPIO_Init+0x338>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001178:	4a29      	ldr	r2, [pc, #164]	; (8001220 <HAL_GPIO_Init+0x338>)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117e:	4b28      	ldr	r3, [pc, #160]	; (8001220 <HAL_GPIO_Init+0x338>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011a2:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <HAL_GPIO_Init+0x338>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a8:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <HAL_GPIO_Init+0x338>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <HAL_GPIO_Init+0x338>)
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3301      	adds	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa22 f303 	lsr.w	r3, r2, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f47f ae88 	bne.w	8000ef8 <HAL_GPIO_Init+0x10>
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	371c      	adds	r7, #28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40013800 	.word	0x40013800
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020400 	.word	0x40020400
 8001204:	40020800 	.word	0x40020800
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40021000 	.word	0x40021000
 8001210:	40021400 	.word	0x40021400
 8001214:	40021800 	.word	0x40021800
 8001218:	40021c00 	.word	0x40021c00
 800121c:	40022000 	.word	0x40022000
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001234:	787b      	ldrb	r3, [r7, #1]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001240:	e003      	b.n	800124a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	041a      	lsls	r2, r3, #16
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	619a      	str	r2, [r3, #24]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4013      	ands	r3, r2
 800126c:	041a      	lsls	r2, r3, #16
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43d9      	mvns	r1, r3
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	400b      	ands	r3, r1
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	619a      	str	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001286:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001288:	b08f      	sub	sp, #60	; 0x3c
 800128a:	af0a      	add	r7, sp, #40	; 0x28
 800128c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e10f      	b.n	80014b8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d106      	bne.n	80012b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f004 fe96 	bl	8005fe4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2203      	movs	r2, #3
 80012bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 fe84 	bl	8002fe4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	687e      	ldr	r6, [r7, #4]
 80012e4:	466d      	mov	r5, sp
 80012e6:	f106 0410 	add.w	r4, r6, #16
 80012ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80012fa:	1d33      	adds	r3, r6, #4
 80012fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012fe:	6838      	ldr	r0, [r7, #0]
 8001300:	f001 fd66 	bl	8002dd0 <USB_CoreInit>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d005      	beq.n	8001316 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2202      	movs	r2, #2
 800130e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e0d0      	b.n	80014b8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f001 fe71 	bl	8003004 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e04a      	b.n	80013be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001328:	7bfa      	ldrb	r2, [r7, #15]
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	1a9b      	subs	r3, r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	333d      	adds	r3, #61	; 0x3d
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	1a9b      	subs	r3, r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	333c      	adds	r3, #60	; 0x3c
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	b298      	uxth	r0, r3
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	3342      	adds	r3, #66	; 0x42
 8001364:	4602      	mov	r2, r0
 8001366:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	333f      	adds	r3, #63	; 0x3f
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	1a9b      	subs	r3, r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	3344      	adds	r3, #68	; 0x44
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	1a9b      	subs	r3, r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	3348      	adds	r3, #72	; 0x48
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	1a9b      	subs	r3, r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	3350      	adds	r3, #80	; 0x50
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	3301      	adds	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	7bfa      	ldrb	r2, [r7, #15]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d3af      	bcc.n	8001328 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e044      	b.n	8001458 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	1a9b      	subs	r3, r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	1a9b      	subs	r3, r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	1a9b      	subs	r3, r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001426:	7bfa      	ldrb	r2, [r7, #15]
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	1a9b      	subs	r3, r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	1a9b      	subs	r3, r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	3301      	adds	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	429a      	cmp	r2, r3
 8001460:	d3b5      	bcc.n	80013ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	687e      	ldr	r6, [r7, #4]
 800146a:	466d      	mov	r5, sp
 800146c:	f106 0410 	add.w	r4, r6, #16
 8001470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001478:	e894 0003 	ldmia.w	r4, {r0, r1}
 800147c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001480:	1d33      	adds	r3, r6, #4
 8001482:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001484:	6838      	ldr	r0, [r7, #0]
 8001486:	f001 fe09 	bl	800309c <USB_DevInit>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2202      	movs	r2, #2
 8001494:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e00d      	b.n	80014b8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 fe7a 	bl	80041aa <USB_DevDisconnect>

  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_PCD_Start+0x16>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e012      	b.n	80014fc <HAL_PCD_Start+0x3c>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 fd6e 	bl	8002fc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 fe3c 	bl	800416a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b08d      	sub	sp, #52	; 0x34
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f002 fef3 	bl	8004306 <USB_GetMode>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	f040 838f 	bne.w	8001c46 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f002 fe5c 	bl	80041ea <USB_ReadInterrupts>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 8385 	beq.w	8001c44 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f002 fe53 	bl	80041ea <USB_ReadInterrupts>
 8001544:	4603      	mov	r3, r0
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b02      	cmp	r3, #2
 800154c:	d107      	bne.n	800155e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f002 0202 	and.w	r2, r2, #2
 800155c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f002 fe41 	bl	80041ea <USB_ReadInterrupts>
 8001568:	4603      	mov	r3, r0
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	2b10      	cmp	r3, #16
 8001570:	d161      	bne.n	8001636 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	699a      	ldr	r2, [r3, #24]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0210 	bic.w	r2, r2, #16
 8001580:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	f003 020f 	and.w	r2, r3, #15
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	1a9b      	subs	r3, r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	3304      	adds	r3, #4
 80015a0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	0c5b      	lsrs	r3, r3, #17
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d124      	bne.n	80015f8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d035      	beq.n	8001626 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	6a38      	ldr	r0, [r7, #32]
 80015ce:	f002 fc7e 	bl	8003ece <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015de:	441a      	add	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	699a      	ldr	r2, [r3, #24]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015f0:	441a      	add	r2, r3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	619a      	str	r2, [r3, #24]
 80015f6:	e016      	b.n	8001626 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	0c5b      	lsrs	r3, r3, #17
 80015fc:	f003 030f 	and.w	r3, r3, #15
 8001600:	2b06      	cmp	r3, #6
 8001602:	d110      	bne.n	8001626 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800160a:	2208      	movs	r2, #8
 800160c:	4619      	mov	r1, r3
 800160e:	6a38      	ldr	r0, [r7, #32]
 8001610:	f002 fc5d 	bl	8003ece <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	699a      	ldr	r2, [r3, #24]
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001620:	441a      	add	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	699a      	ldr	r2, [r3, #24]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f042 0210 	orr.w	r2, r2, #16
 8001634:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f002 fdd5 	bl	80041ea <USB_ReadInterrupts>
 8001640:	4603      	mov	r3, r0
 8001642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001646:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800164a:	d16e      	bne.n	800172a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f002 fdda 	bl	800420e <USB_ReadDevAllOutEpInterrupt>
 800165a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800165c:	e062      	b.n	8001724 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b00      	cmp	r3, #0
 8001666:	d057      	beq.n	8001718 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	4611      	mov	r1, r2
 8001672:	4618      	mov	r0, r3
 8001674:	f002 fdfd 	bl	8004272 <USB_ReadDevOutEPInterrupt>
 8001678:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00c      	beq.n	800169e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	015a      	lsls	r2, r3, #5
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	4413      	add	r3, r2
 800168c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001690:	461a      	mov	r2, r3
 8001692:	2301      	movs	r3, #1
 8001694:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001696:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 fda1 	bl	80021e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00c      	beq.n	80016c2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016b4:	461a      	mov	r2, r3
 80016b6:	2308      	movs	r3, #8
 80016b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80016ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 fe9b 	bl	80023f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	015a      	lsls	r2, r3, #5
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	4413      	add	r3, r2
 80016d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016d8:	461a      	mov	r2, r3
 80016da:	2310      	movs	r3, #16
 80016dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	015a      	lsls	r2, r3, #5
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	4413      	add	r3, r2
 80016f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016f4:	461a      	mov	r2, r3
 80016f6:	2320      	movs	r3, #32
 80016f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d009      	beq.n	8001718 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	015a      	lsls	r2, r3, #5
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	4413      	add	r3, r2
 800170c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001710:	461a      	mov	r2, r3
 8001712:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001716:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	3301      	adds	r3, #1
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800171e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001720:	085b      	lsrs	r3, r3, #1
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001726:	2b00      	cmp	r3, #0
 8001728:	d199      	bne.n	800165e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f002 fd5b 	bl	80041ea <USB_ReadInterrupts>
 8001734:	4603      	mov	r3, r0
 8001736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800173a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800173e:	f040 80c0 	bne.w	80018c2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f002 fd7a 	bl	8004240 <USB_ReadDevAllInEpInterrupt>
 800174c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001752:	e0b2      	b.n	80018ba <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 80a7 	beq.w	80018ae <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f002 fd9e 	bl	80042ac <USB_ReadDevInEPInterrupt>
 8001770:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d057      	beq.n	800182c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	2201      	movs	r2, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	43db      	mvns	r3, r3
 8001796:	69f9      	ldr	r1, [r7, #28]
 8001798:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800179c:	4013      	ands	r3, r2
 800179e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	015a      	lsls	r2, r3, #5
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ac:	461a      	mov	r2, r3
 80017ae:	2301      	movs	r3, #1
 80017b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d132      	bne.n	8001820 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017be:	4613      	mov	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	1a9b      	subs	r3, r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	3348      	adds	r3, #72	; 0x48
 80017ca:	6819      	ldr	r1, [r3, #0]
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d0:	4613      	mov	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	1a9b      	subs	r3, r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4403      	add	r3, r0
 80017da:	3344      	adds	r3, #68	; 0x44
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4419      	add	r1, r3
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e4:	4613      	mov	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	1a9b      	subs	r3, r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4403      	add	r3, r0
 80017ee:	3348      	adds	r3, #72	; 0x48
 80017f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d113      	bne.n	8001820 <HAL_PCD_IRQHandler+0x31c>
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fc:	4613      	mov	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	1a9b      	subs	r3, r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	3350      	adds	r3, #80	; 0x50
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d108      	bne.n	8001820 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001818:	461a      	mov	r2, r3
 800181a:	2101      	movs	r1, #1
 800181c:	f002 fda2 	bl	8004364 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	b2db      	uxtb	r3, r3
 8001824:	4619      	mov	r1, r3
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f004 fc6b 	bl	8006102 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d008      	beq.n	8001848 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	015a      	lsls	r2, r3, #5
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	4413      	add	r3, r2
 800183e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001842:	461a      	mov	r2, r3
 8001844:	2308      	movs	r3, #8
 8001846:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	d008      	beq.n	8001864 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800185e:	461a      	mov	r2, r3
 8001860:	2310      	movs	r3, #16
 8001862:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186a:	2b00      	cmp	r3, #0
 800186c:	d008      	beq.n	8001880 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	015a      	lsls	r2, r3, #5
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	4413      	add	r3, r2
 8001876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800187a:	461a      	mov	r2, r3
 800187c:	2340      	movs	r3, #64	; 0x40
 800187e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	015a      	lsls	r2, r3, #5
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001896:	461a      	mov	r2, r3
 8001898:	2302      	movs	r3, #2
 800189a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80018a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 fc0c 	bl	80020c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	3301      	adds	r3, #1
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b6:	085b      	lsrs	r3, r3, #1
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f47f af49 	bne.w	8001754 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 fc8f 	bl	80041ea <USB_ReadInterrupts>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018d6:	d114      	bne.n	8001902 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f004 fc7f 	bl	80061f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	695a      	ldr	r2, [r3, #20]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001900:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f002 fc6f 	bl	80041ea <USB_ReadInterrupts>
 800190c:	4603      	mov	r3, r0
 800190e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001916:	d112      	bne.n	800193e <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b01      	cmp	r3, #1
 8001926:	d102      	bne.n	800192e <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f004 fc3b 	bl	80061a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695a      	ldr	r2, [r3, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800193c:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f002 fc51 	bl	80041ea <USB_ReadInterrupts>
 8001948:	4603      	mov	r3, r0
 800194a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001952:	f040 80c7 	bne.w	8001ae4 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2110      	movs	r1, #16
 8001970:	4618      	mov	r0, r3
 8001972:	f001 fcf7 	bl	8003364 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001976:	2300      	movs	r3, #0
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197a:	e056      	b.n	8001a2a <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	015a      	lsls	r2, r3, #5
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	4413      	add	r3, r2
 8001984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001988:	461a      	mov	r2, r3
 800198a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800198e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001992:	015a      	lsls	r2, r3, #5
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	4413      	add	r3, r2
 8001998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019a0:	0151      	lsls	r1, r2, #5
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	440a      	add	r2, r1
 80019a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019ae:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80019b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b2:	015a      	lsls	r2, r3, #5
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	4413      	add	r3, r2
 80019b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019c0:	0151      	lsls	r1, r2, #5
 80019c2:	69fa      	ldr	r2, [r7, #28]
 80019c4:	440a      	add	r2, r1
 80019c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d2:	015a      	lsls	r2, r3, #5
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	4413      	add	r3, r2
 80019d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019dc:	461a      	mov	r2, r3
 80019de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e6:	015a      	lsls	r2, r3, #5
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	4413      	add	r3, r2
 80019ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f4:	0151      	lsls	r1, r2, #5
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	440a      	add	r2, r1
 80019fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a02:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a06:	015a      	lsls	r2, r3, #5
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a14:	0151      	lsls	r1, r2, #5
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	440a      	add	r2, r1
 8001a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a22:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a26:	3301      	adds	r3, #1
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d3a3      	bcc.n	800197c <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a42:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a46:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d016      	beq.n	8001a7e <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a60:	f043 030b 	orr.w	r3, r3, #11
 8001a64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	69fa      	ldr	r2, [r7, #28]
 8001a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a76:	f043 030b 	orr.w	r3, r3, #11
 8001a7a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7c:	e015      	b.n	8001aaa <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a90:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a94:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aa4:	f043 030b 	orr.w	r3, r3, #11
 8001aa8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ab8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001abc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f002 fc48 	bl	8004364 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f002 fb7e 	bl	80041ea <USB_ReadInterrupts>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001af8:	d124      	bne.n	8001b44 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 fc0e 	bl	8004320 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f001 fc87 	bl	800341c <USB_GetDevSpeed>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681c      	ldr	r4, [r3, #0]
 8001b1a:	f001 f94f 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8001b1e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	461a      	mov	r2, r3
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f001 f9a9 	bl	8002e80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f004 fb0f 	bl	8006152 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f002 fb4e 	bl	80041ea <USB_ReadInterrupts>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d10a      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f004 faec 	bl	8006136 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f002 0208 	and.w	r2, r2, #8
 8001b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f002 fb39 	bl	80041ea <USB_ReadInterrupts>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b82:	d10f      	bne.n	8001ba4 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f004 fb4e 	bl	8006230 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f002 fb1e 	bl	80041ea <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bb8:	d10f      	bne.n	8001bda <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f004 fb21 	bl	800620c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 fb03 	bl	80041ea <USB_ReadInterrupts>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bee:	d10a      	bne.n	8001c06 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f004 fb2f 	bl	8006254 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f002 faed 	bl	80041ea <USB_ReadInterrupts>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d115      	bne.n	8001c46 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f004 fb1f 	bl	8006270 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	e000      	b.n	8001c46 <HAL_PCD_IRQHandler+0x742>
      return;
 8001c44:	bf00      	nop
    }
  }
}
 8001c46:	3734      	adds	r7, #52	; 0x34
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd90      	pop	{r4, r7, pc}

08001c4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <HAL_PCD_SetAddress+0x1a>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e013      	b.n	8001c8e <HAL_PCD_SetAddress+0x42>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	78fa      	ldrb	r2, [r7, #3]
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 fa4e 	bl	8004120 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	4608      	mov	r0, r1
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	70fb      	strb	r3, [r7, #3]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	803b      	strh	r3, [r7, #0]
 8001cac:	4613      	mov	r3, r2
 8001cae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	da0f      	bge.n	8001cdc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	f003 020f 	and.w	r2, r3, #15
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	1a9b      	subs	r3, r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	3338      	adds	r3, #56	; 0x38
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	705a      	strb	r2, [r3, #1]
 8001cda:	e00f      	b.n	8001cfc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	f003 020f 	and.w	r2, r3, #15
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d08:	883a      	ldrh	r2, [r7, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	78ba      	ldrb	r2, [r7, #2]
 8001d12:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	785b      	ldrb	r3, [r3, #1]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d004      	beq.n	8001d26 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d26:	78bb      	ldrb	r3, [r7, #2]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d102      	bne.n	8001d32 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_PCD_EP_Open+0xaa>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e00e      	b.n	8001d5e <HAL_PCD_EP_Open+0xc8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68f9      	ldr	r1, [r7, #12]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f001 fb88 	bl	8003464 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	da0f      	bge.n	8001d9a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	f003 020f 	and.w	r2, r3, #15
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	1a9b      	subs	r3, r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	3338      	adds	r3, #56	; 0x38
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3304      	adds	r3, #4
 8001d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	705a      	strb	r2, [r3, #1]
 8001d98:	e00f      	b.n	8001dba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	f003 020f 	and.w	r2, r3, #15
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	3304      	adds	r3, #4
 8001db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_PCD_EP_Close+0x6e>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e00e      	b.n	8001df2 <HAL_PCD_EP_Close+0x8c>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68f9      	ldr	r1, [r7, #12]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f001 fbc4 	bl	8003570 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	460b      	mov	r3, r1
 8001e08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e0a:	7afb      	ldrb	r3, [r7, #11]
 8001e0c:	f003 020f 	and.w	r2, r3, #15
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4413      	add	r3, r2
 8001e20:	3304      	adds	r3, #4
 8001e22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2200      	movs	r2, #0
 8001e34:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d102      	bne.n	8001e56 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e56:	7afb      	ldrb	r3, [r7, #11]
 8001e58:	f003 030f 	and.w	r3, r3, #15
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	6979      	ldr	r1, [r7, #20]
 8001e6e:	f001 fe9f 	bl	8003bb0 <USB_EP0StartXfer>
 8001e72:	e008      	b.n	8001e86 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	6979      	ldr	r1, [r7, #20]
 8001e82:	f001 fc51 	bl	8003728 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	f003 020f 	and.w	r2, r3, #15
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ece:	7afb      	ldrb	r3, [r7, #11]
 8001ed0:	f003 020f 	and.w	r2, r3, #15
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	3338      	adds	r3, #56	; 0x38
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2201      	movs	r2, #1
 8001efc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001efe:	7afb      	ldrb	r3, [r7, #11]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d102      	bne.n	8001f18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f18:	7afb      	ldrb	r3, [r7, #11]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	6979      	ldr	r1, [r7, #20]
 8001f30:	f001 fe3e 	bl	8003bb0 <USB_EP0StartXfer>
 8001f34:	e008      	b.n	8001f48 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	6979      	ldr	r1, [r7, #20]
 8001f44:	f001 fbf0 	bl	8003728 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	f003 020f 	and.w	r2, r3, #15
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d901      	bls.n	8001f70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e050      	b.n	8002012 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	da0f      	bge.n	8001f98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	f003 020f 	and.w	r2, r3, #15
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	1a9b      	subs	r3, r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	3338      	adds	r3, #56	; 0x38
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2201      	movs	r2, #1
 8001f94:	705a      	strb	r2, [r3, #1]
 8001f96:	e00d      	b.n	8001fb4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	3304      	adds	r3, #4
 8001fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_PCD_EP_SetStall+0x82>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e01e      	b.n	8002012 <HAL_PCD_EP_SetStall+0xc0>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68f9      	ldr	r1, [r7, #12]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f001 ffca 	bl	8003f7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10a      	bne.n	8002008 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6818      	ldr	r0, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	b2d9      	uxtb	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002002:	461a      	mov	r2, r3
 8002004:	f002 f9ae 	bl	8004364 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	f003 020f 	and.w	r2, r3, #15
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	429a      	cmp	r2, r3
 8002032:	d901      	bls.n	8002038 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e042      	b.n	80020be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800203c:	2b00      	cmp	r3, #0
 800203e:	da0f      	bge.n	8002060 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f003 020f 	and.w	r2, r3, #15
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	3338      	adds	r3, #56	; 0x38
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	3304      	adds	r3, #4
 8002056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2201      	movs	r2, #1
 800205c:	705a      	strb	r2, [r3, #1]
 800205e:	e00f      	b.n	8002080 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	f003 020f 	and.w	r2, r3, #15
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	3304      	adds	r3, #4
 8002078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	b2da      	uxtb	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_PCD_EP_ClrStall+0x86>
 800209c:	2302      	movs	r3, #2
 800209e:	e00e      	b.n	80020be <HAL_PCD_EP_ClrStall+0xa4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68f9      	ldr	r1, [r7, #12]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 ffd1 	bl	8004056 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b08a      	sub	sp, #40	; 0x28
 80020ca:	af02      	add	r7, sp, #8
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	3338      	adds	r3, #56	; 0x38
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	3304      	adds	r3, #4
 80020ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	699a      	ldr	r2, [r3, #24]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d901      	bls.n	80020fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e06c      	b.n	80021d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	429a      	cmp	r2, r3
 8002112:	d902      	bls.n	800211a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3303      	adds	r3, #3
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002122:	e02b      	b.n	800217c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	429a      	cmp	r2, r3
 8002138:	d902      	bls.n	8002140 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	3303      	adds	r3, #3
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	68d9      	ldr	r1, [r3, #12]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002158:	b2db      	uxtb	r3, r3
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	4603      	mov	r3, r0
 800215e:	6978      	ldr	r0, [r7, #20]
 8002160:	f001 fe78 	bl	8003e54 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	441a      	add	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	699a      	ldr	r2, [r3, #24]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	441a      	add	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	b29b      	uxth	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	429a      	cmp	r2, r3
 8002190:	d809      	bhi.n	80021a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800219a:	429a      	cmp	r2, r3
 800219c:	d203      	bcs.n	80021a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1be      	bne.n	8002124 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d811      	bhi.n	80021d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	2201      	movs	r2, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	6939      	ldr	r1, [r7, #16]
 80021ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021d2:	4013      	ands	r3, r2
 80021d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3720      	adds	r7, #32
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	333c      	adds	r3, #60	; 0x3c
 80021f8:	3304      	adds	r3, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b01      	cmp	r3, #1
 8002214:	f040 80a0 	bne.w	8002358 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d015      	beq.n	800224e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a72      	ldr	r2, [pc, #456]	; (80023f0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002226:	4293      	cmp	r3, r2
 8002228:	f240 80dd 	bls.w	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80d7 	beq.w	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002244:	461a      	mov	r2, r3
 8002246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800224a:	6093      	str	r3, [r2, #8]
 800224c:	e0cb      	b.n	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	2b00      	cmp	r3, #0
 8002256:	d009      	beq.n	800226c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002264:	461a      	mov	r2, r3
 8002266:	2320      	movs	r3, #32
 8002268:	6093      	str	r3, [r2, #8]
 800226a:	e0bc      	b.n	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002272:	2b00      	cmp	r3, #0
 8002274:	f040 80b7 	bne.w	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a5d      	ldr	r2, [pc, #372]	; (80023f0 <PCD_EP_OutXfrComplete_int+0x210>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d90f      	bls.n	80022a0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002296:	461a      	mov	r2, r3
 8002298:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800229c:	6093      	str	r3, [r2, #8]
 800229e:	e0a2      	b.n	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022b2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	0159      	lsls	r1, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	440b      	add	r3, r1
 80022bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80022c6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4403      	add	r3, r0
 80022d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80022da:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4403      	add	r3, r0
 80022fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4419      	add	r1, r3
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4403      	add	r3, r0
 8002314:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002318:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d114      	bne.n	800234a <PCD_EP_OutXfrComplete_int+0x16a>
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d108      	bne.n	800234a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002342:	461a      	mov	r2, r3
 8002344:	2101      	movs	r1, #1
 8002346:	f002 f80d 	bl	8004364 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	4619      	mov	r1, r3
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f003 febb 	bl	80060cc <HAL_PCD_DataOutStageCallback>
 8002356:	e046      	b.n	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4a26      	ldr	r2, [pc, #152]	; (80023f4 <PCD_EP_OutXfrComplete_int+0x214>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d124      	bne.n	80023aa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002376:	461a      	mov	r2, r3
 8002378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800237c:	6093      	str	r3, [r2, #8]
 800237e:	e032      	b.n	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4413      	add	r3, r2
 8002392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002396:	461a      	mov	r2, r3
 8002398:	2320      	movs	r3, #32
 800239a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	4619      	mov	r1, r3
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f003 fe92 	bl	80060cc <HAL_PCD_DataOutStageCallback>
 80023a8:	e01d      	b.n	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d114      	bne.n	80023da <PCD_EP_OutXfrComplete_int+0x1fa>
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d108      	bne.n	80023da <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023d2:	461a      	mov	r2, r3
 80023d4:	2100      	movs	r1, #0
 80023d6:	f001 ffc5 	bl	8004364 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4619      	mov	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f003 fe73 	bl	80060cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	4f54300a 	.word	0x4f54300a
 80023f4:	4f54310a 	.word	0x4f54310a

080023f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	333c      	adds	r3, #60	; 0x3c
 8002410:	3304      	adds	r3, #4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4413      	add	r3, r2
 800241e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4a15      	ldr	r2, [pc, #84]	; (8002480 <PCD_EP_OutSetupPacket_int+0x88>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d90e      	bls.n	800244c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002434:	2b00      	cmp	r3, #0
 8002436:	d009      	beq.n	800244c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002444:	461a      	mov	r2, r3
 8002446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800244a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f003 fe2b 	bl	80060a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <PCD_EP_OutSetupPacket_int+0x88>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d90c      	bls.n	8002474 <PCD_EP_OutSetupPacket_int+0x7c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d108      	bne.n	8002474 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800246c:	461a      	mov	r2, r3
 800246e:	2101      	movs	r1, #1
 8002470:	f001 ff78 	bl	8004364 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	4f54300a 	.word	0x4f54300a

08002484 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	70fb      	strb	r3, [r7, #3]
 8002490:	4613      	mov	r3, r2
 8002492:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d107      	bne.n	80024b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024a2:	883b      	ldrh	r3, [r7, #0]
 80024a4:	0419      	lsls	r1, r3, #16
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
 80024b0:	e028      	b.n	8002504 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	4413      	add	r3, r2
 80024be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]
 80024c4:	e00d      	b.n	80024e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	3340      	adds	r3, #64	; 0x40
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	0c1b      	lsrs	r3, r3, #16
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	4413      	add	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	3301      	adds	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d3ec      	bcc.n	80024c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024ec:	883b      	ldrh	r3, [r7, #0]
 80024ee:	0418      	lsls	r0, r3, #16
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	4302      	orrs	r2, r0
 80024fc:	3340      	adds	r3, #64	; 0x40
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	887a      	ldrh	r2, [r7, #2]
 8002522:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e236      	b.n	80029b0 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d050      	beq.n	80025f0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800254e:	4b9e      	ldr	r3, [pc, #632]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b04      	cmp	r3, #4
 8002558:	d00c      	beq.n	8002574 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800255a:	4b9b      	ldr	r3, [pc, #620]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002562:	2b08      	cmp	r3, #8
 8002564:	d112      	bne.n	800258c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002566:	4b98      	ldr	r3, [pc, #608]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002572:	d10b      	bne.n	800258c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002574:	4b94      	ldr	r3, [pc, #592]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d036      	beq.n	80025ee <HAL_RCC_OscConfig+0xbe>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d132      	bne.n	80025ee <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e211      	b.n	80029b0 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	4b8e      	ldr	r3, [pc, #568]	; (80027cc <HAL_RCC_OscConfig+0x29c>)
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d013      	beq.n	80025c6 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7fe fb67 	bl	8000c70 <HAL_GetTick>
 80025a2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a6:	f7fe fb63 	bl	8000c70 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b64      	cmp	r3, #100	; 0x64
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e1fb      	b.n	80029b0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b8:	4b83      	ldr	r3, [pc, #524]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x76>
 80025c4:	e014      	b.n	80025f0 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c6:	f7fe fb53 	bl	8000c70 <HAL_GetTick>
 80025ca:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ce:	f7fe fb4f 	bl	8000c70 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b64      	cmp	r3, #100	; 0x64
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e1e7      	b.n	80029b0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e0:	4b79      	ldr	r3, [pc, #484]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f0      	bne.n	80025ce <HAL_RCC_OscConfig+0x9e>
 80025ec:	e000      	b.n	80025f0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d077      	beq.n	80026ec <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025fc:	4b72      	ldr	r3, [pc, #456]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00b      	beq.n	8002620 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002608:	4b6f      	ldr	r3, [pc, #444]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002610:	2b08      	cmp	r3, #8
 8002612:	d126      	bne.n	8002662 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002614:	4b6c      	ldr	r3, [pc, #432]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d120      	bne.n	8002662 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002620:	4b69      	ldr	r3, [pc, #420]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_OscConfig+0x108>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d001      	beq.n	8002638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e1bb      	b.n	80029b0 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b63      	ldr	r3, [pc, #396]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	21f8      	movs	r1, #248	; 0xf8
 8002646:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	69b9      	ldr	r1, [r7, #24]
 800264a:	fa91 f1a1 	rbit	r1, r1
 800264e:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002650:	6979      	ldr	r1, [r7, #20]
 8002652:	fab1 f181 	clz	r1, r1
 8002656:	b2c9      	uxtb	r1, r1
 8002658:	408b      	lsls	r3, r1
 800265a:	495b      	ldr	r1, [pc, #364]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800265c:	4313      	orrs	r3, r2
 800265e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002660:	e044      	b.n	80026ec <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d02a      	beq.n	80026c0 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800266a:	4b59      	ldr	r3, [pc, #356]	; (80027d0 <HAL_RCC_OscConfig+0x2a0>)
 800266c:	2201      	movs	r2, #1
 800266e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe fafe 	bl	8000c70 <HAL_GetTick>
 8002674:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002678:	f7fe fafa 	bl	8000c70 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e192      	b.n	80029b0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268a:	4b4f      	ldr	r3, [pc, #316]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002696:	4b4c      	ldr	r3, [pc, #304]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	21f8      	movs	r1, #248	; 0xf8
 80026a4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	6939      	ldr	r1, [r7, #16]
 80026a8:	fa91 f1a1 	rbit	r1, r1
 80026ac:	60f9      	str	r1, [r7, #12]
  return result;
 80026ae:	68f9      	ldr	r1, [r7, #12]
 80026b0:	fab1 f181 	clz	r1, r1
 80026b4:	b2c9      	uxtb	r1, r1
 80026b6:	408b      	lsls	r3, r1
 80026b8:	4943      	ldr	r1, [pc, #268]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
 80026be:	e015      	b.n	80026ec <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c0:	4b43      	ldr	r3, [pc, #268]	; (80027d0 <HAL_RCC_OscConfig+0x2a0>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7fe fad3 	bl	8000c70 <HAL_GetTick>
 80026ca:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ce:	f7fe facf 	bl	8000c70 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e167      	b.n	80029b0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e0:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d030      	beq.n	800275a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d016      	beq.n	800272e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002700:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <HAL_RCC_OscConfig+0x2a4>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002706:	f7fe fab3 	bl	8000c70 <HAL_GetTick>
 800270a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800270e:	f7fe faaf 	bl	8000c70 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e147      	b.n	80029b0 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002720:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x1de>
 800272c:	e015      	b.n	800275a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272e:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <HAL_RCC_OscConfig+0x2a4>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002734:	f7fe fa9c 	bl	8000c70 <HAL_GetTick>
 8002738:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273c:	f7fe fa98 	bl	8000c70 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e130      	b.n	80029b0 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274e:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8087 	beq.w	8002876 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002768:	2300      	movs	r3, #0
 800276a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d110      	bne.n	800279c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
 800278a:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002796:	2301      	movs	r3, #1
 8002798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800279c:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <HAL_RCC_OscConfig+0x2a8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <HAL_RCC_OscConfig+0x2a8>)
 80027a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_OscConfig+0x2a8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d122      	bne.n	80027fa <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_RCC_OscConfig+0x2a8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <HAL_RCC_OscConfig+0x2a8>)
 80027ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c0:	f7fe fa56 	bl	8000c70 <HAL_GetTick>
 80027c4:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c6:	e012      	b.n	80027ee <HAL_RCC_OscConfig+0x2be>
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40023802 	.word	0x40023802
 80027d0:	42470000 	.word	0x42470000
 80027d4:	42470e80 	.word	0x42470e80
 80027d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027dc:	f7fe fa48 	bl	8000c70 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e0e0      	b.n	80029b0 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	4b72      	ldr	r3, [pc, #456]	; (80029b8 <HAL_RCC_OscConfig+0x488>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	4b6f      	ldr	r3, [pc, #444]	; (80029bc <HAL_RCC_OscConfig+0x48c>)
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d015      	beq.n	8002838 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280c:	f7fe fa30 	bl	8000c70 <HAL_GetTick>
 8002810:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002812:	e00a      	b.n	800282a <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002814:	f7fe fa2c 	bl	8000c70 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e0c2      	b.n	80029b0 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282a:	4b65      	ldr	r3, [pc, #404]	; (80029c0 <HAL_RCC_OscConfig+0x490>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0ee      	beq.n	8002814 <HAL_RCC_OscConfig+0x2e4>
 8002836:	e014      	b.n	8002862 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002838:	f7fe fa1a 	bl	8000c70 <HAL_GetTick>
 800283c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe fa16 	bl	8000c70 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e0ac      	b.n	80029b0 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002856:	4b5a      	ldr	r3, [pc, #360]	; (80029c0 <HAL_RCC_OscConfig+0x490>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1ee      	bne.n	8002840 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002866:	2b01      	cmp	r3, #1
 8002868:	d105      	bne.n	8002876 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286a:	4b55      	ldr	r3, [pc, #340]	; (80029c0 <HAL_RCC_OscConfig+0x490>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a54      	ldr	r2, [pc, #336]	; (80029c0 <HAL_RCC_OscConfig+0x490>)
 8002870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8097 	beq.w	80029ae <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002880:	4b4f      	ldr	r3, [pc, #316]	; (80029c0 <HAL_RCC_OscConfig+0x490>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b08      	cmp	r3, #8
 800288a:	d061      	beq.n	8002950 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d146      	bne.n	8002922 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002894:	4b4b      	ldr	r3, [pc, #300]	; (80029c4 <HAL_RCC_OscConfig+0x494>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7fe f9e9 	bl	8000c70 <HAL_GetTick>
 800289e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fe f9e5 	bl	8000c70 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b64      	cmp	r3, #100	; 0x64
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e07d      	b.n	80029b0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b4:	4b42      	ldr	r3, [pc, #264]	; (80029c0 <HAL_RCC_OscConfig+0x490>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c0:	4b3f      	ldr	r3, [pc, #252]	; (80029c0 <HAL_RCC_OscConfig+0x490>)
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	4b40      	ldr	r3, [pc, #256]	; (80029c8 <HAL_RCC_OscConfig+0x498>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	69d1      	ldr	r1, [r2, #28]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6a12      	ldr	r2, [r2, #32]
 80028d0:	4311      	orrs	r1, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028d6:	0192      	lsls	r2, r2, #6
 80028d8:	4311      	orrs	r1, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028de:	0612      	lsls	r2, r2, #24
 80028e0:	4311      	orrs	r1, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80028e6:	0852      	lsrs	r2, r2, #1
 80028e8:	3a01      	subs	r2, #1
 80028ea:	0412      	lsls	r2, r2, #16
 80028ec:	430a      	orrs	r2, r1
 80028ee:	4934      	ldr	r1, [pc, #208]	; (80029c0 <HAL_RCC_OscConfig+0x490>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f4:	4b33      	ldr	r3, [pc, #204]	; (80029c4 <HAL_RCC_OscConfig+0x494>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fa:	f7fe f9b9 	bl	8000c70 <HAL_GetTick>
 80028fe:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002902:	f7fe f9b5 	bl	8000c70 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b64      	cmp	r3, #100	; 0x64
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e04d      	b.n	80029b0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002914:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <HAL_RCC_OscConfig+0x490>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x3d2>
 8002920:	e045      	b.n	80029ae <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002922:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <HAL_RCC_OscConfig+0x494>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7fe f9a2 	bl	8000c70 <HAL_GetTick>
 800292c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002930:	f7fe f99e 	bl	8000c70 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	; 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e036      	b.n	80029b0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002942:	4b1f      	ldr	r3, [pc, #124]	; (80029c0 <HAL_RCC_OscConfig+0x490>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x400>
 800294e:	e02e      	b.n	80029ae <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e029      	b.n	80029b0 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800295c:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_RCC_OscConfig+0x490>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	429a      	cmp	r2, r3
 800296e:	d11c      	bne.n	80029aa <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d115      	bne.n	80029aa <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	099b      	lsrs	r3, r3, #6
 8002982:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800298a:	429a      	cmp	r2, r3
 800298c:	d10d      	bne.n	80029aa <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d106      	bne.n	80029aa <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3728      	adds	r7, #40	; 0x28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40007000 	.word	0x40007000
 80029bc:	40023870 	.word	0x40023870
 80029c0:	40023800 	.word	0x40023800
 80029c4:	42470060 	.word	0x42470060
 80029c8:	f0bc8000 	.word	0xf0bc8000

080029cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0d2      	b.n	8002b86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b6b      	ldr	r3, [pc, #428]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d90c      	bls.n	8002a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b68      	ldr	r3, [pc, #416]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b66      	ldr	r3, [pc, #408]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0be      	b.n	8002b86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a20:	4b5c      	ldr	r3, [pc, #368]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4a5b      	ldr	r2, [pc, #364]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002a38:	4b56      	ldr	r3, [pc, #344]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4a55      	ldr	r2, [pc, #340]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a44:	4b53      	ldr	r3, [pc, #332]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4950      	ldr	r1, [pc, #320]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d040      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	4b4a      	ldr	r3, [pc, #296]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d115      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e085      	b.n	8002b86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a82:	4b44      	ldr	r3, [pc, #272]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e079      	b.n	8002b86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a92:	4b40      	ldr	r3, [pc, #256]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e071      	b.n	8002b86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa2:	4b3c      	ldr	r3, [pc, #240]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4939      	ldr	r1, [pc, #228]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab4:	f7fe f8dc 	bl	8000c70 <HAL_GetTick>
 8002ab8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7fe f8d8 	bl	8000c70 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e059      	b.n	8002b86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 020c 	and.w	r2, r3, #12
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d1eb      	bne.n	8002abc <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d20c      	bcs.n	8002b0c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e03c      	b.n	8002b86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b18:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	491b      	ldr	r1, [pc, #108]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b36:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4913      	ldr	r1, [pc, #76]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002b4a:	f000 f82b 	bl	8002ba4 <HAL_RCC_GetSysClockFreq>
 8002b4e:	4601      	mov	r1, r0
 8002b50:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b58:	22f0      	movs	r2, #240	; 0xf0
 8002b5a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	fa92 f2a2 	rbit	r2, r2
 8002b62:	60fa      	str	r2, [r7, #12]
  return result;
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	fab2 f282 	clz	r2, r2
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	40d3      	lsrs	r3, r2
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <HAL_RCC_ClockConfig+0x1cc>)
 8002b70:	5cd3      	ldrb	r3, [r2, r3]
 8002b72:	fa21 f303 	lsr.w	r3, r1, r3
 8002b76:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <HAL_RCC_ClockConfig+0x1d0>)
 8002b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b7a:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <HAL_RCC_ClockConfig+0x1d4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe f834 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40023c00 	.word	0x40023c00
 8002b94:	40023800 	.word	0x40023800
 8002b98:	08007b60 	.word	0x08007b60
 8002b9c:	20000028 	.word	0x20000028
 8002ba0:	2000002c 	.word	0x2000002c

08002ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba8:	b094      	sub	sp, #80	; 0x50
 8002baa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	647b      	str	r3, [r7, #68]	; 0x44
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bbc:	4b7c      	ldr	r3, [pc, #496]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d00d      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x40>
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	f200 80e7 	bhi.w	8002d9c <HAL_RCC_GetSysClockFreq+0x1f8>
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d003      	beq.n	8002bde <HAL_RCC_GetSysClockFreq+0x3a>
 8002bd6:	e0e1      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bd8:	4b76      	ldr	r3, [pc, #472]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x210>)
 8002bda:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002bdc:	e0e1      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bde:	4b76      	ldr	r3, [pc, #472]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x214>)
 8002be0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002be2:	e0de      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002be4:	4b72      	ldr	r3, [pc, #456]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bee:	4b70      	ldr	r3, [pc, #448]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d065      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfa:	4b6d      	ldr	r3, [pc, #436]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	099b      	lsrs	r3, r3, #6
 8002c00:	2200      	movs	r2, #0
 8002c02:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c0e:	2300      	movs	r3, #0
 8002c10:	637b      	str	r3, [r7, #52]	; 0x34
 8002c12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c16:	4622      	mov	r2, r4
 8002c18:	462b      	mov	r3, r5
 8002c1a:	f04f 0000 	mov.w	r0, #0
 8002c1e:	f04f 0100 	mov.w	r1, #0
 8002c22:	0159      	lsls	r1, r3, #5
 8002c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c28:	0150      	lsls	r0, r2, #5
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4621      	mov	r1, r4
 8002c30:	1a51      	subs	r1, r2, r1
 8002c32:	6139      	str	r1, [r7, #16]
 8002c34:	4629      	mov	r1, r5
 8002c36:	eb63 0301 	sbc.w	r3, r3, r1
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c48:	4659      	mov	r1, fp
 8002c4a:	018b      	lsls	r3, r1, #6
 8002c4c:	4651      	mov	r1, sl
 8002c4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c52:	4651      	mov	r1, sl
 8002c54:	018a      	lsls	r2, r1, #6
 8002c56:	46d4      	mov	ip, sl
 8002c58:	ebb2 080c 	subs.w	r8, r2, ip
 8002c5c:	4659      	mov	r1, fp
 8002c5e:	eb63 0901 	sbc.w	r9, r3, r1
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c76:	4690      	mov	r8, r2
 8002c78:	4699      	mov	r9, r3
 8002c7a:	4623      	mov	r3, r4
 8002c7c:	eb18 0303 	adds.w	r3, r8, r3
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	462b      	mov	r3, r5
 8002c84:	eb49 0303 	adc.w	r3, r9, r3
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c96:	4629      	mov	r1, r5
 8002c98:	024b      	lsls	r3, r1, #9
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002ca4:	4601      	mov	r1, r0
 8002ca6:	024a      	lsls	r2, r1, #9
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cae:	2200      	movs	r2, #0
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cb8:	f7fd fa8e 	bl	80001d8 <__aeabi_uldivmod>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cc4:	e05c      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc6:	4b3a      	ldr	r3, [pc, #232]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	099b      	lsrs	r3, r3, #6
 8002ccc:	2200      	movs	r2, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cd6:	623b      	str	r3, [r7, #32]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
 8002cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ce0:	4642      	mov	r2, r8
 8002ce2:	464b      	mov	r3, r9
 8002ce4:	f04f 0000 	mov.w	r0, #0
 8002ce8:	f04f 0100 	mov.w	r1, #0
 8002cec:	0159      	lsls	r1, r3, #5
 8002cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cf2:	0150      	lsls	r0, r2, #5
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	46c4      	mov	ip, r8
 8002cfa:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002cfe:	4640      	mov	r0, r8
 8002d00:	4649      	mov	r1, r9
 8002d02:	468c      	mov	ip, r1
 8002d04:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d1c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d20:	eb63 050b 	sbc.w	r5, r3, fp
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	00eb      	lsls	r3, r5, #3
 8002d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d32:	00e2      	lsls	r2, r4, #3
 8002d34:	4614      	mov	r4, r2
 8002d36:	461d      	mov	r5, r3
 8002d38:	4603      	mov	r3, r0
 8002d3a:	18e3      	adds	r3, r4, r3
 8002d3c:	603b      	str	r3, [r7, #0]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	eb45 0303 	adc.w	r3, r5, r3
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d52:	4629      	mov	r1, r5
 8002d54:	028b      	lsls	r3, r1, #10
 8002d56:	4620      	mov	r0, r4
 8002d58:	4629      	mov	r1, r5
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002d60:	4601      	mov	r1, r0
 8002d62:	028a      	lsls	r2, r1, #10
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	61fa      	str	r2, [r7, #28]
 8002d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d74:	f7fd fa30 	bl	80001d8 <__aeabi_uldivmod>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d9a:	e002      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x210>)
 8002d9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3750      	adds	r7, #80	; 0x50
 8002da8:	46bd      	mov	sp, r7
 8002daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800
 8002db4:	00f42400 	.word	0x00f42400
 8002db8:	007a1200 	.word	0x007a1200

08002dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc0:	4b02      	ldr	r3, [pc, #8]	; (8002dcc <HAL_RCC_GetHCLKFreq+0x10>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	20000028 	.word	0x20000028

08002dd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	f107 001c 	add.w	r0, r7, #28
 8002dde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d122      	bne.n	8002e2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002dfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d105      	bne.n	8002e22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f001 fafa 	bl	800441c <USB_CoreReset>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	73fb      	strb	r3, [r7, #15]
 8002e2c:	e010      	b.n	8002e50 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f001 faee 	bl	800441c <USB_CoreReset>
 8002e40:	4603      	mov	r3, r0
 8002e42:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d10b      	bne.n	8002e6e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f043 0206 	orr.w	r2, r3, #6
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f043 0220 	orr.w	r2, r3, #32
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e7a:	b004      	add	sp, #16
 8002e7c:	4770      	bx	lr
	...

08002e80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d165      	bne.n	8002f60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4a41      	ldr	r2, [pc, #260]	; (8002f9c <USB_SetTurnaroundTime+0x11c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d906      	bls.n	8002eaa <USB_SetTurnaroundTime+0x2a>
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4a40      	ldr	r2, [pc, #256]	; (8002fa0 <USB_SetTurnaroundTime+0x120>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d202      	bcs.n	8002eaa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002ea4:	230f      	movs	r3, #15
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e062      	b.n	8002f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4a3c      	ldr	r2, [pc, #240]	; (8002fa0 <USB_SetTurnaroundTime+0x120>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d306      	bcc.n	8002ec0 <USB_SetTurnaroundTime+0x40>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	4a3b      	ldr	r2, [pc, #236]	; (8002fa4 <USB_SetTurnaroundTime+0x124>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d202      	bcs.n	8002ec0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002eba:	230e      	movs	r3, #14
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	e057      	b.n	8002f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4a38      	ldr	r2, [pc, #224]	; (8002fa4 <USB_SetTurnaroundTime+0x124>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d306      	bcc.n	8002ed6 <USB_SetTurnaroundTime+0x56>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4a37      	ldr	r2, [pc, #220]	; (8002fa8 <USB_SetTurnaroundTime+0x128>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d202      	bcs.n	8002ed6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002ed0:	230d      	movs	r3, #13
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	e04c      	b.n	8002f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4a33      	ldr	r2, [pc, #204]	; (8002fa8 <USB_SetTurnaroundTime+0x128>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d306      	bcc.n	8002eec <USB_SetTurnaroundTime+0x6c>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4a32      	ldr	r2, [pc, #200]	; (8002fac <USB_SetTurnaroundTime+0x12c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d802      	bhi.n	8002eec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002ee6:	230c      	movs	r3, #12
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e041      	b.n	8002f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4a2f      	ldr	r2, [pc, #188]	; (8002fac <USB_SetTurnaroundTime+0x12c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d906      	bls.n	8002f02 <USB_SetTurnaroundTime+0x82>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4a2e      	ldr	r2, [pc, #184]	; (8002fb0 <USB_SetTurnaroundTime+0x130>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d802      	bhi.n	8002f02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002efc:	230b      	movs	r3, #11
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	e036      	b.n	8002f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4a2a      	ldr	r2, [pc, #168]	; (8002fb0 <USB_SetTurnaroundTime+0x130>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d906      	bls.n	8002f18 <USB_SetTurnaroundTime+0x98>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4a29      	ldr	r2, [pc, #164]	; (8002fb4 <USB_SetTurnaroundTime+0x134>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d802      	bhi.n	8002f18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002f12:	230a      	movs	r3, #10
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	e02b      	b.n	8002f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4a26      	ldr	r2, [pc, #152]	; (8002fb4 <USB_SetTurnaroundTime+0x134>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d906      	bls.n	8002f2e <USB_SetTurnaroundTime+0xae>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4a25      	ldr	r2, [pc, #148]	; (8002fb8 <USB_SetTurnaroundTime+0x138>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d202      	bcs.n	8002f2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002f28:	2309      	movs	r3, #9
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e020      	b.n	8002f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	4a21      	ldr	r2, [pc, #132]	; (8002fb8 <USB_SetTurnaroundTime+0x138>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d306      	bcc.n	8002f44 <USB_SetTurnaroundTime+0xc4>
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4a20      	ldr	r2, [pc, #128]	; (8002fbc <USB_SetTurnaroundTime+0x13c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d802      	bhi.n	8002f44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002f3e:	2308      	movs	r3, #8
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e015      	b.n	8002f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4a1d      	ldr	r2, [pc, #116]	; (8002fbc <USB_SetTurnaroundTime+0x13c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d906      	bls.n	8002f5a <USB_SetTurnaroundTime+0xda>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4a1c      	ldr	r2, [pc, #112]	; (8002fc0 <USB_SetTurnaroundTime+0x140>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d202      	bcs.n	8002f5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002f54:	2307      	movs	r3, #7
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	e00a      	b.n	8002f70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002f5a:	2306      	movs	r3, #6
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	e007      	b.n	8002f70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002f66:	2309      	movs	r3, #9
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	e001      	b.n	8002f70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002f6c:	2309      	movs	r3, #9
 8002f6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	029b      	lsls	r3, r3, #10
 8002f84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	00d8acbf 	.word	0x00d8acbf
 8002fa0:	00e4e1c0 	.word	0x00e4e1c0
 8002fa4:	00f42400 	.word	0x00f42400
 8002fa8:	01067380 	.word	0x01067380
 8002fac:	011a499f 	.word	0x011a499f
 8002fb0:	01312cff 	.word	0x01312cff
 8002fb4:	014ca43f 	.word	0x014ca43f
 8002fb8:	016e3600 	.word	0x016e3600
 8002fbc:	01a6ab1f 	.word	0x01a6ab1f
 8002fc0:	01e84800 	.word	0x01e84800

08002fc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f043 0201 	orr.w	r2, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f023 0201 	bic.w	r2, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d115      	bne.n	8003052 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003032:	2001      	movs	r0, #1
 8003034:	f7fd fe26 	bl	8000c84 <HAL_Delay>
      ms++;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3301      	adds	r3, #1
 800303c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f001 f961 	bl	8004306 <USB_GetMode>
 8003044:	4603      	mov	r3, r0
 8003046:	2b01      	cmp	r3, #1
 8003048:	d01e      	beq.n	8003088 <USB_SetCurrentMode+0x84>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b31      	cmp	r3, #49	; 0x31
 800304e:	d9f0      	bls.n	8003032 <USB_SetCurrentMode+0x2e>
 8003050:	e01a      	b.n	8003088 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d115      	bne.n	8003084 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003064:	2001      	movs	r0, #1
 8003066:	f7fd fe0d 	bl	8000c84 <HAL_Delay>
      ms++;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	3301      	adds	r3, #1
 800306e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f001 f948 	bl	8004306 <USB_GetMode>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <USB_SetCurrentMode+0x84>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b31      	cmp	r3, #49	; 0x31
 8003080:	d9f0      	bls.n	8003064 <USB_SetCurrentMode+0x60>
 8003082:	e001      	b.n	8003088 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e005      	b.n	8003094 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b32      	cmp	r3, #50	; 0x32
 800308c:	d101      	bne.n	8003092 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800309c:	b084      	sub	sp, #16
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80030aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	e009      	b.n	80030d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	3340      	adds	r3, #64	; 0x40
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	2200      	movs	r2, #0
 80030c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	3301      	adds	r3, #1
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	2b0e      	cmp	r3, #14
 80030d4:	d9f2      	bls.n	80030bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80030d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d11c      	bne.n	8003116 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ea:	f043 0302 	orr.w	r3, r3, #2
 80030ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	639a      	str	r2, [r3, #56]	; 0x38
 8003114:	e00b      	b.n	800312e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003134:	461a      	mov	r2, r3
 8003136:	2300      	movs	r3, #0
 8003138:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003140:	4619      	mov	r1, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003148:	461a      	mov	r2, r3
 800314a:	680b      	ldr	r3, [r1, #0]
 800314c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800314e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003150:	2b01      	cmp	r3, #1
 8003152:	d10c      	bne.n	800316e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d104      	bne.n	8003164 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800315a:	2100      	movs	r1, #0
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f945 	bl	80033ec <USB_SetDevSpeed>
 8003162:	e008      	b.n	8003176 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003164:	2101      	movs	r1, #1
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f940 	bl	80033ec <USB_SetDevSpeed>
 800316c:	e003      	b.n	8003176 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800316e:	2103      	movs	r1, #3
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f93b 	bl	80033ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003176:	2110      	movs	r1, #16
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f8f3 	bl	8003364 <USB_FlushTxFifo>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f90f 	bl	80033ac <USB_FlushRxFifo>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800319e:	461a      	mov	r2, r3
 80031a0:	2300      	movs	r3, #0
 80031a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031aa:	461a      	mov	r2, r3
 80031ac:	2300      	movs	r3, #0
 80031ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b6:	461a      	mov	r2, r3
 80031b8:	2300      	movs	r3, #0
 80031ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031bc:	2300      	movs	r3, #0
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	e043      	b.n	800324a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031d8:	d118      	bne.n	800320c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ec:	461a      	mov	r2, r3
 80031ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	e013      	b.n	800321e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003202:	461a      	mov	r2, r3
 8003204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	e008      	b.n	800321e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003218:	461a      	mov	r2, r3
 800321a:	2300      	movs	r3, #0
 800321c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4413      	add	r3, r2
 8003226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800322a:	461a      	mov	r2, r3
 800322c:	2300      	movs	r3, #0
 800322e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4413      	add	r3, r2
 8003238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323c:	461a      	mov	r2, r3
 800323e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003242:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	3301      	adds	r3, #1
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	429a      	cmp	r2, r3
 8003250:	d3b7      	bcc.n	80031c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	e043      	b.n	80032e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800326a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800326e:	d118      	bne.n	80032a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003282:	461a      	mov	r2, r3
 8003284:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e013      	b.n	80032b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003298:	461a      	mov	r2, r3
 800329a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	e008      	b.n	80032b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ae:	461a      	mov	r2, r3
 80032b0:	2300      	movs	r3, #0
 80032b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c0:	461a      	mov	r2, r3
 80032c2:	2300      	movs	r3, #0
 80032c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d2:	461a      	mov	r2, r3
 80032d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	3301      	adds	r3, #1
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d3b7      	bcc.n	8003258 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003308:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	2b00      	cmp	r3, #0
 800330e:	d105      	bne.n	800331c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f043 0210 	orr.w	r2, r3, #16
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699a      	ldr	r2, [r3, #24]
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <USB_DevInit+0x2c4>)
 8003322:	4313      	orrs	r3, r2
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f043 0208 	orr.w	r2, r3, #8
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800333a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800333c:	2b01      	cmp	r3, #1
 800333e:	d107      	bne.n	8003350 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003348:	f043 0304 	orr.w	r3, r3, #4
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003350:	7dfb      	ldrb	r3, [r7, #23]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800335c:	b004      	add	sp, #16
 800335e:	4770      	bx	lr
 8003360:	803c3800 	.word	0x803c3800

08003364 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	019b      	lsls	r3, r3, #6
 8003376:	f043 0220 	orr.w	r2, r3, #32
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	3301      	adds	r3, #1
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4a08      	ldr	r2, [pc, #32]	; (80033a8 <USB_FlushTxFifo+0x44>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e006      	b.n	800339e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b20      	cmp	r3, #32
 800339a:	d0f0      	beq.n	800337e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr
 80033a8:	00030d40 	.word	0x00030d40

080033ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2210      	movs	r2, #16
 80033bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3301      	adds	r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a08      	ldr	r2, [pc, #32]	; (80033e8 <USB_FlushRxFifo+0x3c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d901      	bls.n	80033d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e006      	b.n	80033de <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d0f0      	beq.n	80033be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	00030d40 	.word	0x00030d40

080033ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	68f9      	ldr	r1, [r7, #12]
 8003408:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800340c:	4313      	orrs	r3, r2
 800340e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 0306 	and.w	r3, r3, #6
 8003434:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d102      	bne.n	8003442 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800343c:	2300      	movs	r3, #0
 800343e:	75fb      	strb	r3, [r7, #23]
 8003440:	e00a      	b.n	8003458 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d002      	beq.n	800344e <USB_GetDevSpeed+0x32>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b06      	cmp	r3, #6
 800344c:	d102      	bne.n	8003454 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800344e:	2302      	movs	r3, #2
 8003450:	75fb      	strb	r3, [r7, #23]
 8003452:	e001      	b.n	8003458 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003454:	230f      	movs	r3, #15
 8003456:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003458:	7dfb      	ldrb	r3, [r7, #23]
}
 800345a:	4618      	mov	r0, r3
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	785b      	ldrb	r3, [r3, #1]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d13a      	bne.n	80034f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003486:	69da      	ldr	r2, [r3, #28]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	2101      	movs	r1, #1
 8003492:	fa01 f303 	lsl.w	r3, r1, r3
 8003496:	b29b      	uxth	r3, r3
 8003498:	68f9      	ldr	r1, [r7, #12]
 800349a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800349e:	4313      	orrs	r3, r2
 80034a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d155      	bne.n	8003564 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	78db      	ldrb	r3, [r3, #3]
 80034d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	059b      	lsls	r3, r3, #22
 80034da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034dc:	4313      	orrs	r3, r2
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	0151      	lsls	r1, r2, #5
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	440a      	add	r2, r1
 80034e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	e036      	b.n	8003564 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	2101      	movs	r1, #1
 8003508:	fa01 f303 	lsl.w	r3, r1, r3
 800350c:	041b      	lsls	r3, r3, #16
 800350e:	68f9      	ldr	r1, [r7, #12]
 8003510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003514:	4313      	orrs	r3, r2
 8003516:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d11a      	bne.n	8003564 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4413      	add	r3, r2
 8003536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	78db      	ldrb	r3, [r3, #3]
 8003548:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800354a:	430b      	orrs	r3, r1
 800354c:	4313      	orrs	r3, r2
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	0151      	lsls	r1, r2, #5
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	440a      	add	r2, r1
 8003556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800355a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003562:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	785b      	ldrb	r3, [r3, #1]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d161      	bne.n	8003650 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800359e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035a2:	d11f      	bne.n	80035e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	0151      	lsls	r1, r2, #5
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	440a      	add	r2, r1
 80035ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	0151      	lsls	r1, r2, #5
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	440a      	add	r2, r1
 80035da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	2101      	movs	r1, #1
 80035f6:	fa01 f303 	lsl.w	r3, r1, r3
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	43db      	mvns	r3, r3
 80035fe:	68f9      	ldr	r1, [r7, #12]
 8003600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003604:	4013      	ands	r3, r2
 8003606:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	2101      	movs	r1, #1
 800361a:	fa01 f303 	lsl.w	r3, r1, r3
 800361e:	b29b      	uxth	r3, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	68f9      	ldr	r1, [r7, #12]
 8003624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003628:	4013      	ands	r3, r2
 800362a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	0159      	lsls	r1, r3, #5
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	440b      	add	r3, r1
 8003642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003646:	4619      	mov	r1, r3
 8003648:	4b35      	ldr	r3, [pc, #212]	; (8003720 <USB_DeactivateEndpoint+0x1b0>)
 800364a:	4013      	ands	r3, r2
 800364c:	600b      	str	r3, [r1, #0]
 800364e:	e060      	b.n	8003712 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003666:	d11f      	bne.n	80036a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	0151      	lsls	r1, r2, #5
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	440a      	add	r2, r1
 800367e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003682:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003686:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	0151      	lsls	r1, r2, #5
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	440a      	add	r2, r1
 800369e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	2101      	movs	r1, #1
 80036ba:	fa01 f303 	lsl.w	r3, r1, r3
 80036be:	041b      	lsls	r3, r3, #16
 80036c0:	43db      	mvns	r3, r3
 80036c2:	68f9      	ldr	r1, [r7, #12]
 80036c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036c8:	4013      	ands	r3, r2
 80036ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d2:	69da      	ldr	r2, [r3, #28]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	2101      	movs	r1, #1
 80036de:	fa01 f303 	lsl.w	r3, r1, r3
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	43db      	mvns	r3, r3
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036ec:	4013      	ands	r3, r2
 80036ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	0159      	lsls	r1, r3, #5
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	440b      	add	r3, r1
 8003706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370a:	4619      	mov	r1, r3
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <USB_DeactivateEndpoint+0x1b4>)
 800370e:	4013      	ands	r3, r2
 8003710:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	ec337800 	.word	0xec337800
 8003724:	eff37800 	.word	0xeff37800

08003728 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	; 0x28
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	4613      	mov	r3, r2
 8003734:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	785b      	ldrb	r3, [r3, #1]
 8003744:	2b01      	cmp	r3, #1
 8003746:	f040 815c 	bne.w	8003a02 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d132      	bne.n	80037b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	0151      	lsls	r1, r2, #5
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	440a      	add	r2, r1
 8003768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800376c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003770:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003774:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	0151      	lsls	r1, r2, #5
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	440a      	add	r2, r1
 800378c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003790:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003794:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	0151      	lsls	r1, r2, #5
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	440a      	add	r2, r1
 80037ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037b0:	0cdb      	lsrs	r3, r3, #19
 80037b2:	04db      	lsls	r3, r3, #19
 80037b4:	6113      	str	r3, [r2, #16]
 80037b6:	e074      	b.n	80038a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	0151      	lsls	r1, r2, #5
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	440a      	add	r2, r1
 80037ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037d2:	0cdb      	lsrs	r3, r3, #19
 80037d4:	04db      	lsls	r3, r3, #19
 80037d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	0151      	lsls	r1, r2, #5
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	440a      	add	r2, r1
 80037ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003808:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	6959      	ldr	r1, [r3, #20]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	440b      	add	r3, r1
 8003814:	1e59      	subs	r1, r3, #1
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	fbb1 f3f3 	udiv	r3, r1, r3
 800381e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003820:	4b9d      	ldr	r3, [pc, #628]	; (8003a98 <USB_EPStartXfer+0x370>)
 8003822:	400b      	ands	r3, r1
 8003824:	69b9      	ldr	r1, [r7, #24]
 8003826:	0148      	lsls	r0, r1, #5
 8003828:	69f9      	ldr	r1, [r7, #28]
 800382a:	4401      	add	r1, r0
 800382c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003830:	4313      	orrs	r3, r2
 8003832:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	4413      	add	r3, r2
 800383c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800384a:	69b9      	ldr	r1, [r7, #24]
 800384c:	0148      	lsls	r0, r1, #5
 800384e:	69f9      	ldr	r1, [r7, #28]
 8003850:	4401      	add	r1, r0
 8003852:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003856:	4313      	orrs	r3, r2
 8003858:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	78db      	ldrb	r3, [r3, #3]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d11f      	bne.n	80038a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	0151      	lsls	r1, r2, #5
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	440a      	add	r2, r1
 8003878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800387c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003880:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	0151      	lsls	r1, r2, #5
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	440a      	add	r2, r1
 8003898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800389c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d14b      	bne.n	8003940 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d009      	beq.n	80038c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038bc:	461a      	mov	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	78db      	ldrb	r3, [r3, #3]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d128      	bne.n	800391e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d110      	bne.n	80038fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	0151      	lsls	r1, r2, #5
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	440a      	add	r2, r1
 80038f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	e00f      	b.n	800391e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	0151      	lsls	r1, r2, #5
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	440a      	add	r2, r1
 8003914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	0151      	lsls	r1, r2, #5
 8003930:	69fa      	ldr	r2, [r7, #28]
 8003932:	440a      	add	r2, r1
 8003934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003938:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e12f      	b.n	8003ba0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	0151      	lsls	r1, r2, #5
 8003952:	69fa      	ldr	r2, [r7, #28]
 8003954:	440a      	add	r2, r1
 8003956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800395a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800395e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	78db      	ldrb	r3, [r3, #3]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d015      	beq.n	8003994 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8117 	beq.w	8003ba0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	2101      	movs	r1, #1
 8003984:	fa01 f303 	lsl.w	r3, r1, r3
 8003988:	69f9      	ldr	r1, [r7, #28]
 800398a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800398e:	4313      	orrs	r3, r2
 8003990:	634b      	str	r3, [r1, #52]	; 0x34
 8003992:	e105      	b.n	8003ba0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d110      	bne.n	80039c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	0151      	lsls	r1, r2, #5
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	440a      	add	r2, r1
 80039ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	e00f      	b.n	80039e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	0151      	lsls	r1, r2, #5
 80039d8:	69fa      	ldr	r2, [r7, #28]
 80039da:	440a      	add	r2, r1
 80039dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	68d9      	ldr	r1, [r3, #12]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	781a      	ldrb	r2, [r3, #0]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	b298      	uxth	r0, r3
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	4603      	mov	r3, r0
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 fa2a 	bl	8003e54 <USB_WritePacket>
 8003a00:	e0ce      	b.n	8003ba0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	0151      	lsls	r1, r2, #5
 8003a14:	69fa      	ldr	r2, [r7, #28]
 8003a16:	440a      	add	r2, r1
 8003a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a1c:	0cdb      	lsrs	r3, r3, #19
 8003a1e:	04db      	lsls	r3, r3, #19
 8003a20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	0151      	lsls	r1, r2, #5
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	440a      	add	r2, r1
 8003a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d126      	bne.n	8003a9c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a64:	69b9      	ldr	r1, [r7, #24]
 8003a66:	0148      	lsls	r0, r1, #5
 8003a68:	69f9      	ldr	r1, [r7, #28]
 8003a6a:	4401      	add	r1, r0
 8003a6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a70:	4313      	orrs	r3, r2
 8003a72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	0151      	lsls	r1, r2, #5
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	440a      	add	r2, r1
 8003a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a92:	6113      	str	r3, [r2, #16]
 8003a94:	e036      	b.n	8003b04 <USB_EPStartXfer+0x3dc>
 8003a96:	bf00      	nop
 8003a98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	695a      	ldr	r2, [r3, #20]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	1e5a      	subs	r2, r3, #1
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	8afb      	ldrh	r3, [r7, #22]
 8003ac2:	04d9      	lsls	r1, r3, #19
 8003ac4:	4b39      	ldr	r3, [pc, #228]	; (8003bac <USB_EPStartXfer+0x484>)
 8003ac6:	400b      	ands	r3, r1
 8003ac8:	69b9      	ldr	r1, [r7, #24]
 8003aca:	0148      	lsls	r0, r1, #5
 8003acc:	69f9      	ldr	r1, [r7, #28]
 8003ace:	4401      	add	r1, r0
 8003ad0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	8af9      	ldrh	r1, [r7, #22]
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af4:	69b9      	ldr	r1, [r7, #24]
 8003af6:	0148      	lsls	r0, r1, #5
 8003af8:	69f9      	ldr	r1, [r7, #28]
 8003afa:	4401      	add	r1, r0
 8003afc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b00:	4313      	orrs	r3, r2
 8003b02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d10d      	bne.n	8003b26 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	68d9      	ldr	r1, [r3, #12]
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b22:	460a      	mov	r2, r1
 8003b24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	78db      	ldrb	r3, [r3, #3]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d128      	bne.n	8003b80 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d110      	bne.n	8003b60 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	0151      	lsls	r1, r2, #5
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	440a      	add	r2, r1
 8003b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	e00f      	b.n	8003b80 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	0151      	lsls	r1, r2, #5
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	440a      	add	r2, r1
 8003b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	0151      	lsls	r1, r2, #5
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	440a      	add	r2, r1
 8003b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3720      	adds	r7, #32
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	1ff80000 	.word	0x1ff80000

08003bb0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	785b      	ldrb	r3, [r3, #1]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	f040 80cd 	bne.w	8003d6c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d132      	bne.n	8003c40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	0151      	lsls	r1, r2, #5
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	440a      	add	r2, r1
 8003bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	0151      	lsls	r1, r2, #5
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	440a      	add	r2, r1
 8003c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	0151      	lsls	r1, r2, #5
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	440a      	add	r2, r1
 8003c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c38:	0cdb      	lsrs	r3, r3, #19
 8003c3a:	04db      	lsls	r3, r3, #19
 8003c3c:	6113      	str	r3, [r2, #16]
 8003c3e:	e04e      	b.n	8003cde <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	0151      	lsls	r1, r2, #5
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	440a      	add	r2, r1
 8003c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c5a:	0cdb      	lsrs	r3, r3, #19
 8003c5c:	04db      	lsls	r3, r3, #19
 8003c5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	0151      	lsls	r1, r2, #5
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	440a      	add	r2, r1
 8003c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d903      	bls.n	8003c98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	0151      	lsls	r1, r2, #5
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	440a      	add	r2, r1
 8003cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cce:	6939      	ldr	r1, [r7, #16]
 8003cd0:	0148      	lsls	r0, r1, #5
 8003cd2:	6979      	ldr	r1, [r7, #20]
 8003cd4:	4401      	add	r1, r0
 8003cd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d11e      	bne.n	8003d22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d009      	beq.n	8003d00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	0151      	lsls	r1, r2, #5
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	440a      	add	r2, r1
 8003d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	e092      	b.n	8003e48 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	0151      	lsls	r1, r2, #5
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	440a      	add	r2, r1
 8003d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d07e      	beq.n	8003e48 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d60:	6979      	ldr	r1, [r7, #20]
 8003d62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d66:	4313      	orrs	r3, r2
 8003d68:	634b      	str	r3, [r1, #52]	; 0x34
 8003d6a:	e06d      	b.n	8003e48 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	0151      	lsls	r1, r2, #5
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	440a      	add	r2, r1
 8003d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d86:	0cdb      	lsrs	r3, r3, #19
 8003d88:	04db      	lsls	r3, r3, #19
 8003d8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	0151      	lsls	r1, r2, #5
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	440a      	add	r2, r1
 8003da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003da6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003daa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003dae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	0151      	lsls	r1, r2, #5
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	440a      	add	r2, r1
 8003dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df6:	6939      	ldr	r1, [r7, #16]
 8003df8:	0148      	lsls	r0, r1, #5
 8003dfa:	6979      	ldr	r1, [r7, #20]
 8003dfc:	4401      	add	r1, r0
 8003dfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e02:	4313      	orrs	r3, r2
 8003e04:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d10d      	bne.n	8003e28 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d009      	beq.n	8003e28 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	68d9      	ldr	r1, [r3, #12]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e24:	460a      	mov	r2, r1
 8003e26:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	0151      	lsls	r1, r2, #5
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b089      	sub	sp, #36	; 0x24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	4611      	mov	r1, r2
 8003e60:	461a      	mov	r2, r3
 8003e62:	460b      	mov	r3, r1
 8003e64:	71fb      	strb	r3, [r7, #7]
 8003e66:	4613      	mov	r3, r2
 8003e68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003e72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d123      	bne.n	8003ec2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003e7a:	88bb      	ldrh	r3, [r7, #4]
 8003e7c:	3303      	adds	r3, #3
 8003e7e:	089b      	lsrs	r3, r3, #2
 8003e80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	e018      	b.n	8003eba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	031a      	lsls	r2, r3, #12
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e94:	461a      	mov	r2, r3
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d3e2      	bcc.n	8003e88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3724      	adds	r7, #36	; 0x24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr

08003ece <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b08b      	sub	sp, #44	; 0x2c
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	089b      	lsrs	r3, r3, #2
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003eec:	88fb      	ldrh	r3, [r7, #6]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	623b      	str	r3, [r7, #32]
 8003ef8:	e014      	b.n	8003f24 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	3301      	adds	r3, #1
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	3301      	adds	r3, #1
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	3301      	adds	r3, #1
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	3301      	adds	r3, #1
 8003f22:	623b      	str	r3, [r7, #32]
 8003f24:	6a3a      	ldr	r2, [r7, #32]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d3e6      	bcc.n	8003efa <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003f2c:	8bfb      	ldrh	r3, [r7, #30]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01e      	beq.n	8003f70 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f107 0310 	add.w	r3, r7, #16
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	701a      	strb	r2, [r3, #0]
      i++;
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	623b      	str	r3, [r7, #32]
      pDest++;
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	3301      	adds	r3, #1
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003f64:	8bfb      	ldrh	r3, [r7, #30]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003f6a:	8bfb      	ldrh	r3, [r7, #30]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ea      	bne.n	8003f46 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	372c      	adds	r7, #44	; 0x2c
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	785b      	ldrb	r3, [r3, #1]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d12c      	bne.n	8003ff2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	db12      	blt.n	8003fd0 <USB_EPSetStall+0x54>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00f      	beq.n	8003fd0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	0151      	lsls	r1, r2, #5
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	440a      	add	r2, r1
 8003fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	0151      	lsls	r1, r2, #5
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	440a      	add	r2, r1
 8003fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	e02b      	b.n	800404a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	db12      	blt.n	800402a <USB_EPSetStall+0xae>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00f      	beq.n	800402a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	0151      	lsls	r1, r2, #5
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	440a      	add	r2, r1
 8004020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004024:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004028:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	0151      	lsls	r1, r2, #5
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	440a      	add	r2, r1
 8004040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004044:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004048:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr

08004056 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004056:	b480      	push	{r7}
 8004058:	b085      	sub	sp, #20
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	785b      	ldrb	r3, [r3, #1]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d128      	bne.n	80040c4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	0151      	lsls	r1, r2, #5
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	440a      	add	r2, r1
 8004088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800408c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004090:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	78db      	ldrb	r3, [r3, #3]
 8004096:	2b03      	cmp	r3, #3
 8004098:	d003      	beq.n	80040a2 <USB_EPClearStall+0x4c>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	78db      	ldrb	r3, [r3, #3]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d138      	bne.n	8004114 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	0151      	lsls	r1, r2, #5
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	440a      	add	r2, r1
 80040b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e027      	b.n	8004114 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	0151      	lsls	r1, r2, #5
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	440a      	add	r2, r1
 80040da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	78db      	ldrb	r3, [r3, #3]
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d003      	beq.n	80040f4 <USB_EPClearStall+0x9e>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	78db      	ldrb	r3, [r3, #3]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d10f      	bne.n	8004114 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	440a      	add	r2, r1
 800410a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800410e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004112:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800413e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004142:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004154:	68f9      	ldr	r1, [r7, #12]
 8004156:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr

0800416a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800416a:	b480      	push	{r7}
 800416c:	b085      	sub	sp, #20
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004184:	f023 0303 	bic.w	r3, r3, #3
 8004188:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004198:	f023 0302 	bic.w	r3, r3, #2
 800419c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041c4:	f023 0303 	bic.w	r3, r3, #3
 80041c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041d8:	f043 0302 	orr.w	r3, r3, #2
 80041dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr

080041ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b085      	sub	sp, #20
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4013      	ands	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004202:	68fb      	ldr	r3, [r7, #12]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr

0800420e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	4013      	ands	r3, r2
 8004230:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	0c1b      	lsrs	r3, r3, #16
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr

08004240 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	4013      	ands	r3, r2
 8004262:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	b29b      	uxth	r3, r3
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr

08004272 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004272:	b480      	push	{r7}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	460b      	mov	r3, r1
 800427c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	4013      	ands	r3, r2
 800429e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80042a0:	68bb      	ldr	r3, [r7, #8]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ce:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	fa22 f303 	lsr.w	r3, r2, r3
 80042dc:	01db      	lsls	r3, r3, #7
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80042e6:	78fb      	ldrb	r3, [r7, #3]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4013      	ands	r3, r2
 80042f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80042fa:	68bb      	ldr	r3, [r7, #8]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr

08004306 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0301 	and.w	r3, r3, #1
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800433a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800433e:	f023 0307 	bic.w	r3, r3, #7
 8004342:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004356:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	460b      	mov	r3, r1
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	333c      	adds	r3, #60	; 0x3c
 800437a:	3304      	adds	r3, #4
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4a25      	ldr	r2, [pc, #148]	; (8004418 <USB_EP0_OutStart+0xb4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d90a      	bls.n	800439e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004398:	d101      	bne.n	800439e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e037      	b.n	800440e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a4:	461a      	mov	r2, r3
 80043a6:	2300      	movs	r3, #0
 80043a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043cc:	f043 0318 	orr.w	r3, r3, #24
 80043d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80043e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80043e6:	7afb      	ldrb	r3, [r7, #11]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d10f      	bne.n	800440c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f2:	461a      	mov	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004406:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800440a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr
 8004418:	4f54300a 	.word	0x4f54300a

0800441c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3301      	adds	r3, #1
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4a12      	ldr	r2, [pc, #72]	; (800447c <USB_CoreReset+0x60>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d901      	bls.n	800443a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e01b      	b.n	8004472 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	daf2      	bge.n	8004428 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f043 0201 	orr.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3301      	adds	r3, #1
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4a08      	ldr	r2, [pc, #32]	; (800447c <USB_CoreReset+0x60>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e006      	b.n	8004472 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b01      	cmp	r3, #1
 800446e:	d0f0      	beq.n	8004452 <USB_CoreReset+0x36>

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr
 800447c:	00030d40 	.word	0x00030d40

08004480 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	7c1b      	ldrb	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d115      	bne.n	80044c4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800449c:	2202      	movs	r2, #2
 800449e:	2181      	movs	r1, #129	; 0x81
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f001 ff58 	bl	8006356 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80044ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044b0:	2202      	movs	r2, #2
 80044b2:	2101      	movs	r1, #1
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f001 ff4e 	bl	8006356 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80044c2:	e012      	b.n	80044ea <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80044c4:	2340      	movs	r3, #64	; 0x40
 80044c6:	2202      	movs	r2, #2
 80044c8:	2181      	movs	r1, #129	; 0x81
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f001 ff43 	bl	8006356 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80044d6:	2340      	movs	r3, #64	; 0x40
 80044d8:	2202      	movs	r2, #2
 80044da:	2101      	movs	r1, #1
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f001 ff3a 	bl	8006356 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80044ea:	2308      	movs	r3, #8
 80044ec:	2203      	movs	r2, #3
 80044ee:	2182      	movs	r1, #130	; 0x82
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f001 ff30 	bl	8006356 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80044fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004500:	f002 f8a6 	bl	8006650 <malloc>
 8004504:	4603      	mov	r3, r0
 8004506:	461a      	mov	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d102      	bne.n	800451e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8004518:	2301      	movs	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
 800451c:	e026      	b.n	800456c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004524:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2200      	movs	r2, #0
 8004534:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2200      	movs	r2, #0
 800453c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	7c1b      	ldrb	r3, [r3, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800454e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004552:	2101      	movs	r1, #1
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f001 ffee 	bl	8006536 <USBD_LL_PrepareReceive>
 800455a:	e007      	b.n	800456c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004562:	2340      	movs	r3, #64	; 0x40
 8004564:	2101      	movs	r1, #1
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f001 ffe5 	bl	8006536 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800456c:	7bfb      	ldrb	r3, [r7, #15]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	460b      	mov	r3, r1
 8004580:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004586:	2181      	movs	r1, #129	; 0x81
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f001 ff0a 	bl	80063a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004594:	2101      	movs	r1, #1
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f001 ff03 	bl	80063a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80045a4:	2182      	movs	r1, #130	; 0x82
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f001 fefb 	bl	80063a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00e      	beq.n	80045da <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045cc:	4618      	mov	r0, r3
 80045ce:	f002 f847 	bl	8006660 <free>
    pdev->pClassData = NULL;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80045da:	7bfb      	ldrb	r3, [r7, #15]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045f4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800460a:	2b00      	cmp	r3, #0
 800460c:	d039      	beq.n	8004682 <USBD_CDC_Setup+0x9e>
 800460e:	2b20      	cmp	r3, #32
 8004610:	d17f      	bne.n	8004712 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	88db      	ldrh	r3, [r3, #6]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d029      	beq.n	800466e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	b25b      	sxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	da11      	bge.n	8004648 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004630:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	88d2      	ldrh	r2, [r2, #6]
 8004636:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004638:	6939      	ldr	r1, [r7, #16]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	88db      	ldrh	r3, [r3, #6]
 800463e:	461a      	mov	r2, r3
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f001 fa42 	bl	8005aca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004646:	e06b      	b.n	8004720 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	785a      	ldrb	r2, [r3, #1]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	88db      	ldrh	r3, [r3, #6]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800465e:	6939      	ldr	r1, [r7, #16]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	88db      	ldrh	r3, [r3, #6]
 8004664:	461a      	mov	r2, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f001 fa5d 	bl	8005b26 <USBD_CtlPrepareRx>
      break;
 800466c:	e058      	b.n	8004720 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	7850      	ldrb	r0, [r2, #1]
 800467a:	2200      	movs	r2, #0
 800467c:	6839      	ldr	r1, [r7, #0]
 800467e:	4798      	blx	r3
      break;
 8004680:	e04e      	b.n	8004720 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	785b      	ldrb	r3, [r3, #1]
 8004686:	2b0b      	cmp	r3, #11
 8004688:	d02e      	beq.n	80046e8 <USBD_CDC_Setup+0x104>
 800468a:	2b0b      	cmp	r3, #11
 800468c:	dc38      	bgt.n	8004700 <USBD_CDC_Setup+0x11c>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <USBD_CDC_Setup+0xb4>
 8004692:	2b0a      	cmp	r3, #10
 8004694:	d014      	beq.n	80046c0 <USBD_CDC_Setup+0xdc>
 8004696:	e033      	b.n	8004700 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d107      	bne.n	80046b2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80046a2:	f107 030c 	add.w	r3, r7, #12
 80046a6:	2202      	movs	r2, #2
 80046a8:	4619      	mov	r1, r3
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f001 fa0d 	bl	8005aca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80046b0:	e02e      	b.n	8004710 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80046b2:	6839      	ldr	r1, [r7, #0]
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f001 f99e 	bl	80059f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80046ba:	2302      	movs	r3, #2
 80046bc:	75fb      	strb	r3, [r7, #23]
          break;
 80046be:	e027      	b.n	8004710 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d107      	bne.n	80046da <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80046ca:	f107 030f 	add.w	r3, r7, #15
 80046ce:	2201      	movs	r2, #1
 80046d0:	4619      	mov	r1, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f001 f9f9 	bl	8005aca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80046d8:	e01a      	b.n	8004710 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80046da:	6839      	ldr	r1, [r7, #0]
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f001 f98a 	bl	80059f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80046e2:	2302      	movs	r3, #2
 80046e4:	75fb      	strb	r3, [r7, #23]
          break;
 80046e6:	e013      	b.n	8004710 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d00d      	beq.n	800470e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80046f2:	6839      	ldr	r1, [r7, #0]
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f001 f97e 	bl	80059f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80046fa:	2302      	movs	r3, #2
 80046fc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80046fe:	e006      	b.n	800470e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8004700:	6839      	ldr	r1, [r7, #0]
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f001 f977 	bl	80059f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8004708:	2302      	movs	r3, #2
 800470a:	75fb      	strb	r3, [r7, #23]
          break;
 800470c:	e000      	b.n	8004710 <USBD_CDC_Setup+0x12c>
          break;
 800470e:	bf00      	nop
      }
      break;
 8004710:	e006      	b.n	8004720 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8004712:	6839      	ldr	r1, [r7, #0]
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f001 f96e 	bl	80059f6 <USBD_CtlError>
      ret = USBD_FAIL;
 800471a:	2302      	movs	r3, #2
 800471c:	75fb      	strb	r3, [r7, #23]
      break;
 800471e:	bf00      	nop
  }

  return ret;
 8004720:	7dfb      	ldrb	r3, [r7, #23]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	460b      	mov	r3, r1
 8004734:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800473c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004744:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800474c:	2b00      	cmp	r3, #0
 800474e:	d03a      	beq.n	80047c6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004750:	78fa      	ldrb	r2, [r7, #3]
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	331c      	adds	r3, #28
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d029      	beq.n	80047ba <USBD_CDC_DataIn+0x90>
 8004766:	78fa      	ldrb	r2, [r7, #3]
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	331c      	adds	r3, #28
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	78f9      	ldrb	r1, [r7, #3]
 800477a:	68b8      	ldr	r0, [r7, #8]
 800477c:	460b      	mov	r3, r1
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	1a5b      	subs	r3, r3, r1
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4403      	add	r3, r0
 8004786:	3344      	adds	r3, #68	; 0x44
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	fbb2 f1f3 	udiv	r1, r2, r3
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d110      	bne.n	80047ba <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004798:	78fa      	ldrb	r2, [r7, #3]
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	331c      	adds	r3, #28
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80047ac:	78f9      	ldrb	r1, [r7, #3]
 80047ae:	2300      	movs	r3, #0
 80047b0:	2200      	movs	r2, #0
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f001 fe9c 	bl	80064f0 <USBD_LL_Transmit>
 80047b8:	e003      	b.n	80047c2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e000      	b.n	80047c8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80047c6:	2302      	movs	r3, #2
  }
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	4619      	mov	r1, r3
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f001 fec7 	bl	800657c <USBD_LL_GetRxDataSize>
 80047ee:	4602      	mov	r2, r0
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00d      	beq.n	800481c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004814:	4611      	mov	r1, r2
 8004816:	4798      	blx	r3

    return USBD_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	e000      	b.n	800481e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800481c:	2302      	movs	r3, #2
  }
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004834:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800483c:	2b00      	cmp	r3, #0
 800483e:	d015      	beq.n	800486c <USBD_CDC_EP0_RxReady+0x46>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004846:	2bff      	cmp	r3, #255	; 0xff
 8004848:	d010      	beq.n	800486c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004858:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004860:	b292      	uxth	r2, r2
 8004862:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	22ff      	movs	r2, #255	; 0xff
 8004868:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2243      	movs	r2, #67	; 0x43
 8004884:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004886:	4b03      	ldr	r3, [pc, #12]	; (8004894 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	bc80      	pop	{r7}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	200000bc 	.word	0x200000bc

08004898 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2243      	movs	r2, #67	; 0x43
 80048a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80048a6:	4b03      	ldr	r3, [pc, #12]	; (80048b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20000078 	.word	0x20000078

080048b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2243      	movs	r2, #67	; 0x43
 80048c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80048c6:	4b03      	ldr	r3, [pc, #12]	; (80048d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000100 	.word	0x20000100

080048d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	220a      	movs	r2, #10
 80048e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80048e6:	4b03      	ldr	r3, [pc, #12]	; (80048f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000034 	.word	0x20000034

080048f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004902:	2302      	movs	r3, #2
 8004904:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004918:	7bfb      	ldrb	r3, [r7, #15]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr

08004924 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004924:	b480      	push	{r7}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	4613      	mov	r3, r2
 8004930:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004938:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004942:	88fa      	ldrh	r2, [r7, #6]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr

08004956 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004966:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr

0800497c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800498a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d01c      	beq.n	80049d0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800499c:	2b00      	cmp	r3, #0
 800499e:	d115      	bne.n	80049cc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2181      	movs	r1, #129	; 0x81
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f001 fd94 	bl	80064f0 <USBD_LL_Transmit>

      return USBD_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	e002      	b.n	80049d2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80049d0:	2302      	movs	r3, #2
  }
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d017      	beq.n	8004a24 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	7c1b      	ldrb	r3, [r3, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d109      	bne.n	8004a10 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a06:	2101      	movs	r1, #1
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f001 fd94 	bl	8006536 <USBD_LL_PrepareReceive>
 8004a0e:	e007      	b.n	8004a20 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a16:	2340      	movs	r3, #64	; 0x40
 8004a18:	2101      	movs	r1, #1
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f001 fd8b 	bl	8006536 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e000      	b.n	8004a26 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004a24:	2302      	movs	r3, #2
  }
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004a42:	2302      	movs	r3, #2
 8004a44:	e01a      	b.n	8004a7c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	79fa      	ldrb	r2, [r7, #7]
 8004a72:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f001 fc09 	bl	800628c <USBD_LL_Init>

  return USBD_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d006      	beq.n	8004aa6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	73fb      	strb	r3, [r7, #15]
 8004aa4:	e001      	b.n	8004aaa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bc80      	pop	{r7}
 8004ab4:	4770      	bx	lr

08004ab6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f001 fc2e 	bl	8006320 <USBD_LL_Start>

  return USBD_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr

08004ae2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	460b      	mov	r3, r1
 8004aec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004aee:	2302      	movs	r3, #2
 8004af0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00c      	beq.n	8004b16 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	78fa      	ldrb	r2, [r7, #3]
 8004b06:	4611      	mov	r1, r2
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	4798      	blx	r3
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	4611      	mov	r1, r2
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	4798      	blx	r3

  return USBD_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004b56:	6839      	ldr	r1, [r7, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 ff10 	bl	800597e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d016      	beq.n	8004bb0 <USBD_LL_SetupStage+0x6a>
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d81c      	bhi.n	8004bc0 <USBD_LL_SetupStage+0x7a>
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <USBD_LL_SetupStage+0x4a>
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d008      	beq.n	8004ba0 <USBD_LL_SetupStage+0x5a>
 8004b8e:	e017      	b.n	8004bc0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004b96:	4619      	mov	r1, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fa03 	bl	8004fa4 <USBD_StdDevReq>
      break;
 8004b9e:	e01a      	b.n	8004bd6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fa65 	bl	8005078 <USBD_StdItfReq>
      break;
 8004bae:	e012      	b.n	8004bd6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 faa5 	bl	8005108 <USBD_StdEPReq>
      break;
 8004bbe:	e00a      	b.n	8004bd6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004bc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	4619      	mov	r1, r3
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f001 fc06 	bl	80063e0 <USBD_LL_StallEP>
      break;
 8004bd4:	bf00      	nop
  }

  return USBD_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	460b      	mov	r3, r1
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004bee:	7afb      	ldrb	r3, [r7, #11]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d14b      	bne.n	8004c8c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004bfa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d134      	bne.n	8004c70 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d919      	bls.n	8004c46 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	1ad2      	subs	r2, r2, r3
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d203      	bcs.n	8004c34 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	e002      	b.n	8004c3a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 ff8f 	bl	8005b62 <USBD_CtlContinueRx>
 8004c44:	e038      	b.n	8004cb8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d105      	bne.n	8004c68 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 ff8c 	bl	8005b86 <USBD_CtlSendStatus>
 8004c6e:	e023      	b.n	8004cb8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c76:	2b05      	cmp	r3, #5
 8004c78:	d11e      	bne.n	8004cb8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004c82:	2100      	movs	r1, #0
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f001 fbab 	bl	80063e0 <USBD_LL_StallEP>
 8004c8a:	e015      	b.n	8004cb8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00d      	beq.n	8004cb4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d108      	bne.n	8004cb4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	7afa      	ldrb	r2, [r7, #11]
 8004cac:	4611      	mov	r1, r2
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	4798      	blx	r3
 8004cb2:	e001      	b.n	8004cb8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e000      	b.n	8004cba <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b086      	sub	sp, #24
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	607a      	str	r2, [r7, #4]
 8004cce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004cd0:	7afb      	ldrb	r3, [r7, #11]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d17f      	bne.n	8004dd6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3314      	adds	r3, #20
 8004cda:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d15c      	bne.n	8004da0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d915      	bls.n	8004d1e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	1ad2      	subs	r2, r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	461a      	mov	r2, r3
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 fef9 	bl	8005b02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d10:	2300      	movs	r3, #0
 8004d12:	2200      	movs	r2, #0
 8004d14:	2100      	movs	r1, #0
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f001 fc0d 	bl	8006536 <USBD_LL_PrepareReceive>
 8004d1c:	e04e      	b.n	8004dbc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	6912      	ldr	r2, [r2, #16]
 8004d26:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d2a:	fb01 f202 	mul.w	r2, r1, r2
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d11c      	bne.n	8004d6e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d316      	bcc.n	8004d6e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d20f      	bcs.n	8004d6e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2100      	movs	r1, #0
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fed5 	bl	8005b02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d60:	2300      	movs	r3, #0
 8004d62:	2200      	movs	r2, #0
 8004d64:	2100      	movs	r1, #0
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f001 fbe5 	bl	8006536 <USBD_LL_PrepareReceive>
 8004d6c:	e026      	b.n	8004dbc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d105      	bne.n	8004d90 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004d90:	2180      	movs	r1, #128	; 0x80
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f001 fb24 	bl	80063e0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 ff07 	bl	8005bac <USBD_CtlReceiveStatus>
 8004d9e:	e00d      	b.n	8004dbc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d004      	beq.n	8004db4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d103      	bne.n	8004dbc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004db4:	2180      	movs	r1, #128	; 0x80
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f001 fb12 	bl	80063e0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d11d      	bne.n	8004e02 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7ff fe81 	bl	8004ace <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004dd4:	e015      	b.n	8004e02 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00d      	beq.n	8004dfe <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d108      	bne.n	8004dfe <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	7afa      	ldrb	r2, [r7, #11]
 8004df6:	4611      	mov	r1, r2
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	4798      	blx	r3
 8004dfc:	e001      	b.n	8004e02 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e000      	b.n	8004e04 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e14:	2340      	movs	r3, #64	; 0x40
 8004e16:	2200      	movs	r2, #0
 8004e18:	2100      	movs	r1, #0
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f001 fa9b 	bl	8006356 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2240      	movs	r2, #64	; 0x40
 8004e2c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e30:	2340      	movs	r3, #64	; 0x40
 8004e32:	2200      	movs	r2, #0
 8004e34:	2180      	movs	r1, #128	; 0x80
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f001 fa8d 	bl	8006356 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2240      	movs	r2, #64	; 0x40
 8004e46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d009      	beq.n	8004e84 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6852      	ldr	r2, [r2, #4]
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	4611      	mov	r1, r2
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	4798      	blx	r3
  }

  return USBD_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	460b      	mov	r3, r1
 8004e98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	78fa      	ldrb	r2, [r7, #3]
 8004e9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr

08004eac <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2204      	movs	r2, #4
 8004ec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr

08004ed4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d105      	bne.n	8004ef2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr

08004efe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d10b      	bne.n	8004f28 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr

08004f4a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	460b      	mov	r3, r1
 8004f54:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr

08004f62 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr

08004f76 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6852      	ldr	r2, [r2, #4]
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	4611      	mov	r1, r2
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	4798      	blx	r3

  return USBD_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fba:	2b40      	cmp	r3, #64	; 0x40
 8004fbc:	d005      	beq.n	8004fca <USBD_StdDevReq+0x26>
 8004fbe:	2b40      	cmp	r3, #64	; 0x40
 8004fc0:	d84f      	bhi.n	8005062 <USBD_StdDevReq+0xbe>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d009      	beq.n	8004fda <USBD_StdDevReq+0x36>
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d14b      	bne.n	8005062 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	6839      	ldr	r1, [r7, #0]
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	4798      	blx	r3
      break;
 8004fd8:	e048      	b.n	800506c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	785b      	ldrb	r3, [r3, #1]
 8004fde:	2b09      	cmp	r3, #9
 8004fe0:	d839      	bhi.n	8005056 <USBD_StdDevReq+0xb2>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <USBD_StdDevReq+0x44>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	08005039 	.word	0x08005039
 8004fec:	0800504d 	.word	0x0800504d
 8004ff0:	08005057 	.word	0x08005057
 8004ff4:	08005043 	.word	0x08005043
 8004ff8:	08005057 	.word	0x08005057
 8004ffc:	0800501b 	.word	0x0800501b
 8005000:	08005011 	.word	0x08005011
 8005004:	08005057 	.word	0x08005057
 8005008:	0800502f 	.word	0x0800502f
 800500c:	08005025 	.word	0x08005025
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005010:	6839      	ldr	r1, [r7, #0]
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f9dc 	bl	80053d0 <USBD_GetDescriptor>
          break;
 8005018:	e022      	b.n	8005060 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800501a:	6839      	ldr	r1, [r7, #0]
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fb3f 	bl	80056a0 <USBD_SetAddress>
          break;
 8005022:	e01d      	b.n	8005060 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005024:	6839      	ldr	r1, [r7, #0]
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fb7e 	bl	8005728 <USBD_SetConfig>
          break;
 800502c:	e018      	b.n	8005060 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800502e:	6839      	ldr	r1, [r7, #0]
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fc07 	bl	8005844 <USBD_GetConfig>
          break;
 8005036:	e013      	b.n	8005060 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005038:	6839      	ldr	r1, [r7, #0]
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fc37 	bl	80058ae <USBD_GetStatus>
          break;
 8005040:	e00e      	b.n	8005060 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005042:	6839      	ldr	r1, [r7, #0]
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 fc65 	bl	8005914 <USBD_SetFeature>
          break;
 800504a:	e009      	b.n	8005060 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800504c:	6839      	ldr	r1, [r7, #0]
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fc74 	bl	800593c <USBD_ClrFeature>
          break;
 8005054:	e004      	b.n	8005060 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005056:	6839      	ldr	r1, [r7, #0]
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fccc 	bl	80059f6 <USBD_CtlError>
          break;
 800505e:	bf00      	nop
      }
      break;
 8005060:	e004      	b.n	800506c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005062:	6839      	ldr	r1, [r7, #0]
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fcc6 	bl	80059f6 <USBD_CtlError>
      break;
 800506a:	bf00      	nop
  }

  return ret;
 800506c:	7bfb      	ldrb	r3, [r7, #15]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop

08005078 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800508e:	2b40      	cmp	r3, #64	; 0x40
 8005090:	d005      	beq.n	800509e <USBD_StdItfReq+0x26>
 8005092:	2b40      	cmp	r3, #64	; 0x40
 8005094:	d82e      	bhi.n	80050f4 <USBD_StdItfReq+0x7c>
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <USBD_StdItfReq+0x26>
 800509a:	2b20      	cmp	r3, #32
 800509c:	d12a      	bne.n	80050f4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050a4:	3b01      	subs	r3, #1
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d81d      	bhi.n	80050e6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	889b      	ldrh	r3, [r3, #4]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d813      	bhi.n	80050dc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	6839      	ldr	r1, [r7, #0]
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	4798      	blx	r3
 80050c2:	4603      	mov	r3, r0
 80050c4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	88db      	ldrh	r3, [r3, #6]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d110      	bne.n	80050f0 <USBD_StdItfReq+0x78>
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10d      	bne.n	80050f0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 fd56 	bl	8005b86 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80050da:	e009      	b.n	80050f0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80050dc:	6839      	ldr	r1, [r7, #0]
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fc89 	bl	80059f6 <USBD_CtlError>
          break;
 80050e4:	e004      	b.n	80050f0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80050e6:	6839      	ldr	r1, [r7, #0]
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fc84 	bl	80059f6 <USBD_CtlError>
          break;
 80050ee:	e000      	b.n	80050f2 <USBD_StdItfReq+0x7a>
          break;
 80050f0:	bf00      	nop
      }
      break;
 80050f2:	e004      	b.n	80050fe <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80050f4:	6839      	ldr	r1, [r7, #0]
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fc7d 	bl	80059f6 <USBD_CtlError>
      break;
 80050fc:	bf00      	nop
  }

  return USBD_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	889b      	ldrh	r3, [r3, #4]
 800511a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	d007      	beq.n	8005138 <USBD_StdEPReq+0x30>
 8005128:	2b40      	cmp	r3, #64	; 0x40
 800512a:	f200 8146 	bhi.w	80053ba <USBD_StdEPReq+0x2b2>
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <USBD_StdEPReq+0x40>
 8005132:	2b20      	cmp	r3, #32
 8005134:	f040 8141 	bne.w	80053ba <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4798      	blx	r3
      break;
 8005146:	e13d      	b.n	80053c4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005150:	2b20      	cmp	r3, #32
 8005152:	d10a      	bne.n	800516a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	6839      	ldr	r1, [r7, #0]
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	4798      	blx	r3
 8005162:	4603      	mov	r3, r0
 8005164:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	e12d      	b.n	80053c6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	785b      	ldrb	r3, [r3, #1]
 800516e:	2b03      	cmp	r3, #3
 8005170:	d007      	beq.n	8005182 <USBD_StdEPReq+0x7a>
 8005172:	2b03      	cmp	r3, #3
 8005174:	f300 811b 	bgt.w	80053ae <USBD_StdEPReq+0x2a6>
 8005178:	2b00      	cmp	r3, #0
 800517a:	d072      	beq.n	8005262 <USBD_StdEPReq+0x15a>
 800517c:	2b01      	cmp	r3, #1
 800517e:	d03a      	beq.n	80051f6 <USBD_StdEPReq+0xee>
 8005180:	e115      	b.n	80053ae <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005188:	2b02      	cmp	r3, #2
 800518a:	d002      	beq.n	8005192 <USBD_StdEPReq+0x8a>
 800518c:	2b03      	cmp	r3, #3
 800518e:	d015      	beq.n	80051bc <USBD_StdEPReq+0xb4>
 8005190:	e02b      	b.n	80051ea <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005192:	7bbb      	ldrb	r3, [r7, #14]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00c      	beq.n	80051b2 <USBD_StdEPReq+0xaa>
 8005198:	7bbb      	ldrb	r3, [r7, #14]
 800519a:	2b80      	cmp	r3, #128	; 0x80
 800519c:	d009      	beq.n	80051b2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800519e:	7bbb      	ldrb	r3, [r7, #14]
 80051a0:	4619      	mov	r1, r3
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f001 f91c 	bl	80063e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80051a8:	2180      	movs	r1, #128	; 0x80
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f001 f918 	bl	80063e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80051b0:	e020      	b.n	80051f4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80051b2:	6839      	ldr	r1, [r7, #0]
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fc1e 	bl	80059f6 <USBD_CtlError>
              break;
 80051ba:	e01b      	b.n	80051f4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	885b      	ldrh	r3, [r3, #2]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10e      	bne.n	80051e2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80051c4:	7bbb      	ldrb	r3, [r7, #14]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <USBD_StdEPReq+0xda>
 80051ca:	7bbb      	ldrb	r3, [r7, #14]
 80051cc:	2b80      	cmp	r3, #128	; 0x80
 80051ce:	d008      	beq.n	80051e2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	88db      	ldrh	r3, [r3, #6]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d104      	bne.n	80051e2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80051d8:	7bbb      	ldrb	r3, [r7, #14]
 80051da:	4619      	mov	r1, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f001 f8ff 	bl	80063e0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fccf 	bl	8005b86 <USBD_CtlSendStatus>

              break;
 80051e8:	e004      	b.n	80051f4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80051ea:	6839      	ldr	r1, [r7, #0]
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fc02 	bl	80059f6 <USBD_CtlError>
              break;
 80051f2:	bf00      	nop
          }
          break;
 80051f4:	e0e0      	b.n	80053b8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d002      	beq.n	8005206 <USBD_StdEPReq+0xfe>
 8005200:	2b03      	cmp	r3, #3
 8005202:	d015      	beq.n	8005230 <USBD_StdEPReq+0x128>
 8005204:	e026      	b.n	8005254 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005206:	7bbb      	ldrb	r3, [r7, #14]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00c      	beq.n	8005226 <USBD_StdEPReq+0x11e>
 800520c:	7bbb      	ldrb	r3, [r7, #14]
 800520e:	2b80      	cmp	r3, #128	; 0x80
 8005210:	d009      	beq.n	8005226 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005212:	7bbb      	ldrb	r3, [r7, #14]
 8005214:	4619      	mov	r1, r3
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f001 f8e2 	bl	80063e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800521c:	2180      	movs	r1, #128	; 0x80
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f001 f8de 	bl	80063e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005224:	e01c      	b.n	8005260 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005226:	6839      	ldr	r1, [r7, #0]
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fbe4 	bl	80059f6 <USBD_CtlError>
              break;
 800522e:	e017      	b.n	8005260 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	885b      	ldrh	r3, [r3, #2]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d112      	bne.n	800525e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005238:	7bbb      	ldrb	r3, [r7, #14]
 800523a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800523e:	2b00      	cmp	r3, #0
 8005240:	d004      	beq.n	800524c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005242:	7bbb      	ldrb	r3, [r7, #14]
 8005244:	4619      	mov	r1, r3
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f001 f8e9 	bl	800641e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fc9a 	bl	8005b86 <USBD_CtlSendStatus>
              }
              break;
 8005252:	e004      	b.n	800525e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fbcd 	bl	80059f6 <USBD_CtlError>
              break;
 800525c:	e000      	b.n	8005260 <USBD_StdEPReq+0x158>
              break;
 800525e:	bf00      	nop
          }
          break;
 8005260:	e0aa      	b.n	80053b8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005268:	2b02      	cmp	r3, #2
 800526a:	d002      	beq.n	8005272 <USBD_StdEPReq+0x16a>
 800526c:	2b03      	cmp	r3, #3
 800526e:	d032      	beq.n	80052d6 <USBD_StdEPReq+0x1ce>
 8005270:	e097      	b.n	80053a2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005272:	7bbb      	ldrb	r3, [r7, #14]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <USBD_StdEPReq+0x180>
 8005278:	7bbb      	ldrb	r3, [r7, #14]
 800527a:	2b80      	cmp	r3, #128	; 0x80
 800527c:	d004      	beq.n	8005288 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800527e:	6839      	ldr	r1, [r7, #0]
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fbb8 	bl	80059f6 <USBD_CtlError>
                break;
 8005286:	e091      	b.n	80053ac <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005288:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800528c:	2b00      	cmp	r3, #0
 800528e:	da0b      	bge.n	80052a8 <USBD_StdEPReq+0x1a0>
 8005290:	7bbb      	ldrb	r3, [r7, #14]
 8005292:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005296:	4613      	mov	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	3310      	adds	r3, #16
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	4413      	add	r3, r2
 80052a4:	3304      	adds	r3, #4
 80052a6:	e00b      	b.n	80052c0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80052a8:	7bbb      	ldrb	r3, [r7, #14]
 80052aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	4413      	add	r3, r2
 80052be:	3304      	adds	r3, #4
 80052c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2202      	movs	r2, #2
 80052cc:	4619      	mov	r1, r3
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fbfb 	bl	8005aca <USBD_CtlSendData>
              break;
 80052d4:	e06a      	b.n	80053ac <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80052d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	da11      	bge.n	8005302 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80052de:	7bbb      	ldrb	r3, [r7, #14]
 80052e0:	f003 020f 	and.w	r2, r3, #15
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	3318      	adds	r3, #24
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d117      	bne.n	8005328 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80052f8:	6839      	ldr	r1, [r7, #0]
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fb7b 	bl	80059f6 <USBD_CtlError>
                  break;
 8005300:	e054      	b.n	80053ac <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005302:	7bbb      	ldrb	r3, [r7, #14]
 8005304:	f003 020f 	and.w	r2, r3, #15
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d104      	bne.n	8005328 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800531e:	6839      	ldr	r1, [r7, #0]
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fb68 	bl	80059f6 <USBD_CtlError>
                  break;
 8005326:	e041      	b.n	80053ac <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800532c:	2b00      	cmp	r3, #0
 800532e:	da0b      	bge.n	8005348 <USBD_StdEPReq+0x240>
 8005330:	7bbb      	ldrb	r3, [r7, #14]
 8005332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	3310      	adds	r3, #16
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	4413      	add	r3, r2
 8005344:	3304      	adds	r3, #4
 8005346:	e00b      	b.n	8005360 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005348:	7bbb      	ldrb	r3, [r7, #14]
 800534a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	3304      	adds	r3, #4
 8005360:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005362:	7bbb      	ldrb	r3, [r7, #14]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <USBD_StdEPReq+0x266>
 8005368:	7bbb      	ldrb	r3, [r7, #14]
 800536a:	2b80      	cmp	r3, #128	; 0x80
 800536c:	d103      	bne.n	8005376 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	e00e      	b.n	8005394 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005376:	7bbb      	ldrb	r3, [r7, #14]
 8005378:	4619      	mov	r1, r3
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f001 f86e 	bl	800645c <USBD_LL_IsStallEP>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2201      	movs	r2, #1
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e002      	b.n	8005394 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2202      	movs	r2, #2
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fb95 	bl	8005aca <USBD_CtlSendData>
              break;
 80053a0:	e004      	b.n	80053ac <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80053a2:	6839      	ldr	r1, [r7, #0]
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fb26 	bl	80059f6 <USBD_CtlError>
              break;
 80053aa:	bf00      	nop
          }
          break;
 80053ac:	e004      	b.n	80053b8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80053ae:	6839      	ldr	r1, [r7, #0]
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fb20 	bl	80059f6 <USBD_CtlError>
          break;
 80053b6:	bf00      	nop
      }
      break;
 80053b8:	e004      	b.n	80053c4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80053ba:	6839      	ldr	r1, [r7, #0]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fb1a 	bl	80059f6 <USBD_CtlError>
      break;
 80053c2:	bf00      	nop
  }

  return ret;
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	885b      	ldrh	r3, [r3, #2]
 80053ea:	0a1b      	lsrs	r3, r3, #8
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	2b06      	cmp	r3, #6
 80053f2:	f200 8128 	bhi.w	8005646 <USBD_GetDescriptor+0x276>
 80053f6:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <USBD_GetDescriptor+0x2c>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	08005419 	.word	0x08005419
 8005400:	08005431 	.word	0x08005431
 8005404:	08005471 	.word	0x08005471
 8005408:	08005647 	.word	0x08005647
 800540c:	08005647 	.word	0x08005647
 8005410:	080055e7 	.word	0x080055e7
 8005414:	08005613 	.word	0x08005613
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	7c12      	ldrb	r2, [r2, #16]
 8005424:	f107 0108 	add.w	r1, r7, #8
 8005428:	4610      	mov	r0, r2
 800542a:	4798      	blx	r3
 800542c:	60f8      	str	r0, [r7, #12]
      break;
 800542e:	e112      	b.n	8005656 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	7c1b      	ldrb	r3, [r3, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10d      	bne.n	8005454 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	f107 0208 	add.w	r2, r7, #8
 8005444:	4610      	mov	r0, r2
 8005446:	4798      	blx	r3
 8005448:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3301      	adds	r3, #1
 800544e:	2202      	movs	r2, #2
 8005450:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005452:	e100      	b.n	8005656 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	f107 0208 	add.w	r2, r7, #8
 8005460:	4610      	mov	r0, r2
 8005462:	4798      	blx	r3
 8005464:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	3301      	adds	r3, #1
 800546a:	2202      	movs	r2, #2
 800546c:	701a      	strb	r2, [r3, #0]
      break;
 800546e:	e0f2      	b.n	8005656 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	885b      	ldrh	r3, [r3, #2]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b05      	cmp	r3, #5
 8005478:	f200 80ac 	bhi.w	80055d4 <USBD_GetDescriptor+0x204>
 800547c:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <USBD_GetDescriptor+0xb4>)
 800547e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005482:	bf00      	nop
 8005484:	0800549d 	.word	0x0800549d
 8005488:	080054d1 	.word	0x080054d1
 800548c:	08005505 	.word	0x08005505
 8005490:	08005539 	.word	0x08005539
 8005494:	0800556d 	.word	0x0800556d
 8005498:	080055a1 	.word	0x080055a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00b      	beq.n	80054c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	7c12      	ldrb	r2, [r2, #16]
 80054b4:	f107 0108 	add.w	r1, r7, #8
 80054b8:	4610      	mov	r0, r2
 80054ba:	4798      	blx	r3
 80054bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054be:	e091      	b.n	80055e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054c0:	6839      	ldr	r1, [r7, #0]
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fa97 	bl	80059f6 <USBD_CtlError>
            err++;
 80054c8:	7afb      	ldrb	r3, [r7, #11]
 80054ca:	3301      	adds	r3, #1
 80054cc:	72fb      	strb	r3, [r7, #11]
          break;
 80054ce:	e089      	b.n	80055e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00b      	beq.n	80054f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	7c12      	ldrb	r2, [r2, #16]
 80054e8:	f107 0108 	add.w	r1, r7, #8
 80054ec:	4610      	mov	r0, r2
 80054ee:	4798      	blx	r3
 80054f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054f2:	e077      	b.n	80055e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fa7d 	bl	80059f6 <USBD_CtlError>
            err++;
 80054fc:	7afb      	ldrb	r3, [r7, #11]
 80054fe:	3301      	adds	r3, #1
 8005500:	72fb      	strb	r3, [r7, #11]
          break;
 8005502:	e06f      	b.n	80055e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00b      	beq.n	8005528 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	7c12      	ldrb	r2, [r2, #16]
 800551c:	f107 0108 	add.w	r1, r7, #8
 8005520:	4610      	mov	r0, r2
 8005522:	4798      	blx	r3
 8005524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005526:	e05d      	b.n	80055e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005528:	6839      	ldr	r1, [r7, #0]
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fa63 	bl	80059f6 <USBD_CtlError>
            err++;
 8005530:	7afb      	ldrb	r3, [r7, #11]
 8005532:	3301      	adds	r3, #1
 8005534:	72fb      	strb	r3, [r7, #11]
          break;
 8005536:	e055      	b.n	80055e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00b      	beq.n	800555c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	7c12      	ldrb	r2, [r2, #16]
 8005550:	f107 0108 	add.w	r1, r7, #8
 8005554:	4610      	mov	r0, r2
 8005556:	4798      	blx	r3
 8005558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800555a:	e043      	b.n	80055e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800555c:	6839      	ldr	r1, [r7, #0]
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fa49 	bl	80059f6 <USBD_CtlError>
            err++;
 8005564:	7afb      	ldrb	r3, [r7, #11]
 8005566:	3301      	adds	r3, #1
 8005568:	72fb      	strb	r3, [r7, #11]
          break;
 800556a:	e03b      	b.n	80055e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00b      	beq.n	8005590 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	7c12      	ldrb	r2, [r2, #16]
 8005584:	f107 0108 	add.w	r1, r7, #8
 8005588:	4610      	mov	r0, r2
 800558a:	4798      	blx	r3
 800558c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800558e:	e029      	b.n	80055e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005590:	6839      	ldr	r1, [r7, #0]
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fa2f 	bl	80059f6 <USBD_CtlError>
            err++;
 8005598:	7afb      	ldrb	r3, [r7, #11]
 800559a:	3301      	adds	r3, #1
 800559c:	72fb      	strb	r3, [r7, #11]
          break;
 800559e:	e021      	b.n	80055e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00b      	beq.n	80055c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	7c12      	ldrb	r2, [r2, #16]
 80055b8:	f107 0108 	add.w	r1, r7, #8
 80055bc:	4610      	mov	r0, r2
 80055be:	4798      	blx	r3
 80055c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055c2:	e00f      	b.n	80055e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055c4:	6839      	ldr	r1, [r7, #0]
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fa15 	bl	80059f6 <USBD_CtlError>
            err++;
 80055cc:	7afb      	ldrb	r3, [r7, #11]
 80055ce:	3301      	adds	r3, #1
 80055d0:	72fb      	strb	r3, [r7, #11]
          break;
 80055d2:	e007      	b.n	80055e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80055d4:	6839      	ldr	r1, [r7, #0]
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa0d 	bl	80059f6 <USBD_CtlError>
          err++;
 80055dc:	7afb      	ldrb	r3, [r7, #11]
 80055de:	3301      	adds	r3, #1
 80055e0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80055e2:	e038      	b.n	8005656 <USBD_GetDescriptor+0x286>
 80055e4:	e037      	b.n	8005656 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	7c1b      	ldrb	r3, [r3, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d109      	bne.n	8005602 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f6:	f107 0208 	add.w	r2, r7, #8
 80055fa:	4610      	mov	r0, r2
 80055fc:	4798      	blx	r3
 80055fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005600:	e029      	b.n	8005656 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005602:	6839      	ldr	r1, [r7, #0]
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f9f6 	bl	80059f6 <USBD_CtlError>
        err++;
 800560a:	7afb      	ldrb	r3, [r7, #11]
 800560c:	3301      	adds	r3, #1
 800560e:	72fb      	strb	r3, [r7, #11]
      break;
 8005610:	e021      	b.n	8005656 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	7c1b      	ldrb	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10d      	bne.n	8005636 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005622:	f107 0208 	add.w	r2, r7, #8
 8005626:	4610      	mov	r0, r2
 8005628:	4798      	blx	r3
 800562a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	3301      	adds	r3, #1
 8005630:	2207      	movs	r2, #7
 8005632:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005634:	e00f      	b.n	8005656 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005636:	6839      	ldr	r1, [r7, #0]
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f9dc 	bl	80059f6 <USBD_CtlError>
        err++;
 800563e:	7afb      	ldrb	r3, [r7, #11]
 8005640:	3301      	adds	r3, #1
 8005642:	72fb      	strb	r3, [r7, #11]
      break;
 8005644:	e007      	b.n	8005656 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005646:	6839      	ldr	r1, [r7, #0]
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f9d4 	bl	80059f6 <USBD_CtlError>
      err++;
 800564e:	7afb      	ldrb	r3, [r7, #11]
 8005650:	3301      	adds	r3, #1
 8005652:	72fb      	strb	r3, [r7, #11]
      break;
 8005654:	bf00      	nop
  }

  if (err != 0U)
 8005656:	7afb      	ldrb	r3, [r7, #11]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d11c      	bne.n	8005696 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800565c:	893b      	ldrh	r3, [r7, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d011      	beq.n	8005686 <USBD_GetDescriptor+0x2b6>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	88db      	ldrh	r3, [r3, #6]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00d      	beq.n	8005686 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	88da      	ldrh	r2, [r3, #6]
 800566e:	893b      	ldrh	r3, [r7, #8]
 8005670:	4293      	cmp	r3, r2
 8005672:	bf28      	it	cs
 8005674:	4613      	movcs	r3, r2
 8005676:	b29b      	uxth	r3, r3
 8005678:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800567a:	893b      	ldrh	r3, [r7, #8]
 800567c:	461a      	mov	r2, r3
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fa22 	bl	8005aca <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	88db      	ldrh	r3, [r3, #6]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d104      	bne.n	8005698 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fa79 	bl	8005b86 <USBD_CtlSendStatus>
 8005694:	e000      	b.n	8005698 <USBD_GetDescriptor+0x2c8>
    return;
 8005696:	bf00      	nop
    }
  }
}
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop

080056a0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	889b      	ldrh	r3, [r3, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d130      	bne.n	8005714 <USBD_SetAddress+0x74>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	88db      	ldrh	r3, [r3, #6]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d12c      	bne.n	8005714 <USBD_SetAddress+0x74>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	885b      	ldrh	r3, [r3, #2]
 80056be:	2b7f      	cmp	r3, #127	; 0x7f
 80056c0:	d828      	bhi.n	8005714 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	885b      	ldrh	r3, [r3, #2]
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d104      	bne.n	80056e2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f98b 	bl	80059f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056e0:	e01d      	b.n	800571e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	7bfa      	ldrb	r2, [r7, #15]
 80056e6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fedf 	bl	80064b2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fa46 	bl	8005b86 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d004      	beq.n	800570a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005708:	e009      	b.n	800571e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005712:	e004      	b.n	800571e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005714:	6839      	ldr	r1, [r7, #0]
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f96d 	bl	80059f6 <USBD_CtlError>
  }
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	885b      	ldrh	r3, [r3, #2]
 8005736:	b2da      	uxtb	r2, r3
 8005738:	4b41      	ldr	r3, [pc, #260]	; (8005840 <USBD_SetConfig+0x118>)
 800573a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800573c:	4b40      	ldr	r3, [pc, #256]	; (8005840 <USBD_SetConfig+0x118>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d904      	bls.n	800574e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f955 	bl	80059f6 <USBD_CtlError>
 800574c:	e075      	b.n	800583a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005754:	2b02      	cmp	r3, #2
 8005756:	d002      	beq.n	800575e <USBD_SetConfig+0x36>
 8005758:	2b03      	cmp	r3, #3
 800575a:	d023      	beq.n	80057a4 <USBD_SetConfig+0x7c>
 800575c:	e062      	b.n	8005824 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800575e:	4b38      	ldr	r3, [pc, #224]	; (8005840 <USBD_SetConfig+0x118>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d01a      	beq.n	800579c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005766:	4b36      	ldr	r3, [pc, #216]	; (8005840 <USBD_SetConfig+0x118>)
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2203      	movs	r2, #3
 8005774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005778:	4b31      	ldr	r3, [pc, #196]	; (8005840 <USBD_SetConfig+0x118>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	4619      	mov	r1, r3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff f9af 	bl	8004ae2 <USBD_SetClassConfig>
 8005784:	4603      	mov	r3, r0
 8005786:	2b02      	cmp	r3, #2
 8005788:	d104      	bne.n	8005794 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800578a:	6839      	ldr	r1, [r7, #0]
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f932 	bl	80059f6 <USBD_CtlError>
            return;
 8005792:	e052      	b.n	800583a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f9f6 	bl	8005b86 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800579a:	e04e      	b.n	800583a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f9f2 	bl	8005b86 <USBD_CtlSendStatus>
        break;
 80057a2:	e04a      	b.n	800583a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80057a4:	4b26      	ldr	r3, [pc, #152]	; (8005840 <USBD_SetConfig+0x118>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d112      	bne.n	80057d2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80057b4:	4b22      	ldr	r3, [pc, #136]	; (8005840 <USBD_SetConfig+0x118>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80057be:	4b20      	ldr	r3, [pc, #128]	; (8005840 <USBD_SetConfig+0x118>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff f9ab 	bl	8004b20 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f9db 	bl	8005b86 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80057d0:	e033      	b.n	800583a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80057d2:	4b1b      	ldr	r3, [pc, #108]	; (8005840 <USBD_SetConfig+0x118>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d01d      	beq.n	800581c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	4619      	mov	r1, r3
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff f999 	bl	8004b20 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80057ee:	4b14      	ldr	r3, [pc, #80]	; (8005840 <USBD_SetConfig+0x118>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80057f8:	4b11      	ldr	r3, [pc, #68]	; (8005840 <USBD_SetConfig+0x118>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	4619      	mov	r1, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff f96f 	bl	8004ae2 <USBD_SetClassConfig>
 8005804:	4603      	mov	r3, r0
 8005806:	2b02      	cmp	r3, #2
 8005808:	d104      	bne.n	8005814 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f8f2 	bl	80059f6 <USBD_CtlError>
            return;
 8005812:	e012      	b.n	800583a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f9b6 	bl	8005b86 <USBD_CtlSendStatus>
        break;
 800581a:	e00e      	b.n	800583a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f9b2 	bl	8005b86 <USBD_CtlSendStatus>
        break;
 8005822:	e00a      	b.n	800583a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f8e5 	bl	80059f6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800582c:	4b04      	ldr	r3, [pc, #16]	; (8005840 <USBD_SetConfig+0x118>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	4619      	mov	r1, r3
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff f974 	bl	8004b20 <USBD_ClrClassConfig>
        break;
 8005838:	bf00      	nop
    }
  }
}
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	20001680 	.word	0x20001680

08005844 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	88db      	ldrh	r3, [r3, #6]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d004      	beq.n	8005860 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005856:	6839      	ldr	r1, [r7, #0]
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f8cc 	bl	80059f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800585e:	e022      	b.n	80058a6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005866:	2b02      	cmp	r3, #2
 8005868:	dc02      	bgt.n	8005870 <USBD_GetConfig+0x2c>
 800586a:	2b00      	cmp	r3, #0
 800586c:	dc03      	bgt.n	8005876 <USBD_GetConfig+0x32>
 800586e:	e015      	b.n	800589c <USBD_GetConfig+0x58>
 8005870:	2b03      	cmp	r3, #3
 8005872:	d00b      	beq.n	800588c <USBD_GetConfig+0x48>
 8005874:	e012      	b.n	800589c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3308      	adds	r3, #8
 8005880:	2201      	movs	r2, #1
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f920 	bl	8005aca <USBD_CtlSendData>
        break;
 800588a:	e00c      	b.n	80058a6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3304      	adds	r3, #4
 8005890:	2201      	movs	r2, #1
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f918 	bl	8005aca <USBD_CtlSendData>
        break;
 800589a:	e004      	b.n	80058a6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800589c:	6839      	ldr	r1, [r7, #0]
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f8a9 	bl	80059f6 <USBD_CtlError>
        break;
 80058a4:	bf00      	nop
}
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058be:	3b01      	subs	r3, #1
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d81e      	bhi.n	8005902 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	88db      	ldrh	r3, [r3, #6]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d004      	beq.n	80058d6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80058cc:	6839      	ldr	r1, [r7, #0]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f891 	bl	80059f6 <USBD_CtlError>
        break;
 80058d4:	e01a      	b.n	800590c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f043 0202 	orr.w	r2, r3, #2
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	330c      	adds	r3, #12
 80058f6:	2202      	movs	r2, #2
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f8e5 	bl	8005aca <USBD_CtlSendData>
      break;
 8005900:	e004      	b.n	800590c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005902:	6839      	ldr	r1, [r7, #0]
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f876 	bl	80059f6 <USBD_CtlError>
      break;
 800590a:	bf00      	nop
  }
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	885b      	ldrh	r3, [r3, #2]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d106      	bne.n	8005934 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f929 	bl	8005b86 <USBD_CtlSendStatus>
  }
}
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800594c:	3b01      	subs	r3, #1
 800594e:	2b02      	cmp	r3, #2
 8005950:	d80b      	bhi.n	800596a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	885b      	ldrh	r3, [r3, #2]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d10c      	bne.n	8005974 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f90f 	bl	8005b86 <USBD_CtlSendStatus>
      }
      break;
 8005968:	e004      	b.n	8005974 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800596a:	6839      	ldr	r1, [r7, #0]
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f842 	bl	80059f6 <USBD_CtlError>
      break;
 8005972:	e000      	b.n	8005976 <USBD_ClrFeature+0x3a>
      break;
 8005974:	bf00      	nop
  }
}
 8005976:	bf00      	nop
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	781a      	ldrb	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	785a      	ldrb	r2, [r3, #1]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	3302      	adds	r3, #2
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	b29a      	uxth	r2, r3
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	3303      	adds	r3, #3
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	021b      	lsls	r3, r3, #8
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	4413      	add	r3, r2
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	3304      	adds	r3, #4
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	3305      	adds	r3, #5
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	021b      	lsls	r3, r3, #8
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	4413      	add	r3, r2
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	3306      	adds	r3, #6
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	3307      	adds	r3, #7
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	4413      	add	r3, r2
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	80da      	strh	r2, [r3, #6]

}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bc80      	pop	{r7}
 80059f4:	4770      	bx	lr

080059f6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b082      	sub	sp, #8
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005a00:	2180      	movs	r1, #128	; 0x80
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fcec 	bl	80063e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005a08:	2100      	movs	r1, #0
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fce8 	bl	80063e0 <USBD_LL_StallEP>
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d032      	beq.n	8005a94 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f834 	bl	8005a9c <USBD_GetLen>
 8005a34:	4603      	mov	r3, r0
 8005a36:	3301      	adds	r3, #1
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	75fa      	strb	r2, [r7, #23]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	7812      	ldrb	r2, [r2, #0]
 8005a52:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	75fa      	strb	r2, [r7, #23]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4413      	add	r3, r2
 8005a60:	2203      	movs	r2, #3
 8005a62:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005a64:	e012      	b.n	8005a8c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	60fa      	str	r2, [r7, #12]
 8005a6c:	7dfa      	ldrb	r2, [r7, #23]
 8005a6e:	1c51      	adds	r1, r2, #1
 8005a70:	75f9      	strb	r1, [r7, #23]
 8005a72:	4611      	mov	r1, r2
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	440a      	add	r2, r1
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005a7c:	7dfb      	ldrb	r3, [r7, #23]
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	75fa      	strb	r2, [r7, #23]
 8005a82:	461a      	mov	r2, r3
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4413      	add	r3, r2
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e8      	bne.n	8005a66 <USBD_GetString+0x4e>
    }
  }
}
 8005a94:	bf00      	nop
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005aa8:	e005      	b.n	8005ab6 <USBD_GetLen+0x1a>
  {
    len++;
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
 8005aac:	3301      	adds	r3, #1
 8005aae:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f5      	bne.n	8005aaa <USBD_GetLen+0xe>
  }

  return len;
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr

08005aca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	60f8      	str	r0, [r7, #12]
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005ae0:	88fa      	ldrh	r2, [r7, #6]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005ae6:	88fa      	ldrh	r2, [r7, #6]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	2100      	movs	r1, #0
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 fcfc 	bl	80064f0 <USBD_LL_Transmit>

  return USBD_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b10:	88fb      	ldrh	r3, [r7, #6]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	2100      	movs	r1, #0
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fcea 	bl	80064f0 <USBD_LL_Transmit>

  return USBD_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b084      	sub	sp, #16
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	4613      	mov	r3, r2
 8005b32:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2203      	movs	r2, #3
 8005b38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005b3c:	88fa      	ldrh	r2, [r7, #6]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005b44:	88fa      	ldrh	r2, [r7, #6]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b4c:	88fb      	ldrh	r3, [r7, #6]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	2100      	movs	r1, #0
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 fcef 	bl	8006536 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b70:	88fb      	ldrh	r3, [r7, #6]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	2100      	movs	r1, #0
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 fcdd 	bl	8006536 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b082      	sub	sp, #8
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2204      	movs	r2, #4
 8005b92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005b96:	2300      	movs	r3, #0
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fca7 	bl	80064f0 <USBD_LL_Transmit>

  return USBD_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2205      	movs	r2, #5
 8005bb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fcb7 	bl	8006536 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	4912      	ldr	r1, [pc, #72]	; (8005c24 <MX_USB_DEVICE_Init+0x50>)
 8005bdc:	4812      	ldr	r0, [pc, #72]	; (8005c28 <MX_USB_DEVICE_Init+0x54>)
 8005bde:	f7fe ff26 	bl	8004a2e <USBD_Init>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005be8:	f7fa fe90 	bl	800090c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005bec:	490f      	ldr	r1, [pc, #60]	; (8005c2c <MX_USB_DEVICE_Init+0x58>)
 8005bee:	480e      	ldr	r0, [pc, #56]	; (8005c28 <MX_USB_DEVICE_Init+0x54>)
 8005bf0:	f7fe ff48 	bl	8004a84 <USBD_RegisterClass>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005bfa:	f7fa fe87 	bl	800090c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005bfe:	490c      	ldr	r1, [pc, #48]	; (8005c30 <MX_USB_DEVICE_Init+0x5c>)
 8005c00:	4809      	ldr	r0, [pc, #36]	; (8005c28 <MX_USB_DEVICE_Init+0x54>)
 8005c02:	f7fe fe79 	bl	80048f8 <USBD_CDC_RegisterInterface>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005c0c:	f7fa fe7e 	bl	800090c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005c10:	4805      	ldr	r0, [pc, #20]	; (8005c28 <MX_USB_DEVICE_Init+0x54>)
 8005c12:	f7fe ff50 	bl	8004ab6 <USBD_Start>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005c1c:	f7fa fe76 	bl	800090c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005c20:	bf00      	nop
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20000154 	.word	0x20000154
 8005c28:	20001684 	.word	0x20001684
 8005c2c:	20000040 	.word	0x20000040
 8005c30:	20000144 	.word	0x20000144

08005c34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4905      	ldr	r1, [pc, #20]	; (8005c50 <CDC_Init_FS+0x1c>)
 8005c3c:	4805      	ldr	r0, [pc, #20]	; (8005c54 <CDC_Init_FS+0x20>)
 8005c3e:	f7fe fe71 	bl	8004924 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005c42:	4905      	ldr	r1, [pc, #20]	; (8005c58 <CDC_Init_FS+0x24>)
 8005c44:	4803      	ldr	r0, [pc, #12]	; (8005c54 <CDC_Init_FS+0x20>)
 8005c46:	f7fe fe86 	bl	8004956 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005c4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	20002148 	.word	0x20002148
 8005c54:	20001684 	.word	0x20001684
 8005c58:	20001948 	.word	0x20001948

08005c5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005c60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr
	...

08005c6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	4603      	mov	r3, r0
 8005c74:	6039      	str	r1, [r7, #0]
 8005c76:	71fb      	strb	r3, [r7, #7]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005c7c:	79fb      	ldrb	r3, [r7, #7]
 8005c7e:	2b23      	cmp	r3, #35	; 0x23
 8005c80:	d84a      	bhi.n	8005d18 <CDC_Control_FS+0xac>
 8005c82:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <CDC_Control_FS+0x1c>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005d19 	.word	0x08005d19
 8005c8c:	08005d19 	.word	0x08005d19
 8005c90:	08005d19 	.word	0x08005d19
 8005c94:	08005d19 	.word	0x08005d19
 8005c98:	08005d19 	.word	0x08005d19
 8005c9c:	08005d19 	.word	0x08005d19
 8005ca0:	08005d19 	.word	0x08005d19
 8005ca4:	08005d19 	.word	0x08005d19
 8005ca8:	08005d19 	.word	0x08005d19
 8005cac:	08005d19 	.word	0x08005d19
 8005cb0:	08005d19 	.word	0x08005d19
 8005cb4:	08005d19 	.word	0x08005d19
 8005cb8:	08005d19 	.word	0x08005d19
 8005cbc:	08005d19 	.word	0x08005d19
 8005cc0:	08005d19 	.word	0x08005d19
 8005cc4:	08005d19 	.word	0x08005d19
 8005cc8:	08005d19 	.word	0x08005d19
 8005ccc:	08005d19 	.word	0x08005d19
 8005cd0:	08005d19 	.word	0x08005d19
 8005cd4:	08005d19 	.word	0x08005d19
 8005cd8:	08005d19 	.word	0x08005d19
 8005cdc:	08005d19 	.word	0x08005d19
 8005ce0:	08005d19 	.word	0x08005d19
 8005ce4:	08005d19 	.word	0x08005d19
 8005ce8:	08005d19 	.word	0x08005d19
 8005cec:	08005d19 	.word	0x08005d19
 8005cf0:	08005d19 	.word	0x08005d19
 8005cf4:	08005d19 	.word	0x08005d19
 8005cf8:	08005d19 	.word	0x08005d19
 8005cfc:	08005d19 	.word	0x08005d19
 8005d00:	08005d19 	.word	0x08005d19
 8005d04:	08005d19 	.word	0x08005d19
 8005d08:	08005d19 	.word	0x08005d19
 8005d0c:	08005d19 	.word	0x08005d19
 8005d10:	08005d19 	.word	0x08005d19
 8005d14:	08005d19 	.word	0x08005d19
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005d18:	bf00      	nop
  }

  return (USBD_OK);
 8005d1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bc80      	pop	{r7}
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop

08005d28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005d32:	6879      	ldr	r1, [r7, #4]
 8005d34:	480f      	ldr	r0, [pc, #60]	; (8005d74 <CDC_Receive_FS+0x4c>)
 8005d36:	f7fe fe0e 	bl	8004956 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005d3a:	480e      	ldr	r0, [pc, #56]	; (8005d74 <CDC_Receive_FS+0x4c>)
 8005d3c:	f7fe fe4d 	bl	80049da <USBD_CDC_ReceivePacket>

  memset (bufferVCP_Rx, '\0', 64);  // clear the buffer
 8005d40:	2240      	movs	r2, #64	; 0x40
 8005d42:	2100      	movs	r1, #0
 8005d44:	480c      	ldr	r0, [pc, #48]	; (8005d78 <CDC_Receive_FS+0x50>)
 8005d46:	f000 fca1 	bl	800668c <memset>
  uint8_t len = (uint8_t)*Len;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	73fb      	strb	r3, [r7, #15]
  memcpy(bufferVCP_Rx, Buf, len);  // copy the data to the buffer
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	461a      	mov	r2, r3
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	4808      	ldr	r0, [pc, #32]	; (8005d78 <CDC_Receive_FS+0x50>)
 8005d58:	f000 fc8a 	bl	8006670 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	2100      	movs	r1, #0
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fc92 	bl	800668c <memset>

  return (USBD_OK);
 8005d68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20001684 	.word	0x20001684
 8005d78:	20001614 	.word	0x20001614

08005d7c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005d8c:	4b0d      	ldr	r3, [pc, #52]	; (8005dc4 <CDC_Transmit_FS+0x48>)
 8005d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d92:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e00b      	b.n	8005dba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005da2:	887b      	ldrh	r3, [r7, #2]
 8005da4:	461a      	mov	r2, r3
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	4806      	ldr	r0, [pc, #24]	; (8005dc4 <CDC_Transmit_FS+0x48>)
 8005daa:	f7fe fdbb 	bl	8004924 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005dae:	4805      	ldr	r0, [pc, #20]	; (8005dc4 <CDC_Transmit_FS+0x48>)
 8005db0:	f7fe fde4 	bl	800497c <USBD_CDC_TransmitPacket>
 8005db4:	4603      	mov	r3, r0
 8005db6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20001684 	.word	0x20001684

08005dc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	4603      	mov	r3, r0
 8005dd0:	6039      	str	r1, [r7, #0]
 8005dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2212      	movs	r2, #18
 8005dd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005dda:	4b03      	ldr	r3, [pc, #12]	; (8005de8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bc80      	pop	{r7}
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20000170 	.word	0x20000170

08005dec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	4603      	mov	r3, r0
 8005df4:	6039      	str	r1, [r7, #0]
 8005df6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005dfe:	4b03      	ldr	r3, [pc, #12]	; (8005e0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bc80      	pop	{r7}
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	20000184 	.word	0x20000184

08005e10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	6039      	str	r1, [r7, #0]
 8005e1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d105      	bne.n	8005e2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	4907      	ldr	r1, [pc, #28]	; (8005e44 <USBD_FS_ProductStrDescriptor+0x34>)
 8005e26:	4808      	ldr	r0, [pc, #32]	; (8005e48 <USBD_FS_ProductStrDescriptor+0x38>)
 8005e28:	f7ff fdf6 	bl	8005a18 <USBD_GetString>
 8005e2c:	e004      	b.n	8005e38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	4904      	ldr	r1, [pc, #16]	; (8005e44 <USBD_FS_ProductStrDescriptor+0x34>)
 8005e32:	4805      	ldr	r0, [pc, #20]	; (8005e48 <USBD_FS_ProductStrDescriptor+0x38>)
 8005e34:	f7ff fdf0 	bl	8005a18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e38:	4b02      	ldr	r3, [pc, #8]	; (8005e44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20002948 	.word	0x20002948
 8005e48:	08007b18 	.word	0x08007b18

08005e4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4603      	mov	r3, r0
 8005e54:	6039      	str	r1, [r7, #0]
 8005e56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	4904      	ldr	r1, [pc, #16]	; (8005e6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005e5c:	4804      	ldr	r0, [pc, #16]	; (8005e70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005e5e:	f7ff fddb 	bl	8005a18 <USBD_GetString>
  return USBD_StrDesc;
 8005e62:	4b02      	ldr	r3, [pc, #8]	; (8005e6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20002948 	.word	0x20002948
 8005e70:	08007b30 	.word	0x08007b30

08005e74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	6039      	str	r1, [r7, #0]
 8005e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	221a      	movs	r2, #26
 8005e84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005e86:	f000 f843 	bl	8005f10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005e8a:	4b02      	ldr	r3, [pc, #8]	; (8005e94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	20000188 	.word	0x20000188

08005e98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	6039      	str	r1, [r7, #0]
 8005ea2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005ea4:	79fb      	ldrb	r3, [r7, #7]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d105      	bne.n	8005eb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	4907      	ldr	r1, [pc, #28]	; (8005ecc <USBD_FS_ConfigStrDescriptor+0x34>)
 8005eae:	4808      	ldr	r0, [pc, #32]	; (8005ed0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005eb0:	f7ff fdb2 	bl	8005a18 <USBD_GetString>
 8005eb4:	e004      	b.n	8005ec0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	4904      	ldr	r1, [pc, #16]	; (8005ecc <USBD_FS_ConfigStrDescriptor+0x34>)
 8005eba:	4805      	ldr	r0, [pc, #20]	; (8005ed0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005ebc:	f7ff fdac 	bl	8005a18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ec0:	4b02      	ldr	r3, [pc, #8]	; (8005ecc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20002948 	.word	0x20002948
 8005ed0:	08007b44 	.word	0x08007b44

08005ed4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	6039      	str	r1, [r7, #0]
 8005ede:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005ee0:	79fb      	ldrb	r3, [r7, #7]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d105      	bne.n	8005ef2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	4907      	ldr	r1, [pc, #28]	; (8005f08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005eea:	4808      	ldr	r0, [pc, #32]	; (8005f0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005eec:	f7ff fd94 	bl	8005a18 <USBD_GetString>
 8005ef0:	e004      	b.n	8005efc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	4904      	ldr	r1, [pc, #16]	; (8005f08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005ef6:	4805      	ldr	r0, [pc, #20]	; (8005f0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005ef8:	f7ff fd8e 	bl	8005a18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005efc:	4b02      	ldr	r3, [pc, #8]	; (8005f08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20002948 	.word	0x20002948
 8005f0c:	08007b50 	.word	0x08007b50

08005f10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005f16:	4b0f      	ldr	r3, [pc, #60]	; (8005f54 <Get_SerialNum+0x44>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005f1c:	4b0e      	ldr	r3, [pc, #56]	; (8005f58 <Get_SerialNum+0x48>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005f22:	4b0e      	ldr	r3, [pc, #56]	; (8005f5c <Get_SerialNum+0x4c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d009      	beq.n	8005f4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005f36:	2208      	movs	r2, #8
 8005f38:	4909      	ldr	r1, [pc, #36]	; (8005f60 <Get_SerialNum+0x50>)
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 f814 	bl	8005f68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005f40:	2204      	movs	r2, #4
 8005f42:	4908      	ldr	r1, [pc, #32]	; (8005f64 <Get_SerialNum+0x54>)
 8005f44:	68b8      	ldr	r0, [r7, #8]
 8005f46:	f000 f80f 	bl	8005f68 <IntToUnicode>
  }
}
 8005f4a:	bf00      	nop
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	1fff7a10 	.word	0x1fff7a10
 8005f58:	1fff7a14 	.word	0x1fff7a14
 8005f5c:	1fff7a18 	.word	0x1fff7a18
 8005f60:	2000018a 	.word	0x2000018a
 8005f64:	2000019a 	.word	0x2000019a

08005f68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	4613      	mov	r3, r2
 8005f74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	75fb      	strb	r3, [r7, #23]
 8005f7e:	e027      	b.n	8005fd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	0f1b      	lsrs	r3, r3, #28
 8005f84:	2b09      	cmp	r3, #9
 8005f86:	d80b      	bhi.n	8005fa0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	0f1b      	lsrs	r3, r3, #28
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	7dfb      	ldrb	r3, [r7, #23]
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	4619      	mov	r1, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	440b      	add	r3, r1
 8005f98:	3230      	adds	r2, #48	; 0x30
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	e00a      	b.n	8005fb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	0f1b      	lsrs	r3, r3, #28
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	4619      	mov	r1, r3
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	440b      	add	r3, r1
 8005fb0:	3237      	adds	r2, #55	; 0x37
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005fbc:	7dfb      	ldrb	r3, [r7, #23]
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	75fb      	strb	r3, [r7, #23]
 8005fd0:	7dfa      	ldrb	r2, [r7, #23]
 8005fd2:	79fb      	ldrb	r3, [r7, #7]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d3d3      	bcc.n	8005f80 <IntToUnicode+0x18>
  }
}
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08a      	sub	sp, #40	; 0x28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fec:	f107 0314 	add.w	r3, r7, #20
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	605a      	str	r2, [r3, #4]
 8005ff6:	609a      	str	r2, [r3, #8]
 8005ff8:	60da      	str	r2, [r3, #12]
 8005ffa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006004:	d147      	bne.n	8006096 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006006:	2300      	movs	r3, #0
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	4b25      	ldr	r3, [pc, #148]	; (80060a0 <HAL_PCD_MspInit+0xbc>)
 800600c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600e:	4a24      	ldr	r2, [pc, #144]	; (80060a0 <HAL_PCD_MspInit+0xbc>)
 8006010:	f043 0301 	orr.w	r3, r3, #1
 8006014:	6313      	str	r3, [r2, #48]	; 0x30
 8006016:	4b22      	ldr	r3, [pc, #136]	; (80060a0 <HAL_PCD_MspInit+0xbc>)
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	613b      	str	r3, [r7, #16]
 8006020:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006022:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8006026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006028:	2302      	movs	r3, #2
 800602a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800602c:	2300      	movs	r3, #0
 800602e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006030:	2303      	movs	r3, #3
 8006032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006034:	230a      	movs	r3, #10
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006038:	f107 0314 	add.w	r3, r7, #20
 800603c:	4619      	mov	r1, r3
 800603e:	4819      	ldr	r0, [pc, #100]	; (80060a4 <HAL_PCD_MspInit+0xc0>)
 8006040:	f7fa ff52 	bl	8000ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800604a:	2300      	movs	r3, #0
 800604c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800604e:	2300      	movs	r3, #0
 8006050:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006052:	f107 0314 	add.w	r3, r7, #20
 8006056:	4619      	mov	r1, r3
 8006058:	4812      	ldr	r0, [pc, #72]	; (80060a4 <HAL_PCD_MspInit+0xc0>)
 800605a:	f7fa ff45 	bl	8000ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800605e:	4b10      	ldr	r3, [pc, #64]	; (80060a0 <HAL_PCD_MspInit+0xbc>)
 8006060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006062:	4a0f      	ldr	r2, [pc, #60]	; (80060a0 <HAL_PCD_MspInit+0xbc>)
 8006064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006068:	6353      	str	r3, [r2, #52]	; 0x34
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	4b0c      	ldr	r3, [pc, #48]	; (80060a0 <HAL_PCD_MspInit+0xbc>)
 8006070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006072:	4a0b      	ldr	r2, [pc, #44]	; (80060a0 <HAL_PCD_MspInit+0xbc>)
 8006074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006078:	6453      	str	r3, [r2, #68]	; 0x44
 800607a:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <HAL_PCD_MspInit+0xbc>)
 800607c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006086:	2200      	movs	r2, #0
 8006088:	2100      	movs	r1, #0
 800608a:	2043      	movs	r0, #67	; 0x43
 800608c:	f7fa fef5 	bl	8000e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006090:	2043      	movs	r0, #67	; 0x43
 8006092:	f7fa ff0e 	bl	8000eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006096:	bf00      	nop
 8006098:	3728      	adds	r7, #40	; 0x28
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	40023800 	.word	0x40023800
 80060a4:	40020000 	.word	0x40020000

080060a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80060bc:	4619      	mov	r1, r3
 80060be:	4610      	mov	r0, r2
 80060c0:	f7fe fd41 	bl	8004b46 <USBD_LL_SetupStage>
}
 80060c4:	bf00      	nop
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 80060de:	78fa      	ldrb	r2, [r7, #3]
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	4613      	mov	r3, r2
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	1a9b      	subs	r3, r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	440b      	add	r3, r1
 80060ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	78fb      	ldrb	r3, [r7, #3]
 80060f4:	4619      	mov	r1, r3
 80060f6:	f7fe fd73 	bl	8004be0 <USBD_LL_DataOutStage>
}
 80060fa:	bf00      	nop
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	460b      	mov	r3, r1
 800610c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8006114:	78fa      	ldrb	r2, [r7, #3]
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	4613      	mov	r3, r2
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	1a9b      	subs	r3, r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	440b      	add	r3, r1
 8006122:	3348      	adds	r3, #72	; 0x48
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	4619      	mov	r1, r3
 800612a:	f7fe fdca 	bl	8004cc2 <USBD_LL_DataInStage>
}
 800612e:	bf00      	nop
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b082      	sub	sp, #8
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006144:	4618      	mov	r0, r3
 8006146:	f7fe feda 	bl	8004efe <USBD_LL_SOF>
}
 800614a:	bf00      	nop
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800615a:	2301      	movs	r3, #1
 800615c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d102      	bne.n	800616c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006166:	2300      	movs	r3, #0
 8006168:	73fb      	strb	r3, [r7, #15]
 800616a:	e008      	b.n	800617e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	2b02      	cmp	r3, #2
 8006172:	d102      	bne.n	800617a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006174:	2301      	movs	r3, #1
 8006176:	73fb      	strb	r3, [r7, #15]
 8006178:	e001      	b.n	800617e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800617a:	f7fa fbc7 	bl	800090c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006184:	7bfa      	ldrb	r2, [r7, #15]
 8006186:	4611      	mov	r1, r2
 8006188:	4618      	mov	r0, r3
 800618a:	f7fe fe80 	bl	8004e8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006194:	4618      	mov	r0, r3
 8006196:	f7fe fe39 	bl	8004e0c <USBD_LL_Reset>
}
 800619a:	bf00      	nop
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fe fe7a 	bl	8004eac <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6812      	ldr	r2, [r2, #0]
 80061c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061ca:	f043 0301 	orr.w	r3, r3, #1
 80061ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80061d8:	4b04      	ldr	r3, [pc, #16]	; (80061ec <HAL_PCD_SuspendCallback+0x48>)
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	4a03      	ldr	r2, [pc, #12]	; (80061ec <HAL_PCD_SuspendCallback+0x48>)
 80061de:	f043 0306 	orr.w	r3, r3, #6
 80061e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	e000ed00 	.word	0xe000ed00

080061f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fe fe68 	bl	8004ed4 <USBD_LL_Resume>
}
 8006204:	bf00      	nop
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	460b      	mov	r3, r1
 8006216:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800621e:	78fa      	ldrb	r2, [r7, #3]
 8006220:	4611      	mov	r1, r2
 8006222:	4618      	mov	r0, r3
 8006224:	f7fe fe91 	bl	8004f4a <USBD_LL_IsoOUTIncomplete>
}
 8006228:	bf00      	nop
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006242:	78fa      	ldrb	r2, [r7, #3]
 8006244:	4611      	mov	r1, r2
 8006246:	4618      	mov	r0, r3
 8006248:	f7fe fe73 	bl	8004f32 <USBD_LL_IsoINIncomplete>
}
 800624c:	bf00      	nop
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe fe7d 	bl	8004f62 <USBD_LL_DevConnected>
}
 8006268:	bf00      	nop
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800627e:	4618      	mov	r0, r3
 8006280:	f7fe fe79 	bl	8004f76 <USBD_LL_DevDisconnected>
}
 8006284:	bf00      	nop
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d139      	bne.n	8006310 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800629c:	4a1f      	ldr	r2, [pc, #124]	; (800631c <USBD_LL_Init+0x90>)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a1d      	ldr	r2, [pc, #116]	; (800631c <USBD_LL_Init+0x90>)
 80062a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80062ac:	4b1b      	ldr	r3, [pc, #108]	; (800631c <USBD_LL_Init+0x90>)
 80062ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80062b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80062b4:	4b19      	ldr	r3, [pc, #100]	; (800631c <USBD_LL_Init+0x90>)
 80062b6:	2204      	movs	r2, #4
 80062b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80062ba:	4b18      	ldr	r3, [pc, #96]	; (800631c <USBD_LL_Init+0x90>)
 80062bc:	2202      	movs	r2, #2
 80062be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80062c0:	4b16      	ldr	r3, [pc, #88]	; (800631c <USBD_LL_Init+0x90>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80062c6:	4b15      	ldr	r3, [pc, #84]	; (800631c <USBD_LL_Init+0x90>)
 80062c8:	2202      	movs	r2, #2
 80062ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80062cc:	4b13      	ldr	r3, [pc, #76]	; (800631c <USBD_LL_Init+0x90>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80062d2:	4b12      	ldr	r3, [pc, #72]	; (800631c <USBD_LL_Init+0x90>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80062d8:	4b10      	ldr	r3, [pc, #64]	; (800631c <USBD_LL_Init+0x90>)
 80062da:	2200      	movs	r2, #0
 80062dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80062de:	4b0f      	ldr	r3, [pc, #60]	; (800631c <USBD_LL_Init+0x90>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80062e4:	480d      	ldr	r0, [pc, #52]	; (800631c <USBD_LL_Init+0x90>)
 80062e6:	f7fa ffce 	bl	8001286 <HAL_PCD_Init>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 80062f0:	f7fa fb0c 	bl	800090c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80062f4:	2180      	movs	r1, #128	; 0x80
 80062f6:	4809      	ldr	r0, [pc, #36]	; (800631c <USBD_LL_Init+0x90>)
 80062f8:	f7fc f90a 	bl	8002510 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80062fc:	2240      	movs	r2, #64	; 0x40
 80062fe:	2100      	movs	r1, #0
 8006300:	4806      	ldr	r0, [pc, #24]	; (800631c <USBD_LL_Init+0x90>)
 8006302:	f7fc f8bf 	bl	8002484 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006306:	2280      	movs	r2, #128	; 0x80
 8006308:	2101      	movs	r1, #1
 800630a:	4804      	ldr	r0, [pc, #16]	; (800631c <USBD_LL_Init+0x90>)
 800630c:	f7fc f8ba 	bl	8002484 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20002b48 	.word	0x20002b48

08006320 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006336:	4618      	mov	r0, r3
 8006338:	f7fb f8c2 	bl	80014c0 <HAL_PCD_Start>
 800633c:	4603      	mov	r3, r0
 800633e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	4618      	mov	r0, r3
 8006344:	f000 f92e 	bl	80065a4 <USBD_Get_USB_Status>
 8006348:	4603      	mov	r3, r0
 800634a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800634c:	7bbb      	ldrb	r3, [r7, #14]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	4608      	mov	r0, r1
 8006360:	4611      	mov	r1, r2
 8006362:	461a      	mov	r2, r3
 8006364:	4603      	mov	r3, r0
 8006366:	70fb      	strb	r3, [r7, #3]
 8006368:	460b      	mov	r3, r1
 800636a:	70bb      	strb	r3, [r7, #2]
 800636c:	4613      	mov	r3, r2
 800636e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800637e:	78bb      	ldrb	r3, [r7, #2]
 8006380:	883a      	ldrh	r2, [r7, #0]
 8006382:	78f9      	ldrb	r1, [r7, #3]
 8006384:	f7fb fc87 	bl	8001c96 <HAL_PCD_EP_Open>
 8006388:	4603      	mov	r3, r0
 800638a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	4618      	mov	r0, r3
 8006390:	f000 f908 	bl	80065a4 <USBD_Get_USB_Status>
 8006394:	4603      	mov	r3, r0
 8006396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006398:	7bbb      	ldrb	r3, [r7, #14]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b084      	sub	sp, #16
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063bc:	78fa      	ldrb	r2, [r7, #3]
 80063be:	4611      	mov	r1, r2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fb fcd0 	bl	8001d66 <HAL_PCD_EP_Close>
 80063c6:	4603      	mov	r3, r0
 80063c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 f8e9 	bl	80065a4 <USBD_Get_USB_Status>
 80063d2:	4603      	mov	r3, r0
 80063d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063fa:	78fa      	ldrb	r2, [r7, #3]
 80063fc:	4611      	mov	r1, r2
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fb fda7 	bl	8001f52 <HAL_PCD_EP_SetStall>
 8006404:	4603      	mov	r3, r0
 8006406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	4618      	mov	r0, r3
 800640c:	f000 f8ca 	bl	80065a4 <USBD_Get_USB_Status>
 8006410:	4603      	mov	r3, r0
 8006412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006414:	7bbb      	ldrb	r3, [r7, #14]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	460b      	mov	r3, r1
 8006428:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006438:	78fa      	ldrb	r2, [r7, #3]
 800643a:	4611      	mov	r1, r2
 800643c:	4618      	mov	r0, r3
 800643e:	f7fb fdec 	bl	800201a <HAL_PCD_EP_ClrStall>
 8006442:	4603      	mov	r3, r0
 8006444:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	4618      	mov	r0, r3
 800644a:	f000 f8ab 	bl	80065a4 <USBD_Get_USB_Status>
 800644e:	4603      	mov	r3, r0
 8006450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006452:	7bbb      	ldrb	r3, [r7, #14]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	460b      	mov	r3, r1
 8006466:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800646e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006474:	2b00      	cmp	r3, #0
 8006476:	da0b      	bge.n	8006490 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800647e:	68f9      	ldr	r1, [r7, #12]
 8006480:	4613      	mov	r3, r2
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	440b      	add	r3, r1
 800648a:	333e      	adds	r3, #62	; 0x3e
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	e00b      	b.n	80064a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006496:	68f9      	ldr	r1, [r7, #12]
 8006498:	4613      	mov	r3, r2
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	1a9b      	subs	r3, r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	440b      	add	r3, r1
 80064a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80064a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bc80      	pop	{r7}
 80064b0:	4770      	bx	lr

080064b2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	460b      	mov	r3, r1
 80064bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064cc:	78fa      	ldrb	r2, [r7, #3]
 80064ce:	4611      	mov	r1, r2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fb fbbb 	bl	8001c4c <HAL_PCD_SetAddress>
 80064d6:	4603      	mov	r3, r0
 80064d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 f861 	bl	80065a4 <USBD_Get_USB_Status>
 80064e2:	4603      	mov	r3, r0
 80064e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	607a      	str	r2, [r7, #4]
 80064fa:	461a      	mov	r2, r3
 80064fc:	460b      	mov	r3, r1
 80064fe:	72fb      	strb	r3, [r7, #11]
 8006500:	4613      	mov	r3, r2
 8006502:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006512:	893b      	ldrh	r3, [r7, #8]
 8006514:	7af9      	ldrb	r1, [r7, #11]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	f7fb fcd1 	bl	8001ebe <HAL_PCD_EP_Transmit>
 800651c:	4603      	mov	r3, r0
 800651e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006520:	7dfb      	ldrb	r3, [r7, #23]
 8006522:	4618      	mov	r0, r3
 8006524:	f000 f83e 	bl	80065a4 <USBD_Get_USB_Status>
 8006528:	4603      	mov	r3, r0
 800652a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800652c:	7dbb      	ldrb	r3, [r7, #22]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b086      	sub	sp, #24
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	461a      	mov	r2, r3
 8006542:	460b      	mov	r3, r1
 8006544:	72fb      	strb	r3, [r7, #11]
 8006546:	4613      	mov	r3, r2
 8006548:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006558:	893b      	ldrh	r3, [r7, #8]
 800655a:	7af9      	ldrb	r1, [r7, #11]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	f7fb fc4c 	bl	8001dfa <HAL_PCD_EP_Receive>
 8006562:	4603      	mov	r3, r0
 8006564:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006566:	7dfb      	ldrb	r3, [r7, #23]
 8006568:	4618      	mov	r0, r3
 800656a:	f000 f81b 	bl	80065a4 <USBD_Get_USB_Status>
 800656e:	4603      	mov	r3, r0
 8006570:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006572:	7dbb      	ldrb	r3, [r7, #22]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	460b      	mov	r3, r1
 8006586:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800658e:	78fa      	ldrb	r2, [r7, #3]
 8006590:	4611      	mov	r1, r2
 8006592:	4618      	mov	r0, r3
 8006594:	f7fb fc7c 	bl	8001e90 <HAL_PCD_EP_GetRxCount>
 8006598:	4603      	mov	r3, r0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4603      	mov	r3, r0
 80065ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	2b03      	cmp	r3, #3
 80065b6:	d817      	bhi.n	80065e8 <USBD_Get_USB_Status+0x44>
 80065b8:	a201      	add	r2, pc, #4	; (adr r2, 80065c0 <USBD_Get_USB_Status+0x1c>)
 80065ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065be:	bf00      	nop
 80065c0:	080065d1 	.word	0x080065d1
 80065c4:	080065d7 	.word	0x080065d7
 80065c8:	080065dd 	.word	0x080065dd
 80065cc:	080065e3 	.word	0x080065e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	73fb      	strb	r3, [r7, #15]
    break;
 80065d4:	e00b      	b.n	80065ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80065d6:	2302      	movs	r3, #2
 80065d8:	73fb      	strb	r3, [r7, #15]
    break;
 80065da:	e008      	b.n	80065ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80065dc:	2301      	movs	r3, #1
 80065de:	73fb      	strb	r3, [r7, #15]
    break;
 80065e0:	e005      	b.n	80065ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80065e2:	2302      	movs	r3, #2
 80065e4:	73fb      	strb	r3, [r7, #15]
    break;
 80065e6:	e002      	b.n	80065ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80065e8:	2302      	movs	r3, #2
 80065ea:	73fb      	strb	r3, [r7, #15]
    break;
 80065ec:	bf00      	nop
  }
  return usb_status;
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bc80      	pop	{r7}
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop

080065fc <__errno>:
 80065fc:	4b01      	ldr	r3, [pc, #4]	; (8006604 <__errno+0x8>)
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	200001a4 	.word	0x200001a4

08006608 <__libc_init_array>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	2600      	movs	r6, #0
 800660c:	4d0c      	ldr	r5, [pc, #48]	; (8006640 <__libc_init_array+0x38>)
 800660e:	4c0d      	ldr	r4, [pc, #52]	; (8006644 <__libc_init_array+0x3c>)
 8006610:	1b64      	subs	r4, r4, r5
 8006612:	10a4      	asrs	r4, r4, #2
 8006614:	42a6      	cmp	r6, r4
 8006616:	d109      	bne.n	800662c <__libc_init_array+0x24>
 8006618:	f001 fa62 	bl	8007ae0 <_init>
 800661c:	2600      	movs	r6, #0
 800661e:	4d0a      	ldr	r5, [pc, #40]	; (8006648 <__libc_init_array+0x40>)
 8006620:	4c0a      	ldr	r4, [pc, #40]	; (800664c <__libc_init_array+0x44>)
 8006622:	1b64      	subs	r4, r4, r5
 8006624:	10a4      	asrs	r4, r4, #2
 8006626:	42a6      	cmp	r6, r4
 8006628:	d105      	bne.n	8006636 <__libc_init_array+0x2e>
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006630:	4798      	blx	r3
 8006632:	3601      	adds	r6, #1
 8006634:	e7ee      	b.n	8006614 <__libc_init_array+0xc>
 8006636:	f855 3b04 	ldr.w	r3, [r5], #4
 800663a:	4798      	blx	r3
 800663c:	3601      	adds	r6, #1
 800663e:	e7f2      	b.n	8006626 <__libc_init_array+0x1e>
 8006640:	08007cc0 	.word	0x08007cc0
 8006644:	08007cc0 	.word	0x08007cc0
 8006648:	08007cc0 	.word	0x08007cc0
 800664c:	08007cc4 	.word	0x08007cc4

08006650 <malloc>:
 8006650:	4b02      	ldr	r3, [pc, #8]	; (800665c <malloc+0xc>)
 8006652:	4601      	mov	r1, r0
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	f000 b889 	b.w	800676c <_malloc_r>
 800665a:	bf00      	nop
 800665c:	200001a4 	.word	0x200001a4

08006660 <free>:
 8006660:	4b02      	ldr	r3, [pc, #8]	; (800666c <free+0xc>)
 8006662:	4601      	mov	r1, r0
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	f000 b819 	b.w	800669c <_free_r>
 800666a:	bf00      	nop
 800666c:	200001a4 	.word	0x200001a4

08006670 <memcpy>:
 8006670:	440a      	add	r2, r1
 8006672:	4291      	cmp	r1, r2
 8006674:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006678:	d100      	bne.n	800667c <memcpy+0xc>
 800667a:	4770      	bx	lr
 800667c:	b510      	push	{r4, lr}
 800667e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006682:	4291      	cmp	r1, r2
 8006684:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006688:	d1f9      	bne.n	800667e <memcpy+0xe>
 800668a:	bd10      	pop	{r4, pc}

0800668c <memset>:
 800668c:	4603      	mov	r3, r0
 800668e:	4402      	add	r2, r0
 8006690:	4293      	cmp	r3, r2
 8006692:	d100      	bne.n	8006696 <memset+0xa>
 8006694:	4770      	bx	lr
 8006696:	f803 1b01 	strb.w	r1, [r3], #1
 800669a:	e7f9      	b.n	8006690 <memset+0x4>

0800669c <_free_r>:
 800669c:	b538      	push	{r3, r4, r5, lr}
 800669e:	4605      	mov	r5, r0
 80066a0:	2900      	cmp	r1, #0
 80066a2:	d040      	beq.n	8006726 <_free_r+0x8a>
 80066a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066a8:	1f0c      	subs	r4, r1, #4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	bfb8      	it	lt
 80066ae:	18e4      	addlt	r4, r4, r3
 80066b0:	f000 f98c 	bl	80069cc <__malloc_lock>
 80066b4:	4a1c      	ldr	r2, [pc, #112]	; (8006728 <_free_r+0x8c>)
 80066b6:	6813      	ldr	r3, [r2, #0]
 80066b8:	b933      	cbnz	r3, 80066c8 <_free_r+0x2c>
 80066ba:	6063      	str	r3, [r4, #4]
 80066bc:	6014      	str	r4, [r2, #0]
 80066be:	4628      	mov	r0, r5
 80066c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066c4:	f000 b988 	b.w	80069d8 <__malloc_unlock>
 80066c8:	42a3      	cmp	r3, r4
 80066ca:	d908      	bls.n	80066de <_free_r+0x42>
 80066cc:	6820      	ldr	r0, [r4, #0]
 80066ce:	1821      	adds	r1, r4, r0
 80066d0:	428b      	cmp	r3, r1
 80066d2:	bf01      	itttt	eq
 80066d4:	6819      	ldreq	r1, [r3, #0]
 80066d6:	685b      	ldreq	r3, [r3, #4]
 80066d8:	1809      	addeq	r1, r1, r0
 80066da:	6021      	streq	r1, [r4, #0]
 80066dc:	e7ed      	b.n	80066ba <_free_r+0x1e>
 80066de:	461a      	mov	r2, r3
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	b10b      	cbz	r3, 80066e8 <_free_r+0x4c>
 80066e4:	42a3      	cmp	r3, r4
 80066e6:	d9fa      	bls.n	80066de <_free_r+0x42>
 80066e8:	6811      	ldr	r1, [r2, #0]
 80066ea:	1850      	adds	r0, r2, r1
 80066ec:	42a0      	cmp	r0, r4
 80066ee:	d10b      	bne.n	8006708 <_free_r+0x6c>
 80066f0:	6820      	ldr	r0, [r4, #0]
 80066f2:	4401      	add	r1, r0
 80066f4:	1850      	adds	r0, r2, r1
 80066f6:	4283      	cmp	r3, r0
 80066f8:	6011      	str	r1, [r2, #0]
 80066fa:	d1e0      	bne.n	80066be <_free_r+0x22>
 80066fc:	6818      	ldr	r0, [r3, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	4401      	add	r1, r0
 8006702:	6011      	str	r1, [r2, #0]
 8006704:	6053      	str	r3, [r2, #4]
 8006706:	e7da      	b.n	80066be <_free_r+0x22>
 8006708:	d902      	bls.n	8006710 <_free_r+0x74>
 800670a:	230c      	movs	r3, #12
 800670c:	602b      	str	r3, [r5, #0]
 800670e:	e7d6      	b.n	80066be <_free_r+0x22>
 8006710:	6820      	ldr	r0, [r4, #0]
 8006712:	1821      	adds	r1, r4, r0
 8006714:	428b      	cmp	r3, r1
 8006716:	bf01      	itttt	eq
 8006718:	6819      	ldreq	r1, [r3, #0]
 800671a:	685b      	ldreq	r3, [r3, #4]
 800671c:	1809      	addeq	r1, r1, r0
 800671e:	6021      	streq	r1, [r4, #0]
 8006720:	6063      	str	r3, [r4, #4]
 8006722:	6054      	str	r4, [r2, #4]
 8006724:	e7cb      	b.n	80066be <_free_r+0x22>
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	20002f48 	.word	0x20002f48

0800672c <sbrk_aligned>:
 800672c:	b570      	push	{r4, r5, r6, lr}
 800672e:	4e0e      	ldr	r6, [pc, #56]	; (8006768 <sbrk_aligned+0x3c>)
 8006730:	460c      	mov	r4, r1
 8006732:	6831      	ldr	r1, [r6, #0]
 8006734:	4605      	mov	r5, r0
 8006736:	b911      	cbnz	r1, 800673e <sbrk_aligned+0x12>
 8006738:	f000 f88c 	bl	8006854 <_sbrk_r>
 800673c:	6030      	str	r0, [r6, #0]
 800673e:	4621      	mov	r1, r4
 8006740:	4628      	mov	r0, r5
 8006742:	f000 f887 	bl	8006854 <_sbrk_r>
 8006746:	1c43      	adds	r3, r0, #1
 8006748:	d00a      	beq.n	8006760 <sbrk_aligned+0x34>
 800674a:	1cc4      	adds	r4, r0, #3
 800674c:	f024 0403 	bic.w	r4, r4, #3
 8006750:	42a0      	cmp	r0, r4
 8006752:	d007      	beq.n	8006764 <sbrk_aligned+0x38>
 8006754:	1a21      	subs	r1, r4, r0
 8006756:	4628      	mov	r0, r5
 8006758:	f000 f87c 	bl	8006854 <_sbrk_r>
 800675c:	3001      	adds	r0, #1
 800675e:	d101      	bne.n	8006764 <sbrk_aligned+0x38>
 8006760:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006764:	4620      	mov	r0, r4
 8006766:	bd70      	pop	{r4, r5, r6, pc}
 8006768:	20002f4c 	.word	0x20002f4c

0800676c <_malloc_r>:
 800676c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006770:	1ccd      	adds	r5, r1, #3
 8006772:	f025 0503 	bic.w	r5, r5, #3
 8006776:	3508      	adds	r5, #8
 8006778:	2d0c      	cmp	r5, #12
 800677a:	bf38      	it	cc
 800677c:	250c      	movcc	r5, #12
 800677e:	2d00      	cmp	r5, #0
 8006780:	4607      	mov	r7, r0
 8006782:	db01      	blt.n	8006788 <_malloc_r+0x1c>
 8006784:	42a9      	cmp	r1, r5
 8006786:	d905      	bls.n	8006794 <_malloc_r+0x28>
 8006788:	230c      	movs	r3, #12
 800678a:	2600      	movs	r6, #0
 800678c:	603b      	str	r3, [r7, #0]
 800678e:	4630      	mov	r0, r6
 8006790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006794:	4e2e      	ldr	r6, [pc, #184]	; (8006850 <_malloc_r+0xe4>)
 8006796:	f000 f919 	bl	80069cc <__malloc_lock>
 800679a:	6833      	ldr	r3, [r6, #0]
 800679c:	461c      	mov	r4, r3
 800679e:	bb34      	cbnz	r4, 80067ee <_malloc_r+0x82>
 80067a0:	4629      	mov	r1, r5
 80067a2:	4638      	mov	r0, r7
 80067a4:	f7ff ffc2 	bl	800672c <sbrk_aligned>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	4604      	mov	r4, r0
 80067ac:	d14d      	bne.n	800684a <_malloc_r+0xde>
 80067ae:	6834      	ldr	r4, [r6, #0]
 80067b0:	4626      	mov	r6, r4
 80067b2:	2e00      	cmp	r6, #0
 80067b4:	d140      	bne.n	8006838 <_malloc_r+0xcc>
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	4631      	mov	r1, r6
 80067ba:	4638      	mov	r0, r7
 80067bc:	eb04 0803 	add.w	r8, r4, r3
 80067c0:	f000 f848 	bl	8006854 <_sbrk_r>
 80067c4:	4580      	cmp	r8, r0
 80067c6:	d13a      	bne.n	800683e <_malloc_r+0xd2>
 80067c8:	6821      	ldr	r1, [r4, #0]
 80067ca:	3503      	adds	r5, #3
 80067cc:	1a6d      	subs	r5, r5, r1
 80067ce:	f025 0503 	bic.w	r5, r5, #3
 80067d2:	3508      	adds	r5, #8
 80067d4:	2d0c      	cmp	r5, #12
 80067d6:	bf38      	it	cc
 80067d8:	250c      	movcc	r5, #12
 80067da:	4638      	mov	r0, r7
 80067dc:	4629      	mov	r1, r5
 80067de:	f7ff ffa5 	bl	800672c <sbrk_aligned>
 80067e2:	3001      	adds	r0, #1
 80067e4:	d02b      	beq.n	800683e <_malloc_r+0xd2>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	442b      	add	r3, r5
 80067ea:	6023      	str	r3, [r4, #0]
 80067ec:	e00e      	b.n	800680c <_malloc_r+0xa0>
 80067ee:	6822      	ldr	r2, [r4, #0]
 80067f0:	1b52      	subs	r2, r2, r5
 80067f2:	d41e      	bmi.n	8006832 <_malloc_r+0xc6>
 80067f4:	2a0b      	cmp	r2, #11
 80067f6:	d916      	bls.n	8006826 <_malloc_r+0xba>
 80067f8:	1961      	adds	r1, r4, r5
 80067fa:	42a3      	cmp	r3, r4
 80067fc:	6025      	str	r5, [r4, #0]
 80067fe:	bf18      	it	ne
 8006800:	6059      	strne	r1, [r3, #4]
 8006802:	6863      	ldr	r3, [r4, #4]
 8006804:	bf08      	it	eq
 8006806:	6031      	streq	r1, [r6, #0]
 8006808:	5162      	str	r2, [r4, r5]
 800680a:	604b      	str	r3, [r1, #4]
 800680c:	4638      	mov	r0, r7
 800680e:	f104 060b 	add.w	r6, r4, #11
 8006812:	f000 f8e1 	bl	80069d8 <__malloc_unlock>
 8006816:	f026 0607 	bic.w	r6, r6, #7
 800681a:	1d23      	adds	r3, r4, #4
 800681c:	1af2      	subs	r2, r6, r3
 800681e:	d0b6      	beq.n	800678e <_malloc_r+0x22>
 8006820:	1b9b      	subs	r3, r3, r6
 8006822:	50a3      	str	r3, [r4, r2]
 8006824:	e7b3      	b.n	800678e <_malloc_r+0x22>
 8006826:	6862      	ldr	r2, [r4, #4]
 8006828:	42a3      	cmp	r3, r4
 800682a:	bf0c      	ite	eq
 800682c:	6032      	streq	r2, [r6, #0]
 800682e:	605a      	strne	r2, [r3, #4]
 8006830:	e7ec      	b.n	800680c <_malloc_r+0xa0>
 8006832:	4623      	mov	r3, r4
 8006834:	6864      	ldr	r4, [r4, #4]
 8006836:	e7b2      	b.n	800679e <_malloc_r+0x32>
 8006838:	4634      	mov	r4, r6
 800683a:	6876      	ldr	r6, [r6, #4]
 800683c:	e7b9      	b.n	80067b2 <_malloc_r+0x46>
 800683e:	230c      	movs	r3, #12
 8006840:	4638      	mov	r0, r7
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	f000 f8c8 	bl	80069d8 <__malloc_unlock>
 8006848:	e7a1      	b.n	800678e <_malloc_r+0x22>
 800684a:	6025      	str	r5, [r4, #0]
 800684c:	e7de      	b.n	800680c <_malloc_r+0xa0>
 800684e:	bf00      	nop
 8006850:	20002f48 	.word	0x20002f48

08006854 <_sbrk_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	2300      	movs	r3, #0
 8006858:	4d05      	ldr	r5, [pc, #20]	; (8006870 <_sbrk_r+0x1c>)
 800685a:	4604      	mov	r4, r0
 800685c:	4608      	mov	r0, r1
 800685e:	602b      	str	r3, [r5, #0]
 8006860:	f7fa f93c 	bl	8000adc <_sbrk>
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	d102      	bne.n	800686e <_sbrk_r+0x1a>
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	b103      	cbz	r3, 800686e <_sbrk_r+0x1a>
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	bd38      	pop	{r3, r4, r5, pc}
 8006870:	20002f50 	.word	0x20002f50

08006874 <siprintf>:
 8006874:	b40e      	push	{r1, r2, r3}
 8006876:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800687a:	b500      	push	{lr}
 800687c:	b09c      	sub	sp, #112	; 0x70
 800687e:	ab1d      	add	r3, sp, #116	; 0x74
 8006880:	9002      	str	r0, [sp, #8]
 8006882:	9006      	str	r0, [sp, #24]
 8006884:	9107      	str	r1, [sp, #28]
 8006886:	9104      	str	r1, [sp, #16]
 8006888:	4808      	ldr	r0, [pc, #32]	; (80068ac <siprintf+0x38>)
 800688a:	4909      	ldr	r1, [pc, #36]	; (80068b0 <siprintf+0x3c>)
 800688c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006890:	9105      	str	r1, [sp, #20]
 8006892:	6800      	ldr	r0, [r0, #0]
 8006894:	a902      	add	r1, sp, #8
 8006896:	9301      	str	r3, [sp, #4]
 8006898:	f000 f900 	bl	8006a9c <_svfiprintf_r>
 800689c:	2200      	movs	r2, #0
 800689e:	9b02      	ldr	r3, [sp, #8]
 80068a0:	701a      	strb	r2, [r3, #0]
 80068a2:	b01c      	add	sp, #112	; 0x70
 80068a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068a8:	b003      	add	sp, #12
 80068aa:	4770      	bx	lr
 80068ac:	200001a4 	.word	0x200001a4
 80068b0:	ffff0208 	.word	0xffff0208

080068b4 <strtok>:
 80068b4:	4b16      	ldr	r3, [pc, #88]	; (8006910 <strtok+0x5c>)
 80068b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ba:	681f      	ldr	r7, [r3, #0]
 80068bc:	4605      	mov	r5, r0
 80068be:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80068c0:	460e      	mov	r6, r1
 80068c2:	b9ec      	cbnz	r4, 8006900 <strtok+0x4c>
 80068c4:	2050      	movs	r0, #80	; 0x50
 80068c6:	f7ff fec3 	bl	8006650 <malloc>
 80068ca:	4602      	mov	r2, r0
 80068cc:	65b8      	str	r0, [r7, #88]	; 0x58
 80068ce:	b920      	cbnz	r0, 80068da <strtok+0x26>
 80068d0:	2157      	movs	r1, #87	; 0x57
 80068d2:	4b10      	ldr	r3, [pc, #64]	; (8006914 <strtok+0x60>)
 80068d4:	4810      	ldr	r0, [pc, #64]	; (8006918 <strtok+0x64>)
 80068d6:	f000 f849 	bl	800696c <__assert_func>
 80068da:	e9c0 4400 	strd	r4, r4, [r0]
 80068de:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80068e2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80068e6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80068ea:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80068ee:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80068f2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80068f6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80068fa:	6184      	str	r4, [r0, #24]
 80068fc:	7704      	strb	r4, [r0, #28]
 80068fe:	6244      	str	r4, [r0, #36]	; 0x24
 8006900:	4631      	mov	r1, r6
 8006902:	4628      	mov	r0, r5
 8006904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006906:	2301      	movs	r3, #1
 8006908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800690c:	f000 b806 	b.w	800691c <__strtok_r>
 8006910:	200001a4 	.word	0x200001a4
 8006914:	08007b74 	.word	0x08007b74
 8006918:	08007b8b 	.word	0x08007b8b

0800691c <__strtok_r>:
 800691c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800691e:	b908      	cbnz	r0, 8006924 <__strtok_r+0x8>
 8006920:	6810      	ldr	r0, [r2, #0]
 8006922:	b188      	cbz	r0, 8006948 <__strtok_r+0x2c>
 8006924:	4604      	mov	r4, r0
 8006926:	460f      	mov	r7, r1
 8006928:	4620      	mov	r0, r4
 800692a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800692e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006932:	b91e      	cbnz	r6, 800693c <__strtok_r+0x20>
 8006934:	b965      	cbnz	r5, 8006950 <__strtok_r+0x34>
 8006936:	4628      	mov	r0, r5
 8006938:	6015      	str	r5, [r2, #0]
 800693a:	e005      	b.n	8006948 <__strtok_r+0x2c>
 800693c:	42b5      	cmp	r5, r6
 800693e:	d1f6      	bne.n	800692e <__strtok_r+0x12>
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1f0      	bne.n	8006926 <__strtok_r+0xa>
 8006944:	6014      	str	r4, [r2, #0]
 8006946:	7003      	strb	r3, [r0, #0]
 8006948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800694a:	461c      	mov	r4, r3
 800694c:	e00c      	b.n	8006968 <__strtok_r+0x4c>
 800694e:	b915      	cbnz	r5, 8006956 <__strtok_r+0x3a>
 8006950:	460e      	mov	r6, r1
 8006952:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006956:	f816 5b01 	ldrb.w	r5, [r6], #1
 800695a:	42ab      	cmp	r3, r5
 800695c:	d1f7      	bne.n	800694e <__strtok_r+0x32>
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0f3      	beq.n	800694a <__strtok_r+0x2e>
 8006962:	2300      	movs	r3, #0
 8006964:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006968:	6014      	str	r4, [r2, #0]
 800696a:	e7ed      	b.n	8006948 <__strtok_r+0x2c>

0800696c <__assert_func>:
 800696c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800696e:	4614      	mov	r4, r2
 8006970:	461a      	mov	r2, r3
 8006972:	4b09      	ldr	r3, [pc, #36]	; (8006998 <__assert_func+0x2c>)
 8006974:	4605      	mov	r5, r0
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68d8      	ldr	r0, [r3, #12]
 800697a:	b14c      	cbz	r4, 8006990 <__assert_func+0x24>
 800697c:	4b07      	ldr	r3, [pc, #28]	; (800699c <__assert_func+0x30>)
 800697e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006982:	9100      	str	r1, [sp, #0]
 8006984:	462b      	mov	r3, r5
 8006986:	4906      	ldr	r1, [pc, #24]	; (80069a0 <__assert_func+0x34>)
 8006988:	f000 f80e 	bl	80069a8 <fiprintf>
 800698c:	f000 fd34 	bl	80073f8 <abort>
 8006990:	4b04      	ldr	r3, [pc, #16]	; (80069a4 <__assert_func+0x38>)
 8006992:	461c      	mov	r4, r3
 8006994:	e7f3      	b.n	800697e <__assert_func+0x12>
 8006996:	bf00      	nop
 8006998:	200001a4 	.word	0x200001a4
 800699c:	08007be8 	.word	0x08007be8
 80069a0:	08007bf5 	.word	0x08007bf5
 80069a4:	08007c23 	.word	0x08007c23

080069a8 <fiprintf>:
 80069a8:	b40e      	push	{r1, r2, r3}
 80069aa:	b503      	push	{r0, r1, lr}
 80069ac:	4601      	mov	r1, r0
 80069ae:	ab03      	add	r3, sp, #12
 80069b0:	4805      	ldr	r0, [pc, #20]	; (80069c8 <fiprintf+0x20>)
 80069b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069b6:	6800      	ldr	r0, [r0, #0]
 80069b8:	9301      	str	r3, [sp, #4]
 80069ba:	f000 f997 	bl	8006cec <_vfiprintf_r>
 80069be:	b002      	add	sp, #8
 80069c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069c4:	b003      	add	sp, #12
 80069c6:	4770      	bx	lr
 80069c8:	200001a4 	.word	0x200001a4

080069cc <__malloc_lock>:
 80069cc:	4801      	ldr	r0, [pc, #4]	; (80069d4 <__malloc_lock+0x8>)
 80069ce:	f000 becf 	b.w	8007770 <__retarget_lock_acquire_recursive>
 80069d2:	bf00      	nop
 80069d4:	20002f54 	.word	0x20002f54

080069d8 <__malloc_unlock>:
 80069d8:	4801      	ldr	r0, [pc, #4]	; (80069e0 <__malloc_unlock+0x8>)
 80069da:	f000 beca 	b.w	8007772 <__retarget_lock_release_recursive>
 80069de:	bf00      	nop
 80069e0:	20002f54 	.word	0x20002f54

080069e4 <__ssputs_r>:
 80069e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e8:	688e      	ldr	r6, [r1, #8]
 80069ea:	4682      	mov	sl, r0
 80069ec:	429e      	cmp	r6, r3
 80069ee:	460c      	mov	r4, r1
 80069f0:	4690      	mov	r8, r2
 80069f2:	461f      	mov	r7, r3
 80069f4:	d838      	bhi.n	8006a68 <__ssputs_r+0x84>
 80069f6:	898a      	ldrh	r2, [r1, #12]
 80069f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069fc:	d032      	beq.n	8006a64 <__ssputs_r+0x80>
 80069fe:	6825      	ldr	r5, [r4, #0]
 8006a00:	6909      	ldr	r1, [r1, #16]
 8006a02:	3301      	adds	r3, #1
 8006a04:	eba5 0901 	sub.w	r9, r5, r1
 8006a08:	6965      	ldr	r5, [r4, #20]
 8006a0a:	444b      	add	r3, r9
 8006a0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a14:	106d      	asrs	r5, r5, #1
 8006a16:	429d      	cmp	r5, r3
 8006a18:	bf38      	it	cc
 8006a1a:	461d      	movcc	r5, r3
 8006a1c:	0553      	lsls	r3, r2, #21
 8006a1e:	d531      	bpl.n	8006a84 <__ssputs_r+0xa0>
 8006a20:	4629      	mov	r1, r5
 8006a22:	f7ff fea3 	bl	800676c <_malloc_r>
 8006a26:	4606      	mov	r6, r0
 8006a28:	b950      	cbnz	r0, 8006a40 <__ssputs_r+0x5c>
 8006a2a:	230c      	movs	r3, #12
 8006a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a30:	f8ca 3000 	str.w	r3, [sl]
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3a:	81a3      	strh	r3, [r4, #12]
 8006a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a40:	464a      	mov	r2, r9
 8006a42:	6921      	ldr	r1, [r4, #16]
 8006a44:	f7ff fe14 	bl	8006670 <memcpy>
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a52:	81a3      	strh	r3, [r4, #12]
 8006a54:	6126      	str	r6, [r4, #16]
 8006a56:	444e      	add	r6, r9
 8006a58:	6026      	str	r6, [r4, #0]
 8006a5a:	463e      	mov	r6, r7
 8006a5c:	6165      	str	r5, [r4, #20]
 8006a5e:	eba5 0509 	sub.w	r5, r5, r9
 8006a62:	60a5      	str	r5, [r4, #8]
 8006a64:	42be      	cmp	r6, r7
 8006a66:	d900      	bls.n	8006a6a <__ssputs_r+0x86>
 8006a68:	463e      	mov	r6, r7
 8006a6a:	4632      	mov	r2, r6
 8006a6c:	4641      	mov	r1, r8
 8006a6e:	6820      	ldr	r0, [r4, #0]
 8006a70:	f000 fef4 	bl	800785c <memmove>
 8006a74:	68a3      	ldr	r3, [r4, #8]
 8006a76:	2000      	movs	r0, #0
 8006a78:	1b9b      	subs	r3, r3, r6
 8006a7a:	60a3      	str	r3, [r4, #8]
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	4433      	add	r3, r6
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	e7db      	b.n	8006a3c <__ssputs_r+0x58>
 8006a84:	462a      	mov	r2, r5
 8006a86:	f000 ff03 	bl	8007890 <_realloc_r>
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d1e1      	bne.n	8006a54 <__ssputs_r+0x70>
 8006a90:	4650      	mov	r0, sl
 8006a92:	6921      	ldr	r1, [r4, #16]
 8006a94:	f7ff fe02 	bl	800669c <_free_r>
 8006a98:	e7c7      	b.n	8006a2a <__ssputs_r+0x46>
	...

08006a9c <_svfiprintf_r>:
 8006a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa0:	4698      	mov	r8, r3
 8006aa2:	898b      	ldrh	r3, [r1, #12]
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	061b      	lsls	r3, r3, #24
 8006aa8:	460d      	mov	r5, r1
 8006aaa:	4614      	mov	r4, r2
 8006aac:	b09d      	sub	sp, #116	; 0x74
 8006aae:	d50e      	bpl.n	8006ace <_svfiprintf_r+0x32>
 8006ab0:	690b      	ldr	r3, [r1, #16]
 8006ab2:	b963      	cbnz	r3, 8006ace <_svfiprintf_r+0x32>
 8006ab4:	2140      	movs	r1, #64	; 0x40
 8006ab6:	f7ff fe59 	bl	800676c <_malloc_r>
 8006aba:	6028      	str	r0, [r5, #0]
 8006abc:	6128      	str	r0, [r5, #16]
 8006abe:	b920      	cbnz	r0, 8006aca <_svfiprintf_r+0x2e>
 8006ac0:	230c      	movs	r3, #12
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ac8:	e0d1      	b.n	8006c6e <_svfiprintf_r+0x1d2>
 8006aca:	2340      	movs	r3, #64	; 0x40
 8006acc:	616b      	str	r3, [r5, #20]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad2:	2320      	movs	r3, #32
 8006ad4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ad8:	2330      	movs	r3, #48	; 0x30
 8006ada:	f04f 0901 	mov.w	r9, #1
 8006ade:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ae2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006c88 <_svfiprintf_r+0x1ec>
 8006ae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006aea:	4623      	mov	r3, r4
 8006aec:	469a      	mov	sl, r3
 8006aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006af2:	b10a      	cbz	r2, 8006af8 <_svfiprintf_r+0x5c>
 8006af4:	2a25      	cmp	r2, #37	; 0x25
 8006af6:	d1f9      	bne.n	8006aec <_svfiprintf_r+0x50>
 8006af8:	ebba 0b04 	subs.w	fp, sl, r4
 8006afc:	d00b      	beq.n	8006b16 <_svfiprintf_r+0x7a>
 8006afe:	465b      	mov	r3, fp
 8006b00:	4622      	mov	r2, r4
 8006b02:	4629      	mov	r1, r5
 8006b04:	4638      	mov	r0, r7
 8006b06:	f7ff ff6d 	bl	80069e4 <__ssputs_r>
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	f000 80aa 	beq.w	8006c64 <_svfiprintf_r+0x1c8>
 8006b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b12:	445a      	add	r2, fp
 8006b14:	9209      	str	r2, [sp, #36]	; 0x24
 8006b16:	f89a 3000 	ldrb.w	r3, [sl]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 80a2 	beq.w	8006c64 <_svfiprintf_r+0x1c8>
 8006b20:	2300      	movs	r3, #0
 8006b22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b2a:	f10a 0a01 	add.w	sl, sl, #1
 8006b2e:	9304      	str	r3, [sp, #16]
 8006b30:	9307      	str	r3, [sp, #28]
 8006b32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b36:	931a      	str	r3, [sp, #104]	; 0x68
 8006b38:	4654      	mov	r4, sl
 8006b3a:	2205      	movs	r2, #5
 8006b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b40:	4851      	ldr	r0, [pc, #324]	; (8006c88 <_svfiprintf_r+0x1ec>)
 8006b42:	f000 fe7d 	bl	8007840 <memchr>
 8006b46:	9a04      	ldr	r2, [sp, #16]
 8006b48:	b9d8      	cbnz	r0, 8006b82 <_svfiprintf_r+0xe6>
 8006b4a:	06d0      	lsls	r0, r2, #27
 8006b4c:	bf44      	itt	mi
 8006b4e:	2320      	movmi	r3, #32
 8006b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b54:	0711      	lsls	r1, r2, #28
 8006b56:	bf44      	itt	mi
 8006b58:	232b      	movmi	r3, #43	; 0x2b
 8006b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b62:	2b2a      	cmp	r3, #42	; 0x2a
 8006b64:	d015      	beq.n	8006b92 <_svfiprintf_r+0xf6>
 8006b66:	4654      	mov	r4, sl
 8006b68:	2000      	movs	r0, #0
 8006b6a:	f04f 0c0a 	mov.w	ip, #10
 8006b6e:	9a07      	ldr	r2, [sp, #28]
 8006b70:	4621      	mov	r1, r4
 8006b72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b76:	3b30      	subs	r3, #48	; 0x30
 8006b78:	2b09      	cmp	r3, #9
 8006b7a:	d94e      	bls.n	8006c1a <_svfiprintf_r+0x17e>
 8006b7c:	b1b0      	cbz	r0, 8006bac <_svfiprintf_r+0x110>
 8006b7e:	9207      	str	r2, [sp, #28]
 8006b80:	e014      	b.n	8006bac <_svfiprintf_r+0x110>
 8006b82:	eba0 0308 	sub.w	r3, r0, r8
 8006b86:	fa09 f303 	lsl.w	r3, r9, r3
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	46a2      	mov	sl, r4
 8006b8e:	9304      	str	r3, [sp, #16]
 8006b90:	e7d2      	b.n	8006b38 <_svfiprintf_r+0x9c>
 8006b92:	9b03      	ldr	r3, [sp, #12]
 8006b94:	1d19      	adds	r1, r3, #4
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	9103      	str	r1, [sp, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	bfbb      	ittet	lt
 8006b9e:	425b      	neglt	r3, r3
 8006ba0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ba4:	9307      	strge	r3, [sp, #28]
 8006ba6:	9307      	strlt	r3, [sp, #28]
 8006ba8:	bfb8      	it	lt
 8006baa:	9204      	strlt	r2, [sp, #16]
 8006bac:	7823      	ldrb	r3, [r4, #0]
 8006bae:	2b2e      	cmp	r3, #46	; 0x2e
 8006bb0:	d10c      	bne.n	8006bcc <_svfiprintf_r+0x130>
 8006bb2:	7863      	ldrb	r3, [r4, #1]
 8006bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8006bb6:	d135      	bne.n	8006c24 <_svfiprintf_r+0x188>
 8006bb8:	9b03      	ldr	r3, [sp, #12]
 8006bba:	3402      	adds	r4, #2
 8006bbc:	1d1a      	adds	r2, r3, #4
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	9203      	str	r2, [sp, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	bfb8      	it	lt
 8006bc6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006bca:	9305      	str	r3, [sp, #20]
 8006bcc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006c8c <_svfiprintf_r+0x1f0>
 8006bd0:	2203      	movs	r2, #3
 8006bd2:	4650      	mov	r0, sl
 8006bd4:	7821      	ldrb	r1, [r4, #0]
 8006bd6:	f000 fe33 	bl	8007840 <memchr>
 8006bda:	b140      	cbz	r0, 8006bee <_svfiprintf_r+0x152>
 8006bdc:	2340      	movs	r3, #64	; 0x40
 8006bde:	eba0 000a 	sub.w	r0, r0, sl
 8006be2:	fa03 f000 	lsl.w	r0, r3, r0
 8006be6:	9b04      	ldr	r3, [sp, #16]
 8006be8:	3401      	adds	r4, #1
 8006bea:	4303      	orrs	r3, r0
 8006bec:	9304      	str	r3, [sp, #16]
 8006bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf2:	2206      	movs	r2, #6
 8006bf4:	4826      	ldr	r0, [pc, #152]	; (8006c90 <_svfiprintf_r+0x1f4>)
 8006bf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bfa:	f000 fe21 	bl	8007840 <memchr>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	d038      	beq.n	8006c74 <_svfiprintf_r+0x1d8>
 8006c02:	4b24      	ldr	r3, [pc, #144]	; (8006c94 <_svfiprintf_r+0x1f8>)
 8006c04:	bb1b      	cbnz	r3, 8006c4e <_svfiprintf_r+0x1b2>
 8006c06:	9b03      	ldr	r3, [sp, #12]
 8006c08:	3307      	adds	r3, #7
 8006c0a:	f023 0307 	bic.w	r3, r3, #7
 8006c0e:	3308      	adds	r3, #8
 8006c10:	9303      	str	r3, [sp, #12]
 8006c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c14:	4433      	add	r3, r6
 8006c16:	9309      	str	r3, [sp, #36]	; 0x24
 8006c18:	e767      	b.n	8006aea <_svfiprintf_r+0x4e>
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	2001      	movs	r0, #1
 8006c1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c22:	e7a5      	b.n	8006b70 <_svfiprintf_r+0xd4>
 8006c24:	2300      	movs	r3, #0
 8006c26:	f04f 0c0a 	mov.w	ip, #10
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	3401      	adds	r4, #1
 8006c2e:	9305      	str	r3, [sp, #20]
 8006c30:	4620      	mov	r0, r4
 8006c32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c36:	3a30      	subs	r2, #48	; 0x30
 8006c38:	2a09      	cmp	r2, #9
 8006c3a:	d903      	bls.n	8006c44 <_svfiprintf_r+0x1a8>
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0c5      	beq.n	8006bcc <_svfiprintf_r+0x130>
 8006c40:	9105      	str	r1, [sp, #20]
 8006c42:	e7c3      	b.n	8006bcc <_svfiprintf_r+0x130>
 8006c44:	4604      	mov	r4, r0
 8006c46:	2301      	movs	r3, #1
 8006c48:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c4c:	e7f0      	b.n	8006c30 <_svfiprintf_r+0x194>
 8006c4e:	ab03      	add	r3, sp, #12
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	462a      	mov	r2, r5
 8006c54:	4638      	mov	r0, r7
 8006c56:	4b10      	ldr	r3, [pc, #64]	; (8006c98 <_svfiprintf_r+0x1fc>)
 8006c58:	a904      	add	r1, sp, #16
 8006c5a:	f3af 8000 	nop.w
 8006c5e:	1c42      	adds	r2, r0, #1
 8006c60:	4606      	mov	r6, r0
 8006c62:	d1d6      	bne.n	8006c12 <_svfiprintf_r+0x176>
 8006c64:	89ab      	ldrh	r3, [r5, #12]
 8006c66:	065b      	lsls	r3, r3, #25
 8006c68:	f53f af2c 	bmi.w	8006ac4 <_svfiprintf_r+0x28>
 8006c6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c6e:	b01d      	add	sp, #116	; 0x74
 8006c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c74:	ab03      	add	r3, sp, #12
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	462a      	mov	r2, r5
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	4b06      	ldr	r3, [pc, #24]	; (8006c98 <_svfiprintf_r+0x1fc>)
 8006c7e:	a904      	add	r1, sp, #16
 8006c80:	f000 f9d4 	bl	800702c <_printf_i>
 8006c84:	e7eb      	b.n	8006c5e <_svfiprintf_r+0x1c2>
 8006c86:	bf00      	nop
 8006c88:	08007c24 	.word	0x08007c24
 8006c8c:	08007c2a 	.word	0x08007c2a
 8006c90:	08007c2e 	.word	0x08007c2e
 8006c94:	00000000 	.word	0x00000000
 8006c98:	080069e5 	.word	0x080069e5

08006c9c <__sfputc_r>:
 8006c9c:	6893      	ldr	r3, [r2, #8]
 8006c9e:	b410      	push	{r4}
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	6093      	str	r3, [r2, #8]
 8006ca6:	da07      	bge.n	8006cb8 <__sfputc_r+0x1c>
 8006ca8:	6994      	ldr	r4, [r2, #24]
 8006caa:	42a3      	cmp	r3, r4
 8006cac:	db01      	blt.n	8006cb2 <__sfputc_r+0x16>
 8006cae:	290a      	cmp	r1, #10
 8006cb0:	d102      	bne.n	8006cb8 <__sfputc_r+0x1c>
 8006cb2:	bc10      	pop	{r4}
 8006cb4:	f000 bae0 	b.w	8007278 <__swbuf_r>
 8006cb8:	6813      	ldr	r3, [r2, #0]
 8006cba:	1c58      	adds	r0, r3, #1
 8006cbc:	6010      	str	r0, [r2, #0]
 8006cbe:	7019      	strb	r1, [r3, #0]
 8006cc0:	4608      	mov	r0, r1
 8006cc2:	bc10      	pop	{r4}
 8006cc4:	4770      	bx	lr

08006cc6 <__sfputs_r>:
 8006cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc8:	4606      	mov	r6, r0
 8006cca:	460f      	mov	r7, r1
 8006ccc:	4614      	mov	r4, r2
 8006cce:	18d5      	adds	r5, r2, r3
 8006cd0:	42ac      	cmp	r4, r5
 8006cd2:	d101      	bne.n	8006cd8 <__sfputs_r+0x12>
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	e007      	b.n	8006ce8 <__sfputs_r+0x22>
 8006cd8:	463a      	mov	r2, r7
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce0:	f7ff ffdc 	bl	8006c9c <__sfputc_r>
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	d1f3      	bne.n	8006cd0 <__sfputs_r+0xa>
 8006ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cec <_vfiprintf_r>:
 8006cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf0:	460d      	mov	r5, r1
 8006cf2:	4614      	mov	r4, r2
 8006cf4:	4698      	mov	r8, r3
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	b09d      	sub	sp, #116	; 0x74
 8006cfa:	b118      	cbz	r0, 8006d04 <_vfiprintf_r+0x18>
 8006cfc:	6983      	ldr	r3, [r0, #24]
 8006cfe:	b90b      	cbnz	r3, 8006d04 <_vfiprintf_r+0x18>
 8006d00:	f000 fc98 	bl	8007634 <__sinit>
 8006d04:	4b89      	ldr	r3, [pc, #548]	; (8006f2c <_vfiprintf_r+0x240>)
 8006d06:	429d      	cmp	r5, r3
 8006d08:	d11b      	bne.n	8006d42 <_vfiprintf_r+0x56>
 8006d0a:	6875      	ldr	r5, [r6, #4]
 8006d0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d0e:	07d9      	lsls	r1, r3, #31
 8006d10:	d405      	bmi.n	8006d1e <_vfiprintf_r+0x32>
 8006d12:	89ab      	ldrh	r3, [r5, #12]
 8006d14:	059a      	lsls	r2, r3, #22
 8006d16:	d402      	bmi.n	8006d1e <_vfiprintf_r+0x32>
 8006d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d1a:	f000 fd29 	bl	8007770 <__retarget_lock_acquire_recursive>
 8006d1e:	89ab      	ldrh	r3, [r5, #12]
 8006d20:	071b      	lsls	r3, r3, #28
 8006d22:	d501      	bpl.n	8006d28 <_vfiprintf_r+0x3c>
 8006d24:	692b      	ldr	r3, [r5, #16]
 8006d26:	b9eb      	cbnz	r3, 8006d64 <_vfiprintf_r+0x78>
 8006d28:	4629      	mov	r1, r5
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f000 faf6 	bl	800731c <__swsetup_r>
 8006d30:	b1c0      	cbz	r0, 8006d64 <_vfiprintf_r+0x78>
 8006d32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d34:	07dc      	lsls	r4, r3, #31
 8006d36:	d50e      	bpl.n	8006d56 <_vfiprintf_r+0x6a>
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d3c:	b01d      	add	sp, #116	; 0x74
 8006d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d42:	4b7b      	ldr	r3, [pc, #492]	; (8006f30 <_vfiprintf_r+0x244>)
 8006d44:	429d      	cmp	r5, r3
 8006d46:	d101      	bne.n	8006d4c <_vfiprintf_r+0x60>
 8006d48:	68b5      	ldr	r5, [r6, #8]
 8006d4a:	e7df      	b.n	8006d0c <_vfiprintf_r+0x20>
 8006d4c:	4b79      	ldr	r3, [pc, #484]	; (8006f34 <_vfiprintf_r+0x248>)
 8006d4e:	429d      	cmp	r5, r3
 8006d50:	bf08      	it	eq
 8006d52:	68f5      	ldreq	r5, [r6, #12]
 8006d54:	e7da      	b.n	8006d0c <_vfiprintf_r+0x20>
 8006d56:	89ab      	ldrh	r3, [r5, #12]
 8006d58:	0598      	lsls	r0, r3, #22
 8006d5a:	d4ed      	bmi.n	8006d38 <_vfiprintf_r+0x4c>
 8006d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d5e:	f000 fd08 	bl	8007772 <__retarget_lock_release_recursive>
 8006d62:	e7e9      	b.n	8006d38 <_vfiprintf_r+0x4c>
 8006d64:	2300      	movs	r3, #0
 8006d66:	9309      	str	r3, [sp, #36]	; 0x24
 8006d68:	2320      	movs	r3, #32
 8006d6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d6e:	2330      	movs	r3, #48	; 0x30
 8006d70:	f04f 0901 	mov.w	r9, #1
 8006d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d78:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006f38 <_vfiprintf_r+0x24c>
 8006d7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d80:	4623      	mov	r3, r4
 8006d82:	469a      	mov	sl, r3
 8006d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d88:	b10a      	cbz	r2, 8006d8e <_vfiprintf_r+0xa2>
 8006d8a:	2a25      	cmp	r2, #37	; 0x25
 8006d8c:	d1f9      	bne.n	8006d82 <_vfiprintf_r+0x96>
 8006d8e:	ebba 0b04 	subs.w	fp, sl, r4
 8006d92:	d00b      	beq.n	8006dac <_vfiprintf_r+0xc0>
 8006d94:	465b      	mov	r3, fp
 8006d96:	4622      	mov	r2, r4
 8006d98:	4629      	mov	r1, r5
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	f7ff ff93 	bl	8006cc6 <__sfputs_r>
 8006da0:	3001      	adds	r0, #1
 8006da2:	f000 80aa 	beq.w	8006efa <_vfiprintf_r+0x20e>
 8006da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da8:	445a      	add	r2, fp
 8006daa:	9209      	str	r2, [sp, #36]	; 0x24
 8006dac:	f89a 3000 	ldrb.w	r3, [sl]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 80a2 	beq.w	8006efa <_vfiprintf_r+0x20e>
 8006db6:	2300      	movs	r3, #0
 8006db8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dc0:	f10a 0a01 	add.w	sl, sl, #1
 8006dc4:	9304      	str	r3, [sp, #16]
 8006dc6:	9307      	str	r3, [sp, #28]
 8006dc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dcc:	931a      	str	r3, [sp, #104]	; 0x68
 8006dce:	4654      	mov	r4, sl
 8006dd0:	2205      	movs	r2, #5
 8006dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dd6:	4858      	ldr	r0, [pc, #352]	; (8006f38 <_vfiprintf_r+0x24c>)
 8006dd8:	f000 fd32 	bl	8007840 <memchr>
 8006ddc:	9a04      	ldr	r2, [sp, #16]
 8006dde:	b9d8      	cbnz	r0, 8006e18 <_vfiprintf_r+0x12c>
 8006de0:	06d1      	lsls	r1, r2, #27
 8006de2:	bf44      	itt	mi
 8006de4:	2320      	movmi	r3, #32
 8006de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dea:	0713      	lsls	r3, r2, #28
 8006dec:	bf44      	itt	mi
 8006dee:	232b      	movmi	r3, #43	; 0x2b
 8006df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006df4:	f89a 3000 	ldrb.w	r3, [sl]
 8006df8:	2b2a      	cmp	r3, #42	; 0x2a
 8006dfa:	d015      	beq.n	8006e28 <_vfiprintf_r+0x13c>
 8006dfc:	4654      	mov	r4, sl
 8006dfe:	2000      	movs	r0, #0
 8006e00:	f04f 0c0a 	mov.w	ip, #10
 8006e04:	9a07      	ldr	r2, [sp, #28]
 8006e06:	4621      	mov	r1, r4
 8006e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e0c:	3b30      	subs	r3, #48	; 0x30
 8006e0e:	2b09      	cmp	r3, #9
 8006e10:	d94e      	bls.n	8006eb0 <_vfiprintf_r+0x1c4>
 8006e12:	b1b0      	cbz	r0, 8006e42 <_vfiprintf_r+0x156>
 8006e14:	9207      	str	r2, [sp, #28]
 8006e16:	e014      	b.n	8006e42 <_vfiprintf_r+0x156>
 8006e18:	eba0 0308 	sub.w	r3, r0, r8
 8006e1c:	fa09 f303 	lsl.w	r3, r9, r3
 8006e20:	4313      	orrs	r3, r2
 8006e22:	46a2      	mov	sl, r4
 8006e24:	9304      	str	r3, [sp, #16]
 8006e26:	e7d2      	b.n	8006dce <_vfiprintf_r+0xe2>
 8006e28:	9b03      	ldr	r3, [sp, #12]
 8006e2a:	1d19      	adds	r1, r3, #4
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	9103      	str	r1, [sp, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	bfbb      	ittet	lt
 8006e34:	425b      	neglt	r3, r3
 8006e36:	f042 0202 	orrlt.w	r2, r2, #2
 8006e3a:	9307      	strge	r3, [sp, #28]
 8006e3c:	9307      	strlt	r3, [sp, #28]
 8006e3e:	bfb8      	it	lt
 8006e40:	9204      	strlt	r2, [sp, #16]
 8006e42:	7823      	ldrb	r3, [r4, #0]
 8006e44:	2b2e      	cmp	r3, #46	; 0x2e
 8006e46:	d10c      	bne.n	8006e62 <_vfiprintf_r+0x176>
 8006e48:	7863      	ldrb	r3, [r4, #1]
 8006e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e4c:	d135      	bne.n	8006eba <_vfiprintf_r+0x1ce>
 8006e4e:	9b03      	ldr	r3, [sp, #12]
 8006e50:	3402      	adds	r4, #2
 8006e52:	1d1a      	adds	r2, r3, #4
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	9203      	str	r2, [sp, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	bfb8      	it	lt
 8006e5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006e60:	9305      	str	r3, [sp, #20]
 8006e62:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006f3c <_vfiprintf_r+0x250>
 8006e66:	2203      	movs	r2, #3
 8006e68:	4650      	mov	r0, sl
 8006e6a:	7821      	ldrb	r1, [r4, #0]
 8006e6c:	f000 fce8 	bl	8007840 <memchr>
 8006e70:	b140      	cbz	r0, 8006e84 <_vfiprintf_r+0x198>
 8006e72:	2340      	movs	r3, #64	; 0x40
 8006e74:	eba0 000a 	sub.w	r0, r0, sl
 8006e78:	fa03 f000 	lsl.w	r0, r3, r0
 8006e7c:	9b04      	ldr	r3, [sp, #16]
 8006e7e:	3401      	adds	r4, #1
 8006e80:	4303      	orrs	r3, r0
 8006e82:	9304      	str	r3, [sp, #16]
 8006e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e88:	2206      	movs	r2, #6
 8006e8a:	482d      	ldr	r0, [pc, #180]	; (8006f40 <_vfiprintf_r+0x254>)
 8006e8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e90:	f000 fcd6 	bl	8007840 <memchr>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d03f      	beq.n	8006f18 <_vfiprintf_r+0x22c>
 8006e98:	4b2a      	ldr	r3, [pc, #168]	; (8006f44 <_vfiprintf_r+0x258>)
 8006e9a:	bb1b      	cbnz	r3, 8006ee4 <_vfiprintf_r+0x1f8>
 8006e9c:	9b03      	ldr	r3, [sp, #12]
 8006e9e:	3307      	adds	r3, #7
 8006ea0:	f023 0307 	bic.w	r3, r3, #7
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	9303      	str	r3, [sp, #12]
 8006ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eaa:	443b      	add	r3, r7
 8006eac:	9309      	str	r3, [sp, #36]	; 0x24
 8006eae:	e767      	b.n	8006d80 <_vfiprintf_r+0x94>
 8006eb0:	460c      	mov	r4, r1
 8006eb2:	2001      	movs	r0, #1
 8006eb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eb8:	e7a5      	b.n	8006e06 <_vfiprintf_r+0x11a>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f04f 0c0a 	mov.w	ip, #10
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	3401      	adds	r4, #1
 8006ec4:	9305      	str	r3, [sp, #20]
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ecc:	3a30      	subs	r2, #48	; 0x30
 8006ece:	2a09      	cmp	r2, #9
 8006ed0:	d903      	bls.n	8006eda <_vfiprintf_r+0x1ee>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d0c5      	beq.n	8006e62 <_vfiprintf_r+0x176>
 8006ed6:	9105      	str	r1, [sp, #20]
 8006ed8:	e7c3      	b.n	8006e62 <_vfiprintf_r+0x176>
 8006eda:	4604      	mov	r4, r0
 8006edc:	2301      	movs	r3, #1
 8006ede:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ee2:	e7f0      	b.n	8006ec6 <_vfiprintf_r+0x1da>
 8006ee4:	ab03      	add	r3, sp, #12
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	462a      	mov	r2, r5
 8006eea:	4630      	mov	r0, r6
 8006eec:	4b16      	ldr	r3, [pc, #88]	; (8006f48 <_vfiprintf_r+0x25c>)
 8006eee:	a904      	add	r1, sp, #16
 8006ef0:	f3af 8000 	nop.w
 8006ef4:	4607      	mov	r7, r0
 8006ef6:	1c78      	adds	r0, r7, #1
 8006ef8:	d1d6      	bne.n	8006ea8 <_vfiprintf_r+0x1bc>
 8006efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006efc:	07d9      	lsls	r1, r3, #31
 8006efe:	d405      	bmi.n	8006f0c <_vfiprintf_r+0x220>
 8006f00:	89ab      	ldrh	r3, [r5, #12]
 8006f02:	059a      	lsls	r2, r3, #22
 8006f04:	d402      	bmi.n	8006f0c <_vfiprintf_r+0x220>
 8006f06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f08:	f000 fc33 	bl	8007772 <__retarget_lock_release_recursive>
 8006f0c:	89ab      	ldrh	r3, [r5, #12]
 8006f0e:	065b      	lsls	r3, r3, #25
 8006f10:	f53f af12 	bmi.w	8006d38 <_vfiprintf_r+0x4c>
 8006f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f16:	e711      	b.n	8006d3c <_vfiprintf_r+0x50>
 8006f18:	ab03      	add	r3, sp, #12
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	462a      	mov	r2, r5
 8006f1e:	4630      	mov	r0, r6
 8006f20:	4b09      	ldr	r3, [pc, #36]	; (8006f48 <_vfiprintf_r+0x25c>)
 8006f22:	a904      	add	r1, sp, #16
 8006f24:	f000 f882 	bl	800702c <_printf_i>
 8006f28:	e7e4      	b.n	8006ef4 <_vfiprintf_r+0x208>
 8006f2a:	bf00      	nop
 8006f2c:	08007c78 	.word	0x08007c78
 8006f30:	08007c98 	.word	0x08007c98
 8006f34:	08007c58 	.word	0x08007c58
 8006f38:	08007c24 	.word	0x08007c24
 8006f3c:	08007c2a 	.word	0x08007c2a
 8006f40:	08007c2e 	.word	0x08007c2e
 8006f44:	00000000 	.word	0x00000000
 8006f48:	08006cc7 	.word	0x08006cc7

08006f4c <_printf_common>:
 8006f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f50:	4616      	mov	r6, r2
 8006f52:	4699      	mov	r9, r3
 8006f54:	688a      	ldr	r2, [r1, #8]
 8006f56:	690b      	ldr	r3, [r1, #16]
 8006f58:	4607      	mov	r7, r0
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	bfb8      	it	lt
 8006f5e:	4613      	movlt	r3, r2
 8006f60:	6033      	str	r3, [r6, #0]
 8006f62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f66:	460c      	mov	r4, r1
 8006f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f6c:	b10a      	cbz	r2, 8006f72 <_printf_common+0x26>
 8006f6e:	3301      	adds	r3, #1
 8006f70:	6033      	str	r3, [r6, #0]
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	0699      	lsls	r1, r3, #26
 8006f76:	bf42      	ittt	mi
 8006f78:	6833      	ldrmi	r3, [r6, #0]
 8006f7a:	3302      	addmi	r3, #2
 8006f7c:	6033      	strmi	r3, [r6, #0]
 8006f7e:	6825      	ldr	r5, [r4, #0]
 8006f80:	f015 0506 	ands.w	r5, r5, #6
 8006f84:	d106      	bne.n	8006f94 <_printf_common+0x48>
 8006f86:	f104 0a19 	add.w	sl, r4, #25
 8006f8a:	68e3      	ldr	r3, [r4, #12]
 8006f8c:	6832      	ldr	r2, [r6, #0]
 8006f8e:	1a9b      	subs	r3, r3, r2
 8006f90:	42ab      	cmp	r3, r5
 8006f92:	dc28      	bgt.n	8006fe6 <_printf_common+0x9a>
 8006f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f98:	1e13      	subs	r3, r2, #0
 8006f9a:	6822      	ldr	r2, [r4, #0]
 8006f9c:	bf18      	it	ne
 8006f9e:	2301      	movne	r3, #1
 8006fa0:	0692      	lsls	r2, r2, #26
 8006fa2:	d42d      	bmi.n	8007000 <_printf_common+0xb4>
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fac:	47c0      	blx	r8
 8006fae:	3001      	adds	r0, #1
 8006fb0:	d020      	beq.n	8006ff4 <_printf_common+0xa8>
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	68e5      	ldr	r5, [r4, #12]
 8006fb6:	f003 0306 	and.w	r3, r3, #6
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	bf18      	it	ne
 8006fbe:	2500      	movne	r5, #0
 8006fc0:	6832      	ldr	r2, [r6, #0]
 8006fc2:	f04f 0600 	mov.w	r6, #0
 8006fc6:	68a3      	ldr	r3, [r4, #8]
 8006fc8:	bf08      	it	eq
 8006fca:	1aad      	subeq	r5, r5, r2
 8006fcc:	6922      	ldr	r2, [r4, #16]
 8006fce:	bf08      	it	eq
 8006fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	bfc4      	itt	gt
 8006fd8:	1a9b      	subgt	r3, r3, r2
 8006fda:	18ed      	addgt	r5, r5, r3
 8006fdc:	341a      	adds	r4, #26
 8006fde:	42b5      	cmp	r5, r6
 8006fe0:	d11a      	bne.n	8007018 <_printf_common+0xcc>
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	e008      	b.n	8006ff8 <_printf_common+0xac>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	4652      	mov	r2, sl
 8006fea:	4649      	mov	r1, r9
 8006fec:	4638      	mov	r0, r7
 8006fee:	47c0      	blx	r8
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d103      	bne.n	8006ffc <_printf_common+0xb0>
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ffc:	3501      	adds	r5, #1
 8006ffe:	e7c4      	b.n	8006f8a <_printf_common+0x3e>
 8007000:	2030      	movs	r0, #48	; 0x30
 8007002:	18e1      	adds	r1, r4, r3
 8007004:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800700e:	4422      	add	r2, r4
 8007010:	3302      	adds	r3, #2
 8007012:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007016:	e7c5      	b.n	8006fa4 <_printf_common+0x58>
 8007018:	2301      	movs	r3, #1
 800701a:	4622      	mov	r2, r4
 800701c:	4649      	mov	r1, r9
 800701e:	4638      	mov	r0, r7
 8007020:	47c0      	blx	r8
 8007022:	3001      	adds	r0, #1
 8007024:	d0e6      	beq.n	8006ff4 <_printf_common+0xa8>
 8007026:	3601      	adds	r6, #1
 8007028:	e7d9      	b.n	8006fde <_printf_common+0x92>
	...

0800702c <_printf_i>:
 800702c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007030:	7e0f      	ldrb	r7, [r1, #24]
 8007032:	4691      	mov	r9, r2
 8007034:	2f78      	cmp	r7, #120	; 0x78
 8007036:	4680      	mov	r8, r0
 8007038:	460c      	mov	r4, r1
 800703a:	469a      	mov	sl, r3
 800703c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800703e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007042:	d807      	bhi.n	8007054 <_printf_i+0x28>
 8007044:	2f62      	cmp	r7, #98	; 0x62
 8007046:	d80a      	bhi.n	800705e <_printf_i+0x32>
 8007048:	2f00      	cmp	r7, #0
 800704a:	f000 80d9 	beq.w	8007200 <_printf_i+0x1d4>
 800704e:	2f58      	cmp	r7, #88	; 0x58
 8007050:	f000 80a4 	beq.w	800719c <_printf_i+0x170>
 8007054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007058:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800705c:	e03a      	b.n	80070d4 <_printf_i+0xa8>
 800705e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007062:	2b15      	cmp	r3, #21
 8007064:	d8f6      	bhi.n	8007054 <_printf_i+0x28>
 8007066:	a101      	add	r1, pc, #4	; (adr r1, 800706c <_printf_i+0x40>)
 8007068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800706c:	080070c5 	.word	0x080070c5
 8007070:	080070d9 	.word	0x080070d9
 8007074:	08007055 	.word	0x08007055
 8007078:	08007055 	.word	0x08007055
 800707c:	08007055 	.word	0x08007055
 8007080:	08007055 	.word	0x08007055
 8007084:	080070d9 	.word	0x080070d9
 8007088:	08007055 	.word	0x08007055
 800708c:	08007055 	.word	0x08007055
 8007090:	08007055 	.word	0x08007055
 8007094:	08007055 	.word	0x08007055
 8007098:	080071e7 	.word	0x080071e7
 800709c:	08007109 	.word	0x08007109
 80070a0:	080071c9 	.word	0x080071c9
 80070a4:	08007055 	.word	0x08007055
 80070a8:	08007055 	.word	0x08007055
 80070ac:	08007209 	.word	0x08007209
 80070b0:	08007055 	.word	0x08007055
 80070b4:	08007109 	.word	0x08007109
 80070b8:	08007055 	.word	0x08007055
 80070bc:	08007055 	.word	0x08007055
 80070c0:	080071d1 	.word	0x080071d1
 80070c4:	682b      	ldr	r3, [r5, #0]
 80070c6:	1d1a      	adds	r2, r3, #4
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	602a      	str	r2, [r5, #0]
 80070cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070d4:	2301      	movs	r3, #1
 80070d6:	e0a4      	b.n	8007222 <_printf_i+0x1f6>
 80070d8:	6820      	ldr	r0, [r4, #0]
 80070da:	6829      	ldr	r1, [r5, #0]
 80070dc:	0606      	lsls	r6, r0, #24
 80070de:	f101 0304 	add.w	r3, r1, #4
 80070e2:	d50a      	bpl.n	80070fa <_printf_i+0xce>
 80070e4:	680e      	ldr	r6, [r1, #0]
 80070e6:	602b      	str	r3, [r5, #0]
 80070e8:	2e00      	cmp	r6, #0
 80070ea:	da03      	bge.n	80070f4 <_printf_i+0xc8>
 80070ec:	232d      	movs	r3, #45	; 0x2d
 80070ee:	4276      	negs	r6, r6
 80070f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070f4:	230a      	movs	r3, #10
 80070f6:	485e      	ldr	r0, [pc, #376]	; (8007270 <_printf_i+0x244>)
 80070f8:	e019      	b.n	800712e <_printf_i+0x102>
 80070fa:	680e      	ldr	r6, [r1, #0]
 80070fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007100:	602b      	str	r3, [r5, #0]
 8007102:	bf18      	it	ne
 8007104:	b236      	sxthne	r6, r6
 8007106:	e7ef      	b.n	80070e8 <_printf_i+0xbc>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	6820      	ldr	r0, [r4, #0]
 800710c:	1d19      	adds	r1, r3, #4
 800710e:	6029      	str	r1, [r5, #0]
 8007110:	0601      	lsls	r1, r0, #24
 8007112:	d501      	bpl.n	8007118 <_printf_i+0xec>
 8007114:	681e      	ldr	r6, [r3, #0]
 8007116:	e002      	b.n	800711e <_printf_i+0xf2>
 8007118:	0646      	lsls	r6, r0, #25
 800711a:	d5fb      	bpl.n	8007114 <_printf_i+0xe8>
 800711c:	881e      	ldrh	r6, [r3, #0]
 800711e:	2f6f      	cmp	r7, #111	; 0x6f
 8007120:	bf0c      	ite	eq
 8007122:	2308      	moveq	r3, #8
 8007124:	230a      	movne	r3, #10
 8007126:	4852      	ldr	r0, [pc, #328]	; (8007270 <_printf_i+0x244>)
 8007128:	2100      	movs	r1, #0
 800712a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800712e:	6865      	ldr	r5, [r4, #4]
 8007130:	2d00      	cmp	r5, #0
 8007132:	bfa8      	it	ge
 8007134:	6821      	ldrge	r1, [r4, #0]
 8007136:	60a5      	str	r5, [r4, #8]
 8007138:	bfa4      	itt	ge
 800713a:	f021 0104 	bicge.w	r1, r1, #4
 800713e:	6021      	strge	r1, [r4, #0]
 8007140:	b90e      	cbnz	r6, 8007146 <_printf_i+0x11a>
 8007142:	2d00      	cmp	r5, #0
 8007144:	d04d      	beq.n	80071e2 <_printf_i+0x1b6>
 8007146:	4615      	mov	r5, r2
 8007148:	fbb6 f1f3 	udiv	r1, r6, r3
 800714c:	fb03 6711 	mls	r7, r3, r1, r6
 8007150:	5dc7      	ldrb	r7, [r0, r7]
 8007152:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007156:	4637      	mov	r7, r6
 8007158:	42bb      	cmp	r3, r7
 800715a:	460e      	mov	r6, r1
 800715c:	d9f4      	bls.n	8007148 <_printf_i+0x11c>
 800715e:	2b08      	cmp	r3, #8
 8007160:	d10b      	bne.n	800717a <_printf_i+0x14e>
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	07de      	lsls	r6, r3, #31
 8007166:	d508      	bpl.n	800717a <_printf_i+0x14e>
 8007168:	6923      	ldr	r3, [r4, #16]
 800716a:	6861      	ldr	r1, [r4, #4]
 800716c:	4299      	cmp	r1, r3
 800716e:	bfde      	ittt	le
 8007170:	2330      	movle	r3, #48	; 0x30
 8007172:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007176:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800717a:	1b52      	subs	r2, r2, r5
 800717c:	6122      	str	r2, [r4, #16]
 800717e:	464b      	mov	r3, r9
 8007180:	4621      	mov	r1, r4
 8007182:	4640      	mov	r0, r8
 8007184:	f8cd a000 	str.w	sl, [sp]
 8007188:	aa03      	add	r2, sp, #12
 800718a:	f7ff fedf 	bl	8006f4c <_printf_common>
 800718e:	3001      	adds	r0, #1
 8007190:	d14c      	bne.n	800722c <_printf_i+0x200>
 8007192:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007196:	b004      	add	sp, #16
 8007198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719c:	4834      	ldr	r0, [pc, #208]	; (8007270 <_printf_i+0x244>)
 800719e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071a2:	6829      	ldr	r1, [r5, #0]
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80071aa:	6029      	str	r1, [r5, #0]
 80071ac:	061d      	lsls	r5, r3, #24
 80071ae:	d514      	bpl.n	80071da <_printf_i+0x1ae>
 80071b0:	07df      	lsls	r7, r3, #31
 80071b2:	bf44      	itt	mi
 80071b4:	f043 0320 	orrmi.w	r3, r3, #32
 80071b8:	6023      	strmi	r3, [r4, #0]
 80071ba:	b91e      	cbnz	r6, 80071c4 <_printf_i+0x198>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	f023 0320 	bic.w	r3, r3, #32
 80071c2:	6023      	str	r3, [r4, #0]
 80071c4:	2310      	movs	r3, #16
 80071c6:	e7af      	b.n	8007128 <_printf_i+0xfc>
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	f043 0320 	orr.w	r3, r3, #32
 80071ce:	6023      	str	r3, [r4, #0]
 80071d0:	2378      	movs	r3, #120	; 0x78
 80071d2:	4828      	ldr	r0, [pc, #160]	; (8007274 <_printf_i+0x248>)
 80071d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071d8:	e7e3      	b.n	80071a2 <_printf_i+0x176>
 80071da:	0659      	lsls	r1, r3, #25
 80071dc:	bf48      	it	mi
 80071de:	b2b6      	uxthmi	r6, r6
 80071e0:	e7e6      	b.n	80071b0 <_printf_i+0x184>
 80071e2:	4615      	mov	r5, r2
 80071e4:	e7bb      	b.n	800715e <_printf_i+0x132>
 80071e6:	682b      	ldr	r3, [r5, #0]
 80071e8:	6826      	ldr	r6, [r4, #0]
 80071ea:	1d18      	adds	r0, r3, #4
 80071ec:	6961      	ldr	r1, [r4, #20]
 80071ee:	6028      	str	r0, [r5, #0]
 80071f0:	0635      	lsls	r5, r6, #24
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	d501      	bpl.n	80071fa <_printf_i+0x1ce>
 80071f6:	6019      	str	r1, [r3, #0]
 80071f8:	e002      	b.n	8007200 <_printf_i+0x1d4>
 80071fa:	0670      	lsls	r0, r6, #25
 80071fc:	d5fb      	bpl.n	80071f6 <_printf_i+0x1ca>
 80071fe:	8019      	strh	r1, [r3, #0]
 8007200:	2300      	movs	r3, #0
 8007202:	4615      	mov	r5, r2
 8007204:	6123      	str	r3, [r4, #16]
 8007206:	e7ba      	b.n	800717e <_printf_i+0x152>
 8007208:	682b      	ldr	r3, [r5, #0]
 800720a:	2100      	movs	r1, #0
 800720c:	1d1a      	adds	r2, r3, #4
 800720e:	602a      	str	r2, [r5, #0]
 8007210:	681d      	ldr	r5, [r3, #0]
 8007212:	6862      	ldr	r2, [r4, #4]
 8007214:	4628      	mov	r0, r5
 8007216:	f000 fb13 	bl	8007840 <memchr>
 800721a:	b108      	cbz	r0, 8007220 <_printf_i+0x1f4>
 800721c:	1b40      	subs	r0, r0, r5
 800721e:	6060      	str	r0, [r4, #4]
 8007220:	6863      	ldr	r3, [r4, #4]
 8007222:	6123      	str	r3, [r4, #16]
 8007224:	2300      	movs	r3, #0
 8007226:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800722a:	e7a8      	b.n	800717e <_printf_i+0x152>
 800722c:	462a      	mov	r2, r5
 800722e:	4649      	mov	r1, r9
 8007230:	4640      	mov	r0, r8
 8007232:	6923      	ldr	r3, [r4, #16]
 8007234:	47d0      	blx	sl
 8007236:	3001      	adds	r0, #1
 8007238:	d0ab      	beq.n	8007192 <_printf_i+0x166>
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	079b      	lsls	r3, r3, #30
 800723e:	d413      	bmi.n	8007268 <_printf_i+0x23c>
 8007240:	68e0      	ldr	r0, [r4, #12]
 8007242:	9b03      	ldr	r3, [sp, #12]
 8007244:	4298      	cmp	r0, r3
 8007246:	bfb8      	it	lt
 8007248:	4618      	movlt	r0, r3
 800724a:	e7a4      	b.n	8007196 <_printf_i+0x16a>
 800724c:	2301      	movs	r3, #1
 800724e:	4632      	mov	r2, r6
 8007250:	4649      	mov	r1, r9
 8007252:	4640      	mov	r0, r8
 8007254:	47d0      	blx	sl
 8007256:	3001      	adds	r0, #1
 8007258:	d09b      	beq.n	8007192 <_printf_i+0x166>
 800725a:	3501      	adds	r5, #1
 800725c:	68e3      	ldr	r3, [r4, #12]
 800725e:	9903      	ldr	r1, [sp, #12]
 8007260:	1a5b      	subs	r3, r3, r1
 8007262:	42ab      	cmp	r3, r5
 8007264:	dcf2      	bgt.n	800724c <_printf_i+0x220>
 8007266:	e7eb      	b.n	8007240 <_printf_i+0x214>
 8007268:	2500      	movs	r5, #0
 800726a:	f104 0619 	add.w	r6, r4, #25
 800726e:	e7f5      	b.n	800725c <_printf_i+0x230>
 8007270:	08007c35 	.word	0x08007c35
 8007274:	08007c46 	.word	0x08007c46

08007278 <__swbuf_r>:
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	460e      	mov	r6, r1
 800727c:	4614      	mov	r4, r2
 800727e:	4605      	mov	r5, r0
 8007280:	b118      	cbz	r0, 800728a <__swbuf_r+0x12>
 8007282:	6983      	ldr	r3, [r0, #24]
 8007284:	b90b      	cbnz	r3, 800728a <__swbuf_r+0x12>
 8007286:	f000 f9d5 	bl	8007634 <__sinit>
 800728a:	4b21      	ldr	r3, [pc, #132]	; (8007310 <__swbuf_r+0x98>)
 800728c:	429c      	cmp	r4, r3
 800728e:	d12b      	bne.n	80072e8 <__swbuf_r+0x70>
 8007290:	686c      	ldr	r4, [r5, #4]
 8007292:	69a3      	ldr	r3, [r4, #24]
 8007294:	60a3      	str	r3, [r4, #8]
 8007296:	89a3      	ldrh	r3, [r4, #12]
 8007298:	071a      	lsls	r2, r3, #28
 800729a:	d52f      	bpl.n	80072fc <__swbuf_r+0x84>
 800729c:	6923      	ldr	r3, [r4, #16]
 800729e:	b36b      	cbz	r3, 80072fc <__swbuf_r+0x84>
 80072a0:	6923      	ldr	r3, [r4, #16]
 80072a2:	6820      	ldr	r0, [r4, #0]
 80072a4:	b2f6      	uxtb	r6, r6
 80072a6:	1ac0      	subs	r0, r0, r3
 80072a8:	6963      	ldr	r3, [r4, #20]
 80072aa:	4637      	mov	r7, r6
 80072ac:	4283      	cmp	r3, r0
 80072ae:	dc04      	bgt.n	80072ba <__swbuf_r+0x42>
 80072b0:	4621      	mov	r1, r4
 80072b2:	4628      	mov	r0, r5
 80072b4:	f000 f92a 	bl	800750c <_fflush_r>
 80072b8:	bb30      	cbnz	r0, 8007308 <__swbuf_r+0x90>
 80072ba:	68a3      	ldr	r3, [r4, #8]
 80072bc:	3001      	adds	r0, #1
 80072be:	3b01      	subs	r3, #1
 80072c0:	60a3      	str	r3, [r4, #8]
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	6022      	str	r2, [r4, #0]
 80072c8:	701e      	strb	r6, [r3, #0]
 80072ca:	6963      	ldr	r3, [r4, #20]
 80072cc:	4283      	cmp	r3, r0
 80072ce:	d004      	beq.n	80072da <__swbuf_r+0x62>
 80072d0:	89a3      	ldrh	r3, [r4, #12]
 80072d2:	07db      	lsls	r3, r3, #31
 80072d4:	d506      	bpl.n	80072e4 <__swbuf_r+0x6c>
 80072d6:	2e0a      	cmp	r6, #10
 80072d8:	d104      	bne.n	80072e4 <__swbuf_r+0x6c>
 80072da:	4621      	mov	r1, r4
 80072dc:	4628      	mov	r0, r5
 80072de:	f000 f915 	bl	800750c <_fflush_r>
 80072e2:	b988      	cbnz	r0, 8007308 <__swbuf_r+0x90>
 80072e4:	4638      	mov	r0, r7
 80072e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072e8:	4b0a      	ldr	r3, [pc, #40]	; (8007314 <__swbuf_r+0x9c>)
 80072ea:	429c      	cmp	r4, r3
 80072ec:	d101      	bne.n	80072f2 <__swbuf_r+0x7a>
 80072ee:	68ac      	ldr	r4, [r5, #8]
 80072f0:	e7cf      	b.n	8007292 <__swbuf_r+0x1a>
 80072f2:	4b09      	ldr	r3, [pc, #36]	; (8007318 <__swbuf_r+0xa0>)
 80072f4:	429c      	cmp	r4, r3
 80072f6:	bf08      	it	eq
 80072f8:	68ec      	ldreq	r4, [r5, #12]
 80072fa:	e7ca      	b.n	8007292 <__swbuf_r+0x1a>
 80072fc:	4621      	mov	r1, r4
 80072fe:	4628      	mov	r0, r5
 8007300:	f000 f80c 	bl	800731c <__swsetup_r>
 8007304:	2800      	cmp	r0, #0
 8007306:	d0cb      	beq.n	80072a0 <__swbuf_r+0x28>
 8007308:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800730c:	e7ea      	b.n	80072e4 <__swbuf_r+0x6c>
 800730e:	bf00      	nop
 8007310:	08007c78 	.word	0x08007c78
 8007314:	08007c98 	.word	0x08007c98
 8007318:	08007c58 	.word	0x08007c58

0800731c <__swsetup_r>:
 800731c:	4b32      	ldr	r3, [pc, #200]	; (80073e8 <__swsetup_r+0xcc>)
 800731e:	b570      	push	{r4, r5, r6, lr}
 8007320:	681d      	ldr	r5, [r3, #0]
 8007322:	4606      	mov	r6, r0
 8007324:	460c      	mov	r4, r1
 8007326:	b125      	cbz	r5, 8007332 <__swsetup_r+0x16>
 8007328:	69ab      	ldr	r3, [r5, #24]
 800732a:	b913      	cbnz	r3, 8007332 <__swsetup_r+0x16>
 800732c:	4628      	mov	r0, r5
 800732e:	f000 f981 	bl	8007634 <__sinit>
 8007332:	4b2e      	ldr	r3, [pc, #184]	; (80073ec <__swsetup_r+0xd0>)
 8007334:	429c      	cmp	r4, r3
 8007336:	d10f      	bne.n	8007358 <__swsetup_r+0x3c>
 8007338:	686c      	ldr	r4, [r5, #4]
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007340:	0719      	lsls	r1, r3, #28
 8007342:	d42c      	bmi.n	800739e <__swsetup_r+0x82>
 8007344:	06dd      	lsls	r5, r3, #27
 8007346:	d411      	bmi.n	800736c <__swsetup_r+0x50>
 8007348:	2309      	movs	r3, #9
 800734a:	6033      	str	r3, [r6, #0]
 800734c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007354:	81a3      	strh	r3, [r4, #12]
 8007356:	e03e      	b.n	80073d6 <__swsetup_r+0xba>
 8007358:	4b25      	ldr	r3, [pc, #148]	; (80073f0 <__swsetup_r+0xd4>)
 800735a:	429c      	cmp	r4, r3
 800735c:	d101      	bne.n	8007362 <__swsetup_r+0x46>
 800735e:	68ac      	ldr	r4, [r5, #8]
 8007360:	e7eb      	b.n	800733a <__swsetup_r+0x1e>
 8007362:	4b24      	ldr	r3, [pc, #144]	; (80073f4 <__swsetup_r+0xd8>)
 8007364:	429c      	cmp	r4, r3
 8007366:	bf08      	it	eq
 8007368:	68ec      	ldreq	r4, [r5, #12]
 800736a:	e7e6      	b.n	800733a <__swsetup_r+0x1e>
 800736c:	0758      	lsls	r0, r3, #29
 800736e:	d512      	bpl.n	8007396 <__swsetup_r+0x7a>
 8007370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007372:	b141      	cbz	r1, 8007386 <__swsetup_r+0x6a>
 8007374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007378:	4299      	cmp	r1, r3
 800737a:	d002      	beq.n	8007382 <__swsetup_r+0x66>
 800737c:	4630      	mov	r0, r6
 800737e:	f7ff f98d 	bl	800669c <_free_r>
 8007382:	2300      	movs	r3, #0
 8007384:	6363      	str	r3, [r4, #52]	; 0x34
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800738c:	81a3      	strh	r3, [r4, #12]
 800738e:	2300      	movs	r3, #0
 8007390:	6063      	str	r3, [r4, #4]
 8007392:	6923      	ldr	r3, [r4, #16]
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	89a3      	ldrh	r3, [r4, #12]
 8007398:	f043 0308 	orr.w	r3, r3, #8
 800739c:	81a3      	strh	r3, [r4, #12]
 800739e:	6923      	ldr	r3, [r4, #16]
 80073a0:	b94b      	cbnz	r3, 80073b6 <__swsetup_r+0x9a>
 80073a2:	89a3      	ldrh	r3, [r4, #12]
 80073a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ac:	d003      	beq.n	80073b6 <__swsetup_r+0x9a>
 80073ae:	4621      	mov	r1, r4
 80073b0:	4630      	mov	r0, r6
 80073b2:	f000 fa05 	bl	80077c0 <__smakebuf_r>
 80073b6:	89a0      	ldrh	r0, [r4, #12]
 80073b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073bc:	f010 0301 	ands.w	r3, r0, #1
 80073c0:	d00a      	beq.n	80073d8 <__swsetup_r+0xbc>
 80073c2:	2300      	movs	r3, #0
 80073c4:	60a3      	str	r3, [r4, #8]
 80073c6:	6963      	ldr	r3, [r4, #20]
 80073c8:	425b      	negs	r3, r3
 80073ca:	61a3      	str	r3, [r4, #24]
 80073cc:	6923      	ldr	r3, [r4, #16]
 80073ce:	b943      	cbnz	r3, 80073e2 <__swsetup_r+0xc6>
 80073d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073d4:	d1ba      	bne.n	800734c <__swsetup_r+0x30>
 80073d6:	bd70      	pop	{r4, r5, r6, pc}
 80073d8:	0781      	lsls	r1, r0, #30
 80073da:	bf58      	it	pl
 80073dc:	6963      	ldrpl	r3, [r4, #20]
 80073de:	60a3      	str	r3, [r4, #8]
 80073e0:	e7f4      	b.n	80073cc <__swsetup_r+0xb0>
 80073e2:	2000      	movs	r0, #0
 80073e4:	e7f7      	b.n	80073d6 <__swsetup_r+0xba>
 80073e6:	bf00      	nop
 80073e8:	200001a4 	.word	0x200001a4
 80073ec:	08007c78 	.word	0x08007c78
 80073f0:	08007c98 	.word	0x08007c98
 80073f4:	08007c58 	.word	0x08007c58

080073f8 <abort>:
 80073f8:	2006      	movs	r0, #6
 80073fa:	b508      	push	{r3, lr}
 80073fc:	f000 faa0 	bl	8007940 <raise>
 8007400:	2001      	movs	r0, #1
 8007402:	f7f9 faf8 	bl	80009f6 <_exit>
	...

08007408 <__sflush_r>:
 8007408:	898a      	ldrh	r2, [r1, #12]
 800740a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740c:	4605      	mov	r5, r0
 800740e:	0710      	lsls	r0, r2, #28
 8007410:	460c      	mov	r4, r1
 8007412:	d457      	bmi.n	80074c4 <__sflush_r+0xbc>
 8007414:	684b      	ldr	r3, [r1, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	dc04      	bgt.n	8007424 <__sflush_r+0x1c>
 800741a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800741c:	2b00      	cmp	r3, #0
 800741e:	dc01      	bgt.n	8007424 <__sflush_r+0x1c>
 8007420:	2000      	movs	r0, #0
 8007422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007424:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007426:	2e00      	cmp	r6, #0
 8007428:	d0fa      	beq.n	8007420 <__sflush_r+0x18>
 800742a:	2300      	movs	r3, #0
 800742c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007430:	682f      	ldr	r7, [r5, #0]
 8007432:	602b      	str	r3, [r5, #0]
 8007434:	d032      	beq.n	800749c <__sflush_r+0x94>
 8007436:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	075a      	lsls	r2, r3, #29
 800743c:	d505      	bpl.n	800744a <__sflush_r+0x42>
 800743e:	6863      	ldr	r3, [r4, #4]
 8007440:	1ac0      	subs	r0, r0, r3
 8007442:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007444:	b10b      	cbz	r3, 800744a <__sflush_r+0x42>
 8007446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007448:	1ac0      	subs	r0, r0, r3
 800744a:	2300      	movs	r3, #0
 800744c:	4602      	mov	r2, r0
 800744e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007450:	4628      	mov	r0, r5
 8007452:	6a21      	ldr	r1, [r4, #32]
 8007454:	47b0      	blx	r6
 8007456:	1c43      	adds	r3, r0, #1
 8007458:	89a3      	ldrh	r3, [r4, #12]
 800745a:	d106      	bne.n	800746a <__sflush_r+0x62>
 800745c:	6829      	ldr	r1, [r5, #0]
 800745e:	291d      	cmp	r1, #29
 8007460:	d82c      	bhi.n	80074bc <__sflush_r+0xb4>
 8007462:	4a29      	ldr	r2, [pc, #164]	; (8007508 <__sflush_r+0x100>)
 8007464:	40ca      	lsrs	r2, r1
 8007466:	07d6      	lsls	r6, r2, #31
 8007468:	d528      	bpl.n	80074bc <__sflush_r+0xb4>
 800746a:	2200      	movs	r2, #0
 800746c:	6062      	str	r2, [r4, #4]
 800746e:	6922      	ldr	r2, [r4, #16]
 8007470:	04d9      	lsls	r1, r3, #19
 8007472:	6022      	str	r2, [r4, #0]
 8007474:	d504      	bpl.n	8007480 <__sflush_r+0x78>
 8007476:	1c42      	adds	r2, r0, #1
 8007478:	d101      	bne.n	800747e <__sflush_r+0x76>
 800747a:	682b      	ldr	r3, [r5, #0]
 800747c:	b903      	cbnz	r3, 8007480 <__sflush_r+0x78>
 800747e:	6560      	str	r0, [r4, #84]	; 0x54
 8007480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007482:	602f      	str	r7, [r5, #0]
 8007484:	2900      	cmp	r1, #0
 8007486:	d0cb      	beq.n	8007420 <__sflush_r+0x18>
 8007488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800748c:	4299      	cmp	r1, r3
 800748e:	d002      	beq.n	8007496 <__sflush_r+0x8e>
 8007490:	4628      	mov	r0, r5
 8007492:	f7ff f903 	bl	800669c <_free_r>
 8007496:	2000      	movs	r0, #0
 8007498:	6360      	str	r0, [r4, #52]	; 0x34
 800749a:	e7c2      	b.n	8007422 <__sflush_r+0x1a>
 800749c:	6a21      	ldr	r1, [r4, #32]
 800749e:	2301      	movs	r3, #1
 80074a0:	4628      	mov	r0, r5
 80074a2:	47b0      	blx	r6
 80074a4:	1c41      	adds	r1, r0, #1
 80074a6:	d1c7      	bne.n	8007438 <__sflush_r+0x30>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0c4      	beq.n	8007438 <__sflush_r+0x30>
 80074ae:	2b1d      	cmp	r3, #29
 80074b0:	d001      	beq.n	80074b6 <__sflush_r+0xae>
 80074b2:	2b16      	cmp	r3, #22
 80074b4:	d101      	bne.n	80074ba <__sflush_r+0xb2>
 80074b6:	602f      	str	r7, [r5, #0]
 80074b8:	e7b2      	b.n	8007420 <__sflush_r+0x18>
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074c0:	81a3      	strh	r3, [r4, #12]
 80074c2:	e7ae      	b.n	8007422 <__sflush_r+0x1a>
 80074c4:	690f      	ldr	r7, [r1, #16]
 80074c6:	2f00      	cmp	r7, #0
 80074c8:	d0aa      	beq.n	8007420 <__sflush_r+0x18>
 80074ca:	0793      	lsls	r3, r2, #30
 80074cc:	bf18      	it	ne
 80074ce:	2300      	movne	r3, #0
 80074d0:	680e      	ldr	r6, [r1, #0]
 80074d2:	bf08      	it	eq
 80074d4:	694b      	ldreq	r3, [r1, #20]
 80074d6:	1bf6      	subs	r6, r6, r7
 80074d8:	600f      	str	r7, [r1, #0]
 80074da:	608b      	str	r3, [r1, #8]
 80074dc:	2e00      	cmp	r6, #0
 80074de:	dd9f      	ble.n	8007420 <__sflush_r+0x18>
 80074e0:	4633      	mov	r3, r6
 80074e2:	463a      	mov	r2, r7
 80074e4:	4628      	mov	r0, r5
 80074e6:	6a21      	ldr	r1, [r4, #32]
 80074e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80074ec:	47e0      	blx	ip
 80074ee:	2800      	cmp	r0, #0
 80074f0:	dc06      	bgt.n	8007500 <__sflush_r+0xf8>
 80074f2:	89a3      	ldrh	r3, [r4, #12]
 80074f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074fc:	81a3      	strh	r3, [r4, #12]
 80074fe:	e790      	b.n	8007422 <__sflush_r+0x1a>
 8007500:	4407      	add	r7, r0
 8007502:	1a36      	subs	r6, r6, r0
 8007504:	e7ea      	b.n	80074dc <__sflush_r+0xd4>
 8007506:	bf00      	nop
 8007508:	20400001 	.word	0x20400001

0800750c <_fflush_r>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	690b      	ldr	r3, [r1, #16]
 8007510:	4605      	mov	r5, r0
 8007512:	460c      	mov	r4, r1
 8007514:	b913      	cbnz	r3, 800751c <_fflush_r+0x10>
 8007516:	2500      	movs	r5, #0
 8007518:	4628      	mov	r0, r5
 800751a:	bd38      	pop	{r3, r4, r5, pc}
 800751c:	b118      	cbz	r0, 8007526 <_fflush_r+0x1a>
 800751e:	6983      	ldr	r3, [r0, #24]
 8007520:	b90b      	cbnz	r3, 8007526 <_fflush_r+0x1a>
 8007522:	f000 f887 	bl	8007634 <__sinit>
 8007526:	4b14      	ldr	r3, [pc, #80]	; (8007578 <_fflush_r+0x6c>)
 8007528:	429c      	cmp	r4, r3
 800752a:	d11b      	bne.n	8007564 <_fflush_r+0x58>
 800752c:	686c      	ldr	r4, [r5, #4]
 800752e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0ef      	beq.n	8007516 <_fflush_r+0xa>
 8007536:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007538:	07d0      	lsls	r0, r2, #31
 800753a:	d404      	bmi.n	8007546 <_fflush_r+0x3a>
 800753c:	0599      	lsls	r1, r3, #22
 800753e:	d402      	bmi.n	8007546 <_fflush_r+0x3a>
 8007540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007542:	f000 f915 	bl	8007770 <__retarget_lock_acquire_recursive>
 8007546:	4628      	mov	r0, r5
 8007548:	4621      	mov	r1, r4
 800754a:	f7ff ff5d 	bl	8007408 <__sflush_r>
 800754e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007550:	4605      	mov	r5, r0
 8007552:	07da      	lsls	r2, r3, #31
 8007554:	d4e0      	bmi.n	8007518 <_fflush_r+0xc>
 8007556:	89a3      	ldrh	r3, [r4, #12]
 8007558:	059b      	lsls	r3, r3, #22
 800755a:	d4dd      	bmi.n	8007518 <_fflush_r+0xc>
 800755c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800755e:	f000 f908 	bl	8007772 <__retarget_lock_release_recursive>
 8007562:	e7d9      	b.n	8007518 <_fflush_r+0xc>
 8007564:	4b05      	ldr	r3, [pc, #20]	; (800757c <_fflush_r+0x70>)
 8007566:	429c      	cmp	r4, r3
 8007568:	d101      	bne.n	800756e <_fflush_r+0x62>
 800756a:	68ac      	ldr	r4, [r5, #8]
 800756c:	e7df      	b.n	800752e <_fflush_r+0x22>
 800756e:	4b04      	ldr	r3, [pc, #16]	; (8007580 <_fflush_r+0x74>)
 8007570:	429c      	cmp	r4, r3
 8007572:	bf08      	it	eq
 8007574:	68ec      	ldreq	r4, [r5, #12]
 8007576:	e7da      	b.n	800752e <_fflush_r+0x22>
 8007578:	08007c78 	.word	0x08007c78
 800757c:	08007c98 	.word	0x08007c98
 8007580:	08007c58 	.word	0x08007c58

08007584 <std>:
 8007584:	2300      	movs	r3, #0
 8007586:	b510      	push	{r4, lr}
 8007588:	4604      	mov	r4, r0
 800758a:	e9c0 3300 	strd	r3, r3, [r0]
 800758e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007592:	6083      	str	r3, [r0, #8]
 8007594:	8181      	strh	r1, [r0, #12]
 8007596:	6643      	str	r3, [r0, #100]	; 0x64
 8007598:	81c2      	strh	r2, [r0, #14]
 800759a:	6183      	str	r3, [r0, #24]
 800759c:	4619      	mov	r1, r3
 800759e:	2208      	movs	r2, #8
 80075a0:	305c      	adds	r0, #92	; 0x5c
 80075a2:	f7ff f873 	bl	800668c <memset>
 80075a6:	4b05      	ldr	r3, [pc, #20]	; (80075bc <std+0x38>)
 80075a8:	6224      	str	r4, [r4, #32]
 80075aa:	6263      	str	r3, [r4, #36]	; 0x24
 80075ac:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <std+0x3c>)
 80075ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80075b0:	4b04      	ldr	r3, [pc, #16]	; (80075c4 <std+0x40>)
 80075b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075b4:	4b04      	ldr	r3, [pc, #16]	; (80075c8 <std+0x44>)
 80075b6:	6323      	str	r3, [r4, #48]	; 0x30
 80075b8:	bd10      	pop	{r4, pc}
 80075ba:	bf00      	nop
 80075bc:	08007979 	.word	0x08007979
 80075c0:	0800799b 	.word	0x0800799b
 80075c4:	080079d3 	.word	0x080079d3
 80075c8:	080079f7 	.word	0x080079f7

080075cc <_cleanup_r>:
 80075cc:	4901      	ldr	r1, [pc, #4]	; (80075d4 <_cleanup_r+0x8>)
 80075ce:	f000 b8af 	b.w	8007730 <_fwalk_reent>
 80075d2:	bf00      	nop
 80075d4:	0800750d 	.word	0x0800750d

080075d8 <__sfmoreglue>:
 80075d8:	2268      	movs	r2, #104	; 0x68
 80075da:	b570      	push	{r4, r5, r6, lr}
 80075dc:	1e4d      	subs	r5, r1, #1
 80075de:	4355      	muls	r5, r2
 80075e0:	460e      	mov	r6, r1
 80075e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075e6:	f7ff f8c1 	bl	800676c <_malloc_r>
 80075ea:	4604      	mov	r4, r0
 80075ec:	b140      	cbz	r0, 8007600 <__sfmoreglue+0x28>
 80075ee:	2100      	movs	r1, #0
 80075f0:	e9c0 1600 	strd	r1, r6, [r0]
 80075f4:	300c      	adds	r0, #12
 80075f6:	60a0      	str	r0, [r4, #8]
 80075f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075fc:	f7ff f846 	bl	800668c <memset>
 8007600:	4620      	mov	r0, r4
 8007602:	bd70      	pop	{r4, r5, r6, pc}

08007604 <__sfp_lock_acquire>:
 8007604:	4801      	ldr	r0, [pc, #4]	; (800760c <__sfp_lock_acquire+0x8>)
 8007606:	f000 b8b3 	b.w	8007770 <__retarget_lock_acquire_recursive>
 800760a:	bf00      	nop
 800760c:	20002f55 	.word	0x20002f55

08007610 <__sfp_lock_release>:
 8007610:	4801      	ldr	r0, [pc, #4]	; (8007618 <__sfp_lock_release+0x8>)
 8007612:	f000 b8ae 	b.w	8007772 <__retarget_lock_release_recursive>
 8007616:	bf00      	nop
 8007618:	20002f55 	.word	0x20002f55

0800761c <__sinit_lock_acquire>:
 800761c:	4801      	ldr	r0, [pc, #4]	; (8007624 <__sinit_lock_acquire+0x8>)
 800761e:	f000 b8a7 	b.w	8007770 <__retarget_lock_acquire_recursive>
 8007622:	bf00      	nop
 8007624:	20002f56 	.word	0x20002f56

08007628 <__sinit_lock_release>:
 8007628:	4801      	ldr	r0, [pc, #4]	; (8007630 <__sinit_lock_release+0x8>)
 800762a:	f000 b8a2 	b.w	8007772 <__retarget_lock_release_recursive>
 800762e:	bf00      	nop
 8007630:	20002f56 	.word	0x20002f56

08007634 <__sinit>:
 8007634:	b510      	push	{r4, lr}
 8007636:	4604      	mov	r4, r0
 8007638:	f7ff fff0 	bl	800761c <__sinit_lock_acquire>
 800763c:	69a3      	ldr	r3, [r4, #24]
 800763e:	b11b      	cbz	r3, 8007648 <__sinit+0x14>
 8007640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007644:	f7ff bff0 	b.w	8007628 <__sinit_lock_release>
 8007648:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800764c:	6523      	str	r3, [r4, #80]	; 0x50
 800764e:	4b13      	ldr	r3, [pc, #76]	; (800769c <__sinit+0x68>)
 8007650:	4a13      	ldr	r2, [pc, #76]	; (80076a0 <__sinit+0x6c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	62a2      	str	r2, [r4, #40]	; 0x28
 8007656:	42a3      	cmp	r3, r4
 8007658:	bf08      	it	eq
 800765a:	2301      	moveq	r3, #1
 800765c:	4620      	mov	r0, r4
 800765e:	bf08      	it	eq
 8007660:	61a3      	streq	r3, [r4, #24]
 8007662:	f000 f81f 	bl	80076a4 <__sfp>
 8007666:	6060      	str	r0, [r4, #4]
 8007668:	4620      	mov	r0, r4
 800766a:	f000 f81b 	bl	80076a4 <__sfp>
 800766e:	60a0      	str	r0, [r4, #8]
 8007670:	4620      	mov	r0, r4
 8007672:	f000 f817 	bl	80076a4 <__sfp>
 8007676:	2200      	movs	r2, #0
 8007678:	2104      	movs	r1, #4
 800767a:	60e0      	str	r0, [r4, #12]
 800767c:	6860      	ldr	r0, [r4, #4]
 800767e:	f7ff ff81 	bl	8007584 <std>
 8007682:	2201      	movs	r2, #1
 8007684:	2109      	movs	r1, #9
 8007686:	68a0      	ldr	r0, [r4, #8]
 8007688:	f7ff ff7c 	bl	8007584 <std>
 800768c:	2202      	movs	r2, #2
 800768e:	2112      	movs	r1, #18
 8007690:	68e0      	ldr	r0, [r4, #12]
 8007692:	f7ff ff77 	bl	8007584 <std>
 8007696:	2301      	movs	r3, #1
 8007698:	61a3      	str	r3, [r4, #24]
 800769a:	e7d1      	b.n	8007640 <__sinit+0xc>
 800769c:	08007b70 	.word	0x08007b70
 80076a0:	080075cd 	.word	0x080075cd

080076a4 <__sfp>:
 80076a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a6:	4607      	mov	r7, r0
 80076a8:	f7ff ffac 	bl	8007604 <__sfp_lock_acquire>
 80076ac:	4b1e      	ldr	r3, [pc, #120]	; (8007728 <__sfp+0x84>)
 80076ae:	681e      	ldr	r6, [r3, #0]
 80076b0:	69b3      	ldr	r3, [r6, #24]
 80076b2:	b913      	cbnz	r3, 80076ba <__sfp+0x16>
 80076b4:	4630      	mov	r0, r6
 80076b6:	f7ff ffbd 	bl	8007634 <__sinit>
 80076ba:	3648      	adds	r6, #72	; 0x48
 80076bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076c0:	3b01      	subs	r3, #1
 80076c2:	d503      	bpl.n	80076cc <__sfp+0x28>
 80076c4:	6833      	ldr	r3, [r6, #0]
 80076c6:	b30b      	cbz	r3, 800770c <__sfp+0x68>
 80076c8:	6836      	ldr	r6, [r6, #0]
 80076ca:	e7f7      	b.n	80076bc <__sfp+0x18>
 80076cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076d0:	b9d5      	cbnz	r5, 8007708 <__sfp+0x64>
 80076d2:	4b16      	ldr	r3, [pc, #88]	; (800772c <__sfp+0x88>)
 80076d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076d8:	60e3      	str	r3, [r4, #12]
 80076da:	6665      	str	r5, [r4, #100]	; 0x64
 80076dc:	f000 f847 	bl	800776e <__retarget_lock_init_recursive>
 80076e0:	f7ff ff96 	bl	8007610 <__sfp_lock_release>
 80076e4:	2208      	movs	r2, #8
 80076e6:	4629      	mov	r1, r5
 80076e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076f0:	6025      	str	r5, [r4, #0]
 80076f2:	61a5      	str	r5, [r4, #24]
 80076f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076f8:	f7fe ffc8 	bl	800668c <memset>
 80076fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007700:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007704:	4620      	mov	r0, r4
 8007706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007708:	3468      	adds	r4, #104	; 0x68
 800770a:	e7d9      	b.n	80076c0 <__sfp+0x1c>
 800770c:	2104      	movs	r1, #4
 800770e:	4638      	mov	r0, r7
 8007710:	f7ff ff62 	bl	80075d8 <__sfmoreglue>
 8007714:	4604      	mov	r4, r0
 8007716:	6030      	str	r0, [r6, #0]
 8007718:	2800      	cmp	r0, #0
 800771a:	d1d5      	bne.n	80076c8 <__sfp+0x24>
 800771c:	f7ff ff78 	bl	8007610 <__sfp_lock_release>
 8007720:	230c      	movs	r3, #12
 8007722:	603b      	str	r3, [r7, #0]
 8007724:	e7ee      	b.n	8007704 <__sfp+0x60>
 8007726:	bf00      	nop
 8007728:	08007b70 	.word	0x08007b70
 800772c:	ffff0001 	.word	0xffff0001

08007730 <_fwalk_reent>:
 8007730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007734:	4606      	mov	r6, r0
 8007736:	4688      	mov	r8, r1
 8007738:	2700      	movs	r7, #0
 800773a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800773e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007742:	f1b9 0901 	subs.w	r9, r9, #1
 8007746:	d505      	bpl.n	8007754 <_fwalk_reent+0x24>
 8007748:	6824      	ldr	r4, [r4, #0]
 800774a:	2c00      	cmp	r4, #0
 800774c:	d1f7      	bne.n	800773e <_fwalk_reent+0xe>
 800774e:	4638      	mov	r0, r7
 8007750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007754:	89ab      	ldrh	r3, [r5, #12]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d907      	bls.n	800776a <_fwalk_reent+0x3a>
 800775a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800775e:	3301      	adds	r3, #1
 8007760:	d003      	beq.n	800776a <_fwalk_reent+0x3a>
 8007762:	4629      	mov	r1, r5
 8007764:	4630      	mov	r0, r6
 8007766:	47c0      	blx	r8
 8007768:	4307      	orrs	r7, r0
 800776a:	3568      	adds	r5, #104	; 0x68
 800776c:	e7e9      	b.n	8007742 <_fwalk_reent+0x12>

0800776e <__retarget_lock_init_recursive>:
 800776e:	4770      	bx	lr

08007770 <__retarget_lock_acquire_recursive>:
 8007770:	4770      	bx	lr

08007772 <__retarget_lock_release_recursive>:
 8007772:	4770      	bx	lr

08007774 <__swhatbuf_r>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	460e      	mov	r6, r1
 8007778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800777c:	4614      	mov	r4, r2
 800777e:	2900      	cmp	r1, #0
 8007780:	461d      	mov	r5, r3
 8007782:	b096      	sub	sp, #88	; 0x58
 8007784:	da08      	bge.n	8007798 <__swhatbuf_r+0x24>
 8007786:	2200      	movs	r2, #0
 8007788:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800778c:	602a      	str	r2, [r5, #0]
 800778e:	061a      	lsls	r2, r3, #24
 8007790:	d410      	bmi.n	80077b4 <__swhatbuf_r+0x40>
 8007792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007796:	e00e      	b.n	80077b6 <__swhatbuf_r+0x42>
 8007798:	466a      	mov	r2, sp
 800779a:	f000 f953 	bl	8007a44 <_fstat_r>
 800779e:	2800      	cmp	r0, #0
 80077a0:	dbf1      	blt.n	8007786 <__swhatbuf_r+0x12>
 80077a2:	9a01      	ldr	r2, [sp, #4]
 80077a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077ac:	425a      	negs	r2, r3
 80077ae:	415a      	adcs	r2, r3
 80077b0:	602a      	str	r2, [r5, #0]
 80077b2:	e7ee      	b.n	8007792 <__swhatbuf_r+0x1e>
 80077b4:	2340      	movs	r3, #64	; 0x40
 80077b6:	2000      	movs	r0, #0
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	b016      	add	sp, #88	; 0x58
 80077bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080077c0 <__smakebuf_r>:
 80077c0:	898b      	ldrh	r3, [r1, #12]
 80077c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077c4:	079d      	lsls	r5, r3, #30
 80077c6:	4606      	mov	r6, r0
 80077c8:	460c      	mov	r4, r1
 80077ca:	d507      	bpl.n	80077dc <__smakebuf_r+0x1c>
 80077cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	6123      	str	r3, [r4, #16]
 80077d4:	2301      	movs	r3, #1
 80077d6:	6163      	str	r3, [r4, #20]
 80077d8:	b002      	add	sp, #8
 80077da:	bd70      	pop	{r4, r5, r6, pc}
 80077dc:	466a      	mov	r2, sp
 80077de:	ab01      	add	r3, sp, #4
 80077e0:	f7ff ffc8 	bl	8007774 <__swhatbuf_r>
 80077e4:	9900      	ldr	r1, [sp, #0]
 80077e6:	4605      	mov	r5, r0
 80077e8:	4630      	mov	r0, r6
 80077ea:	f7fe ffbf 	bl	800676c <_malloc_r>
 80077ee:	b948      	cbnz	r0, 8007804 <__smakebuf_r+0x44>
 80077f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077f4:	059a      	lsls	r2, r3, #22
 80077f6:	d4ef      	bmi.n	80077d8 <__smakebuf_r+0x18>
 80077f8:	f023 0303 	bic.w	r3, r3, #3
 80077fc:	f043 0302 	orr.w	r3, r3, #2
 8007800:	81a3      	strh	r3, [r4, #12]
 8007802:	e7e3      	b.n	80077cc <__smakebuf_r+0xc>
 8007804:	4b0d      	ldr	r3, [pc, #52]	; (800783c <__smakebuf_r+0x7c>)
 8007806:	62b3      	str	r3, [r6, #40]	; 0x28
 8007808:	89a3      	ldrh	r3, [r4, #12]
 800780a:	6020      	str	r0, [r4, #0]
 800780c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007810:	81a3      	strh	r3, [r4, #12]
 8007812:	9b00      	ldr	r3, [sp, #0]
 8007814:	6120      	str	r0, [r4, #16]
 8007816:	6163      	str	r3, [r4, #20]
 8007818:	9b01      	ldr	r3, [sp, #4]
 800781a:	b15b      	cbz	r3, 8007834 <__smakebuf_r+0x74>
 800781c:	4630      	mov	r0, r6
 800781e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007822:	f000 f921 	bl	8007a68 <_isatty_r>
 8007826:	b128      	cbz	r0, 8007834 <__smakebuf_r+0x74>
 8007828:	89a3      	ldrh	r3, [r4, #12]
 800782a:	f023 0303 	bic.w	r3, r3, #3
 800782e:	f043 0301 	orr.w	r3, r3, #1
 8007832:	81a3      	strh	r3, [r4, #12]
 8007834:	89a0      	ldrh	r0, [r4, #12]
 8007836:	4305      	orrs	r5, r0
 8007838:	81a5      	strh	r5, [r4, #12]
 800783a:	e7cd      	b.n	80077d8 <__smakebuf_r+0x18>
 800783c:	080075cd 	.word	0x080075cd

08007840 <memchr>:
 8007840:	4603      	mov	r3, r0
 8007842:	b510      	push	{r4, lr}
 8007844:	b2c9      	uxtb	r1, r1
 8007846:	4402      	add	r2, r0
 8007848:	4293      	cmp	r3, r2
 800784a:	4618      	mov	r0, r3
 800784c:	d101      	bne.n	8007852 <memchr+0x12>
 800784e:	2000      	movs	r0, #0
 8007850:	e003      	b.n	800785a <memchr+0x1a>
 8007852:	7804      	ldrb	r4, [r0, #0]
 8007854:	3301      	adds	r3, #1
 8007856:	428c      	cmp	r4, r1
 8007858:	d1f6      	bne.n	8007848 <memchr+0x8>
 800785a:	bd10      	pop	{r4, pc}

0800785c <memmove>:
 800785c:	4288      	cmp	r0, r1
 800785e:	b510      	push	{r4, lr}
 8007860:	eb01 0402 	add.w	r4, r1, r2
 8007864:	d902      	bls.n	800786c <memmove+0x10>
 8007866:	4284      	cmp	r4, r0
 8007868:	4623      	mov	r3, r4
 800786a:	d807      	bhi.n	800787c <memmove+0x20>
 800786c:	1e43      	subs	r3, r0, #1
 800786e:	42a1      	cmp	r1, r4
 8007870:	d008      	beq.n	8007884 <memmove+0x28>
 8007872:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007876:	f803 2f01 	strb.w	r2, [r3, #1]!
 800787a:	e7f8      	b.n	800786e <memmove+0x12>
 800787c:	4601      	mov	r1, r0
 800787e:	4402      	add	r2, r0
 8007880:	428a      	cmp	r2, r1
 8007882:	d100      	bne.n	8007886 <memmove+0x2a>
 8007884:	bd10      	pop	{r4, pc}
 8007886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800788a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800788e:	e7f7      	b.n	8007880 <memmove+0x24>

08007890 <_realloc_r>:
 8007890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007894:	4680      	mov	r8, r0
 8007896:	4614      	mov	r4, r2
 8007898:	460e      	mov	r6, r1
 800789a:	b921      	cbnz	r1, 80078a6 <_realloc_r+0x16>
 800789c:	4611      	mov	r1, r2
 800789e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078a2:	f7fe bf63 	b.w	800676c <_malloc_r>
 80078a6:	b92a      	cbnz	r2, 80078b4 <_realloc_r+0x24>
 80078a8:	f7fe fef8 	bl	800669c <_free_r>
 80078ac:	4625      	mov	r5, r4
 80078ae:	4628      	mov	r0, r5
 80078b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078b4:	f000 f8fa 	bl	8007aac <_malloc_usable_size_r>
 80078b8:	4284      	cmp	r4, r0
 80078ba:	4607      	mov	r7, r0
 80078bc:	d802      	bhi.n	80078c4 <_realloc_r+0x34>
 80078be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078c2:	d812      	bhi.n	80078ea <_realloc_r+0x5a>
 80078c4:	4621      	mov	r1, r4
 80078c6:	4640      	mov	r0, r8
 80078c8:	f7fe ff50 	bl	800676c <_malloc_r>
 80078cc:	4605      	mov	r5, r0
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d0ed      	beq.n	80078ae <_realloc_r+0x1e>
 80078d2:	42bc      	cmp	r4, r7
 80078d4:	4622      	mov	r2, r4
 80078d6:	4631      	mov	r1, r6
 80078d8:	bf28      	it	cs
 80078da:	463a      	movcs	r2, r7
 80078dc:	f7fe fec8 	bl	8006670 <memcpy>
 80078e0:	4631      	mov	r1, r6
 80078e2:	4640      	mov	r0, r8
 80078e4:	f7fe feda 	bl	800669c <_free_r>
 80078e8:	e7e1      	b.n	80078ae <_realloc_r+0x1e>
 80078ea:	4635      	mov	r5, r6
 80078ec:	e7df      	b.n	80078ae <_realloc_r+0x1e>

080078ee <_raise_r>:
 80078ee:	291f      	cmp	r1, #31
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4604      	mov	r4, r0
 80078f4:	460d      	mov	r5, r1
 80078f6:	d904      	bls.n	8007902 <_raise_r+0x14>
 80078f8:	2316      	movs	r3, #22
 80078fa:	6003      	str	r3, [r0, #0]
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007900:	bd38      	pop	{r3, r4, r5, pc}
 8007902:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007904:	b112      	cbz	r2, 800790c <_raise_r+0x1e>
 8007906:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800790a:	b94b      	cbnz	r3, 8007920 <_raise_r+0x32>
 800790c:	4620      	mov	r0, r4
 800790e:	f000 f831 	bl	8007974 <_getpid_r>
 8007912:	462a      	mov	r2, r5
 8007914:	4601      	mov	r1, r0
 8007916:	4620      	mov	r0, r4
 8007918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800791c:	f000 b818 	b.w	8007950 <_kill_r>
 8007920:	2b01      	cmp	r3, #1
 8007922:	d00a      	beq.n	800793a <_raise_r+0x4c>
 8007924:	1c59      	adds	r1, r3, #1
 8007926:	d103      	bne.n	8007930 <_raise_r+0x42>
 8007928:	2316      	movs	r3, #22
 800792a:	6003      	str	r3, [r0, #0]
 800792c:	2001      	movs	r0, #1
 800792e:	e7e7      	b.n	8007900 <_raise_r+0x12>
 8007930:	2400      	movs	r4, #0
 8007932:	4628      	mov	r0, r5
 8007934:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007938:	4798      	blx	r3
 800793a:	2000      	movs	r0, #0
 800793c:	e7e0      	b.n	8007900 <_raise_r+0x12>
	...

08007940 <raise>:
 8007940:	4b02      	ldr	r3, [pc, #8]	; (800794c <raise+0xc>)
 8007942:	4601      	mov	r1, r0
 8007944:	6818      	ldr	r0, [r3, #0]
 8007946:	f7ff bfd2 	b.w	80078ee <_raise_r>
 800794a:	bf00      	nop
 800794c:	200001a4 	.word	0x200001a4

08007950 <_kill_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	2300      	movs	r3, #0
 8007954:	4d06      	ldr	r5, [pc, #24]	; (8007970 <_kill_r+0x20>)
 8007956:	4604      	mov	r4, r0
 8007958:	4608      	mov	r0, r1
 800795a:	4611      	mov	r1, r2
 800795c:	602b      	str	r3, [r5, #0]
 800795e:	f7f9 f83a 	bl	80009d6 <_kill>
 8007962:	1c43      	adds	r3, r0, #1
 8007964:	d102      	bne.n	800796c <_kill_r+0x1c>
 8007966:	682b      	ldr	r3, [r5, #0]
 8007968:	b103      	cbz	r3, 800796c <_kill_r+0x1c>
 800796a:	6023      	str	r3, [r4, #0]
 800796c:	bd38      	pop	{r3, r4, r5, pc}
 800796e:	bf00      	nop
 8007970:	20002f50 	.word	0x20002f50

08007974 <_getpid_r>:
 8007974:	f7f9 b828 	b.w	80009c8 <_getpid>

08007978 <__sread>:
 8007978:	b510      	push	{r4, lr}
 800797a:	460c      	mov	r4, r1
 800797c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007980:	f000 f89c 	bl	8007abc <_read_r>
 8007984:	2800      	cmp	r0, #0
 8007986:	bfab      	itete	ge
 8007988:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800798a:	89a3      	ldrhlt	r3, [r4, #12]
 800798c:	181b      	addge	r3, r3, r0
 800798e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007992:	bfac      	ite	ge
 8007994:	6563      	strge	r3, [r4, #84]	; 0x54
 8007996:	81a3      	strhlt	r3, [r4, #12]
 8007998:	bd10      	pop	{r4, pc}

0800799a <__swrite>:
 800799a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800799e:	461f      	mov	r7, r3
 80079a0:	898b      	ldrh	r3, [r1, #12]
 80079a2:	4605      	mov	r5, r0
 80079a4:	05db      	lsls	r3, r3, #23
 80079a6:	460c      	mov	r4, r1
 80079a8:	4616      	mov	r6, r2
 80079aa:	d505      	bpl.n	80079b8 <__swrite+0x1e>
 80079ac:	2302      	movs	r3, #2
 80079ae:	2200      	movs	r2, #0
 80079b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b4:	f000 f868 	bl	8007a88 <_lseek_r>
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	4632      	mov	r2, r6
 80079bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079c0:	81a3      	strh	r3, [r4, #12]
 80079c2:	4628      	mov	r0, r5
 80079c4:	463b      	mov	r3, r7
 80079c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ce:	f000 b817 	b.w	8007a00 <_write_r>

080079d2 <__sseek>:
 80079d2:	b510      	push	{r4, lr}
 80079d4:	460c      	mov	r4, r1
 80079d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079da:	f000 f855 	bl	8007a88 <_lseek_r>
 80079de:	1c43      	adds	r3, r0, #1
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	bf15      	itete	ne
 80079e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80079e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079ee:	81a3      	strheq	r3, [r4, #12]
 80079f0:	bf18      	it	ne
 80079f2:	81a3      	strhne	r3, [r4, #12]
 80079f4:	bd10      	pop	{r4, pc}

080079f6 <__sclose>:
 80079f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079fa:	f000 b813 	b.w	8007a24 <_close_r>
	...

08007a00 <_write_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4604      	mov	r4, r0
 8007a04:	4608      	mov	r0, r1
 8007a06:	4611      	mov	r1, r2
 8007a08:	2200      	movs	r2, #0
 8007a0a:	4d05      	ldr	r5, [pc, #20]	; (8007a20 <_write_r+0x20>)
 8007a0c:	602a      	str	r2, [r5, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f7f9 f818 	bl	8000a44 <_write>
 8007a14:	1c43      	adds	r3, r0, #1
 8007a16:	d102      	bne.n	8007a1e <_write_r+0x1e>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	b103      	cbz	r3, 8007a1e <_write_r+0x1e>
 8007a1c:	6023      	str	r3, [r4, #0]
 8007a1e:	bd38      	pop	{r3, r4, r5, pc}
 8007a20:	20002f50 	.word	0x20002f50

08007a24 <_close_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	2300      	movs	r3, #0
 8007a28:	4d05      	ldr	r5, [pc, #20]	; (8007a40 <_close_r+0x1c>)
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	4608      	mov	r0, r1
 8007a2e:	602b      	str	r3, [r5, #0]
 8007a30:	f7f9 f824 	bl	8000a7c <_close>
 8007a34:	1c43      	adds	r3, r0, #1
 8007a36:	d102      	bne.n	8007a3e <_close_r+0x1a>
 8007a38:	682b      	ldr	r3, [r5, #0]
 8007a3a:	b103      	cbz	r3, 8007a3e <_close_r+0x1a>
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	bd38      	pop	{r3, r4, r5, pc}
 8007a40:	20002f50 	.word	0x20002f50

08007a44 <_fstat_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	2300      	movs	r3, #0
 8007a48:	4d06      	ldr	r5, [pc, #24]	; (8007a64 <_fstat_r+0x20>)
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	4611      	mov	r1, r2
 8007a50:	602b      	str	r3, [r5, #0]
 8007a52:	f7f9 f81e 	bl	8000a92 <_fstat>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	d102      	bne.n	8007a60 <_fstat_r+0x1c>
 8007a5a:	682b      	ldr	r3, [r5, #0]
 8007a5c:	b103      	cbz	r3, 8007a60 <_fstat_r+0x1c>
 8007a5e:	6023      	str	r3, [r4, #0]
 8007a60:	bd38      	pop	{r3, r4, r5, pc}
 8007a62:	bf00      	nop
 8007a64:	20002f50 	.word	0x20002f50

08007a68 <_isatty_r>:
 8007a68:	b538      	push	{r3, r4, r5, lr}
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	4d05      	ldr	r5, [pc, #20]	; (8007a84 <_isatty_r+0x1c>)
 8007a6e:	4604      	mov	r4, r0
 8007a70:	4608      	mov	r0, r1
 8007a72:	602b      	str	r3, [r5, #0]
 8007a74:	f7f9 f81c 	bl	8000ab0 <_isatty>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	d102      	bne.n	8007a82 <_isatty_r+0x1a>
 8007a7c:	682b      	ldr	r3, [r5, #0]
 8007a7e:	b103      	cbz	r3, 8007a82 <_isatty_r+0x1a>
 8007a80:	6023      	str	r3, [r4, #0]
 8007a82:	bd38      	pop	{r3, r4, r5, pc}
 8007a84:	20002f50 	.word	0x20002f50

08007a88 <_lseek_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	4608      	mov	r0, r1
 8007a8e:	4611      	mov	r1, r2
 8007a90:	2200      	movs	r2, #0
 8007a92:	4d05      	ldr	r5, [pc, #20]	; (8007aa8 <_lseek_r+0x20>)
 8007a94:	602a      	str	r2, [r5, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	f7f9 f814 	bl	8000ac4 <_lseek>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d102      	bne.n	8007aa6 <_lseek_r+0x1e>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	b103      	cbz	r3, 8007aa6 <_lseek_r+0x1e>
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	20002f50 	.word	0x20002f50

08007aac <_malloc_usable_size_r>:
 8007aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ab0:	1f18      	subs	r0, r3, #4
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	bfbc      	itt	lt
 8007ab6:	580b      	ldrlt	r3, [r1, r0]
 8007ab8:	18c0      	addlt	r0, r0, r3
 8007aba:	4770      	bx	lr

08007abc <_read_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4604      	mov	r4, r0
 8007ac0:	4608      	mov	r0, r1
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	4d05      	ldr	r5, [pc, #20]	; (8007adc <_read_r+0x20>)
 8007ac8:	602a      	str	r2, [r5, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	f7f8 ff9d 	bl	8000a0a <_read>
 8007ad0:	1c43      	adds	r3, r0, #1
 8007ad2:	d102      	bne.n	8007ada <_read_r+0x1e>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	b103      	cbz	r3, 8007ada <_read_r+0x1e>
 8007ad8:	6023      	str	r3, [r4, #0]
 8007ada:	bd38      	pop	{r3, r4, r5, pc}
 8007adc:	20002f50 	.word	0x20002f50

08007ae0 <_init>:
 8007ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae2:	bf00      	nop
 8007ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ae6:	bc08      	pop	{r3}
 8007ae8:	469e      	mov	lr, r3
 8007aea:	4770      	bx	lr

08007aec <_fini>:
 8007aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aee:	bf00      	nop
 8007af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007af2:	bc08      	pop	{r3}
 8007af4:	469e      	mov	lr, r3
 8007af6:	4770      	bx	lr
