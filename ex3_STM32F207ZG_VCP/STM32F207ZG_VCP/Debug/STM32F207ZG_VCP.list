
STM32F207ZG_VCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c04  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006d88  08006d88  00016d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e1c  08006e1c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08006e1c  08006e1c  00016e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e24  08006e24  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e24  08006e24  00016e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e28  08006e28  00016e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08006e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cec  200001f0  0800701c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002edc  0800701c  00022edc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d121  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002925  00000000  00000000  0002d33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002fc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  00030760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c6e  00000000  00000000  00031118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec2c  00000000  00000000  00052d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbe55  00000000  00000000  000619b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d807  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f98  00000000  00000000  0011d858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001f0 	.word	0x200001f0
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08006d70 	.word	0x08006d70

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001f4 	.word	0x200001f4
 80001c0:	08006d70 	.word	0x08006d70

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001d8:	f000 b976 	b.w	80004c8 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	4688      	mov	r8, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14d      	bne.n	80002a0 <__udivmoddi4+0xac>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d968      	bls.n	80002dc <__udivmoddi4+0xe8>
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	b152      	cbz	r2, 8000226 <__udivmoddi4+0x32>
 8000210:	fa01 f302 	lsl.w	r3, r1, r2
 8000214:	f1c2 0120 	rsb	r1, r2, #32
 8000218:	fa20 f101 	lsr.w	r1, r0, r1
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	ea41 0803 	orr.w	r8, r1, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800022a:	fbb8 f7f1 	udiv	r7, r8, r1
 800022e:	fa1f fe8c 	uxth.w	lr, ip
 8000232:	fb01 8817 	mls	r8, r1, r7, r8
 8000236:	fb07 f00e 	mul.w	r0, r7, lr
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	4298      	cmp	r0, r3
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0303 	adds.w	r3, ip, r3
 8000248:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 800024c:	f080 811e 	bcs.w	800048c <__udivmoddi4+0x298>
 8000250:	4298      	cmp	r0, r3
 8000252:	f240 811b 	bls.w	800048c <__udivmoddi4+0x298>
 8000256:	3f02      	subs	r7, #2
 8000258:	4463      	add	r3, ip
 800025a:	1a1b      	subs	r3, r3, r0
 800025c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000260:	fb01 3310 	mls	r3, r1, r0, r3
 8000264:	fb00 fe0e 	mul.w	lr, r0, lr
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026e:	45a6      	cmp	lr, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8109 	bcs.w	8000490 <__udivmoddi4+0x29c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8106 	bls.w	8000490 <__udivmoddi4+0x29c>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	eba4 040e 	sub.w	r4, r4, lr
 800028e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa8>
 8000294:	2300      	movs	r3, #0
 8000296:	40d4      	lsrs	r4, r2
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d908      	bls.n	80002b6 <__udivmoddi4+0xc2>
 80002a4:	2e00      	cmp	r6, #0
 80002a6:	f000 80ee 	beq.w	8000486 <__udivmoddi4+0x292>
 80002aa:	2100      	movs	r1, #0
 80002ac:	e9c6 0500 	strd	r0, r5, [r6]
 80002b0:	4608      	mov	r0, r1
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d14a      	bne.n	8000354 <__udivmoddi4+0x160>
 80002be:	42ab      	cmp	r3, r5
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd4>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fc 	bhi.w	80004c0 <__udivmoddi4+0x2cc>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb65 0303 	sbc.w	r3, r5, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e2      	beq.n	800029c <__udivmoddi4+0xa8>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7df      	b.n	800029c <__udivmoddi4+0xa8>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xec>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 8091 	bne.w	800040c <__udivmoddi4+0x218>
 80002ea:	eba1 000c 	sub.w	r0, r1, ip
 80002ee:	2101      	movs	r1, #1
 80002f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f4:	fa1f fe8c 	uxth.w	lr, ip
 80002f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80002fc:	fb07 0013 	mls	r0, r7, r3, r0
 8000300:	0c25      	lsrs	r5, r4, #16
 8000302:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000306:	fb0e f003 	mul.w	r0, lr, r3
 800030a:	42a8      	cmp	r0, r5
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x12c>
 800030e:	eb1c 0505 	adds.w	r5, ip, r5
 8000312:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x12a>
 8000318:	42a8      	cmp	r0, r5
 800031a:	f200 80ce 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 800031e:	4643      	mov	r3, r8
 8000320:	1a2d      	subs	r5, r5, r0
 8000322:	fbb5 f0f7 	udiv	r0, r5, r7
 8000326:	fb07 5510 	mls	r5, r7, r0, r5
 800032a:	fb0e fe00 	mul.w	lr, lr, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x156>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x154>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80b6 	bhi.w	80004b4 <__udivmoddi4+0x2c0>
 8000348:	4628      	mov	r0, r5
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000352:	e79e      	b.n	8000292 <__udivmoddi4+0x9e>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa25 fa07 	lsr.w	sl, r5, r7
 8000366:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036a:	fbba f8f9 	udiv	r8, sl, r9
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	fb09 aa18 	mls	sl, r9, r8, sl
 8000376:	408d      	lsls	r5, r1
 8000378:	fa1f fe8c 	uxth.w	lr, ip
 800037c:	431d      	orrs	r5, r3
 800037e:	fa00 f301 	lsl.w	r3, r0, r1
 8000382:	fb08 f00e 	mul.w	r0, r8, lr
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800038c:	42a0      	cmp	r0, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b8>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2bc>
 80003a0:	42a0      	cmp	r0, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2bc>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1a24      	subs	r4, r4, r0
 80003ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80003b2:	fb09 4410 	mls	r4, r9, r0, r4
 80003b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1e2>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2b4>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2b4>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003da:	fba0 9502 	umull	r9, r5, r0, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x2a4>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x2a0>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2d0>
 80003f0:	ebb3 0208 	subs.w	r2, r3, r8
 80003f4:	eb64 040e 	sbc.w	r4, r4, lr
 80003f8:	fa22 f301 	lsr.w	r3, r2, r1
 80003fc:	fa04 f707 	lsl.w	r7, r4, r7
 8000400:	431f      	orrs	r7, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	2100      	movs	r1, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa8>
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	f1c2 0120 	rsb	r1, r2, #32
 8000414:	fa25 f301 	lsr.w	r3, r5, r1
 8000418:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041c:	fa20 f101 	lsr.w	r1, r0, r1
 8000420:	4095      	lsls	r5, r2
 8000422:	430d      	orrs	r5, r1
 8000424:	fbb3 f1f7 	udiv	r1, r3, r7
 8000428:	fb07 3311 	mls	r3, r7, r1, r3
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	0c28      	lsrs	r0, r5, #16
 8000432:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000436:	fb01 f30e 	mul.w	r3, r1, lr
 800043a:	4283      	cmp	r3, r0
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x260>
 8000442:	eb1c 0000 	adds.w	r0, ip, r0
 8000446:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b8>
 800044c:	4283      	cmp	r3, r0
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b8>
 8000450:	3902      	subs	r1, #2
 8000452:	4460      	add	r0, ip
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	fbb0 f3f7 	udiv	r3, r0, r7
 800045a:	fb07 0013 	mls	r0, r7, r3, r0
 800045e:	b2ad      	uxth	r5, r5
 8000460:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000464:	fb03 f00e 	mul.w	r0, r3, lr
 8000468:	42a8      	cmp	r0, r5
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x28a>
 800046c:	eb1c 0505 	adds.w	r5, ip, r5
 8000470:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000476:	42a8      	cmp	r0, r5
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 800047a:	3b02      	subs	r3, #2
 800047c:	4465      	add	r5, ip
 800047e:	1a28      	subs	r0, r5, r0
 8000480:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0x104>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e707      	b.n	800029c <__udivmoddi4+0xa8>
 800048c:	462f      	mov	r7, r5
 800048e:	e6e4      	b.n	800025a <__udivmoddi4+0x66>
 8000490:	4618      	mov	r0, r3
 8000492:	e6f9      	b.n	8000288 <__udivmoddi4+0x94>
 8000494:	454b      	cmp	r3, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f8>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f8>
 80004a4:	4643      	mov	r3, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x28a>
 80004a8:	4628      	mov	r0, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1e2>
 80004ac:	4641      	mov	r1, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x260>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b8>
 80004b4:	4464      	add	r4, ip
 80004b6:	3802      	subs	r0, #2
 80004b8:	e747      	b.n	800034a <__udivmoddi4+0x156>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	4465      	add	r5, ip
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x12c>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e706      	b.n	80002d2 <__udivmoddi4+0xde>
 80004c4:	4631      	mov	r1, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa8>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fa7d 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f86b 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f8b1 	bl	8000640 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004de:	f005 fa8d 	bl	80059fc <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  unsigned int cnt = 100-1;
 80004e2:	2363      	movs	r3, #99	; 0x63
 80004e4:	607b      	str	r3, [r7, #4]

  for(int i=0; i<5000;i++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	e016      	b.n	800051a <main+0x4e>
  {
    msgVCP_2[i] = 0x30 + (i % 10);
 80004ec:	683a      	ldr	r2, [r7, #0]
 80004ee:	4b29      	ldr	r3, [pc, #164]	; (8000594 <main+0xc8>)
 80004f0:	fb83 1302 	smull	r1, r3, r3, r2
 80004f4:	1099      	asrs	r1, r3, #2
 80004f6:	17d3      	asrs	r3, r2, #31
 80004f8:	1ac9      	subs	r1, r1, r3
 80004fa:	460b      	mov	r3, r1
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	440b      	add	r3, r1
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	1ad1      	subs	r1, r2, r3
 8000504:	b2cb      	uxtb	r3, r1
 8000506:	3330      	adds	r3, #48	; 0x30
 8000508:	b2d9      	uxtb	r1, r3
 800050a:	4a23      	ldr	r2, [pc, #140]	; (8000598 <main+0xcc>)
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	4413      	add	r3, r2
 8000510:	460a      	mov	r2, r1
 8000512:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<5000;i++)
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	3301      	adds	r3, #1
 8000518:	603b      	str	r3, [r7, #0]
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000520:	4293      	cmp	r3, r2
 8000522:	dde3      	ble.n	80004ec <main+0x20>
  }

  while (1)
  {
    CDC_Transmit_FS(buffer,sizeof(buffer)-1);
 8000524:	210d      	movs	r1, #13
 8000526:	481d      	ldr	r0, [pc, #116]	; (800059c <main+0xd0>)
 8000528:	f005 fb26 	bl	8005b78 <CDC_Transmit_FS>
    HAL_Delay(1);
 800052c:	2001      	movs	r0, #1
 800052e:	f000 fabd 	bl	8000aac <HAL_Delay>

    while(cnt != 0)
 8000532:	e01c      	b.n	800056e <main+0xa2>
    {
      HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
 8000534:	2101      	movs	r1, #1
 8000536:	481a      	ldr	r0, [pc, #104]	; (80005a0 <main+0xd4>)
 8000538:	f000 fda0 	bl	800107c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_7);
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	4818      	ldr	r0, [pc, #96]	; (80005a0 <main+0xd4>)
 8000540:	f000 fd9c 	bl	800107c <HAL_GPIO_TogglePin>

      msgVCP_len = sprintf(msgVCP, "cnt:%u ", cnt);
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	4917      	ldr	r1, [pc, #92]	; (80005a4 <main+0xd8>)
 8000548:	4817      	ldr	r0, [pc, #92]	; (80005a8 <main+0xdc>)
 800054a:	f006 f883 	bl	8006654 <siprintf>
 800054e:	4603      	mov	r3, r0
 8000550:	4a16      	ldr	r2, [pc, #88]	; (80005ac <main+0xe0>)
 8000552:	6013      	str	r3, [r2, #0]
      CDC_Transmit_FS((uint8_t *)msgVCP, msgVCP_len);
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <main+0xe0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	b29b      	uxth	r3, r3
 800055a:	4619      	mov	r1, r3
 800055c:	4812      	ldr	r0, [pc, #72]	; (80005a8 <main+0xdc>)
 800055e:	f005 fb0b 	bl	8005b78 <CDC_Transmit_FS>

      HAL_Delay(1);
 8000562:	2001      	movs	r0, #1
 8000564:	f000 faa2 	bl	8000aac <HAL_Delay>

      cnt --;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3b01      	subs	r3, #1
 800056c:	607b      	str	r3, [r7, #4]
    while(cnt != 0)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1df      	bne.n	8000534 <main+0x68>
    }
    HAL_Delay(500);
 8000574:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000578:	f000 fa98 	bl	8000aac <HAL_Delay>
    cnt=100;
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	607b      	str	r3, [r7, #4]

    // OPTIONAL: send 5000 characters
    CDC_Transmit_FS((uint8_t *)msgVCP_2,sizeof(msgVCP_2));
 8000580:	f241 3188 	movw	r1, #5000	; 0x1388
 8000584:	4804      	ldr	r0, [pc, #16]	; (8000598 <main+0xcc>)
 8000586:	f005 faf7 	bl	8005b78 <CDC_Transmit_FS>
    HAL_Delay(100);
 800058a:	2064      	movs	r0, #100	; 0x64
 800058c:	f000 fa8e 	bl	8000aac <HAL_Delay>
    CDC_Transmit_FS(buffer,sizeof(buffer)-1);
 8000590:	e7c8      	b.n	8000524 <main+0x58>
 8000592:	bf00      	nop
 8000594:	66666667 	.word	0x66666667
 8000598:	20000274 	.word	0x20000274
 800059c:	20000000 	.word	0x20000000
 80005a0:	40020400 	.word	0x40020400
 80005a4:	08006d88 	.word	0x08006d88
 80005a8:	20000210 	.word	0x20000210
 80005ac:	2000020c 	.word	0x2000020c

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b092      	sub	sp, #72	; 0x48
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0318 	add.w	r3, r7, #24
 80005ba:	2230      	movs	r2, #48	; 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 ff54 	bl	800646c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d2:	2302      	movs	r3, #2
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d6:	2301      	movs	r3, #1
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005da:	2310      	movs	r3, #16
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e2:	2300      	movs	r3, #0
 80005e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e6:	2308      	movs	r3, #8
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005ea:	23c0      	movs	r3, #192	; 0xc0
 80005ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ee:	2304      	movs	r3, #4
 80005f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005f2:	2308      	movs	r3, #8
 80005f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 feac 	bl	8002358 <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000606:	f000 f91f 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2302      	movs	r3, #2
 8000610:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000616:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000620:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2103      	movs	r1, #3
 8000626:	4618      	mov	r0, r3
 8000628:	f002 f8e4 	bl	80027f4 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000632:	f000 f909 	bl	8000848 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3748      	adds	r7, #72	; 0x48
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	; 0x30
 8000644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
 800065a:	4b75      	ldr	r3, [pc, #468]	; (8000830 <MX_GPIO_Init+0x1f0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a74      	ldr	r2, [pc, #464]	; (8000830 <MX_GPIO_Init+0x1f0>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b72      	ldr	r3, [pc, #456]	; (8000830 <MX_GPIO_Init+0x1f0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	4b6e      	ldr	r3, [pc, #440]	; (8000830 <MX_GPIO_Init+0x1f0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a6d      	ldr	r2, [pc, #436]	; (8000830 <MX_GPIO_Init+0x1f0>)
 800067c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b6b      	ldr	r3, [pc, #428]	; (8000830 <MX_GPIO_Init+0x1f0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	4b67      	ldr	r3, [pc, #412]	; (8000830 <MX_GPIO_Init+0x1f0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a66      	ldr	r2, [pc, #408]	; (8000830 <MX_GPIO_Init+0x1f0>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b64      	ldr	r3, [pc, #400]	; (8000830 <MX_GPIO_Init+0x1f0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	4b60      	ldr	r3, [pc, #384]	; (8000830 <MX_GPIO_Init+0x1f0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a5f      	ldr	r2, [pc, #380]	; (8000830 <MX_GPIO_Init+0x1f0>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b5d      	ldr	r3, [pc, #372]	; (8000830 <MX_GPIO_Init+0x1f0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b59      	ldr	r3, [pc, #356]	; (8000830 <MX_GPIO_Init+0x1f0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a58      	ldr	r2, [pc, #352]	; (8000830 <MX_GPIO_Init+0x1f0>)
 80006d0:	f043 0308 	orr.w	r3, r3, #8
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b56      	ldr	r3, [pc, #344]	; (8000830 <MX_GPIO_Init+0x1f0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b52      	ldr	r3, [pc, #328]	; (8000830 <MX_GPIO_Init+0x1f0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a51      	ldr	r2, [pc, #324]	; (8000830 <MX_GPIO_Init+0x1f0>)
 80006ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b4f      	ldr	r3, [pc, #316]	; (8000830 <MX_GPIO_Init+0x1f0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f244 0181 	movw	r1, #16513	; 0x4081
 8000704:	484b      	ldr	r0, [pc, #300]	; (8000834 <MX_GPIO_Init+0x1f4>)
 8000706:	f000 fca1 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2140      	movs	r1, #64	; 0x40
 800070e:	484a      	ldr	r0, [pc, #296]	; (8000838 <MX_GPIO_Init+0x1f8>)
 8000710:	f000 fc9c 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800071a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800071e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4844      	ldr	r0, [pc, #272]	; (800083c <MX_GPIO_Init+0x1fc>)
 800072c:	f000 faf0 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000730:	2332      	movs	r3, #50	; 0x32
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000740:	230b      	movs	r3, #11
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	483c      	ldr	r0, [pc, #240]	; (800083c <MX_GPIO_Init+0x1fc>)
 800074c:	f000 fae0 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000750:	2386      	movs	r3, #134	; 0x86
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000760:	230b      	movs	r3, #11
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	4835      	ldr	r0, [pc, #212]	; (8000840 <MX_GPIO_Init+0x200>)
 800076c:	f000 fad0 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000770:	f244 0381 	movw	r3, #16513	; 0x4081
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	482a      	ldr	r0, [pc, #168]	; (8000834 <MX_GPIO_Init+0x1f4>)
 800078a:	f000 fac1 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800078e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a0:	230b      	movs	r3, #11
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4822      	ldr	r0, [pc, #136]	; (8000834 <MX_GPIO_Init+0x1f4>)
 80007ac:	f000 fab0 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007c2:	2307      	movs	r3, #7
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	481d      	ldr	r0, [pc, #116]	; (8000844 <MX_GPIO_Init+0x204>)
 80007ce:	f000 fa9f 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007d2:	2340      	movs	r3, #64	; 0x40
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	4813      	ldr	r0, [pc, #76]	; (8000838 <MX_GPIO_Init+0x1f8>)
 80007ea:	f000 fa91 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_GPIO_Init+0x1f8>)
 8000802:	f000 fa85 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000806:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000814:	2303      	movs	r3, #3
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000818:	230b      	movs	r3, #11
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_GPIO_Init+0x1f8>)
 8000824:	f000 fa74 	bl	8000d10 <HAL_GPIO_Init>

}
 8000828:	bf00      	nop
 800082a:	3730      	adds	r7, #48	; 0x30
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40020400 	.word	0x40020400
 8000838:	40021800 	.word	0x40021800
 800083c:	40020800 	.word	0x40020800
 8000840:	40020000 	.word	0x40020000
 8000844:	40020c00 	.word	0x40020c00

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_MspInit+0x48>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <HAL_MspInit+0x48>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_MspInit+0x48>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <HAL_MspInit+0x48>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a07      	ldr	r2, [pc, #28]	; (800089c <HAL_MspInit+0x48>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <HAL_MspInit+0x48>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	40023800 	.word	0x40023800

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr

080008d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr

080008e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e6:	f000 f8c5 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <OTG_FS_IRQHandler+0x10>)
 80008f6:	f000 fd19 	bl	800132c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20002acc 	.word	0x20002acc

08000904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800090c:	4a14      	ldr	r2, [pc, #80]	; (8000960 <_sbrk+0x5c>)
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <_sbrk+0x60>)
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <_sbrk+0x64>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d102      	bne.n	8000926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <_sbrk+0x64>)
 8000922:	4a12      	ldr	r2, [pc, #72]	; (800096c <_sbrk+0x68>)
 8000924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <_sbrk+0x64>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	429a      	cmp	r2, r3
 8000932:	d207      	bcs.n	8000944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000934:	f005 fd60 	bl	80063f8 <__errno>
 8000938:	4603      	mov	r3, r0
 800093a:	220c      	movs	r2, #12
 800093c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800093e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000942:	e009      	b.n	8000958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <_sbrk+0x64>)
 8000954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000956:	68fb      	ldr	r3, [r7, #12]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20020000 	.word	0x20020000
 8000964:	00000400 	.word	0x00000400
 8000968:	200015fc 	.word	0x200015fc
 800096c:	20002ee0 	.word	0x20002ee0

08000970 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000982:	490e      	ldr	r1, [pc, #56]	; (80009bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000998:	4c0b      	ldr	r4, [pc, #44]	; (80009c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a6:	f7ff ffe3 	bl	8000970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009aa:	f005 fd2b 	bl	8006404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff fd8d 	bl	80004cc <main>
  bx  lr
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80009c0:	08006e2c 	.word	0x08006e2c
  ldr r2, =_sbss
 80009c4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80009c8:	20002edc 	.word	0x20002edc

080009cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <HAL_Init+0x40>)
 80009da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_Init+0x40>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_Init+0x40>)
 80009e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_Init+0x40>)
 80009f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f947 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 f808 	bl	8000a14 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff ff26 	bl	8000854 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023c00 	.word	0x40023c00

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_InitTick+0x54>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x58>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f95f 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00e      	b.n	8000a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d80a      	bhi.n	8000a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a50:	f000 f927 	bl	8000ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <HAL_InitTick+0x5c>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000010 	.word	0x20000010
 8000a6c:	20000018 	.word	0x20000018
 8000a70:	20000014 	.word	0x20000014

08000a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_IncTick+0x1c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_IncTick+0x20>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <HAL_IncTick+0x20>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	20000018 	.word	0x20000018
 8000a94:	20001600 	.word	0x20001600

08000a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b02      	ldr	r3, [pc, #8]	; (8000aa8 <HAL_GetTick+0x10>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	20001600 	.word	0x20001600

08000aac <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab4:	f7ff fff0 	bl	8000a98 <HAL_GetTick>
 8000ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ac4:	d005      	beq.n	8000ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_Delay+0x44>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4413      	add	r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ad2:	bf00      	nop
 8000ad4:	f7ff ffe0 	bl	8000a98 <HAL_GetTick>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d8f7      	bhi.n	8000ad4 <HAL_Delay+0x28>
  {
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000018 	.word	0x20000018

08000af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <__NVIC_GetPriorityGrouping+0x18>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	f003 0307 	and.w	r3, r3, #7
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db0b      	blt.n	8000b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 021f 	and.w	r2, r3, #31
 8000b70:	4906      	ldr	r1, [pc, #24]	; (8000b8c <__NVIC_EnableIRQ+0x34>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	095b      	lsrs	r3, r3, #5
 8000b78:	2001      	movs	r0, #1
 8000b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100

08000b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db0a      	blt.n	8000bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	490c      	ldr	r1, [pc, #48]	; (8000bdc <__NVIC_SetPriority+0x4c>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	0112      	lsls	r2, r2, #4
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb8:	e00a      	b.n	8000bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4908      	ldr	r1, [pc, #32]	; (8000be0 <__NVIC_SetPriority+0x50>)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	f003 030f 	and.w	r3, r3, #15
 8000bc6:	3b04      	subs	r3, #4
 8000bc8:	0112      	lsls	r2, r2, #4
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	440b      	add	r3, r1
 8000bce:	761a      	strb	r2, [r3, #24]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b089      	sub	sp, #36	; 0x24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f1c3 0307 	rsb	r3, r3, #7
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	bf28      	it	cs
 8000c02:	2304      	movcs	r3, #4
 8000c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	2b06      	cmp	r3, #6
 8000c0c:	d902      	bls.n	8000c14 <NVIC_EncodePriority+0x30>
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3b03      	subs	r3, #3
 8000c12:	e000      	b.n	8000c16 <NVIC_EncodePriority+0x32>
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43da      	mvns	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	401a      	ands	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	43d9      	mvns	r1, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	4313      	orrs	r3, r2
         );
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3724      	adds	r7, #36	; 0x24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c58:	d301      	bcc.n	8000c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00f      	b.n	8000c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <SysTick_Config+0x40>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c66:	210f      	movs	r1, #15
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f7ff ff90 	bl	8000b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <SysTick_Config+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SysTick_Config+0x40>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff2d 	bl	8000af4 <__NVIC_SetPriorityGrouping>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb4:	f7ff ff42 	bl	8000b3c <__NVIC_GetPriorityGrouping>
 8000cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ff90 	bl	8000be4 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5f 	bl	8000b90 <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff35 	bl	8000b58 <__NVIC_EnableIRQ>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ffa2 	bl	8000c48 <SysTick_Config>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1e:	e16f      	b.n	8001000 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 8161 	beq.w	8000ffa <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d005      	beq.n	8000d50 <HAL_GPIO_Init+0x40>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d130      	bne.n	8000db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d86:	2201      	movs	r2, #1
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	f003 0201 	and.w	r2, r3, #1
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d017      	beq.n	8000dee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d123      	bne.n	8000e42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	08da      	lsrs	r2, r3, #3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3208      	adds	r2, #8
 8000e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	691a      	ldr	r2, [r3, #16]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	08da      	lsrs	r2, r3, #3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3208      	adds	r2, #8
 8000e3c:	6939      	ldr	r1, [r7, #16]
 8000e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0203 	and.w	r2, r3, #3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 80bb 	beq.w	8000ffa <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	4b64      	ldr	r3, [pc, #400]	; (800101c <HAL_GPIO_Init+0x30c>)
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8c:	4a63      	ldr	r2, [pc, #396]	; (800101c <HAL_GPIO_Init+0x30c>)
 8000e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e92:	6453      	str	r3, [r2, #68]	; 0x44
 8000e94:	4b61      	ldr	r3, [pc, #388]	; (800101c <HAL_GPIO_Init+0x30c>)
 8000e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ea0:	4a5f      	ldr	r2, [pc, #380]	; (8001020 <HAL_GPIO_Init+0x310>)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	220f      	movs	r2, #15
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a57      	ldr	r2, [pc, #348]	; (8001024 <HAL_GPIO_Init+0x314>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d031      	beq.n	8000f30 <HAL_GPIO_Init+0x220>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a56      	ldr	r2, [pc, #344]	; (8001028 <HAL_GPIO_Init+0x318>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d02b      	beq.n	8000f2c <HAL_GPIO_Init+0x21c>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a55      	ldr	r2, [pc, #340]	; (800102c <HAL_GPIO_Init+0x31c>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d025      	beq.n	8000f28 <HAL_GPIO_Init+0x218>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a54      	ldr	r2, [pc, #336]	; (8001030 <HAL_GPIO_Init+0x320>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d01f      	beq.n	8000f24 <HAL_GPIO_Init+0x214>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a53      	ldr	r2, [pc, #332]	; (8001034 <HAL_GPIO_Init+0x324>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d019      	beq.n	8000f20 <HAL_GPIO_Init+0x210>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a52      	ldr	r2, [pc, #328]	; (8001038 <HAL_GPIO_Init+0x328>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d013      	beq.n	8000f1c <HAL_GPIO_Init+0x20c>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a51      	ldr	r2, [pc, #324]	; (800103c <HAL_GPIO_Init+0x32c>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d00d      	beq.n	8000f18 <HAL_GPIO_Init+0x208>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a50      	ldr	r2, [pc, #320]	; (8001040 <HAL_GPIO_Init+0x330>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d007      	beq.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a4f      	ldr	r2, [pc, #316]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d101      	bne.n	8000f10 <HAL_GPIO_Init+0x200>
 8000f0c:	2308      	movs	r3, #8
 8000f0e:	e010      	b.n	8000f32 <HAL_GPIO_Init+0x222>
 8000f10:	2309      	movs	r3, #9
 8000f12:	e00e      	b.n	8000f32 <HAL_GPIO_Init+0x222>
 8000f14:	2307      	movs	r3, #7
 8000f16:	e00c      	b.n	8000f32 <HAL_GPIO_Init+0x222>
 8000f18:	2306      	movs	r3, #6
 8000f1a:	e00a      	b.n	8000f32 <HAL_GPIO_Init+0x222>
 8000f1c:	2305      	movs	r3, #5
 8000f1e:	e008      	b.n	8000f32 <HAL_GPIO_Init+0x222>
 8000f20:	2304      	movs	r3, #4
 8000f22:	e006      	b.n	8000f32 <HAL_GPIO_Init+0x222>
 8000f24:	2303      	movs	r3, #3
 8000f26:	e004      	b.n	8000f32 <HAL_GPIO_Init+0x222>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	e002      	b.n	8000f32 <HAL_GPIO_Init+0x222>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <HAL_GPIO_Init+0x222>
 8000f30:	2300      	movs	r3, #0
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	f002 0203 	and.w	r2, r2, #3
 8000f38:	0092      	lsls	r2, r2, #2
 8000f3a:	4093      	lsls	r3, r2
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f44:	4936      	ldr	r1, [pc, #216]	; (8001020 <HAL_GPIO_Init+0x310>)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f52:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <HAL_GPIO_Init+0x338>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f76:	4a34      	ldr	r2, [pc, #208]	; (8001048 <HAL_GPIO_Init+0x338>)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f7c:	4b32      	ldr	r3, [pc, #200]	; (8001048 <HAL_GPIO_Init+0x338>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fa0:	4a29      	ldr	r2, [pc, #164]	; (8001048 <HAL_GPIO_Init+0x338>)
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa6:	4b28      	ldr	r3, [pc, #160]	; (8001048 <HAL_GPIO_Init+0x338>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fca:	4a1f      	ldr	r2, [pc, #124]	; (8001048 <HAL_GPIO_Init+0x338>)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <HAL_GPIO_Init+0x338>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <HAL_GPIO_Init+0x338>)
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa22 f303 	lsr.w	r3, r2, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	f47f ae88 	bne.w	8000d20 <HAL_GPIO_Init+0x10>
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	371c      	adds	r7, #28
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	40023800 	.word	0x40023800
 8001020:	40013800 	.word	0x40013800
 8001024:	40020000 	.word	0x40020000
 8001028:	40020400 	.word	0x40020400
 800102c:	40020800 	.word	0x40020800
 8001030:	40020c00 	.word	0x40020c00
 8001034:	40021000 	.word	0x40021000
 8001038:	40021400 	.word	0x40021400
 800103c:	40021800 	.word	0x40021800
 8001040:	40021c00 	.word	0x40021c00
 8001044:	40022000 	.word	0x40022000
 8001048:	40013c00 	.word	0x40013c00

0800104c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
 8001058:	4613      	mov	r3, r2
 800105a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800105c:	787b      	ldrb	r3, [r7, #1]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001068:	e003      	b.n	8001072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	041a      	lsls	r2, r3, #16
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	619a      	str	r2, [r3, #24]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4013      	ands	r3, r2
 8001094:	041a      	lsls	r2, r3, #16
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43d9      	mvns	r1, r3
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	400b      	ands	r3, r1
 800109e:	431a      	orrs	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	619a      	str	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b0:	b08f      	sub	sp, #60	; 0x3c
 80010b2:	af0a      	add	r7, sp, #40	; 0x28
 80010b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e10f      	b.n	80012e0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d106      	bne.n	80010e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f004 fe80 	bl	8005de0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2203      	movs	r2, #3
 80010e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fe84 	bl	8002e0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	687e      	ldr	r6, [r7, #4]
 800110c:	466d      	mov	r5, sp
 800110e:	f106 0410 	add.w	r4, r6, #16
 8001112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800111a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800111e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001122:	1d33      	adds	r3, r6, #4
 8001124:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001126:	6838      	ldr	r0, [r7, #0]
 8001128:	f001 fd66 	bl	8002bf8 <USB_CoreInit>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d005      	beq.n	800113e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2202      	movs	r2, #2
 8001136:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e0d0      	b.n	80012e0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f001 fe71 	bl	8002e2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114a:	2300      	movs	r3, #0
 800114c:	73fb      	strb	r3, [r7, #15]
 800114e:	e04a      	b.n	80011e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	1a9b      	subs	r3, r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	333d      	adds	r3, #61	; 0x3d
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001164:	7bfa      	ldrb	r2, [r7, #15]
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	1a9b      	subs	r3, r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	333c      	adds	r3, #60	; 0x3c
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	b298      	uxth	r0, r3
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	1a9b      	subs	r3, r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	3342      	adds	r3, #66	; 0x42
 800118c:	4602      	mov	r2, r0
 800118e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	1a9b      	subs	r3, r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	333f      	adds	r3, #63	; 0x3f
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	1a9b      	subs	r3, r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	3344      	adds	r3, #68	; 0x44
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	1a9b      	subs	r3, r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	3348      	adds	r3, #72	; 0x48
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	1a9b      	subs	r3, r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	3350      	adds	r3, #80	; 0x50
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	3301      	adds	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d3af      	bcc.n	8001150 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e044      	b.n	8001280 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	1a9b      	subs	r3, r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	1a9b      	subs	r3, r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800121e:	7bfa      	ldrb	r2, [r7, #15]
 8001220:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	1a9b      	subs	r3, r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	1a9b      	subs	r3, r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	1a9b      	subs	r3, r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	3301      	adds	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	d3b5      	bcc.n	80011f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	687e      	ldr	r6, [r7, #4]
 8001292:	466d      	mov	r5, sp
 8001294:	f106 0410 	add.w	r4, r6, #16
 8001298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800129a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800129c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800129e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80012a8:	1d33      	adds	r3, r6, #4
 80012aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ac:	6838      	ldr	r0, [r7, #0]
 80012ae:	f001 fe09 	bl	8002ec4 <USB_DevInit>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2202      	movs	r2, #2
 80012bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e00d      	b.n	80012e0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 fe7a 	bl	8003fd2 <USB_DevDisconnect>

  return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_PCD_Start+0x16>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e012      	b.n	8001324 <HAL_PCD_Start+0x3c>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f001 fd6e 	bl	8002dec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fe3c 	bl	8003f92 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b08d      	sub	sp, #52	; 0x34
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f002 fef3 	bl	800412e <USB_GetMode>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	f040 838f 	bne.w	8001a6e <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f002 fe5c 	bl	8004012 <USB_ReadInterrupts>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8385 	beq.w	8001a6c <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f002 fe53 	bl	8004012 <USB_ReadInterrupts>
 800136c:	4603      	mov	r3, r0
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b02      	cmp	r3, #2
 8001374:	d107      	bne.n	8001386 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f002 0202 	and.w	r2, r2, #2
 8001384:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f002 fe41 	bl	8004012 <USB_ReadInterrupts>
 8001390:	4603      	mov	r3, r0
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2b10      	cmp	r3, #16
 8001398:	d161      	bne.n	800145e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	699a      	ldr	r2, [r3, #24]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0210 	bic.w	r2, r2, #16
 80013a8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	f003 020f 	and.w	r2, r3, #15
 80013b6:	4613      	mov	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	1a9b      	subs	r3, r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	3304      	adds	r3, #4
 80013c8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	0c5b      	lsrs	r3, r3, #17
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d124      	bne.n	8001420 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d035      	beq.n	800144e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	461a      	mov	r2, r3
 80013f4:	6a38      	ldr	r0, [r7, #32]
 80013f6:	f002 fc7e 	bl	8003cf6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001406:	441a      	add	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	699a      	ldr	r2, [r3, #24]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001418:	441a      	add	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	619a      	str	r2, [r3, #24]
 800141e:	e016      	b.n	800144e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	0c5b      	lsrs	r3, r3, #17
 8001424:	f003 030f 	and.w	r3, r3, #15
 8001428:	2b06      	cmp	r3, #6
 800142a:	d110      	bne.n	800144e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001432:	2208      	movs	r2, #8
 8001434:	4619      	mov	r1, r3
 8001436:	6a38      	ldr	r0, [r7, #32]
 8001438:	f002 fc5d 	bl	8003cf6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	699a      	ldr	r2, [r3, #24]
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001448:	441a      	add	r2, r3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	699a      	ldr	r2, [r3, #24]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0210 	orr.w	r2, r2, #16
 800145c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f002 fdd5 	bl	8004012 <USB_ReadInterrupts>
 8001468:	4603      	mov	r3, r0
 800146a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800146e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001472:	d16e      	bne.n	8001552 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f002 fdda 	bl	8004036 <USB_ReadDevAllOutEpInterrupt>
 8001482:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001484:	e062      	b.n	800154c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d057      	beq.n	8001540 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f002 fdfd 	bl	800409a <USB_ReadDevOutEPInterrupt>
 80014a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00c      	beq.n	80014c6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	015a      	lsls	r2, r3, #5
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	4413      	add	r3, r2
 80014b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014b8:	461a      	mov	r2, r3
 80014ba:	2301      	movs	r3, #1
 80014bc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 fda1 	bl	8002008 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00c      	beq.n	80014ea <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	015a      	lsls	r2, r3, #5
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	4413      	add	r3, r2
 80014d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014dc:	461a      	mov	r2, r3
 80014de:	2308      	movs	r3, #8
 80014e0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 fe9b 	bl	8002220 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	f003 0310 	and.w	r3, r3, #16
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d008      	beq.n	8001506 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	015a      	lsls	r2, r3, #5
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	4413      	add	r3, r2
 80014fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001500:	461a      	mov	r2, r3
 8001502:	2310      	movs	r3, #16
 8001504:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	f003 0320 	and.w	r3, r3, #32
 800150c:	2b00      	cmp	r3, #0
 800150e:	d008      	beq.n	8001522 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	015a      	lsls	r2, r3, #5
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800151c:	461a      	mov	r2, r3
 800151e:	2320      	movs	r3, #32
 8001520:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d009      	beq.n	8001540 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	015a      	lsls	r2, r3, #5
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	4413      	add	r3, r2
 8001534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001538:	461a      	mov	r2, r3
 800153a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	3301      	adds	r3, #1
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001548:	085b      	lsrs	r3, r3, #1
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800154c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154e:	2b00      	cmp	r3, #0
 8001550:	d199      	bne.n	8001486 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f002 fd5b 	bl	8004012 <USB_ReadInterrupts>
 800155c:	4603      	mov	r3, r0
 800155e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001562:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001566:	f040 80c0 	bne.w	80016ea <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fd7a 	bl	8004068 <USB_ReadDevAllInEpInterrupt>
 8001574:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800157a:	e0b2      	b.n	80016e2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800157c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 80a7 	beq.w	80016d6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f002 fd9e 	bl	80040d4 <USB_ReadDevInEPInterrupt>
 8001598:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d057      	beq.n	8001654 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	2201      	movs	r2, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69f9      	ldr	r1, [r7, #28]
 80015c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015c4:	4013      	ands	r3, r2
 80015c6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	015a      	lsls	r2, r3, #5
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	4413      	add	r3, r2
 80015d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d4:	461a      	mov	r2, r3
 80015d6:	2301      	movs	r3, #1
 80015d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d132      	bne.n	8001648 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e6:	4613      	mov	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	1a9b      	subs	r3, r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	3348      	adds	r3, #72	; 0x48
 80015f2:	6819      	ldr	r1, [r3, #0]
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	1a9b      	subs	r3, r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4403      	add	r3, r0
 8001602:	3344      	adds	r3, #68	; 0x44
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4419      	add	r1, r3
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160c:	4613      	mov	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	1a9b      	subs	r3, r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4403      	add	r3, r0
 8001616:	3348      	adds	r3, #72	; 0x48
 8001618:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	2b00      	cmp	r3, #0
 800161e:	d113      	bne.n	8001648 <HAL_PCD_IRQHandler+0x31c>
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001624:	4613      	mov	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	3350      	adds	r3, #80	; 0x50
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d108      	bne.n	8001648 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6818      	ldr	r0, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001640:	461a      	mov	r2, r3
 8001642:	2101      	movs	r1, #1
 8001644:	f002 fda2 	bl	800418c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	b2db      	uxtb	r3, r3
 800164c:	4619      	mov	r1, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f004 fc55 	bl	8005efe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d008      	beq.n	8001670 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4413      	add	r3, r2
 8001666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800166a:	461a      	mov	r2, r3
 800166c:	2308      	movs	r3, #8
 800166e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	2b00      	cmp	r3, #0
 8001678:	d008      	beq.n	800168c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	015a      	lsls	r2, r3, #5
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	4413      	add	r3, r2
 8001682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001686:	461a      	mov	r2, r3
 8001688:	2310      	movs	r3, #16
 800168a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001692:	2b00      	cmp	r3, #0
 8001694:	d008      	beq.n	80016a8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	015a      	lsls	r2, r3, #5
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	4413      	add	r3, r2
 800169e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016a2:	461a      	mov	r2, r3
 80016a4:	2340      	movs	r3, #64	; 0x40
 80016a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d008      	beq.n	80016c4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	015a      	lsls	r2, r3, #5
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	4413      	add	r3, r2
 80016ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016be:	461a      	mov	r2, r3
 80016c0:	2302      	movs	r3, #2
 80016c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 fc0c 	bl	8001eee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	3301      	adds	r3, #1
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016de:	085b      	lsrs	r3, r3, #1
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f47f af49 	bne.w	800157c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 fc8f 	bl	8004012 <USB_ReadInterrupts>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016fe:	d114      	bne.n	800172a <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f004 fc69 	bl	8005fec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	695a      	ldr	r2, [r3, #20]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001728:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f002 fc6f 	bl	8004012 <USB_ReadInterrupts>
 8001734:	4603      	mov	r3, r0
 8001736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800173a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800173e:	d112      	bne.n	8001766 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b01      	cmp	r3, #1
 800174e:	d102      	bne.n	8001756 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f004 fc25 	bl	8005fa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001764:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f002 fc51 	bl	8004012 <USB_ReadInterrupts>
 8001770:	4603      	mov	r3, r0
 8001772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800177a:	f040 80c7 	bne.w	800190c <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2110      	movs	r1, #16
 8001798:	4618      	mov	r0, r3
 800179a:	f001 fcf7 	bl	800318c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800179e:	2300      	movs	r3, #0
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a2:	e056      	b.n	8001852 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a6:	015a      	lsls	r2, r3, #5
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017b0:	461a      	mov	r2, r3
 80017b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017b6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ba:	015a      	lsls	r2, r3, #5
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	4413      	add	r3, r2
 80017c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017c8:	0151      	lsls	r1, r2, #5
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	440a      	add	r2, r1
 80017ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017d6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80017d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017da:	015a      	lsls	r2, r3, #5
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	4413      	add	r3, r2
 80017e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017e8:	0151      	lsls	r1, r2, #5
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	440a      	add	r2, r1
 80017ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fa:	015a      	lsls	r2, r3, #5
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	4413      	add	r3, r2
 8001800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001804:	461a      	mov	r2, r3
 8001806:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800180a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800180c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180e:	015a      	lsls	r2, r3, #5
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	4413      	add	r3, r2
 8001814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800181c:	0151      	lsls	r1, r2, #5
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	440a      	add	r2, r1
 8001822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800182a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800182c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182e:	015a      	lsls	r2, r3, #5
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	4413      	add	r3, r2
 8001834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800183c:	0151      	lsls	r1, r2, #5
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	440a      	add	r2, r1
 8001842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001846:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800184a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	3301      	adds	r3, #1
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001858:	429a      	cmp	r2, r3
 800185a:	d3a3      	bcc.n	80017a4 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800186a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800186e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	2b00      	cmp	r3, #0
 8001876:	d016      	beq.n	80018a6 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800187e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001888:	f043 030b 	orr.w	r3, r3, #11
 800188c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	69fa      	ldr	r2, [r7, #28]
 800189a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800189e:	f043 030b 	orr.w	r3, r3, #11
 80018a2:	6453      	str	r3, [r2, #68]	; 0x44
 80018a4:	e015      	b.n	80018d2 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018b8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018bc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018cc:	f043 030b 	orr.w	r3, r3, #11
 80018d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018f6:	461a      	mov	r2, r3
 80018f8:	f002 fc48 	bl	800418c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800190a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f002 fb7e 	bl	8004012 <USB_ReadInterrupts>
 8001916:	4603      	mov	r3, r0
 8001918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800191c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001920:	d124      	bne.n	800196c <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f002 fc0e 	bl	8004148 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f001 fc87 	bl	8003244 <USB_GetDevSpeed>
 8001936:	4603      	mov	r3, r0
 8001938:	461a      	mov	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681c      	ldr	r4, [r3, #0]
 8001942:	f001 f94f 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8001946:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800194c:	b2db      	uxtb	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	4620      	mov	r0, r4
 8001952:	f001 f9a9 	bl	8002ca8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f004 faf9 	bl	8005f4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800196a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f002 fb4e 	bl	8004012 <USB_ReadInterrupts>
 8001976:	4603      	mov	r3, r0
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b08      	cmp	r3, #8
 800197e:	d10a      	bne.n	8001996 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f004 fad6 	bl	8005f32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f002 0208 	and.w	r2, r2, #8
 8001994:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f002 fb39 	bl	8004012 <USB_ReadInterrupts>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019aa:	d10f      	bne.n	80019cc <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	4619      	mov	r1, r3
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f004 fb38 	bl	800602c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f002 fb1e 	bl	8004012 <USB_ReadInterrupts>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019e0:	d10f      	bne.n	8001a02 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	4619      	mov	r1, r3
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f004 fb0b 	bl	8006008 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fb03 	bl	8004012 <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a16:	d10a      	bne.n	8001a2e <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f004 fb19 	bl	8006050 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 faed 	bl	8004012 <USB_ReadInterrupts>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d115      	bne.n	8001a6e <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f004 fb09 	bl	800606c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6859      	ldr	r1, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	e000      	b.n	8001a6e <HAL_PCD_IRQHandler+0x742>
      return;
 8001a6c:	bf00      	nop
    }
  }
}
 8001a6e:	3734      	adds	r7, #52	; 0x34
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd90      	pop	{r4, r7, pc}

08001a74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_PCD_SetAddress+0x1a>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e013      	b.n	8001ab6 <HAL_PCD_SetAddress+0x42>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	78fa      	ldrb	r2, [r7, #3]
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 fa4e 	bl	8003f48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	4608      	mov	r0, r1
 8001ac8:	4611      	mov	r1, r2
 8001aca:	461a      	mov	r2, r3
 8001acc:	4603      	mov	r3, r0
 8001ace:	70fb      	strb	r3, [r7, #3]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	803b      	strh	r3, [r7, #0]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001adc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	da0f      	bge.n	8001b04 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	f003 020f 	and.w	r2, r3, #15
 8001aea:	4613      	mov	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	1a9b      	subs	r3, r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	3338      	adds	r3, #56	; 0x38
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	4413      	add	r3, r2
 8001af8:	3304      	adds	r3, #4
 8001afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2201      	movs	r2, #1
 8001b00:	705a      	strb	r2, [r3, #1]
 8001b02:	e00f      	b.n	8001b24 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	f003 020f 	and.w	r2, r3, #15
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	1a9b      	subs	r3, r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b30:	883a      	ldrh	r2, [r7, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	78ba      	ldrb	r2, [r7, #2]
 8001b3a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	785b      	ldrb	r3, [r3, #1]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d004      	beq.n	8001b4e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b4e:	78bb      	ldrb	r3, [r7, #2]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d102      	bne.n	8001b5a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_PCD_EP_Open+0xaa>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e00e      	b.n	8001b86 <HAL_PCD_EP_Open+0xc8>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 fb88 	bl	800328c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001b84:	7afb      	ldrb	r3, [r7, #11]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	460b      	mov	r3, r1
 8001b98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	da0f      	bge.n	8001bc2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	f003 020f 	and.w	r2, r3, #15
 8001ba8:	4613      	mov	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	3338      	adds	r3, #56	; 0x38
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	705a      	strb	r2, [r3, #1]
 8001bc0:	e00f      	b.n	8001be2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	f003 020f 	and.w	r2, r3, #15
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3304      	adds	r3, #4
 8001bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_PCD_EP_Close+0x6e>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e00e      	b.n	8001c1a <HAL_PCD_EP_Close+0x8c>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68f9      	ldr	r1, [r7, #12]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 fbc4 	bl	8003398 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c32:	7afb      	ldrb	r3, [r7, #11]
 8001c34:	f003 020f 	and.w	r2, r3, #15
 8001c38:	4613      	mov	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	1a9b      	subs	r3, r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	3304      	adds	r3, #4
 8001c4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2200      	movs	r2, #0
 8001c62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c64:	7afb      	ldrb	r3, [r7, #11]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d102      	bne.n	8001c7e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d109      	bne.n	8001c9c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	6979      	ldr	r1, [r7, #20]
 8001c96:	f001 fe9f 	bl	80039d8 <USB_EP0StartXfer>
 8001c9a:	e008      	b.n	8001cae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	6979      	ldr	r1, [r7, #20]
 8001caa:	f001 fc51 	bl	8003550 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	f003 020f 	and.w	r2, r3, #15
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cf6:	7afb      	ldrb	r3, [r7, #11]
 8001cf8:	f003 020f 	and.w	r2, r3, #15
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	3338      	adds	r3, #56	; 0x38
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4413      	add	r3, r2
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2201      	movs	r2, #1
 8001d24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d26:	7afb      	ldrb	r3, [r7, #11]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d102      	bne.n	8001d40 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d40:	7afb      	ldrb	r3, [r7, #11]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	6979      	ldr	r1, [r7, #20]
 8001d58:	f001 fe3e 	bl	80039d8 <USB_EP0StartXfer>
 8001d5c:	e008      	b.n	8001d70 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	6979      	ldr	r1, [r7, #20]
 8001d6c:	f001 fbf0 	bl	8003550 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	f003 020f 	and.w	r2, r3, #15
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d901      	bls.n	8001d98 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e050      	b.n	8001e3a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	da0f      	bge.n	8001dc0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	f003 020f 	and.w	r2, r3, #15
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	3338      	adds	r3, #56	; 0x38
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	4413      	add	r3, r2
 8001db4:	3304      	adds	r3, #4
 8001db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	705a      	strb	r2, [r3, #1]
 8001dbe:	e00d      	b.n	8001ddc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_PCD_EP_SetStall+0x82>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e01e      	b.n	8001e3a <HAL_PCD_EP_SetStall+0xc0>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68f9      	ldr	r1, [r7, #12]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f001 ffca 	bl	8003da4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10a      	bne.n	8001e30 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	b2d9      	uxtb	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	f002 f9ae 	bl	800418c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	f003 020f 	and.w	r2, r3, #15
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d901      	bls.n	8001e60 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e042      	b.n	8001ee6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	da0f      	bge.n	8001e88 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	f003 020f 	and.w	r2, r3, #15
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	3338      	adds	r3, #56	; 0x38
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	705a      	strb	r2, [r3, #1]
 8001e86:	e00f      	b.n	8001ea8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	f003 020f 	and.w	r2, r3, #15
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	f003 030f 	and.w	r3, r3, #15
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_PCD_EP_ClrStall+0x86>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e00e      	b.n	8001ee6 <HAL_PCD_EP_ClrStall+0xa4>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f001 ffd1 	bl	8003e7e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b08a      	sub	sp, #40	; 0x28
 8001ef2:	af02      	add	r7, sp, #8
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	3338      	adds	r3, #56	; 0x38
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	3304      	adds	r3, #4
 8001f14:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d901      	bls.n	8001f26 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e06c      	b.n	8002000 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d902      	bls.n	8001f42 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3303      	adds	r3, #3
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f4a:	e02b      	b.n	8001fa4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	69fa      	ldr	r2, [r7, #28]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d902      	bls.n	8001f68 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	3303      	adds	r3, #3
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	68d9      	ldr	r1, [r3, #12]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	4603      	mov	r3, r0
 8001f86:	6978      	ldr	r0, [r7, #20]
 8001f88:	f001 fe78 	bl	8003c7c <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	441a      	add	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	699a      	ldr	r2, [r3, #24]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	441a      	add	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d809      	bhi.n	8001fce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d203      	bcs.n	8001fce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1be      	bne.n	8001f4c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d811      	bhi.n	8001ffe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	6939      	ldr	r1, [r7, #16]
 8001ff6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3720      	adds	r7, #32
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	333c      	adds	r3, #60	; 0x3c
 8002020:	3304      	adds	r3, #4
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4413      	add	r3, r2
 800202e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b01      	cmp	r3, #1
 800203c:	f040 80a0 	bne.w	8002180 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d015      	beq.n	8002076 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4a72      	ldr	r2, [pc, #456]	; (8002218 <PCD_EP_OutXfrComplete_int+0x210>)
 800204e:	4293      	cmp	r3, r2
 8002050:	f240 80dd 	bls.w	800220e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80d7 	beq.w	800220e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4413      	add	r3, r2
 8002068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206c:	461a      	mov	r2, r3
 800206e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002072:	6093      	str	r3, [r2, #8]
 8002074:	e0cb      	b.n	800220e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	2b00      	cmp	r3, #0
 800207e:	d009      	beq.n	8002094 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	015a      	lsls	r2, r3, #5
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4413      	add	r3, r2
 8002088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800208c:	461a      	mov	r2, r3
 800208e:	2320      	movs	r3, #32
 8002090:	6093      	str	r3, [r2, #8]
 8002092:	e0bc      	b.n	800220e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 80b7 	bne.w	800220e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4a5d      	ldr	r2, [pc, #372]	; (8002218 <PCD_EP_OutXfrComplete_int+0x210>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d90f      	bls.n	80020c8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020be:	461a      	mov	r2, r3
 80020c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020c4:	6093      	str	r3, [r2, #8]
 80020c6:	e0a2      	b.n	800220e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020da:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	0159      	lsls	r1, r3, #5
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	440b      	add	r3, r1
 80020e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80020ee:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4403      	add	r3, r0
 80020fe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002102:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002116:	6819      	ldr	r1, [r3, #0]
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4403      	add	r3, r0
 8002126:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4419      	add	r1, r3
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	1a9b      	subs	r3, r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4403      	add	r3, r0
 800213c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002140:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d114      	bne.n	8002172 <PCD_EP_OutXfrComplete_int+0x16a>
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d108      	bne.n	8002172 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800216a:	461a      	mov	r2, r3
 800216c:	2101      	movs	r1, #1
 800216e:	f002 f80d 	bl	800418c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f003 fea5 	bl	8005ec8 <HAL_PCD_DataOutStageCallback>
 800217e:	e046      	b.n	800220e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4a26      	ldr	r2, [pc, #152]	; (800221c <PCD_EP_OutXfrComplete_int+0x214>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d124      	bne.n	80021d2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219e:	461a      	mov	r2, r3
 80021a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021a4:	6093      	str	r3, [r2, #8]
 80021a6:	e032      	b.n	800220e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d008      	beq.n	80021c4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021be:	461a      	mov	r2, r3
 80021c0:	2320      	movs	r3, #32
 80021c2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	4619      	mov	r1, r3
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f003 fe7c 	bl	8005ec8 <HAL_PCD_DataOutStageCallback>
 80021d0:	e01d      	b.n	800220e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d114      	bne.n	8002202 <PCD_EP_OutXfrComplete_int+0x1fa>
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d108      	bne.n	8002202 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021fa:	461a      	mov	r2, r3
 80021fc:	2100      	movs	r1, #0
 80021fe:	f001 ffc5 	bl	800418c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	4619      	mov	r1, r3
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f003 fe5d 	bl	8005ec8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	4f54300a 	.word	0x4f54300a
 800221c:	4f54310a 	.word	0x4f54310a

08002220 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	333c      	adds	r3, #60	; 0x3c
 8002238:	3304      	adds	r3, #4
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4413      	add	r3, r2
 8002246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d90e      	bls.n	8002274 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800225c:	2b00      	cmp	r3, #0
 800225e:	d009      	beq.n	8002274 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4413      	add	r3, r2
 8002268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800226c:	461a      	mov	r2, r3
 800226e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002272:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f003 fe15 	bl	8005ea4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d90c      	bls.n	800229c <PCD_EP_OutSetupPacket_int+0x7c>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d108      	bne.n	800229c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002294:	461a      	mov	r2, r3
 8002296:	2101      	movs	r1, #1
 8002298:	f001 ff78 	bl	800418c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	4f54300a 	.word	0x4f54300a

080022ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
 80022b8:	4613      	mov	r3, r2
 80022ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d107      	bne.n	80022da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022ca:	883b      	ldrh	r3, [r7, #0]
 80022cc:	0419      	lsls	r1, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
 80022d8:	e028      	b.n	800232c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	0c1b      	lsrs	r3, r3, #16
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	4413      	add	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022e8:	2300      	movs	r3, #0
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	e00d      	b.n	800230a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	3340      	adds	r3, #64	; 0x40
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	0c1b      	lsrs	r3, r3, #16
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	4413      	add	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	3301      	adds	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	3b01      	subs	r3, #1
 8002310:	429a      	cmp	r2, r3
 8002312:	d3ec      	bcc.n	80022ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002314:	883b      	ldrh	r3, [r7, #0]
 8002316:	0418      	lsls	r0, r3, #16
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6819      	ldr	r1, [r3, #0]
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	3b01      	subs	r3, #1
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	4302      	orrs	r2, r0
 8002324:	3340      	adds	r3, #64	; 0x40
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	887a      	ldrh	r2, [r7, #2]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e236      	b.n	80027d8 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d050      	beq.n	8002418 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002376:	4b9e      	ldr	r3, [pc, #632]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	2b04      	cmp	r3, #4
 8002380:	d00c      	beq.n	800239c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002382:	4b9b      	ldr	r3, [pc, #620]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800238a:	2b08      	cmp	r3, #8
 800238c:	d112      	bne.n	80023b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800238e:	4b98      	ldr	r3, [pc, #608]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800239a:	d10b      	bne.n	80023b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	4b94      	ldr	r3, [pc, #592]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d036      	beq.n	8002416 <HAL_RCC_OscConfig+0xbe>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d132      	bne.n	8002416 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e211      	b.n	80027d8 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	4b8e      	ldr	r3, [pc, #568]	; (80025f4 <HAL_RCC_OscConfig+0x29c>)
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d013      	beq.n	80023ee <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7fe fb67 	bl	8000a98 <HAL_GetTick>
 80023ca:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ce:	f7fe fb63 	bl	8000a98 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b64      	cmp	r3, #100	; 0x64
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e1fb      	b.n	80027d8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e0:	4b83      	ldr	r3, [pc, #524]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x76>
 80023ec:	e014      	b.n	8002418 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ee:	f7fe fb53 	bl	8000a98 <HAL_GetTick>
 80023f2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f6:	f7fe fb4f 	bl	8000a98 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b64      	cmp	r3, #100	; 0x64
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1e7      	b.n	80027d8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002408:	4b79      	ldr	r3, [pc, #484]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f0      	bne.n	80023f6 <HAL_RCC_OscConfig+0x9e>
 8002414:	e000      	b.n	8002418 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002416:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d077      	beq.n	8002514 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002424:	4b72      	ldr	r3, [pc, #456]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00b      	beq.n	8002448 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002430:	4b6f      	ldr	r3, [pc, #444]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002438:	2b08      	cmp	r3, #8
 800243a:	d126      	bne.n	800248a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243c:	4b6c      	ldr	r3, [pc, #432]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d120      	bne.n	800248a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002448:	4b69      	ldr	r3, [pc, #420]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_OscConfig+0x108>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d001      	beq.n	8002460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e1bb      	b.n	80027d8 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002460:	4b63      	ldr	r3, [pc, #396]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	21f8      	movs	r1, #248	; 0xf8
 800246e:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	69b9      	ldr	r1, [r7, #24]
 8002472:	fa91 f1a1 	rbit	r1, r1
 8002476:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002478:	6979      	ldr	r1, [r7, #20]
 800247a:	fab1 f181 	clz	r1, r1
 800247e:	b2c9      	uxtb	r1, r1
 8002480:	408b      	lsls	r3, r1
 8002482:	495b      	ldr	r1, [pc, #364]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002484:	4313      	orrs	r3, r2
 8002486:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002488:	e044      	b.n	8002514 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d02a      	beq.n	80024e8 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002492:	4b59      	ldr	r3, [pc, #356]	; (80025f8 <HAL_RCC_OscConfig+0x2a0>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fafe 	bl	8000a98 <HAL_GetTick>
 800249c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a0:	f7fe fafa 	bl	8000a98 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e192      	b.n	80027d8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b2:	4b4f      	ldr	r3, [pc, #316]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024be:	4b4c      	ldr	r3, [pc, #304]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	21f8      	movs	r1, #248	; 0xf8
 80024cc:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	6939      	ldr	r1, [r7, #16]
 80024d0:	fa91 f1a1 	rbit	r1, r1
 80024d4:	60f9      	str	r1, [r7, #12]
  return result;
 80024d6:	68f9      	ldr	r1, [r7, #12]
 80024d8:	fab1 f181 	clz	r1, r1
 80024dc:	b2c9      	uxtb	r1, r1
 80024de:	408b      	lsls	r3, r1
 80024e0:	4943      	ldr	r1, [pc, #268]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]
 80024e6:	e015      	b.n	8002514 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e8:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <HAL_RCC_OscConfig+0x2a0>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7fe fad3 	bl	8000a98 <HAL_GetTick>
 80024f2:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f6:	f7fe facf 	bl	8000a98 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e167      	b.n	80027d8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002508:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d030      	beq.n	8002582 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d016      	beq.n	8002556 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002528:	4b34      	ldr	r3, [pc, #208]	; (80025fc <HAL_RCC_OscConfig+0x2a4>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252e:	f7fe fab3 	bl	8000a98 <HAL_GetTick>
 8002532:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002536:	f7fe faaf 	bl	8000a98 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e147      	b.n	80027d8 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002548:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800254a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x1de>
 8002554:	e015      	b.n	8002582 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002556:	4b29      	ldr	r3, [pc, #164]	; (80025fc <HAL_RCC_OscConfig+0x2a4>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255c:	f7fe fa9c 	bl	8000a98 <HAL_GetTick>
 8002560:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002564:	f7fe fa98 	bl	8000a98 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e130      	b.n	80027d8 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002576:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 8087 	beq.w	800269e <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002590:	2300      	movs	r3, #0
 8002592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d110      	bne.n	80025c4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a11      	ldr	r2, [pc, #68]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80025c4:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <HAL_RCC_OscConfig+0x2a8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0d      	ldr	r2, [pc, #52]	; (8002600 <HAL_RCC_OscConfig+0x2a8>)
 80025ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ce:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_OscConfig+0x2a8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d122      	bne.n	8002622 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_RCC_OscConfig+0x2a8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a07      	ldr	r2, [pc, #28]	; (8002600 <HAL_RCC_OscConfig+0x2a8>)
 80025e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e8:	f7fe fa56 	bl	8000a98 <HAL_GetTick>
 80025ec:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ee:	e012      	b.n	8002616 <HAL_RCC_OscConfig+0x2be>
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40023802 	.word	0x40023802
 80025f8:	42470000 	.word	0x42470000
 80025fc:	42470e80 	.word	0x42470e80
 8002600:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002604:	f7fe fa48 	bl	8000a98 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e0e0      	b.n	80027d8 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002616:	4b72      	ldr	r3, [pc, #456]	; (80027e0 <HAL_RCC_OscConfig+0x488>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	4b6f      	ldr	r3, [pc, #444]	; (80027e4 <HAL_RCC_OscConfig+0x48c>)
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d015      	beq.n	8002660 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002634:	f7fe fa30 	bl	8000a98 <HAL_GetTick>
 8002638:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263a:	e00a      	b.n	8002652 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800263c:	f7fe fa2c 	bl	8000a98 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e0c2      	b.n	80027d8 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002652:	4b65      	ldr	r3, [pc, #404]	; (80027e8 <HAL_RCC_OscConfig+0x490>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0ee      	beq.n	800263c <HAL_RCC_OscConfig+0x2e4>
 800265e:	e014      	b.n	800268a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002660:	f7fe fa1a 	bl	8000a98 <HAL_GetTick>
 8002664:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002666:	e00a      	b.n	800267e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002668:	f7fe fa16 	bl	8000a98 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	; 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e0ac      	b.n	80027d8 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267e:	4b5a      	ldr	r3, [pc, #360]	; (80027e8 <HAL_RCC_OscConfig+0x490>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1ee      	bne.n	8002668 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800268a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800268e:	2b01      	cmp	r3, #1
 8002690:	d105      	bne.n	800269e <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002692:	4b55      	ldr	r3, [pc, #340]	; (80027e8 <HAL_RCC_OscConfig+0x490>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a54      	ldr	r2, [pc, #336]	; (80027e8 <HAL_RCC_OscConfig+0x490>)
 8002698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8097 	beq.w	80027d6 <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026a8:	4b4f      	ldr	r3, [pc, #316]	; (80027e8 <HAL_RCC_OscConfig+0x490>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d061      	beq.n	8002778 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d146      	bne.n	800274a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026bc:	4b4b      	ldr	r3, [pc, #300]	; (80027ec <HAL_RCC_OscConfig+0x494>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c2:	f7fe f9e9 	bl	8000a98 <HAL_GetTick>
 80026c6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ca:	f7fe f9e5 	bl	8000a98 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b64      	cmp	r3, #100	; 0x64
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e07d      	b.n	80027d8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026dc:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <HAL_RCC_OscConfig+0x490>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f0      	bne.n	80026ca <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e8:	4b3f      	ldr	r3, [pc, #252]	; (80027e8 <HAL_RCC_OscConfig+0x490>)
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	4b40      	ldr	r3, [pc, #256]	; (80027f0 <HAL_RCC_OscConfig+0x498>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	69d1      	ldr	r1, [r2, #28]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6a12      	ldr	r2, [r2, #32]
 80026f8:	4311      	orrs	r1, r2
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026fe:	0192      	lsls	r2, r2, #6
 8002700:	4311      	orrs	r1, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002706:	0612      	lsls	r2, r2, #24
 8002708:	4311      	orrs	r1, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800270e:	0852      	lsrs	r2, r2, #1
 8002710:	3a01      	subs	r2, #1
 8002712:	0412      	lsls	r2, r2, #16
 8002714:	430a      	orrs	r2, r1
 8002716:	4934      	ldr	r1, [pc, #208]	; (80027e8 <HAL_RCC_OscConfig+0x490>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800271c:	4b33      	ldr	r3, [pc, #204]	; (80027ec <HAL_RCC_OscConfig+0x494>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002722:	f7fe f9b9 	bl	8000a98 <HAL_GetTick>
 8002726:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272a:	f7fe f9b5 	bl	8000a98 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b64      	cmp	r3, #100	; 0x64
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e04d      	b.n	80027d8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273c:	4b2a      	ldr	r3, [pc, #168]	; (80027e8 <HAL_RCC_OscConfig+0x490>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x3d2>
 8002748:	e045      	b.n	80027d6 <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274a:	4b28      	ldr	r3, [pc, #160]	; (80027ec <HAL_RCC_OscConfig+0x494>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7fe f9a2 	bl	8000a98 <HAL_GetTick>
 8002754:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002758:	f7fe f99e 	bl	8000a98 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e036      	b.n	80027d8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276a:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <HAL_RCC_OscConfig+0x490>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x400>
 8002776:	e02e      	b.n	80027d6 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e029      	b.n	80027d8 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002784:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_RCC_OscConfig+0x490>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	429a      	cmp	r2, r3
 8002796:	d11c      	bne.n	80027d2 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d115      	bne.n	80027d2 <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	099b      	lsrs	r3, r3, #6
 80027aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d10d      	bne.n	80027d2 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d106      	bne.n	80027d2 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3728      	adds	r7, #40	; 0x28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40007000 	.word	0x40007000
 80027e4:	40023870 	.word	0x40023870
 80027e8:	40023800 	.word	0x40023800
 80027ec:	42470060 	.word	0x42470060
 80027f0:	f0bc8000 	.word	0xf0bc8000

080027f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0d2      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002808:	4b6b      	ldr	r3, [pc, #428]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d90c      	bls.n	8002830 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	4b66      	ldr	r3, [pc, #408]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d001      	beq.n	8002830 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0be      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d020      	beq.n	800287e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002848:	4b5c      	ldr	r3, [pc, #368]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a5b      	ldr	r2, [pc, #364]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800284e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002852:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002860:	4b56      	ldr	r3, [pc, #344]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4a55      	ldr	r2, [pc, #340]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002866:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800286a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800286c:	4b53      	ldr	r3, [pc, #332]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4950      	ldr	r1, [pc, #320]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d040      	beq.n	800290c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	4b4a      	ldr	r3, [pc, #296]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d115      	bne.n	80028ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e085      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	4b44      	ldr	r3, [pc, #272]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e079      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ba:	4b40      	ldr	r3, [pc, #256]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e071      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ca:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f023 0203 	bic.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4939      	ldr	r1, [pc, #228]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028dc:	f7fe f8dc 	bl	8000a98 <HAL_GetTick>
 80028e0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e4:	f7fe f8d8 	bl	8000a98 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e059      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	4b30      	ldr	r3, [pc, #192]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 020c 	and.w	r2, r3, #12
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	429a      	cmp	r2, r3
 800290a:	d1eb      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800290c:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d20c      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e03c      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002940:	4b1e      	ldr	r3, [pc, #120]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	491b      	ldr	r1, [pc, #108]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4913      	ldr	r1, [pc, #76]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002972:	f000 f82b 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 8002976:	4601      	mov	r1, r0
 8002978:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002980:	22f0      	movs	r2, #240	; 0xf0
 8002982:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	fa92 f2a2 	rbit	r2, r2
 800298a:	60fa      	str	r2, [r7, #12]
  return result;
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	fab2 f282 	clz	r2, r2
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	40d3      	lsrs	r3, r2
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <HAL_RCC_ClockConfig+0x1cc>)
 8002998:	5cd3      	ldrb	r3, [r2, r3]
 800299a:	fa21 f303 	lsr.w	r3, r1, r3
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1d0>)
 80029a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1d4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe f834 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023c00 	.word	0x40023c00
 80029bc:	40023800 	.word	0x40023800
 80029c0:	08006dd8 	.word	0x08006dd8
 80029c4:	20000010 	.word	0x20000010
 80029c8:	20000014 	.word	0x20000014

080029cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d0:	b094      	sub	sp, #80	; 0x50
 80029d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	647b      	str	r3, [r7, #68]	; 0x44
 80029d8:	2300      	movs	r3, #0
 80029da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029dc:	2300      	movs	r3, #0
 80029de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e4:	4b7c      	ldr	r3, [pc, #496]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x20c>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 030c 	and.w	r3, r3, #12
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d00d      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x40>
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	f200 80e7 	bhi.w	8002bc4 <HAL_RCC_GetSysClockFreq+0x1f8>
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0x34>
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d003      	beq.n	8002a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80029fe:	e0e1      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a00:	4b76      	ldr	r3, [pc, #472]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x210>)
 8002a02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a04:	e0e1      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a06:	4b76      	ldr	r3, [pc, #472]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x214>)
 8002a08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a0a:	e0de      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a0c:	4b72      	ldr	r3, [pc, #456]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a16:	4b70      	ldr	r3, [pc, #448]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d065      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a22:	4b6d      	ldr	r3, [pc, #436]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	099b      	lsrs	r3, r3, #6
 8002a28:	2200      	movs	r2, #0
 8002a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a34:	633b      	str	r3, [r7, #48]	; 0x30
 8002a36:	2300      	movs	r3, #0
 8002a38:	637b      	str	r3, [r7, #52]	; 0x34
 8002a3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a3e:	4622      	mov	r2, r4
 8002a40:	462b      	mov	r3, r5
 8002a42:	f04f 0000 	mov.w	r0, #0
 8002a46:	f04f 0100 	mov.w	r1, #0
 8002a4a:	0159      	lsls	r1, r3, #5
 8002a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a50:	0150      	lsls	r0, r2, #5
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4621      	mov	r1, r4
 8002a58:	1a51      	subs	r1, r2, r1
 8002a5a:	6139      	str	r1, [r7, #16]
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a70:	4659      	mov	r1, fp
 8002a72:	018b      	lsls	r3, r1, #6
 8002a74:	4651      	mov	r1, sl
 8002a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a7a:	4651      	mov	r1, sl
 8002a7c:	018a      	lsls	r2, r1, #6
 8002a7e:	46d4      	mov	ip, sl
 8002a80:	ebb2 080c 	subs.w	r8, r2, ip
 8002a84:	4659      	mov	r1, fp
 8002a86:	eb63 0901 	sbc.w	r9, r3, r1
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a9e:	4690      	mov	r8, r2
 8002aa0:	4699      	mov	r9, r3
 8002aa2:	4623      	mov	r3, r4
 8002aa4:	eb18 0303 	adds.w	r3, r8, r3
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	462b      	mov	r3, r5
 8002aac:	eb49 0303 	adc.w	r3, r9, r3
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002abe:	4629      	mov	r1, r5
 8002ac0:	024b      	lsls	r3, r1, #9
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	4629      	mov	r1, r5
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002acc:	4601      	mov	r1, r0
 8002ace:	024a      	lsls	r2, r1, #9
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ada:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002adc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ae0:	f7fd fb70 	bl	80001c4 <__aeabi_uldivmod>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4613      	mov	r3, r2
 8002aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aec:	e05c      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aee:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	099b      	lsrs	r3, r3, #6
 8002af4:	2200      	movs	r2, #0
 8002af6:	4618      	mov	r0, r3
 8002af8:	4611      	mov	r1, r2
 8002afa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002afe:	623b      	str	r3, [r7, #32]
 8002b00:	2300      	movs	r3, #0
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
 8002b04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b08:	4642      	mov	r2, r8
 8002b0a:	464b      	mov	r3, r9
 8002b0c:	f04f 0000 	mov.w	r0, #0
 8002b10:	f04f 0100 	mov.w	r1, #0
 8002b14:	0159      	lsls	r1, r3, #5
 8002b16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b1a:	0150      	lsls	r0, r2, #5
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	46c4      	mov	ip, r8
 8002b22:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002b26:	4640      	mov	r0, r8
 8002b28:	4649      	mov	r1, r9
 8002b2a:	468c      	mov	ip, r1
 8002b2c:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b44:	ebb2 040a 	subs.w	r4, r2, sl
 8002b48:	eb63 050b 	sbc.w	r5, r3, fp
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	00eb      	lsls	r3, r5, #3
 8002b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b5a:	00e2      	lsls	r2, r4, #3
 8002b5c:	4614      	mov	r4, r2
 8002b5e:	461d      	mov	r5, r3
 8002b60:	4603      	mov	r3, r0
 8002b62:	18e3      	adds	r3, r4, r3
 8002b64:	603b      	str	r3, [r7, #0]
 8002b66:	460b      	mov	r3, r1
 8002b68:	eb45 0303 	adc.w	r3, r5, r3
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	028b      	lsls	r3, r1, #10
 8002b7e:	4620      	mov	r0, r4
 8002b80:	4629      	mov	r1, r5
 8002b82:	4604      	mov	r4, r0
 8002b84:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002b88:	4601      	mov	r1, r0
 8002b8a:	028a      	lsls	r2, r1, #10
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b92:	2200      	movs	r2, #0
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	61fa      	str	r2, [r7, #28]
 8002b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b9c:	f7fd fb12 	bl	80001c4 <__aeabi_uldivmod>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	0c1b      	lsrs	r3, r3, #16
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002bb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bc2:	e002      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x210>)
 8002bc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3750      	adds	r7, #80	; 0x50
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	00f42400 	.word	0x00f42400
 8002be0:	007a1200 	.word	0x007a1200

08002be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be8:	4b02      	ldr	r3, [pc, #8]	; (8002bf4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	20000010 	.word	0x20000010

08002bf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b084      	sub	sp, #16
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	f107 001c 	add.w	r0, r7, #28
 8002c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d122      	bne.n	8002c56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d105      	bne.n	8002c4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f001 fafa 	bl	8004244 <USB_CoreReset>
 8002c50:	4603      	mov	r3, r0
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e010      	b.n	8002c78 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f001 faee 	bl	8004244 <USB_CoreReset>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d10b      	bne.n	8002c96 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f043 0206 	orr.w	r2, r3, #6
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ca2:	b004      	add	sp, #16
 8002ca4:	4770      	bx	lr
	...

08002ca8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d165      	bne.n	8002d88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4a41      	ldr	r2, [pc, #260]	; (8002dc4 <USB_SetTurnaroundTime+0x11c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d906      	bls.n	8002cd2 <USB_SetTurnaroundTime+0x2a>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4a40      	ldr	r2, [pc, #256]	; (8002dc8 <USB_SetTurnaroundTime+0x120>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d202      	bcs.n	8002cd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002ccc:	230f      	movs	r3, #15
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	e062      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4a3c      	ldr	r2, [pc, #240]	; (8002dc8 <USB_SetTurnaroundTime+0x120>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d306      	bcc.n	8002ce8 <USB_SetTurnaroundTime+0x40>
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4a3b      	ldr	r2, [pc, #236]	; (8002dcc <USB_SetTurnaroundTime+0x124>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d202      	bcs.n	8002ce8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002ce2:	230e      	movs	r3, #14
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	e057      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4a38      	ldr	r2, [pc, #224]	; (8002dcc <USB_SetTurnaroundTime+0x124>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d306      	bcc.n	8002cfe <USB_SetTurnaroundTime+0x56>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4a37      	ldr	r2, [pc, #220]	; (8002dd0 <USB_SetTurnaroundTime+0x128>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d202      	bcs.n	8002cfe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002cf8:	230d      	movs	r3, #13
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	e04c      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	4a33      	ldr	r2, [pc, #204]	; (8002dd0 <USB_SetTurnaroundTime+0x128>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d306      	bcc.n	8002d14 <USB_SetTurnaroundTime+0x6c>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4a32      	ldr	r2, [pc, #200]	; (8002dd4 <USB_SetTurnaroundTime+0x12c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d802      	bhi.n	8002d14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d0e:	230c      	movs	r3, #12
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	e041      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4a2f      	ldr	r2, [pc, #188]	; (8002dd4 <USB_SetTurnaroundTime+0x12c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d906      	bls.n	8002d2a <USB_SetTurnaroundTime+0x82>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4a2e      	ldr	r2, [pc, #184]	; (8002dd8 <USB_SetTurnaroundTime+0x130>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d802      	bhi.n	8002d2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d24:	230b      	movs	r3, #11
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	e036      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4a2a      	ldr	r2, [pc, #168]	; (8002dd8 <USB_SetTurnaroundTime+0x130>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d906      	bls.n	8002d40 <USB_SetTurnaroundTime+0x98>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4a29      	ldr	r2, [pc, #164]	; (8002ddc <USB_SetTurnaroundTime+0x134>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d802      	bhi.n	8002d40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d3a:	230a      	movs	r3, #10
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	e02b      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4a26      	ldr	r2, [pc, #152]	; (8002ddc <USB_SetTurnaroundTime+0x134>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d906      	bls.n	8002d56 <USB_SetTurnaroundTime+0xae>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4a25      	ldr	r2, [pc, #148]	; (8002de0 <USB_SetTurnaroundTime+0x138>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d202      	bcs.n	8002d56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002d50:	2309      	movs	r3, #9
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	e020      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	4a21      	ldr	r2, [pc, #132]	; (8002de0 <USB_SetTurnaroundTime+0x138>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d306      	bcc.n	8002d6c <USB_SetTurnaroundTime+0xc4>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4a20      	ldr	r2, [pc, #128]	; (8002de4 <USB_SetTurnaroundTime+0x13c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d802      	bhi.n	8002d6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002d66:	2308      	movs	r3, #8
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	e015      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4a1d      	ldr	r2, [pc, #116]	; (8002de4 <USB_SetTurnaroundTime+0x13c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d906      	bls.n	8002d82 <USB_SetTurnaroundTime+0xda>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <USB_SetTurnaroundTime+0x140>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d202      	bcs.n	8002d82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002d7c:	2307      	movs	r3, #7
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	e00a      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d82:	2306      	movs	r3, #6
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e007      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002d8e:	2309      	movs	r3, #9
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e001      	b.n	8002d98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d94:	2309      	movs	r3, #9
 8002d96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	029b      	lsls	r3, r3, #10
 8002dac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002db0:	431a      	orrs	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	00d8acbf 	.word	0x00d8acbf
 8002dc8:	00e4e1c0 	.word	0x00e4e1c0
 8002dcc:	00f42400 	.word	0x00f42400
 8002dd0:	01067380 	.word	0x01067380
 8002dd4:	011a499f 	.word	0x011a499f
 8002dd8:	01312cff 	.word	0x01312cff
 8002ddc:	014ca43f 	.word	0x014ca43f
 8002de0:	016e3600 	.word	0x016e3600
 8002de4:	01a6ab1f 	.word	0x01a6ab1f
 8002de8:	01e84800 	.word	0x01e84800

08002dec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f023 0201 	bic.w	r2, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d115      	bne.n	8002e7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	f7fd fe26 	bl	8000aac <HAL_Delay>
      ms++;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3301      	adds	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f001 f961 	bl	800412e <USB_GetMode>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d01e      	beq.n	8002eb0 <USB_SetCurrentMode+0x84>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b31      	cmp	r3, #49	; 0x31
 8002e76:	d9f0      	bls.n	8002e5a <USB_SetCurrentMode+0x2e>
 8002e78:	e01a      	b.n	8002eb0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d115      	bne.n	8002eac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f7fd fe0d 	bl	8000aac <HAL_Delay>
      ms++;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3301      	adds	r3, #1
 8002e96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f001 f948 	bl	800412e <USB_GetMode>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <USB_SetCurrentMode+0x84>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b31      	cmp	r3, #49	; 0x31
 8002ea8:	d9f0      	bls.n	8002e8c <USB_SetCurrentMode+0x60>
 8002eaa:	e001      	b.n	8002eb0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e005      	b.n	8002ebc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b32      	cmp	r3, #50	; 0x32
 8002eb4:	d101      	bne.n	8002eba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b086      	sub	sp, #24
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	e009      	b.n	8002ef8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	3340      	adds	r3, #64	; 0x40
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	2200      	movs	r2, #0
 8002ef0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	2b0e      	cmp	r3, #14
 8002efc:	d9f2      	bls.n	8002ee4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d11c      	bne.n	8002f3e <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f12:	f043 0302 	orr.w	r3, r3, #2
 8002f16:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f3c:	e00b      	b.n	8002f56 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	2300      	movs	r3, #0
 8002f60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f68:	4619      	mov	r1, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f70:	461a      	mov	r2, r3
 8002f72:	680b      	ldr	r3, [r1, #0]
 8002f74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d10c      	bne.n	8002f96 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d104      	bne.n	8002f8c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f82:	2100      	movs	r1, #0
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f945 	bl	8003214 <USB_SetDevSpeed>
 8002f8a:	e008      	b.n	8002f9e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f940 	bl	8003214 <USB_SetDevSpeed>
 8002f94:	e003      	b.n	8002f9e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f96:	2103      	movs	r1, #3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f93b 	bl	8003214 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f9e:	2110      	movs	r1, #16
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f8f3 	bl	800318c <USB_FlushTxFifo>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f90f 	bl	80031d4 <USB_FlushRxFifo>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2300      	movs	r3, #0
 8002fca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	e043      	b.n	8003072 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003000:	d118      	bne.n	8003034 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10a      	bne.n	800301e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4413      	add	r3, r2
 8003010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003014:	461a      	mov	r2, r3
 8003016:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	e013      	b.n	8003046 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4413      	add	r3, r2
 8003026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800302a:	461a      	mov	r2, r3
 800302c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	e008      	b.n	8003046 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003040:	461a      	mov	r2, r3
 8003042:	2300      	movs	r3, #0
 8003044:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4413      	add	r3, r2
 800304e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003052:	461a      	mov	r2, r3
 8003054:	2300      	movs	r3, #0
 8003056:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4413      	add	r3, r2
 8003060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003064:	461a      	mov	r2, r3
 8003066:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800306a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	3301      	adds	r3, #1
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	429a      	cmp	r2, r3
 8003078:	d3b7      	bcc.n	8002fea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	e043      	b.n	8003108 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003096:	d118      	bne.n	80030ca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030aa:	461a      	mov	r2, r3
 80030ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e013      	b.n	80030dc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c0:	461a      	mov	r2, r3
 80030c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	e008      	b.n	80030dc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d6:	461a      	mov	r2, r3
 80030d8:	2300      	movs	r3, #0
 80030da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e8:	461a      	mov	r2, r3
 80030ea:	2300      	movs	r3, #0
 80030ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fa:	461a      	mov	r2, r3
 80030fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003100:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	3301      	adds	r3, #1
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	429a      	cmp	r2, r3
 800310e:	d3b7      	bcc.n	8003080 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003122:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003130:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	2b00      	cmp	r3, #0
 8003136:	d105      	bne.n	8003144 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f043 0210 	orr.w	r2, r3, #16
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699a      	ldr	r2, [r3, #24]
 8003148:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <USB_DevInit+0x2c4>)
 800314a:	4313      	orrs	r3, r2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f043 0208 	orr.w	r2, r3, #8
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003164:	2b01      	cmp	r3, #1
 8003166:	d107      	bne.n	8003178 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003170:	f043 0304 	orr.w	r3, r3, #4
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003178:	7dfb      	ldrb	r3, [r7, #23]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003184:	b004      	add	sp, #16
 8003186:	4770      	bx	lr
 8003188:	803c3800 	.word	0x803c3800

0800318c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	019b      	lsls	r3, r3, #6
 800319e:	f043 0220 	orr.w	r2, r3, #32
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3301      	adds	r3, #1
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <USB_FlushTxFifo+0x44>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e006      	b.n	80031c6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d0f0      	beq.n	80031a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	00030d40 	.word	0x00030d40

080031d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2210      	movs	r2, #16
 80031e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3301      	adds	r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4a08      	ldr	r2, [pc, #32]	; (8003210 <USB_FlushRxFifo+0x3c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e006      	b.n	8003206 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b10      	cmp	r3, #16
 8003202:	d0f0      	beq.n	80031e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	00030d40 	.word	0x00030d40

08003214 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	68f9      	ldr	r1, [r7, #12]
 8003230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0306 	and.w	r3, r3, #6
 800325c:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d102      	bne.n	800326a <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003264:	2300      	movs	r3, #0
 8003266:	75fb      	strb	r3, [r7, #23]
 8003268:	e00a      	b.n	8003280 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d002      	beq.n	8003276 <USB_GetDevSpeed+0x32>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b06      	cmp	r3, #6
 8003274:	d102      	bne.n	800327c <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003276:	2302      	movs	r3, #2
 8003278:	75fb      	strb	r3, [r7, #23]
 800327a:	e001      	b.n	8003280 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800327c:	230f      	movs	r3, #15
 800327e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003280:	7dfb      	ldrb	r3, [r7, #23]
}
 8003282:	4618      	mov	r0, r3
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	785b      	ldrb	r3, [r3, #1]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d13a      	bne.n	800331e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ae:	69da      	ldr	r2, [r3, #28]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	2101      	movs	r1, #1
 80032ba:	fa01 f303 	lsl.w	r3, r1, r3
 80032be:	b29b      	uxth	r3, r3
 80032c0:	68f9      	ldr	r1, [r7, #12]
 80032c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d155      	bne.n	800338c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	78db      	ldrb	r3, [r3, #3]
 80032fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	059b      	lsls	r3, r3, #22
 8003302:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003304:	4313      	orrs	r3, r2
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	0151      	lsls	r1, r2, #5
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	440a      	add	r2, r1
 800330e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	e036      	b.n	800338c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003324:	69da      	ldr	r2, [r3, #28]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	2101      	movs	r1, #1
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	68f9      	ldr	r1, [r7, #12]
 8003338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800333c:	4313      	orrs	r3, r2
 800333e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d11a      	bne.n	800338c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	78db      	ldrb	r3, [r3, #3]
 8003370:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003372:	430b      	orrs	r3, r1
 8003374:	4313      	orrs	r3, r2
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	0151      	lsls	r1, r2, #5
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	440a      	add	r2, r1
 800337e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800338a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	785b      	ldrb	r3, [r3, #1]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d161      	bne.n	8003478 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033ca:	d11f      	bne.n	800340c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	0151      	lsls	r1, r2, #5
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	440a      	add	r2, r1
 80033e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	0151      	lsls	r1, r2, #5
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	440a      	add	r2, r1
 8003402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003406:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800340a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	2101      	movs	r1, #1
 800341e:	fa01 f303 	lsl.w	r3, r1, r3
 8003422:	b29b      	uxth	r3, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	68f9      	ldr	r1, [r7, #12]
 8003428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800342c:	4013      	ands	r3, r2
 800342e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	2101      	movs	r1, #1
 8003442:	fa01 f303 	lsl.w	r3, r1, r3
 8003446:	b29b      	uxth	r3, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	68f9      	ldr	r1, [r7, #12]
 800344c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003450:	4013      	ands	r3, r2
 8003452:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	0159      	lsls	r1, r3, #5
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	440b      	add	r3, r1
 800346a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800346e:	4619      	mov	r1, r3
 8003470:	4b35      	ldr	r3, [pc, #212]	; (8003548 <USB_DeactivateEndpoint+0x1b0>)
 8003472:	4013      	ands	r3, r2
 8003474:	600b      	str	r3, [r1, #0]
 8003476:	e060      	b.n	800353a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4413      	add	r3, r2
 8003480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800348a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800348e:	d11f      	bne.n	80034d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4413      	add	r3, r2
 8003498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	0151      	lsls	r1, r2, #5
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	440a      	add	r2, r1
 80034a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	0151      	lsls	r1, r2, #5
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	440a      	add	r2, r1
 80034c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	2101      	movs	r1, #1
 80034e2:	fa01 f303 	lsl.w	r3, r1, r3
 80034e6:	041b      	lsls	r3, r3, #16
 80034e8:	43db      	mvns	r3, r3
 80034ea:	68f9      	ldr	r1, [r7, #12]
 80034ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034f0:	4013      	ands	r3, r2
 80034f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	2101      	movs	r1, #1
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	041b      	lsls	r3, r3, #16
 800350c:	43db      	mvns	r3, r3
 800350e:	68f9      	ldr	r1, [r7, #12]
 8003510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003514:	4013      	ands	r3, r2
 8003516:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	0159      	lsls	r1, r3, #5
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	440b      	add	r3, r1
 800352e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003532:	4619      	mov	r1, r3
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <USB_DeactivateEndpoint+0x1b4>)
 8003536:	4013      	ands	r3, r2
 8003538:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	bc80      	pop	{r7}
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	ec337800 	.word	0xec337800
 800354c:	eff37800 	.word	0xeff37800

08003550 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	4613      	mov	r3, r2
 800355c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	785b      	ldrb	r3, [r3, #1]
 800356c:	2b01      	cmp	r3, #1
 800356e:	f040 815c 	bne.w	800382a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d132      	bne.n	80035e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	0151      	lsls	r1, r2, #5
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	440a      	add	r2, r1
 8003590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003594:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003598:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800359c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	0151      	lsls	r1, r2, #5
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	440a      	add	r2, r1
 80035b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	0151      	lsls	r1, r2, #5
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	440a      	add	r2, r1
 80035d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035d8:	0cdb      	lsrs	r3, r3, #19
 80035da:	04db      	lsls	r3, r3, #19
 80035dc:	6113      	str	r3, [r2, #16]
 80035de:	e074      	b.n	80036ca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	0151      	lsls	r1, r2, #5
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	440a      	add	r2, r1
 80035f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035fa:	0cdb      	lsrs	r3, r3, #19
 80035fc:	04db      	lsls	r3, r3, #19
 80035fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	0151      	lsls	r1, r2, #5
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	440a      	add	r2, r1
 8003616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800361a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800361e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003622:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003630:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	6959      	ldr	r1, [r3, #20]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	440b      	add	r3, r1
 800363c:	1e59      	subs	r1, r3, #1
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	fbb1 f3f3 	udiv	r3, r1, r3
 8003646:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003648:	4b9d      	ldr	r3, [pc, #628]	; (80038c0 <USB_EPStartXfer+0x370>)
 800364a:	400b      	ands	r3, r1
 800364c:	69b9      	ldr	r1, [r7, #24]
 800364e:	0148      	lsls	r0, r1, #5
 8003650:	69f9      	ldr	r1, [r7, #28]
 8003652:	4401      	add	r1, r0
 8003654:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003658:	4313      	orrs	r3, r2
 800365a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003672:	69b9      	ldr	r1, [r7, #24]
 8003674:	0148      	lsls	r0, r1, #5
 8003676:	69f9      	ldr	r1, [r7, #28]
 8003678:	4401      	add	r1, r0
 800367a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800367e:	4313      	orrs	r3, r2
 8003680:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	78db      	ldrb	r3, [r3, #3]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d11f      	bne.n	80036ca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	0151      	lsls	r1, r2, #5
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	440a      	add	r2, r1
 80036a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80036a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	0151      	lsls	r1, r2, #5
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	440a      	add	r2, r1
 80036c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d14b      	bne.n	8003768 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d009      	beq.n	80036ec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e4:	461a      	mov	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	78db      	ldrb	r3, [r3, #3]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d128      	bne.n	8003746 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d110      	bne.n	8003726 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	0151      	lsls	r1, r2, #5
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	440a      	add	r2, r1
 800371a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800371e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	e00f      	b.n	8003746 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	4413      	add	r3, r2
 800372e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	0151      	lsls	r1, r2, #5
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	440a      	add	r2, r1
 800373c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003744:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	440a      	add	r2, r1
 800375c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003760:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e12f      	b.n	80039c8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	0151      	lsls	r1, r2, #5
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	440a      	add	r2, r1
 800377e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003782:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003786:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	78db      	ldrb	r3, [r3, #3]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d015      	beq.n	80037bc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8117 	beq.w	80039c8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	2101      	movs	r1, #1
 80037ac:	fa01 f303 	lsl.w	r3, r1, r3
 80037b0:	69f9      	ldr	r1, [r7, #28]
 80037b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037b6:	4313      	orrs	r3, r2
 80037b8:	634b      	str	r3, [r1, #52]	; 0x34
 80037ba:	e105      	b.n	80039c8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d110      	bne.n	80037ee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	0151      	lsls	r1, r2, #5
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	440a      	add	r2, r1
 80037e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	e00f      	b.n	800380e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	0151      	lsls	r1, r2, #5
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	440a      	add	r2, r1
 8003804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	68d9      	ldr	r1, [r3, #12]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	781a      	ldrb	r2, [r3, #0]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	b298      	uxth	r0, r3
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	4603      	mov	r3, r0
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 fa2a 	bl	8003c7c <USB_WritePacket>
 8003828:	e0ce      	b.n	80039c8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	0151      	lsls	r1, r2, #5
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	440a      	add	r2, r1
 8003840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003844:	0cdb      	lsrs	r3, r3, #19
 8003846:	04db      	lsls	r3, r3, #19
 8003848:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	0151      	lsls	r1, r2, #5
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	440a      	add	r2, r1
 8003860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003864:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003868:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800386c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d126      	bne.n	80038c4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388c:	69b9      	ldr	r1, [r7, #24]
 800388e:	0148      	lsls	r0, r1, #5
 8003890:	69f9      	ldr	r1, [r7, #28]
 8003892:	4401      	add	r1, r0
 8003894:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003898:	4313      	orrs	r3, r2
 800389a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	0151      	lsls	r1, r2, #5
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	440a      	add	r2, r1
 80038b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038ba:	6113      	str	r3, [r2, #16]
 80038bc:	e036      	b.n	800392c <USB_EPStartXfer+0x3dc>
 80038be:	bf00      	nop
 80038c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	695a      	ldr	r2, [r3, #20]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4413      	add	r3, r2
 80038ce:	1e5a      	subs	r2, r3, #1
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	8afb      	ldrh	r3, [r7, #22]
 80038ea:	04d9      	lsls	r1, r3, #19
 80038ec:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <USB_EPStartXfer+0x484>)
 80038ee:	400b      	ands	r3, r1
 80038f0:	69b9      	ldr	r1, [r7, #24]
 80038f2:	0148      	lsls	r0, r1, #5
 80038f4:	69f9      	ldr	r1, [r7, #28]
 80038f6:	4401      	add	r1, r0
 80038f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038fc:	4313      	orrs	r3, r2
 80038fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	8af9      	ldrh	r1, [r7, #22]
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800391c:	69b9      	ldr	r1, [r7, #24]
 800391e:	0148      	lsls	r0, r1, #5
 8003920:	69f9      	ldr	r1, [r7, #28]
 8003922:	4401      	add	r1, r0
 8003924:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003928:	4313      	orrs	r3, r2
 800392a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d10d      	bne.n	800394e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	68d9      	ldr	r1, [r3, #12]
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394a:	460a      	mov	r2, r1
 800394c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	78db      	ldrb	r3, [r3, #3]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d128      	bne.n	80039a8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003962:	2b00      	cmp	r3, #0
 8003964:	d110      	bne.n	8003988 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	0151      	lsls	r1, r2, #5
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	440a      	add	r2, r1
 800397c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003980:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e00f      	b.n	80039a8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	0151      	lsls	r1, r2, #5
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	440a      	add	r2, r1
 800399e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	0151      	lsls	r1, r2, #5
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	440a      	add	r2, r1
 80039be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3720      	adds	r7, #32
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	1ff80000 	.word	0x1ff80000

080039d8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	4613      	mov	r3, r2
 80039e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	785b      	ldrb	r3, [r3, #1]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	f040 80cd 	bne.w	8003b94 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d132      	bne.n	8003a68 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	0151      	lsls	r1, r2, #5
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	440a      	add	r2, r1
 8003a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	0151      	lsls	r1, r2, #5
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	440a      	add	r2, r1
 8003a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	0151      	lsls	r1, r2, #5
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	440a      	add	r2, r1
 8003a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a60:	0cdb      	lsrs	r3, r3, #19
 8003a62:	04db      	lsls	r3, r3, #19
 8003a64:	6113      	str	r3, [r2, #16]
 8003a66:	e04e      	b.n	8003b06 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	0151      	lsls	r1, r2, #5
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	440a      	add	r2, r1
 8003a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a82:	0cdb      	lsrs	r3, r3, #19
 8003a84:	04db      	lsls	r3, r3, #19
 8003a86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	0151      	lsls	r1, r2, #5
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	440a      	add	r2, r1
 8003a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aa2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003aa6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003aaa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	695a      	ldr	r2, [r3, #20]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d903      	bls.n	8003ac0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	0151      	lsls	r1, r2, #5
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	440a      	add	r2, r1
 8003ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ada:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ade:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af6:	6939      	ldr	r1, [r7, #16]
 8003af8:	0148      	lsls	r0, r1, #5
 8003afa:	6979      	ldr	r1, [r7, #20]
 8003afc:	4401      	add	r1, r0
 8003afe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b02:	4313      	orrs	r3, r2
 8003b04:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d11e      	bne.n	8003b4a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d009      	beq.n	8003b28 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b20:	461a      	mov	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	0151      	lsls	r1, r2, #5
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	440a      	add	r2, r1
 8003b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	e092      	b.n	8003c70 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	0151      	lsls	r1, r2, #5
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	440a      	add	r2, r1
 8003b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b68:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d07e      	beq.n	8003c70 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	2101      	movs	r1, #1
 8003b84:	fa01 f303 	lsl.w	r3, r1, r3
 8003b88:	6979      	ldr	r1, [r7, #20]
 8003b8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	634b      	str	r3, [r1, #52]	; 0x34
 8003b92:	e06d      	b.n	8003c70 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	0151      	lsls	r1, r2, #5
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	440a      	add	r2, r1
 8003baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bae:	0cdb      	lsrs	r3, r3, #19
 8003bb0:	04db      	lsls	r3, r3, #19
 8003bb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	0151      	lsls	r1, r2, #5
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	440a      	add	r2, r1
 8003bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bd6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	0151      	lsls	r1, r2, #5
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	440a      	add	r2, r1
 8003bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c1e:	6939      	ldr	r1, [r7, #16]
 8003c20:	0148      	lsls	r0, r1, #5
 8003c22:	6979      	ldr	r1, [r7, #20]
 8003c24:	4401      	add	r1, r0
 8003c26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d10d      	bne.n	8003c50 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d009      	beq.n	8003c50 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	68d9      	ldr	r1, [r3, #12]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4c:	460a      	mov	r2, r1
 8003c4e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	0151      	lsls	r1, r2, #5
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	440a      	add	r2, r1
 8003c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b089      	sub	sp, #36	; 0x24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	4611      	mov	r1, r2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	71fb      	strb	r3, [r7, #7]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003c9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d123      	bne.n	8003cea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ca2:	88bb      	ldrh	r3, [r7, #4]
 8003ca4:	3303      	adds	r3, #3
 8003ca6:	089b      	lsrs	r3, r3, #2
 8003ca8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003caa:	2300      	movs	r3, #0
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	e018      	b.n	8003ce2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	031a      	lsls	r2, r3, #12
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d3e2      	bcc.n	8003cb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3724      	adds	r7, #36	; 0x24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b08b      	sub	sp, #44	; 0x2c
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	4613      	mov	r3, r2
 8003d02:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003d0c:	88fb      	ldrh	r3, [r7, #6]
 8003d0e:	089b      	lsrs	r3, r3, #2
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	623b      	str	r3, [r7, #32]
 8003d20:	e014      	b.n	8003d4c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	3301      	adds	r3, #1
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	3301      	adds	r3, #1
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	3301      	adds	r3, #1
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	623b      	str	r3, [r7, #32]
 8003d4c:	6a3a      	ldr	r2, [r7, #32]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d3e6      	bcc.n	8003d22 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003d54:	8bfb      	ldrh	r3, [r7, #30]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01e      	beq.n	8003d98 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d64:	461a      	mov	r2, r3
 8003d66:	f107 0310 	add.w	r3, r7, #16
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	701a      	strb	r2, [r3, #0]
      i++;
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	3301      	adds	r3, #1
 8003d84:	623b      	str	r3, [r7, #32]
      pDest++;
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	3301      	adds	r3, #1
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003d8c:	8bfb      	ldrh	r3, [r7, #30]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003d92:	8bfb      	ldrh	r3, [r7, #30]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1ea      	bne.n	8003d6e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	372c      	adds	r7, #44	; 0x2c
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	785b      	ldrb	r3, [r3, #1]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d12c      	bne.n	8003e1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	db12      	blt.n	8003df8 <USB_EPSetStall+0x54>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00f      	beq.n	8003df8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	0151      	lsls	r1, r2, #5
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	440a      	add	r2, r1
 8003dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003df6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	0151      	lsls	r1, r2, #5
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	e02b      	b.n	8003e72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	db12      	blt.n	8003e52 <USB_EPSetStall+0xae>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00f      	beq.n	8003e52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	0151      	lsls	r1, r2, #5
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	440a      	add	r2, r1
 8003e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	0151      	lsls	r1, r2, #5
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	440a      	add	r2, r1
 8003e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr

08003e7e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b085      	sub	sp, #20
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	785b      	ldrb	r3, [r3, #1]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d128      	bne.n	8003eec <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	0151      	lsls	r1, r2, #5
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	440a      	add	r2, r1
 8003eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	78db      	ldrb	r3, [r3, #3]
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d003      	beq.n	8003eca <USB_EPClearStall+0x4c>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	78db      	ldrb	r3, [r3, #3]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d138      	bne.n	8003f3c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	e027      	b.n	8003f3c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	0151      	lsls	r1, r2, #5
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	440a      	add	r2, r1
 8003f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	78db      	ldrb	r3, [r3, #3]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d003      	beq.n	8003f1c <USB_EPClearStall+0x9e>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	78db      	ldrb	r3, [r3, #3]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d10f      	bne.n	8003f3c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	0151      	lsls	r1, r2, #5
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	440a      	add	r2, r1
 8003f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003f7c:	68f9      	ldr	r1, [r7, #12]
 8003f7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr

08003f92 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b085      	sub	sp, #20
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003fac:	f023 0303 	bic.w	r3, r3, #3
 8003fb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fc0:	f023 0302 	bic.w	r3, r3, #2
 8003fc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr

08003fd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b085      	sub	sp, #20
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003fec:	f023 0303 	bic.w	r3, r3, #3
 8003ff0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004000:	f043 0302 	orr.w	r3, r3, #2
 8004004:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr

08004012 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004012:	b480      	push	{r7}
 8004014:	b085      	sub	sp, #20
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4013      	ands	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800402a:	68fb      	ldr	r3, [r7, #12]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr

08004036 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	4013      	ands	r3, r2
 8004058:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	0c1b      	lsrs	r3, r3, #16
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	4013      	ands	r3, r2
 800408a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	b29b      	uxth	r3, r3
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	4770      	bx	lr

0800409a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800409a:	b480      	push	{r7}
 800409c:	b085      	sub	sp, #20
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	460b      	mov	r3, r1
 80040a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	4013      	ands	r3, r2
 80040c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80040c8:	68bb      	ldr	r3, [r7, #8]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
 8004104:	01db      	lsls	r3, r3, #7
 8004106:	b2db      	uxtb	r3, r3
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	4413      	add	r3, r2
 8004116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4013      	ands	r3, r2
 8004120:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004122:	68bb      	ldr	r3, [r7, #8]
}
 8004124:	4618      	mov	r0, r3
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr

0800412e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f003 0301 	and.w	r3, r3, #1
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004162:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004166:	f023 0307 	bic.w	r3, r3, #7
 800416a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800417a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	460b      	mov	r3, r1
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	333c      	adds	r3, #60	; 0x3c
 80041a2:	3304      	adds	r3, #4
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4a25      	ldr	r2, [pc, #148]	; (8004240 <USB_EP0_OutStart+0xb4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d90a      	bls.n	80041c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041c0:	d101      	bne.n	80041c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e037      	b.n	8004236 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041cc:	461a      	mov	r2, r3
 80041ce:	2300      	movs	r3, #0
 80041d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041f4:	f043 0318 	orr.w	r3, r3, #24
 80041f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004208:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800420c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800420e:	7afb      	ldrb	r3, [r7, #11]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d10f      	bne.n	8004234 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	461a      	mov	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800422e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004232:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr
 8004240:	4f54300a 	.word	0x4f54300a

08004244 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3301      	adds	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4a12      	ldr	r2, [pc, #72]	; (80042a4 <USB_CoreReset+0x60>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d901      	bls.n	8004262 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e01b      	b.n	800429a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	daf2      	bge.n	8004250 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f043 0201 	orr.w	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3301      	adds	r3, #1
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4a08      	ldr	r2, [pc, #32]	; (80042a4 <USB_CoreReset+0x60>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d901      	bls.n	800428c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e006      	b.n	800429a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b01      	cmp	r3, #1
 8004296:	d0f0      	beq.n	800427a <USB_CoreReset+0x36>

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr
 80042a4:	00030d40 	.word	0x00030d40

080042a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	7c1b      	ldrb	r3, [r3, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d115      	bne.n	80042ec <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80042c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042c4:	2202      	movs	r2, #2
 80042c6:	2181      	movs	r1, #129	; 0x81
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f001 ff42 	bl	8006152 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80042d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042d8:	2202      	movs	r2, #2
 80042da:	2101      	movs	r1, #1
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f001 ff38 	bl	8006152 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80042ea:	e012      	b.n	8004312 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80042ec:	2340      	movs	r3, #64	; 0x40
 80042ee:	2202      	movs	r2, #2
 80042f0:	2181      	movs	r1, #129	; 0x81
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f001 ff2d 	bl	8006152 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80042fe:	2340      	movs	r3, #64	; 0x40
 8004300:	2202      	movs	r2, #2
 8004302:	2101      	movs	r1, #1
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f001 ff24 	bl	8006152 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004312:	2308      	movs	r3, #8
 8004314:	2203      	movs	r2, #3
 8004316:	2182      	movs	r1, #130	; 0x82
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f001 ff1a 	bl	8006152 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004324:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004328:	f002 f890 	bl	800644c <malloc>
 800432c:	4603      	mov	r3, r0
 800432e:	461a      	mov	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
 8004344:	e026      	b.n	8004394 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800434c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2200      	movs	r2, #0
 800435c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2200      	movs	r2, #0
 8004364:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	7c1b      	ldrb	r3, [r3, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800437a:	2101      	movs	r1, #1
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f001 ffd8 	bl	8006332 <USBD_LL_PrepareReceive>
 8004382:	e007      	b.n	8004394 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800438a:	2340      	movs	r3, #64	; 0x40
 800438c:	2101      	movs	r1, #1
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f001 ffcf 	bl	8006332 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004394:	7bfb      	ldrb	r3, [r7, #15]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	460b      	mov	r3, r1
 80043a8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80043ae:	2181      	movs	r1, #129	; 0x81
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f001 fef4 	bl	800619e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80043bc:	2101      	movs	r1, #1
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f001 feed 	bl	800619e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80043cc:	2182      	movs	r1, #130	; 0x82
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f001 fee5 	bl	800619e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00e      	beq.n	8004402 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80043f4:	4618      	mov	r0, r3
 80043f6:	f002 f831 	bl	800645c <free>
    pdev->pClassData = NULL;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004402:	7bfb      	ldrb	r3, [r7, #15]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800441c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004432:	2b00      	cmp	r3, #0
 8004434:	d039      	beq.n	80044aa <USBD_CDC_Setup+0x9e>
 8004436:	2b20      	cmp	r3, #32
 8004438:	d17f      	bne.n	800453a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	88db      	ldrh	r3, [r3, #6]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d029      	beq.n	8004496 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	b25b      	sxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	da11      	bge.n	8004470 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004458:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	88d2      	ldrh	r2, [r2, #6]
 800445e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004460:	6939      	ldr	r1, [r7, #16]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	88db      	ldrh	r3, [r3, #6]
 8004466:	461a      	mov	r2, r3
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f001 fa42 	bl	80058f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800446e:	e06b      	b.n	8004548 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	785a      	ldrb	r2, [r3, #1]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	88db      	ldrh	r3, [r3, #6]
 800447e:	b2da      	uxtb	r2, r3
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004486:	6939      	ldr	r1, [r7, #16]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	88db      	ldrh	r3, [r3, #6]
 800448c:	461a      	mov	r2, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f001 fa5d 	bl	800594e <USBD_CtlPrepareRx>
      break;
 8004494:	e058      	b.n	8004548 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	7850      	ldrb	r0, [r2, #1]
 80044a2:	2200      	movs	r2, #0
 80044a4:	6839      	ldr	r1, [r7, #0]
 80044a6:	4798      	blx	r3
      break;
 80044a8:	e04e      	b.n	8004548 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	785b      	ldrb	r3, [r3, #1]
 80044ae:	2b0b      	cmp	r3, #11
 80044b0:	d02e      	beq.n	8004510 <USBD_CDC_Setup+0x104>
 80044b2:	2b0b      	cmp	r3, #11
 80044b4:	dc38      	bgt.n	8004528 <USBD_CDC_Setup+0x11c>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <USBD_CDC_Setup+0xb4>
 80044ba:	2b0a      	cmp	r3, #10
 80044bc:	d014      	beq.n	80044e8 <USBD_CDC_Setup+0xdc>
 80044be:	e033      	b.n	8004528 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d107      	bne.n	80044da <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80044ca:	f107 030c 	add.w	r3, r7, #12
 80044ce:	2202      	movs	r2, #2
 80044d0:	4619      	mov	r1, r3
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f001 fa0d 	bl	80058f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80044d8:	e02e      	b.n	8004538 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80044da:	6839      	ldr	r1, [r7, #0]
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f001 f99e 	bl	800581e <USBD_CtlError>
            ret = USBD_FAIL;
 80044e2:	2302      	movs	r3, #2
 80044e4:	75fb      	strb	r3, [r7, #23]
          break;
 80044e6:	e027      	b.n	8004538 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d107      	bne.n	8004502 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80044f2:	f107 030f 	add.w	r3, r7, #15
 80044f6:	2201      	movs	r2, #1
 80044f8:	4619      	mov	r1, r3
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f001 f9f9 	bl	80058f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004500:	e01a      	b.n	8004538 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8004502:	6839      	ldr	r1, [r7, #0]
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f001 f98a 	bl	800581e <USBD_CtlError>
            ret = USBD_FAIL;
 800450a:	2302      	movs	r3, #2
 800450c:	75fb      	strb	r3, [r7, #23]
          break;
 800450e:	e013      	b.n	8004538 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004516:	2b03      	cmp	r3, #3
 8004518:	d00d      	beq.n	8004536 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800451a:	6839      	ldr	r1, [r7, #0]
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f001 f97e 	bl	800581e <USBD_CtlError>
            ret = USBD_FAIL;
 8004522:	2302      	movs	r3, #2
 8004524:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004526:	e006      	b.n	8004536 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8004528:	6839      	ldr	r1, [r7, #0]
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f001 f977 	bl	800581e <USBD_CtlError>
          ret = USBD_FAIL;
 8004530:	2302      	movs	r3, #2
 8004532:	75fb      	strb	r3, [r7, #23]
          break;
 8004534:	e000      	b.n	8004538 <USBD_CDC_Setup+0x12c>
          break;
 8004536:	bf00      	nop
      }
      break;
 8004538:	e006      	b.n	8004548 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800453a:	6839      	ldr	r1, [r7, #0]
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f001 f96e 	bl	800581e <USBD_CtlError>
      ret = USBD_FAIL;
 8004542:	2302      	movs	r3, #2
 8004544:	75fb      	strb	r3, [r7, #23]
      break;
 8004546:	bf00      	nop
  }

  return ret;
 8004548:	7dfb      	ldrb	r3, [r7, #23]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	460b      	mov	r3, r1
 800455c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004564:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800456c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d03a      	beq.n	80045ee <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004578:	78fa      	ldrb	r2, [r7, #3]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	331c      	adds	r3, #28
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d029      	beq.n	80045e2 <USBD_CDC_DataIn+0x90>
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	331c      	adds	r3, #28
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	78f9      	ldrb	r1, [r7, #3]
 80045a2:	68b8      	ldr	r0, [r7, #8]
 80045a4:	460b      	mov	r3, r1
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	1a5b      	subs	r3, r3, r1
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4403      	add	r3, r0
 80045ae:	3344      	adds	r3, #68	; 0x44
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	fbb2 f1f3 	udiv	r1, r2, r3
 80045b6:	fb01 f303 	mul.w	r3, r1, r3
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d110      	bne.n	80045e2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	331c      	adds	r3, #28
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80045d4:	78f9      	ldrb	r1, [r7, #3]
 80045d6:	2300      	movs	r3, #0
 80045d8:	2200      	movs	r2, #0
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f001 fe86 	bl	80062ec <USBD_LL_Transmit>
 80045e0:	e003      	b.n	80045ea <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	e000      	b.n	80045f0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80045ee:	2302      	movs	r3, #2
  }
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800460a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	4619      	mov	r1, r3
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f001 feb1 	bl	8006378 <USBD_LL_GetRxDataSize>
 8004616:	4602      	mov	r2, r0
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00d      	beq.n	8004644 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800463c:	4611      	mov	r1, r2
 800463e:	4798      	blx	r3

    return USBD_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	e000      	b.n	8004646 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004644:	2302      	movs	r3, #2
  }
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800465c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004664:	2b00      	cmp	r3, #0
 8004666:	d015      	beq.n	8004694 <USBD_CDC_EP0_RxReady+0x46>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800466e:	2bff      	cmp	r3, #255	; 0xff
 8004670:	d010      	beq.n	8004694 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004680:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004688:	b292      	uxth	r2, r2
 800468a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	22ff      	movs	r2, #255	; 0xff
 8004690:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2243      	movs	r2, #67	; 0x43
 80046ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80046ae:	4b03      	ldr	r3, [pc, #12]	; (80046bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	200000a4 	.word	0x200000a4

080046c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2243      	movs	r2, #67	; 0x43
 80046cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80046ce:	4b03      	ldr	r3, [pc, #12]	; (80046dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000060 	.word	0x20000060

080046e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2243      	movs	r2, #67	; 0x43
 80046ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80046ee:	4b03      	ldr	r3, [pc, #12]	; (80046fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc80      	pop	{r7}
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	200000e8 	.word	0x200000e8

08004700 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	220a      	movs	r2, #10
 800470c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800470e:	4b03      	ldr	r3, [pc, #12]	; (800471c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	2000001c 	.word	0x2000001c

08004720 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800472a:	2302      	movs	r3, #2
 800472c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004740:	7bfb      	ldrb	r3, [r7, #15]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr

0800474c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	4613      	mov	r3, r2
 8004758:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004760:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800476a:	88fa      	ldrh	r2, [r7, #6]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr

0800477e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800478e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01c      	beq.n	80047f8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d115      	bne.n	80047f4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	2181      	movs	r1, #129	; 0x81
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f001 fd7e 	bl	80062ec <USBD_LL_Transmit>

      return USBD_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	e002      	b.n	80047fa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80047f8:	2302      	movs	r3, #2
  }
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004810:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d017      	beq.n	800484c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	7c1b      	ldrb	r3, [r3, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d109      	bne.n	8004838 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800482a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800482e:	2101      	movs	r1, #1
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f001 fd7e 	bl	8006332 <USBD_LL_PrepareReceive>
 8004836:	e007      	b.n	8004848 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800483e:	2340      	movs	r3, #64	; 0x40
 8004840:	2101      	movs	r1, #1
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f001 fd75 	bl	8006332 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	e000      	b.n	800484e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800484c:	2302      	movs	r3, #2
  }
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	4613      	mov	r3, r2
 8004862:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800486a:	2302      	movs	r3, #2
 800486c:	e01a      	b.n	80048a4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	79fa      	ldrb	r2, [r7, #7]
 800489a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f001 fbf3 	bl	8006088 <USBD_LL_Init>

  return USBD_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d006      	beq.n	80048ce <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	73fb      	strb	r3, [r7, #15]
 80048cc:	e001      	b.n	80048d2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80048ce:	2302      	movs	r3, #2
 80048d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b082      	sub	sp, #8
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f001 fc18 	bl	800611c <USBD_LL_Start>

  return USBD_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr

0800490a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	460b      	mov	r3, r1
 8004914:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004916:	2302      	movs	r3, #2
 8004918:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00c      	beq.n	800493e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	78fa      	ldrb	r2, [r7, #3]
 800492e:	4611      	mov	r1, r2
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	4798      	blx	r3
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800493e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	78fa      	ldrb	r2, [r7, #3]
 800495e:	4611      	mov	r1, r2
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	4798      	blx	r3

  return USBD_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800497e:	6839      	ldr	r1, [r7, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f000 ff10 	bl	80057a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004994:	461a      	mov	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d016      	beq.n	80049d8 <USBD_LL_SetupStage+0x6a>
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d81c      	bhi.n	80049e8 <USBD_LL_SetupStage+0x7a>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <USBD_LL_SetupStage+0x4a>
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d008      	beq.n	80049c8 <USBD_LL_SetupStage+0x5a>
 80049b6:	e017      	b.n	80049e8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80049be:	4619      	mov	r1, r3
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 fa03 	bl	8004dcc <USBD_StdDevReq>
      break;
 80049c6:	e01a      	b.n	80049fe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80049ce:	4619      	mov	r1, r3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fa65 	bl	8004ea0 <USBD_StdItfReq>
      break;
 80049d6:	e012      	b.n	80049fe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80049de:	4619      	mov	r1, r3
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 faa5 	bl	8004f30 <USBD_StdEPReq>
      break;
 80049e6:	e00a      	b.n	80049fe <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f001 fbf0 	bl	80061dc <USBD_LL_StallEP>
      break;
 80049fc:	bf00      	nop
  }

  return USBD_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	460b      	mov	r3, r1
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004a16:	7afb      	ldrb	r3, [r7, #11]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d14b      	bne.n	8004ab4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004a22:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d134      	bne.n	8004a98 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d919      	bls.n	8004a6e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	1ad2      	subs	r2, r2, r3
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d203      	bcs.n	8004a5c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	e002      	b.n	8004a62 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 ff8f 	bl	800598a <USBD_CtlContinueRx>
 8004a6c:	e038      	b.n	8004ae0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d105      	bne.n	8004a90 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 ff8c 	bl	80059ae <USBD_CtlSendStatus>
 8004a96:	e023      	b.n	8004ae0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d11e      	bne.n	8004ae0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004aaa:	2100      	movs	r1, #0
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f001 fb95 	bl	80061dc <USBD_LL_StallEP>
 8004ab2:	e015      	b.n	8004ae0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00d      	beq.n	8004adc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d108      	bne.n	8004adc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	7afa      	ldrb	r2, [r7, #11]
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	4798      	blx	r3
 8004ada:	e001      	b.n	8004ae0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004adc:	2302      	movs	r3, #2
 8004ade:	e000      	b.n	8004ae2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	460b      	mov	r3, r1
 8004af4:	607a      	str	r2, [r7, #4]
 8004af6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004af8:	7afb      	ldrb	r3, [r7, #11]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d17f      	bne.n	8004bfe <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3314      	adds	r3, #20
 8004b02:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d15c      	bne.n	8004bc8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d915      	bls.n	8004b46 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	1ad2      	subs	r2, r2, r3
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fef9 	bl	800592a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b38:	2300      	movs	r3, #0
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f001 fbf7 	bl	8006332 <USBD_LL_PrepareReceive>
 8004b44:	e04e      	b.n	8004be4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	6912      	ldr	r2, [r2, #16]
 8004b4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b52:	fb01 f202 	mul.w	r2, r1, r2
 8004b56:	1a9b      	subs	r3, r3, r2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d11c      	bne.n	8004b96 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d316      	bcc.n	8004b96 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d20f      	bcs.n	8004b96 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004b76:	2200      	movs	r2, #0
 8004b78:	2100      	movs	r1, #0
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fed5 	bl	800592a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b88:	2300      	movs	r3, #0
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f001 fbcf 	bl	8006332 <USBD_LL_PrepareReceive>
 8004b94:	e026      	b.n	8004be4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004ba8:	2b03      	cmp	r3, #3
 8004baa:	d105      	bne.n	8004bb8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004bb8:	2180      	movs	r1, #128	; 0x80
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f001 fb0e 	bl	80061dc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 ff07 	bl	80059d4 <USBD_CtlReceiveStatus>
 8004bc6:	e00d      	b.n	8004be4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d004      	beq.n	8004bdc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d103      	bne.n	8004be4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004bdc:	2180      	movs	r1, #128	; 0x80
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f001 fafc 	bl	80061dc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d11d      	bne.n	8004c2a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f7ff fe81 	bl	80048f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004bfc:	e015      	b.n	8004c2a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00d      	beq.n	8004c26 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d108      	bne.n	8004c26 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	7afa      	ldrb	r2, [r7, #11]
 8004c1e:	4611      	mov	r1, r2
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	4798      	blx	r3
 8004c24:	e001      	b.n	8004c2a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004c26:	2302      	movs	r3, #2
 8004c28:	e000      	b.n	8004c2c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c3c:	2340      	movs	r3, #64	; 0x40
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2100      	movs	r1, #0
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f001 fa85 	bl	8006152 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2240      	movs	r2, #64	; 0x40
 8004c54:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c58:	2340      	movs	r3, #64	; 0x40
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2180      	movs	r1, #128	; 0x80
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f001 fa77 	bl	8006152 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2240      	movs	r2, #64	; 0x40
 8004c6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d009      	beq.n	8004cac <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6852      	ldr	r2, [r2, #4]
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	4798      	blx	r3
  }

  return USBD_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	78fa      	ldrb	r2, [r7, #3]
 8004cc6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2204      	movs	r2, #4
 8004cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr

08004cfc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d105      	bne.n	8004d1a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bc80      	pop	{r7}
 8004d24:	4770      	bx	lr

08004d26 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d10b      	bne.n	8004d50 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	460b      	mov	r3, r1
 8004d64:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bc80      	pop	{r7}
 8004d70:	4770      	bx	lr

08004d72 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr

08004d8a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr

08004d9e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6852      	ldr	r2, [r2, #4]
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	4798      	blx	r3

  return USBD_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004de2:	2b40      	cmp	r3, #64	; 0x40
 8004de4:	d005      	beq.n	8004df2 <USBD_StdDevReq+0x26>
 8004de6:	2b40      	cmp	r3, #64	; 0x40
 8004de8:	d84f      	bhi.n	8004e8a <USBD_StdDevReq+0xbe>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d009      	beq.n	8004e02 <USBD_StdDevReq+0x36>
 8004dee:	2b20      	cmp	r3, #32
 8004df0:	d14b      	bne.n	8004e8a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	6839      	ldr	r1, [r7, #0]
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	4798      	blx	r3
      break;
 8004e00:	e048      	b.n	8004e94 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	785b      	ldrb	r3, [r3, #1]
 8004e06:	2b09      	cmp	r3, #9
 8004e08:	d839      	bhi.n	8004e7e <USBD_StdDevReq+0xb2>
 8004e0a:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <USBD_StdDevReq+0x44>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e61 	.word	0x08004e61
 8004e14:	08004e75 	.word	0x08004e75
 8004e18:	08004e7f 	.word	0x08004e7f
 8004e1c:	08004e6b 	.word	0x08004e6b
 8004e20:	08004e7f 	.word	0x08004e7f
 8004e24:	08004e43 	.word	0x08004e43
 8004e28:	08004e39 	.word	0x08004e39
 8004e2c:	08004e7f 	.word	0x08004e7f
 8004e30:	08004e57 	.word	0x08004e57
 8004e34:	08004e4d 	.word	0x08004e4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004e38:	6839      	ldr	r1, [r7, #0]
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f9dc 	bl	80051f8 <USBD_GetDescriptor>
          break;
 8004e40:	e022      	b.n	8004e88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fb3f 	bl	80054c8 <USBD_SetAddress>
          break;
 8004e4a:	e01d      	b.n	8004e88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004e4c:	6839      	ldr	r1, [r7, #0]
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fb7e 	bl	8005550 <USBD_SetConfig>
          break;
 8004e54:	e018      	b.n	8004e88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004e56:	6839      	ldr	r1, [r7, #0]
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fc07 	bl	800566c <USBD_GetConfig>
          break;
 8004e5e:	e013      	b.n	8004e88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004e60:	6839      	ldr	r1, [r7, #0]
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fc37 	bl	80056d6 <USBD_GetStatus>
          break;
 8004e68:	e00e      	b.n	8004e88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fc65 	bl	800573c <USBD_SetFeature>
          break;
 8004e72:	e009      	b.n	8004e88 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004e74:	6839      	ldr	r1, [r7, #0]
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fc74 	bl	8005764 <USBD_ClrFeature>
          break;
 8004e7c:	e004      	b.n	8004e88 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004e7e:	6839      	ldr	r1, [r7, #0]
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fccc 	bl	800581e <USBD_CtlError>
          break;
 8004e86:	bf00      	nop
      }
      break;
 8004e88:	e004      	b.n	8004e94 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8004e8a:	6839      	ldr	r1, [r7, #0]
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fcc6 	bl	800581e <USBD_CtlError>
      break;
 8004e92:	bf00      	nop
  }

  return ret;
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop

08004ea0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004eb6:	2b40      	cmp	r3, #64	; 0x40
 8004eb8:	d005      	beq.n	8004ec6 <USBD_StdItfReq+0x26>
 8004eba:	2b40      	cmp	r3, #64	; 0x40
 8004ebc:	d82e      	bhi.n	8004f1c <USBD_StdItfReq+0x7c>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <USBD_StdItfReq+0x26>
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d12a      	bne.n	8004f1c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d81d      	bhi.n	8004f0e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	889b      	ldrh	r3, [r3, #4]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d813      	bhi.n	8004f04 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	6839      	ldr	r1, [r7, #0]
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	4798      	blx	r3
 8004eea:	4603      	mov	r3, r0
 8004eec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	88db      	ldrh	r3, [r3, #6]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d110      	bne.n	8004f18 <USBD_StdItfReq+0x78>
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10d      	bne.n	8004f18 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fd56 	bl	80059ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004f02:	e009      	b.n	8004f18 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8004f04:	6839      	ldr	r1, [r7, #0]
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fc89 	bl	800581e <USBD_CtlError>
          break;
 8004f0c:	e004      	b.n	8004f18 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8004f0e:	6839      	ldr	r1, [r7, #0]
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fc84 	bl	800581e <USBD_CtlError>
          break;
 8004f16:	e000      	b.n	8004f1a <USBD_StdItfReq+0x7a>
          break;
 8004f18:	bf00      	nop
      }
      break;
 8004f1a:	e004      	b.n	8004f26 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8004f1c:	6839      	ldr	r1, [r7, #0]
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fc7d 	bl	800581e <USBD_CtlError>
      break;
 8004f24:	bf00      	nop
  }

  return USBD_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	889b      	ldrh	r3, [r3, #4]
 8004f42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f4c:	2b40      	cmp	r3, #64	; 0x40
 8004f4e:	d007      	beq.n	8004f60 <USBD_StdEPReq+0x30>
 8004f50:	2b40      	cmp	r3, #64	; 0x40
 8004f52:	f200 8146 	bhi.w	80051e2 <USBD_StdEPReq+0x2b2>
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <USBD_StdEPReq+0x40>
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	f040 8141 	bne.w	80051e2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	6839      	ldr	r1, [r7, #0]
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	4798      	blx	r3
      break;
 8004f6e:	e13d      	b.n	80051ec <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	d10a      	bne.n	8004f92 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	6839      	ldr	r1, [r7, #0]
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	4798      	blx	r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	e12d      	b.n	80051ee <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	785b      	ldrb	r3, [r3, #1]
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d007      	beq.n	8004faa <USBD_StdEPReq+0x7a>
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	f300 811b 	bgt.w	80051d6 <USBD_StdEPReq+0x2a6>
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d072      	beq.n	800508a <USBD_StdEPReq+0x15a>
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d03a      	beq.n	800501e <USBD_StdEPReq+0xee>
 8004fa8:	e115      	b.n	80051d6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d002      	beq.n	8004fba <USBD_StdEPReq+0x8a>
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d015      	beq.n	8004fe4 <USBD_StdEPReq+0xb4>
 8004fb8:	e02b      	b.n	8005012 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004fba:	7bbb      	ldrb	r3, [r7, #14]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00c      	beq.n	8004fda <USBD_StdEPReq+0xaa>
 8004fc0:	7bbb      	ldrb	r3, [r7, #14]
 8004fc2:	2b80      	cmp	r3, #128	; 0x80
 8004fc4:	d009      	beq.n	8004fda <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004fc6:	7bbb      	ldrb	r3, [r7, #14]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f001 f906 	bl	80061dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004fd0:	2180      	movs	r1, #128	; 0x80
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f001 f902 	bl	80061dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004fd8:	e020      	b.n	800501c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8004fda:	6839      	ldr	r1, [r7, #0]
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 fc1e 	bl	800581e <USBD_CtlError>
              break;
 8004fe2:	e01b      	b.n	800501c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	885b      	ldrh	r3, [r3, #2]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10e      	bne.n	800500a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8004fec:	7bbb      	ldrb	r3, [r7, #14]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00b      	beq.n	800500a <USBD_StdEPReq+0xda>
 8004ff2:	7bbb      	ldrb	r3, [r7, #14]
 8004ff4:	2b80      	cmp	r3, #128	; 0x80
 8004ff6:	d008      	beq.n	800500a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	88db      	ldrh	r3, [r3, #6]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d104      	bne.n	800500a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005000:	7bbb      	ldrb	r3, [r7, #14]
 8005002:	4619      	mov	r1, r3
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f001 f8e9 	bl	80061dc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fccf 	bl	80059ae <USBD_CtlSendStatus>

              break;
 8005010:	e004      	b.n	800501c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005012:	6839      	ldr	r1, [r7, #0]
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fc02 	bl	800581e <USBD_CtlError>
              break;
 800501a:	bf00      	nop
          }
          break;
 800501c:	e0e0      	b.n	80051e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005024:	2b02      	cmp	r3, #2
 8005026:	d002      	beq.n	800502e <USBD_StdEPReq+0xfe>
 8005028:	2b03      	cmp	r3, #3
 800502a:	d015      	beq.n	8005058 <USBD_StdEPReq+0x128>
 800502c:	e026      	b.n	800507c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800502e:	7bbb      	ldrb	r3, [r7, #14]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00c      	beq.n	800504e <USBD_StdEPReq+0x11e>
 8005034:	7bbb      	ldrb	r3, [r7, #14]
 8005036:	2b80      	cmp	r3, #128	; 0x80
 8005038:	d009      	beq.n	800504e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800503a:	7bbb      	ldrb	r3, [r7, #14]
 800503c:	4619      	mov	r1, r3
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f001 f8cc 	bl	80061dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005044:	2180      	movs	r1, #128	; 0x80
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f001 f8c8 	bl	80061dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800504c:	e01c      	b.n	8005088 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800504e:	6839      	ldr	r1, [r7, #0]
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fbe4 	bl	800581e <USBD_CtlError>
              break;
 8005056:	e017      	b.n	8005088 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	885b      	ldrh	r3, [r3, #2]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d112      	bne.n	8005086 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005060:	7bbb      	ldrb	r3, [r7, #14]
 8005062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005066:	2b00      	cmp	r3, #0
 8005068:	d004      	beq.n	8005074 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800506a:	7bbb      	ldrb	r3, [r7, #14]
 800506c:	4619      	mov	r1, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f001 f8d3 	bl	800621a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fc9a 	bl	80059ae <USBD_CtlSendStatus>
              }
              break;
 800507a:	e004      	b.n	8005086 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800507c:	6839      	ldr	r1, [r7, #0]
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fbcd 	bl	800581e <USBD_CtlError>
              break;
 8005084:	e000      	b.n	8005088 <USBD_StdEPReq+0x158>
              break;
 8005086:	bf00      	nop
          }
          break;
 8005088:	e0aa      	b.n	80051e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005090:	2b02      	cmp	r3, #2
 8005092:	d002      	beq.n	800509a <USBD_StdEPReq+0x16a>
 8005094:	2b03      	cmp	r3, #3
 8005096:	d032      	beq.n	80050fe <USBD_StdEPReq+0x1ce>
 8005098:	e097      	b.n	80051ca <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800509a:	7bbb      	ldrb	r3, [r7, #14]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d007      	beq.n	80050b0 <USBD_StdEPReq+0x180>
 80050a0:	7bbb      	ldrb	r3, [r7, #14]
 80050a2:	2b80      	cmp	r3, #128	; 0x80
 80050a4:	d004      	beq.n	80050b0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80050a6:	6839      	ldr	r1, [r7, #0]
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fbb8 	bl	800581e <USBD_CtlError>
                break;
 80050ae:	e091      	b.n	80051d4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80050b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	da0b      	bge.n	80050d0 <USBD_StdEPReq+0x1a0>
 80050b8:	7bbb      	ldrb	r3, [r7, #14]
 80050ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	3310      	adds	r3, #16
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	4413      	add	r3, r2
 80050cc:	3304      	adds	r3, #4
 80050ce:	e00b      	b.n	80050e8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80050d0:	7bbb      	ldrb	r3, [r7, #14]
 80050d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	4413      	add	r3, r2
 80050e6:	3304      	adds	r3, #4
 80050e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2202      	movs	r2, #2
 80050f4:	4619      	mov	r1, r3
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fbfb 	bl	80058f2 <USBD_CtlSendData>
              break;
 80050fc:	e06a      	b.n	80051d4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80050fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005102:	2b00      	cmp	r3, #0
 8005104:	da11      	bge.n	800512a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005106:	7bbb      	ldrb	r3, [r7, #14]
 8005108:	f003 020f 	and.w	r2, r3, #15
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	440b      	add	r3, r1
 8005118:	3318      	adds	r3, #24
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d117      	bne.n	8005150 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005120:	6839      	ldr	r1, [r7, #0]
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fb7b 	bl	800581e <USBD_CtlError>
                  break;
 8005128:	e054      	b.n	80051d4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800512a:	7bbb      	ldrb	r3, [r7, #14]
 800512c:	f003 020f 	and.w	r2, r3, #15
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	440b      	add	r3, r1
 800513c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d104      	bne.n	8005150 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005146:	6839      	ldr	r1, [r7, #0]
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fb68 	bl	800581e <USBD_CtlError>
                  break;
 800514e:	e041      	b.n	80051d4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005150:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005154:	2b00      	cmp	r3, #0
 8005156:	da0b      	bge.n	8005170 <USBD_StdEPReq+0x240>
 8005158:	7bbb      	ldrb	r3, [r7, #14]
 800515a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	3310      	adds	r3, #16
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	4413      	add	r3, r2
 800516c:	3304      	adds	r3, #4
 800516e:	e00b      	b.n	8005188 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005170:	7bbb      	ldrb	r3, [r7, #14]
 8005172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	4413      	add	r3, r2
 8005186:	3304      	adds	r3, #4
 8005188:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800518a:	7bbb      	ldrb	r3, [r7, #14]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <USBD_StdEPReq+0x266>
 8005190:	7bbb      	ldrb	r3, [r7, #14]
 8005192:	2b80      	cmp	r3, #128	; 0x80
 8005194:	d103      	bne.n	800519e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e00e      	b.n	80051bc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800519e:	7bbb      	ldrb	r3, [r7, #14]
 80051a0:	4619      	mov	r1, r3
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f001 f858 	bl	8006258 <USBD_LL_IsStallEP>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2201      	movs	r2, #1
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	e002      	b.n	80051bc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2202      	movs	r2, #2
 80051c0:	4619      	mov	r1, r3
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fb95 	bl	80058f2 <USBD_CtlSendData>
              break;
 80051c8:	e004      	b.n	80051d4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80051ca:	6839      	ldr	r1, [r7, #0]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fb26 	bl	800581e <USBD_CtlError>
              break;
 80051d2:	bf00      	nop
          }
          break;
 80051d4:	e004      	b.n	80051e0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80051d6:	6839      	ldr	r1, [r7, #0]
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fb20 	bl	800581e <USBD_CtlError>
          break;
 80051de:	bf00      	nop
      }
      break;
 80051e0:	e004      	b.n	80051ec <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80051e2:	6839      	ldr	r1, [r7, #0]
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fb1a 	bl	800581e <USBD_CtlError>
      break;
 80051ea:	bf00      	nop
  }

  return ret;
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005206:	2300      	movs	r3, #0
 8005208:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	885b      	ldrh	r3, [r3, #2]
 8005212:	0a1b      	lsrs	r3, r3, #8
 8005214:	b29b      	uxth	r3, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	2b06      	cmp	r3, #6
 800521a:	f200 8128 	bhi.w	800546e <USBD_GetDescriptor+0x276>
 800521e:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <USBD_GetDescriptor+0x2c>)
 8005220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005224:	08005241 	.word	0x08005241
 8005228:	08005259 	.word	0x08005259
 800522c:	08005299 	.word	0x08005299
 8005230:	0800546f 	.word	0x0800546f
 8005234:	0800546f 	.word	0x0800546f
 8005238:	0800540f 	.word	0x0800540f
 800523c:	0800543b 	.word	0x0800543b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	7c12      	ldrb	r2, [r2, #16]
 800524c:	f107 0108 	add.w	r1, r7, #8
 8005250:	4610      	mov	r0, r2
 8005252:	4798      	blx	r3
 8005254:	60f8      	str	r0, [r7, #12]
      break;
 8005256:	e112      	b.n	800547e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	7c1b      	ldrb	r3, [r3, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10d      	bne.n	800527c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005268:	f107 0208 	add.w	r2, r7, #8
 800526c:	4610      	mov	r0, r2
 800526e:	4798      	blx	r3
 8005270:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3301      	adds	r3, #1
 8005276:	2202      	movs	r2, #2
 8005278:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800527a:	e100      	b.n	800547e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	f107 0208 	add.w	r2, r7, #8
 8005288:	4610      	mov	r0, r2
 800528a:	4798      	blx	r3
 800528c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3301      	adds	r3, #1
 8005292:	2202      	movs	r2, #2
 8005294:	701a      	strb	r2, [r3, #0]
      break;
 8005296:	e0f2      	b.n	800547e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	885b      	ldrh	r3, [r3, #2]
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b05      	cmp	r3, #5
 80052a0:	f200 80ac 	bhi.w	80053fc <USBD_GetDescriptor+0x204>
 80052a4:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <USBD_GetDescriptor+0xb4>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052c5 	.word	0x080052c5
 80052b0:	080052f9 	.word	0x080052f9
 80052b4:	0800532d 	.word	0x0800532d
 80052b8:	08005361 	.word	0x08005361
 80052bc:	08005395 	.word	0x08005395
 80052c0:	080053c9 	.word	0x080053c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00b      	beq.n	80052e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	7c12      	ldrb	r2, [r2, #16]
 80052dc:	f107 0108 	add.w	r1, r7, #8
 80052e0:	4610      	mov	r0, r2
 80052e2:	4798      	blx	r3
 80052e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052e6:	e091      	b.n	800540c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052e8:	6839      	ldr	r1, [r7, #0]
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fa97 	bl	800581e <USBD_CtlError>
            err++;
 80052f0:	7afb      	ldrb	r3, [r7, #11]
 80052f2:	3301      	adds	r3, #1
 80052f4:	72fb      	strb	r3, [r7, #11]
          break;
 80052f6:	e089      	b.n	800540c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00b      	beq.n	800531c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	7c12      	ldrb	r2, [r2, #16]
 8005310:	f107 0108 	add.w	r1, r7, #8
 8005314:	4610      	mov	r0, r2
 8005316:	4798      	blx	r3
 8005318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800531a:	e077      	b.n	800540c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800531c:	6839      	ldr	r1, [r7, #0]
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fa7d 	bl	800581e <USBD_CtlError>
            err++;
 8005324:	7afb      	ldrb	r3, [r7, #11]
 8005326:	3301      	adds	r3, #1
 8005328:	72fb      	strb	r3, [r7, #11]
          break;
 800532a:	e06f      	b.n	800540c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00b      	beq.n	8005350 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	7c12      	ldrb	r2, [r2, #16]
 8005344:	f107 0108 	add.w	r1, r7, #8
 8005348:	4610      	mov	r0, r2
 800534a:	4798      	blx	r3
 800534c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800534e:	e05d      	b.n	800540c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fa63 	bl	800581e <USBD_CtlError>
            err++;
 8005358:	7afb      	ldrb	r3, [r7, #11]
 800535a:	3301      	adds	r3, #1
 800535c:	72fb      	strb	r3, [r7, #11]
          break;
 800535e:	e055      	b.n	800540c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00b      	beq.n	8005384 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	7c12      	ldrb	r2, [r2, #16]
 8005378:	f107 0108 	add.w	r1, r7, #8
 800537c:	4610      	mov	r0, r2
 800537e:	4798      	blx	r3
 8005380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005382:	e043      	b.n	800540c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005384:	6839      	ldr	r1, [r7, #0]
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fa49 	bl	800581e <USBD_CtlError>
            err++;
 800538c:	7afb      	ldrb	r3, [r7, #11]
 800538e:	3301      	adds	r3, #1
 8005390:	72fb      	strb	r3, [r7, #11]
          break;
 8005392:	e03b      	b.n	800540c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00b      	beq.n	80053b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	7c12      	ldrb	r2, [r2, #16]
 80053ac:	f107 0108 	add.w	r1, r7, #8
 80053b0:	4610      	mov	r0, r2
 80053b2:	4798      	blx	r3
 80053b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80053b6:	e029      	b.n	800540c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fa2f 	bl	800581e <USBD_CtlError>
            err++;
 80053c0:	7afb      	ldrb	r3, [r7, #11]
 80053c2:	3301      	adds	r3, #1
 80053c4:	72fb      	strb	r3, [r7, #11]
          break;
 80053c6:	e021      	b.n	800540c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00b      	beq.n	80053ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	7c12      	ldrb	r2, [r2, #16]
 80053e0:	f107 0108 	add.w	r1, r7, #8
 80053e4:	4610      	mov	r0, r2
 80053e6:	4798      	blx	r3
 80053e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80053ea:	e00f      	b.n	800540c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80053ec:	6839      	ldr	r1, [r7, #0]
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fa15 	bl	800581e <USBD_CtlError>
            err++;
 80053f4:	7afb      	ldrb	r3, [r7, #11]
 80053f6:	3301      	adds	r3, #1
 80053f8:	72fb      	strb	r3, [r7, #11]
          break;
 80053fa:	e007      	b.n	800540c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80053fc:	6839      	ldr	r1, [r7, #0]
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fa0d 	bl	800581e <USBD_CtlError>
          err++;
 8005404:	7afb      	ldrb	r3, [r7, #11]
 8005406:	3301      	adds	r3, #1
 8005408:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800540a:	e038      	b.n	800547e <USBD_GetDescriptor+0x286>
 800540c:	e037      	b.n	800547e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	7c1b      	ldrb	r3, [r3, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d109      	bne.n	800542a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800541c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541e:	f107 0208 	add.w	r2, r7, #8
 8005422:	4610      	mov	r0, r2
 8005424:	4798      	blx	r3
 8005426:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005428:	e029      	b.n	800547e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f9f6 	bl	800581e <USBD_CtlError>
        err++;
 8005432:	7afb      	ldrb	r3, [r7, #11]
 8005434:	3301      	adds	r3, #1
 8005436:	72fb      	strb	r3, [r7, #11]
      break;
 8005438:	e021      	b.n	800547e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	7c1b      	ldrb	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10d      	bne.n	800545e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	f107 0208 	add.w	r2, r7, #8
 800544e:	4610      	mov	r0, r2
 8005450:	4798      	blx	r3
 8005452:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3301      	adds	r3, #1
 8005458:	2207      	movs	r2, #7
 800545a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800545c:	e00f      	b.n	800547e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800545e:	6839      	ldr	r1, [r7, #0]
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f9dc 	bl	800581e <USBD_CtlError>
        err++;
 8005466:	7afb      	ldrb	r3, [r7, #11]
 8005468:	3301      	adds	r3, #1
 800546a:	72fb      	strb	r3, [r7, #11]
      break;
 800546c:	e007      	b.n	800547e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800546e:	6839      	ldr	r1, [r7, #0]
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f9d4 	bl	800581e <USBD_CtlError>
      err++;
 8005476:	7afb      	ldrb	r3, [r7, #11]
 8005478:	3301      	adds	r3, #1
 800547a:	72fb      	strb	r3, [r7, #11]
      break;
 800547c:	bf00      	nop
  }

  if (err != 0U)
 800547e:	7afb      	ldrb	r3, [r7, #11]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d11c      	bne.n	80054be <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005484:	893b      	ldrh	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d011      	beq.n	80054ae <USBD_GetDescriptor+0x2b6>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	88db      	ldrh	r3, [r3, #6]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00d      	beq.n	80054ae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	88da      	ldrh	r2, [r3, #6]
 8005496:	893b      	ldrh	r3, [r7, #8]
 8005498:	4293      	cmp	r3, r2
 800549a:	bf28      	it	cs
 800549c:	4613      	movcs	r3, r2
 800549e:	b29b      	uxth	r3, r3
 80054a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80054a2:	893b      	ldrh	r3, [r7, #8]
 80054a4:	461a      	mov	r2, r3
 80054a6:	68f9      	ldr	r1, [r7, #12]
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fa22 	bl	80058f2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	88db      	ldrh	r3, [r3, #6]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d104      	bne.n	80054c0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa79 	bl	80059ae <USBD_CtlSendStatus>
 80054bc:	e000      	b.n	80054c0 <USBD_GetDescriptor+0x2c8>
    return;
 80054be:	bf00      	nop
    }
  }
}
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop

080054c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	889b      	ldrh	r3, [r3, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d130      	bne.n	800553c <USBD_SetAddress+0x74>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	88db      	ldrh	r3, [r3, #6]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d12c      	bne.n	800553c <USBD_SetAddress+0x74>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	885b      	ldrh	r3, [r3, #2]
 80054e6:	2b7f      	cmp	r3, #127	; 0x7f
 80054e8:	d828      	bhi.n	800553c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	885b      	ldrh	r3, [r3, #2]
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d104      	bne.n	800550a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005500:	6839      	ldr	r1, [r7, #0]
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f98b 	bl	800581e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005508:	e01d      	b.n	8005546 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	7bfa      	ldrb	r2, [r7, #15]
 800550e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	4619      	mov	r1, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fec9 	bl	80062ae <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fa46 	bl	80059ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005522:	7bfb      	ldrb	r3, [r7, #15]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d004      	beq.n	8005532 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005530:	e009      	b.n	8005546 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800553a:	e004      	b.n	8005546 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f96d 	bl	800581e <USBD_CtlError>
  }
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	885b      	ldrh	r3, [r3, #2]
 800555e:	b2da      	uxtb	r2, r3
 8005560:	4b41      	ldr	r3, [pc, #260]	; (8005668 <USBD_SetConfig+0x118>)
 8005562:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005564:	4b40      	ldr	r3, [pc, #256]	; (8005668 <USBD_SetConfig+0x118>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d904      	bls.n	8005576 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f955 	bl	800581e <USBD_CtlError>
 8005574:	e075      	b.n	8005662 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800557c:	2b02      	cmp	r3, #2
 800557e:	d002      	beq.n	8005586 <USBD_SetConfig+0x36>
 8005580:	2b03      	cmp	r3, #3
 8005582:	d023      	beq.n	80055cc <USBD_SetConfig+0x7c>
 8005584:	e062      	b.n	800564c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005586:	4b38      	ldr	r3, [pc, #224]	; (8005668 <USBD_SetConfig+0x118>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d01a      	beq.n	80055c4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800558e:	4b36      	ldr	r3, [pc, #216]	; (8005668 <USBD_SetConfig+0x118>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2203      	movs	r2, #3
 800559c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80055a0:	4b31      	ldr	r3, [pc, #196]	; (8005668 <USBD_SetConfig+0x118>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	4619      	mov	r1, r3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff f9af 	bl	800490a <USBD_SetClassConfig>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d104      	bne.n	80055bc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80055b2:	6839      	ldr	r1, [r7, #0]
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f932 	bl	800581e <USBD_CtlError>
            return;
 80055ba:	e052      	b.n	8005662 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f9f6 	bl	80059ae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80055c2:	e04e      	b.n	8005662 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f9f2 	bl	80059ae <USBD_CtlSendStatus>
        break;
 80055ca:	e04a      	b.n	8005662 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80055cc:	4b26      	ldr	r3, [pc, #152]	; (8005668 <USBD_SetConfig+0x118>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d112      	bne.n	80055fa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80055dc:	4b22      	ldr	r3, [pc, #136]	; (8005668 <USBD_SetConfig+0x118>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	461a      	mov	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80055e6:	4b20      	ldr	r3, [pc, #128]	; (8005668 <USBD_SetConfig+0x118>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff f9ab 	bl	8004948 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f9db 	bl	80059ae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80055f8:	e033      	b.n	8005662 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80055fa:	4b1b      	ldr	r3, [pc, #108]	; (8005668 <USBD_SetConfig+0x118>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d01d      	beq.n	8005644 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	4619      	mov	r1, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff f999 	bl	8004948 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005616:	4b14      	ldr	r3, [pc, #80]	; (8005668 <USBD_SetConfig+0x118>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005620:	4b11      	ldr	r3, [pc, #68]	; (8005668 <USBD_SetConfig+0x118>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff f96f 	bl	800490a <USBD_SetClassConfig>
 800562c:	4603      	mov	r3, r0
 800562e:	2b02      	cmp	r3, #2
 8005630:	d104      	bne.n	800563c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f8f2 	bl	800581e <USBD_CtlError>
            return;
 800563a:	e012      	b.n	8005662 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f9b6 	bl	80059ae <USBD_CtlSendStatus>
        break;
 8005642:	e00e      	b.n	8005662 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f9b2 	bl	80059ae <USBD_CtlSendStatus>
        break;
 800564a:	e00a      	b.n	8005662 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f8e5 	bl	800581e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005654:	4b04      	ldr	r3, [pc, #16]	; (8005668 <USBD_SetConfig+0x118>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	4619      	mov	r1, r3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff f974 	bl	8004948 <USBD_ClrClassConfig>
        break;
 8005660:	bf00      	nop
    }
  }
}
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	20001604 	.word	0x20001604

0800566c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	88db      	ldrh	r3, [r3, #6]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d004      	beq.n	8005688 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800567e:	6839      	ldr	r1, [r7, #0]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f8cc 	bl	800581e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005686:	e022      	b.n	80056ce <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800568e:	2b02      	cmp	r3, #2
 8005690:	dc02      	bgt.n	8005698 <USBD_GetConfig+0x2c>
 8005692:	2b00      	cmp	r3, #0
 8005694:	dc03      	bgt.n	800569e <USBD_GetConfig+0x32>
 8005696:	e015      	b.n	80056c4 <USBD_GetConfig+0x58>
 8005698:	2b03      	cmp	r3, #3
 800569a:	d00b      	beq.n	80056b4 <USBD_GetConfig+0x48>
 800569c:	e012      	b.n	80056c4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3308      	adds	r3, #8
 80056a8:	2201      	movs	r2, #1
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f920 	bl	80058f2 <USBD_CtlSendData>
        break;
 80056b2:	e00c      	b.n	80056ce <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3304      	adds	r3, #4
 80056b8:	2201      	movs	r2, #1
 80056ba:	4619      	mov	r1, r3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f918 	bl	80058f2 <USBD_CtlSendData>
        break;
 80056c2:	e004      	b.n	80056ce <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80056c4:	6839      	ldr	r1, [r7, #0]
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f8a9 	bl	800581e <USBD_CtlError>
        break;
 80056cc:	bf00      	nop
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056e6:	3b01      	subs	r3, #1
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d81e      	bhi.n	800572a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	88db      	ldrh	r3, [r3, #6]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d004      	beq.n	80056fe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80056f4:	6839      	ldr	r1, [r7, #0]
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f891 	bl	800581e <USBD_CtlError>
        break;
 80056fc:	e01a      	b.n	8005734 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800570a:	2b00      	cmp	r3, #0
 800570c:	d005      	beq.n	800571a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f043 0202 	orr.w	r2, r3, #2
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	330c      	adds	r3, #12
 800571e:	2202      	movs	r2, #2
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f8e5 	bl	80058f2 <USBD_CtlSendData>
      break;
 8005728:	e004      	b.n	8005734 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800572a:	6839      	ldr	r1, [r7, #0]
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f876 	bl	800581e <USBD_CtlError>
      break;
 8005732:	bf00      	nop
  }
}
 8005734:	bf00      	nop
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	885b      	ldrh	r3, [r3, #2]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d106      	bne.n	800575c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f929 	bl	80059ae <USBD_CtlSendStatus>
  }
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005774:	3b01      	subs	r3, #1
 8005776:	2b02      	cmp	r3, #2
 8005778:	d80b      	bhi.n	8005792 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	885b      	ldrh	r3, [r3, #2]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d10c      	bne.n	800579c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f90f 	bl	80059ae <USBD_CtlSendStatus>
      }
      break;
 8005790:	e004      	b.n	800579c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005792:	6839      	ldr	r1, [r7, #0]
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f842 	bl	800581e <USBD_CtlError>
      break;
 800579a:	e000      	b.n	800579e <USBD_ClrFeature+0x3a>
      break;
 800579c:	bf00      	nop
  }
}
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781a      	ldrb	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	785a      	ldrb	r2, [r3, #1]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	3302      	adds	r3, #2
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	3303      	adds	r3, #3
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	021b      	lsls	r3, r3, #8
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	4413      	add	r3, r2
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	3304      	adds	r3, #4
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	3305      	adds	r3, #5
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	4413      	add	r3, r2
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	3306      	adds	r3, #6
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	b29a      	uxth	r2, r3
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	3307      	adds	r3, #7
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	b29b      	uxth	r3, r3
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	b29b      	uxth	r3, r3
 800580c:	4413      	add	r3, r2
 800580e:	b29a      	uxth	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	80da      	strh	r2, [r3, #6]

}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	bc80      	pop	{r7}
 800581c:	4770      	bx	lr

0800581e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005828:	2180      	movs	r1, #128	; 0x80
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fcd6 	bl	80061dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005830:	2100      	movs	r1, #0
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fcd2 	bl	80061dc <USBD_LL_StallEP>
}
 8005838:	bf00      	nop
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d032      	beq.n	80058bc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 f834 	bl	80058c4 <USBD_GetLen>
 800585c:	4603      	mov	r3, r0
 800585e:	3301      	adds	r3, #1
 8005860:	b29b      	uxth	r3, r3
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	b29a      	uxth	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	75fa      	strb	r2, [r7, #23]
 8005870:	461a      	mov	r2, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4413      	add	r3, r2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	7812      	ldrb	r2, [r2, #0]
 800587a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800587c:	7dfb      	ldrb	r3, [r7, #23]
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	75fa      	strb	r2, [r7, #23]
 8005882:	461a      	mov	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4413      	add	r3, r2
 8005888:	2203      	movs	r2, #3
 800588a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800588c:	e012      	b.n	80058b4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	60fa      	str	r2, [r7, #12]
 8005894:	7dfa      	ldrb	r2, [r7, #23]
 8005896:	1c51      	adds	r1, r2, #1
 8005898:	75f9      	strb	r1, [r7, #23]
 800589a:	4611      	mov	r1, r2
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	440a      	add	r2, r1
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	75fa      	strb	r2, [r7, #23]
 80058aa:	461a      	mov	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4413      	add	r3, r2
 80058b0:	2200      	movs	r2, #0
 80058b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e8      	bne.n	800588e <USBD_GetString+0x4e>
    }
  }
}
 80058bc:	bf00      	nop
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80058d0:	e005      	b.n	80058de <USBD_GetLen+0x1a>
  {
    len++;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	3301      	adds	r3, #1
 80058d6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3301      	adds	r3, #1
 80058dc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f5      	bne.n	80058d2 <USBD_GetLen+0xe>
  }

  return len;
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	4613      	mov	r3, r2
 80058fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2202      	movs	r2, #2
 8005904:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005908:	88fa      	ldrh	r2, [r7, #6]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800590e:	88fa      	ldrh	r2, [r7, #6]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005914:	88fb      	ldrh	r3, [r7, #6]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	2100      	movs	r1, #0
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 fce6 	bl	80062ec <USBD_LL_Transmit>

  return USBD_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	4613      	mov	r3, r2
 8005936:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005938:	88fb      	ldrh	r3, [r7, #6]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	2100      	movs	r1, #0
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 fcd4 	bl	80062ec <USBD_LL_Transmit>

  return USBD_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	60f8      	str	r0, [r7, #12]
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	4613      	mov	r3, r2
 800595a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2203      	movs	r2, #3
 8005960:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005964:	88fa      	ldrh	r2, [r7, #6]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800596c:	88fa      	ldrh	r2, [r7, #6]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005974:	88fb      	ldrh	r3, [r7, #6]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	2100      	movs	r1, #0
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 fcd9 	bl	8006332 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b084      	sub	sp, #16
 800598e:	af00      	add	r7, sp, #0
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	4613      	mov	r3, r2
 8005996:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005998:	88fb      	ldrh	r3, [r7, #6]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	2100      	movs	r1, #0
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 fcc7 	bl	8006332 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2204      	movs	r2, #4
 80059ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80059be:	2300      	movs	r3, #0
 80059c0:	2200      	movs	r2, #0
 80059c2:	2100      	movs	r1, #0
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fc91 	bl	80062ec <USBD_LL_Transmit>

  return USBD_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2205      	movs	r2, #5
 80059e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059e4:	2300      	movs	r3, #0
 80059e6:	2200      	movs	r2, #0
 80059e8:	2100      	movs	r1, #0
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fca1 	bl	8006332 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005a00:	2200      	movs	r2, #0
 8005a02:	4912      	ldr	r1, [pc, #72]	; (8005a4c <MX_USB_DEVICE_Init+0x50>)
 8005a04:	4812      	ldr	r0, [pc, #72]	; (8005a50 <MX_USB_DEVICE_Init+0x54>)
 8005a06:	f7fe ff26 	bl	8004856 <USBD_Init>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005a10:	f7fa ff1a 	bl	8000848 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005a14:	490f      	ldr	r1, [pc, #60]	; (8005a54 <MX_USB_DEVICE_Init+0x58>)
 8005a16:	480e      	ldr	r0, [pc, #56]	; (8005a50 <MX_USB_DEVICE_Init+0x54>)
 8005a18:	f7fe ff48 	bl	80048ac <USBD_RegisterClass>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005a22:	f7fa ff11 	bl	8000848 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005a26:	490c      	ldr	r1, [pc, #48]	; (8005a58 <MX_USB_DEVICE_Init+0x5c>)
 8005a28:	4809      	ldr	r0, [pc, #36]	; (8005a50 <MX_USB_DEVICE_Init+0x54>)
 8005a2a:	f7fe fe79 	bl	8004720 <USBD_CDC_RegisterInterface>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005a34:	f7fa ff08 	bl	8000848 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005a38:	4805      	ldr	r0, [pc, #20]	; (8005a50 <MX_USB_DEVICE_Init+0x54>)
 8005a3a:	f7fe ff50 	bl	80048de <USBD_Start>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005a44:	f7fa ff00 	bl	8000848 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005a48:	bf00      	nop
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	2000013c 	.word	0x2000013c
 8005a50:	20001608 	.word	0x20001608
 8005a54:	20000028 	.word	0x20000028
 8005a58:	2000012c 	.word	0x2000012c

08005a5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005a60:	2200      	movs	r2, #0
 8005a62:	4905      	ldr	r1, [pc, #20]	; (8005a78 <CDC_Init_FS+0x1c>)
 8005a64:	4805      	ldr	r0, [pc, #20]	; (8005a7c <CDC_Init_FS+0x20>)
 8005a66:	f7fe fe71 	bl	800474c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005a6a:	4905      	ldr	r1, [pc, #20]	; (8005a80 <CDC_Init_FS+0x24>)
 8005a6c:	4803      	ldr	r0, [pc, #12]	; (8005a7c <CDC_Init_FS+0x20>)
 8005a6e:	f7fe fe86 	bl	800477e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005a72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	200020cc 	.word	0x200020cc
 8005a7c:	20001608 	.word	0x20001608
 8005a80:	200018cc 	.word	0x200018cc

08005a84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005a88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr
	...

08005a94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	6039      	str	r1, [r7, #0]
 8005a9e:	71fb      	strb	r3, [r7, #7]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005aa4:	79fb      	ldrb	r3, [r7, #7]
 8005aa6:	2b23      	cmp	r3, #35	; 0x23
 8005aa8:	d84a      	bhi.n	8005b40 <CDC_Control_FS+0xac>
 8005aaa:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <CDC_Control_FS+0x1c>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005b41 	.word	0x08005b41
 8005ab4:	08005b41 	.word	0x08005b41
 8005ab8:	08005b41 	.word	0x08005b41
 8005abc:	08005b41 	.word	0x08005b41
 8005ac0:	08005b41 	.word	0x08005b41
 8005ac4:	08005b41 	.word	0x08005b41
 8005ac8:	08005b41 	.word	0x08005b41
 8005acc:	08005b41 	.word	0x08005b41
 8005ad0:	08005b41 	.word	0x08005b41
 8005ad4:	08005b41 	.word	0x08005b41
 8005ad8:	08005b41 	.word	0x08005b41
 8005adc:	08005b41 	.word	0x08005b41
 8005ae0:	08005b41 	.word	0x08005b41
 8005ae4:	08005b41 	.word	0x08005b41
 8005ae8:	08005b41 	.word	0x08005b41
 8005aec:	08005b41 	.word	0x08005b41
 8005af0:	08005b41 	.word	0x08005b41
 8005af4:	08005b41 	.word	0x08005b41
 8005af8:	08005b41 	.word	0x08005b41
 8005afc:	08005b41 	.word	0x08005b41
 8005b00:	08005b41 	.word	0x08005b41
 8005b04:	08005b41 	.word	0x08005b41
 8005b08:	08005b41 	.word	0x08005b41
 8005b0c:	08005b41 	.word	0x08005b41
 8005b10:	08005b41 	.word	0x08005b41
 8005b14:	08005b41 	.word	0x08005b41
 8005b18:	08005b41 	.word	0x08005b41
 8005b1c:	08005b41 	.word	0x08005b41
 8005b20:	08005b41 	.word	0x08005b41
 8005b24:	08005b41 	.word	0x08005b41
 8005b28:	08005b41 	.word	0x08005b41
 8005b2c:	08005b41 	.word	0x08005b41
 8005b30:	08005b41 	.word	0x08005b41
 8005b34:	08005b41 	.word	0x08005b41
 8005b38:	08005b41 	.word	0x08005b41
 8005b3c:	08005b41 	.word	0x08005b41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005b40:	bf00      	nop
  }

  return (USBD_OK);
 8005b42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bc80      	pop	{r7}
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop

08005b50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	4805      	ldr	r0, [pc, #20]	; (8005b74 <CDC_Receive_FS+0x24>)
 8005b5e:	f7fe fe0e 	bl	800477e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005b62:	4804      	ldr	r0, [pc, #16]	; (8005b74 <CDC_Receive_FS+0x24>)
 8005b64:	f7fe fe4d 	bl	8004802 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005b68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20001608 	.word	0x20001608

08005b78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005b88:	4b0d      	ldr	r3, [pc, #52]	; (8005bc0 <CDC_Transmit_FS+0x48>)
 8005b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e00b      	b.n	8005bb6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005b9e:	887b      	ldrh	r3, [r7, #2]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	4806      	ldr	r0, [pc, #24]	; (8005bc0 <CDC_Transmit_FS+0x48>)
 8005ba6:	f7fe fdd1 	bl	800474c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005baa:	4805      	ldr	r0, [pc, #20]	; (8005bc0 <CDC_Transmit_FS+0x48>)
 8005bac:	f7fe fdfa 	bl	80047a4 <USBD_CDC_TransmitPacket>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20001608 	.word	0x20001608

08005bc4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	6039      	str	r1, [r7, #0]
 8005bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2212      	movs	r2, #18
 8005bd4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005bd6:	4b03      	ldr	r3, [pc, #12]	; (8005be4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc80      	pop	{r7}
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	20000158 	.word	0x20000158

08005be8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	6039      	str	r1, [r7, #0]
 8005bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005bfa:	4b03      	ldr	r3, [pc, #12]	; (8005c08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	2000016c 	.word	0x2000016c

08005c0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	6039      	str	r1, [r7, #0]
 8005c16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d105      	bne.n	8005c2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	4907      	ldr	r1, [pc, #28]	; (8005c40 <USBD_FS_ProductStrDescriptor+0x34>)
 8005c22:	4808      	ldr	r0, [pc, #32]	; (8005c44 <USBD_FS_ProductStrDescriptor+0x38>)
 8005c24:	f7ff fe0c 	bl	8005840 <USBD_GetString>
 8005c28:	e004      	b.n	8005c34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	4904      	ldr	r1, [pc, #16]	; (8005c40 <USBD_FS_ProductStrDescriptor+0x34>)
 8005c2e:	4805      	ldr	r0, [pc, #20]	; (8005c44 <USBD_FS_ProductStrDescriptor+0x38>)
 8005c30:	f7ff fe06 	bl	8005840 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005c34:	4b02      	ldr	r3, [pc, #8]	; (8005c40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	200028cc 	.word	0x200028cc
 8005c44:	08006d90 	.word	0x08006d90

08005c48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	6039      	str	r1, [r7, #0]
 8005c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	4904      	ldr	r1, [pc, #16]	; (8005c68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005c58:	4804      	ldr	r0, [pc, #16]	; (8005c6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005c5a:	f7ff fdf1 	bl	8005840 <USBD_GetString>
  return USBD_StrDesc;
 8005c5e:	4b02      	ldr	r3, [pc, #8]	; (8005c68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	200028cc 	.word	0x200028cc
 8005c6c:	08006da8 	.word	0x08006da8

08005c70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	4603      	mov	r3, r0
 8005c78:	6039      	str	r1, [r7, #0]
 8005c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	221a      	movs	r2, #26
 8005c80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005c82:	f000 f843 	bl	8005d0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005c86:	4b02      	ldr	r3, [pc, #8]	; (8005c90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20000170 	.word	0x20000170

08005c94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	6039      	str	r1, [r7, #0]
 8005c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d105      	bne.n	8005cb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	4907      	ldr	r1, [pc, #28]	; (8005cc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005caa:	4808      	ldr	r0, [pc, #32]	; (8005ccc <USBD_FS_ConfigStrDescriptor+0x38>)
 8005cac:	f7ff fdc8 	bl	8005840 <USBD_GetString>
 8005cb0:	e004      	b.n	8005cbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	4904      	ldr	r1, [pc, #16]	; (8005cc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005cb6:	4805      	ldr	r0, [pc, #20]	; (8005ccc <USBD_FS_ConfigStrDescriptor+0x38>)
 8005cb8:	f7ff fdc2 	bl	8005840 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005cbc:	4b02      	ldr	r3, [pc, #8]	; (8005cc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	200028cc 	.word	0x200028cc
 8005ccc:	08006dbc 	.word	0x08006dbc

08005cd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	6039      	str	r1, [r7, #0]
 8005cda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d105      	bne.n	8005cee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	4907      	ldr	r1, [pc, #28]	; (8005d04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005ce6:	4808      	ldr	r0, [pc, #32]	; (8005d08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005ce8:	f7ff fdaa 	bl	8005840 <USBD_GetString>
 8005cec:	e004      	b.n	8005cf8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	4904      	ldr	r1, [pc, #16]	; (8005d04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005cf2:	4805      	ldr	r0, [pc, #20]	; (8005d08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005cf4:	f7ff fda4 	bl	8005840 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005cf8:	4b02      	ldr	r3, [pc, #8]	; (8005d04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	200028cc 	.word	0x200028cc
 8005d08:	08006dc8 	.word	0x08006dc8

08005d0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005d12:	4b0f      	ldr	r3, [pc, #60]	; (8005d50 <Get_SerialNum+0x44>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005d18:	4b0e      	ldr	r3, [pc, #56]	; (8005d54 <Get_SerialNum+0x48>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005d1e:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <Get_SerialNum+0x4c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4413      	add	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005d32:	2208      	movs	r2, #8
 8005d34:	4909      	ldr	r1, [pc, #36]	; (8005d5c <Get_SerialNum+0x50>)
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 f814 	bl	8005d64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005d3c:	2204      	movs	r2, #4
 8005d3e:	4908      	ldr	r1, [pc, #32]	; (8005d60 <Get_SerialNum+0x54>)
 8005d40:	68b8      	ldr	r0, [r7, #8]
 8005d42:	f000 f80f 	bl	8005d64 <IntToUnicode>
  }
}
 8005d46:	bf00      	nop
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	1fff7a10 	.word	0x1fff7a10
 8005d54:	1fff7a14 	.word	0x1fff7a14
 8005d58:	1fff7a18 	.word	0x1fff7a18
 8005d5c:	20000172 	.word	0x20000172
 8005d60:	20000182 	.word	0x20000182

08005d64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005d76:	2300      	movs	r3, #0
 8005d78:	75fb      	strb	r3, [r7, #23]
 8005d7a:	e027      	b.n	8005dcc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	0f1b      	lsrs	r3, r3, #28
 8005d80:	2b09      	cmp	r3, #9
 8005d82:	d80b      	bhi.n	8005d9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	0f1b      	lsrs	r3, r3, #28
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	4619      	mov	r1, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	440b      	add	r3, r1
 8005d94:	3230      	adds	r2, #48	; 0x30
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	e00a      	b.n	8005db2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	0f1b      	lsrs	r3, r3, #28
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	4619      	mov	r1, r3
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	440b      	add	r3, r1
 8005dac:	3237      	adds	r2, #55	; 0x37
 8005dae:	b2d2      	uxtb	r2, r2
 8005db0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005dc6:	7dfb      	ldrb	r3, [r7, #23]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	75fb      	strb	r3, [r7, #23]
 8005dcc:	7dfa      	ldrb	r2, [r7, #23]
 8005dce:	79fb      	ldrb	r3, [r7, #7]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d3d3      	bcc.n	8005d7c <IntToUnicode+0x18>
  }
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr

08005de0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08a      	sub	sp, #40	; 0x28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005de8:	f107 0314 	add.w	r3, r7, #20
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	605a      	str	r2, [r3, #4]
 8005df2:	609a      	str	r2, [r3, #8]
 8005df4:	60da      	str	r2, [r3, #12]
 8005df6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e00:	d147      	bne.n	8005e92 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e02:	2300      	movs	r3, #0
 8005e04:	613b      	str	r3, [r7, #16]
 8005e06:	4b25      	ldr	r3, [pc, #148]	; (8005e9c <HAL_PCD_MspInit+0xbc>)
 8005e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0a:	4a24      	ldr	r2, [pc, #144]	; (8005e9c <HAL_PCD_MspInit+0xbc>)
 8005e0c:	f043 0301 	orr.w	r3, r3, #1
 8005e10:	6313      	str	r3, [r2, #48]	; 0x30
 8005e12:	4b22      	ldr	r3, [pc, #136]	; (8005e9c <HAL_PCD_MspInit+0xbc>)
 8005e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005e1e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e24:	2302      	movs	r3, #2
 8005e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005e30:	230a      	movs	r3, #10
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e34:	f107 0314 	add.w	r3, r7, #20
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4819      	ldr	r0, [pc, #100]	; (8005ea0 <HAL_PCD_MspInit+0xc0>)
 8005e3c:	f7fa ff68 	bl	8000d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005e4e:	f107 0314 	add.w	r3, r7, #20
 8005e52:	4619      	mov	r1, r3
 8005e54:	4812      	ldr	r0, [pc, #72]	; (8005ea0 <HAL_PCD_MspInit+0xc0>)
 8005e56:	f7fa ff5b 	bl	8000d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005e5a:	4b10      	ldr	r3, [pc, #64]	; (8005e9c <HAL_PCD_MspInit+0xbc>)
 8005e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5e:	4a0f      	ldr	r2, [pc, #60]	; (8005e9c <HAL_PCD_MspInit+0xbc>)
 8005e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e64:	6353      	str	r3, [r2, #52]	; 0x34
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <HAL_PCD_MspInit+0xbc>)
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6e:	4a0b      	ldr	r2, [pc, #44]	; (8005e9c <HAL_PCD_MspInit+0xbc>)
 8005e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e74:	6453      	str	r3, [r2, #68]	; 0x44
 8005e76:	4b09      	ldr	r3, [pc, #36]	; (8005e9c <HAL_PCD_MspInit+0xbc>)
 8005e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005e82:	2200      	movs	r2, #0
 8005e84:	2100      	movs	r1, #0
 8005e86:	2043      	movs	r0, #67	; 0x43
 8005e88:	f7fa ff0b 	bl	8000ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005e8c:	2043      	movs	r0, #67	; 0x43
 8005e8e:	f7fa ff24 	bl	8000cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005e92:	bf00      	nop
 8005e94:	3728      	adds	r7, #40	; 0x28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40023800 	.word	0x40023800
 8005ea0:	40020000 	.word	0x40020000

08005ea4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	f7fe fd57 	bl	800496e <USBD_LL_SetupStage>
}
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8005eda:	78fa      	ldrb	r2, [r7, #3]
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	1a9b      	subs	r3, r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	440b      	add	r3, r1
 8005ee8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	f7fe fd89 	bl	8004a08 <USBD_LL_DataOutStage>
}
 8005ef6:	bf00      	nop
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	460b      	mov	r3, r1
 8005f08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8005f10:	78fa      	ldrb	r2, [r7, #3]
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	4613      	mov	r3, r2
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	1a9b      	subs	r3, r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	440b      	add	r3, r1
 8005f1e:	3348      	adds	r3, #72	; 0x48
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	78fb      	ldrb	r3, [r7, #3]
 8005f24:	4619      	mov	r1, r3
 8005f26:	f7fe fde0 	bl	8004aea <USBD_LL_DataInStage>
}
 8005f2a:	bf00      	nop
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fe fef0 	bl	8004d26 <USBD_LL_SOF>
}
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005f56:	2301      	movs	r3, #1
 8005f58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d102      	bne.n	8005f68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
 8005f66:	e008      	b.n	8005f7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d102      	bne.n	8005f76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005f70:	2301      	movs	r3, #1
 8005f72:	73fb      	strb	r3, [r7, #15]
 8005f74:	e001      	b.n	8005f7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005f76:	f7fa fc67 	bl	8000848 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8005f80:	7bfa      	ldrb	r2, [r7, #15]
 8005f82:	4611      	mov	r1, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fe fe96 	bl	8004cb6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fe fe4f 	bl	8004c34 <USBD_LL_Reset>
}
 8005f96:	bf00      	nop
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fe fe90 	bl	8004cd4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fc6:	f043 0301 	orr.w	r3, r3, #1
 8005fca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005fd4:	4b04      	ldr	r3, [pc, #16]	; (8005fe8 <HAL_PCD_SuspendCallback+0x48>)
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	4a03      	ldr	r2, [pc, #12]	; (8005fe8 <HAL_PCD_SuspendCallback+0x48>)
 8005fda:	f043 0306 	orr.w	r3, r3, #6
 8005fde:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005fe0:	bf00      	nop
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	e000ed00 	.word	0xe000ed00

08005fec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe fe7e 	bl	8004cfc <USBD_LL_Resume>
}
 8006000:	bf00      	nop
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	460b      	mov	r3, r1
 8006012:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800601a:	78fa      	ldrb	r2, [r7, #3]
 800601c:	4611      	mov	r1, r2
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe fea7 	bl	8004d72 <USBD_LL_IsoOUTIncomplete>
}
 8006024:	bf00      	nop
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800603e:	78fa      	ldrb	r2, [r7, #3]
 8006040:	4611      	mov	r1, r2
 8006042:	4618      	mov	r0, r3
 8006044:	f7fe fe89 	bl	8004d5a <USBD_LL_IsoINIncomplete>
}
 8006048:	bf00      	nop
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800605e:	4618      	mov	r0, r3
 8006060:	f7fe fe93 	bl	8004d8a <USBD_LL_DevConnected>
}
 8006064:	bf00      	nop
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe fe8f 	bl	8004d9e <USBD_LL_DevDisconnected>
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d139      	bne.n	800610c <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006098:	4a1f      	ldr	r2, [pc, #124]	; (8006118 <USBD_LL_Init+0x90>)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a1d      	ldr	r2, [pc, #116]	; (8006118 <USBD_LL_Init+0x90>)
 80060a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80060a8:	4b1b      	ldr	r3, [pc, #108]	; (8006118 <USBD_LL_Init+0x90>)
 80060aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80060ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80060b0:	4b19      	ldr	r3, [pc, #100]	; (8006118 <USBD_LL_Init+0x90>)
 80060b2:	2204      	movs	r2, #4
 80060b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80060b6:	4b18      	ldr	r3, [pc, #96]	; (8006118 <USBD_LL_Init+0x90>)
 80060b8:	2202      	movs	r2, #2
 80060ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80060bc:	4b16      	ldr	r3, [pc, #88]	; (8006118 <USBD_LL_Init+0x90>)
 80060be:	2200      	movs	r2, #0
 80060c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80060c2:	4b15      	ldr	r3, [pc, #84]	; (8006118 <USBD_LL_Init+0x90>)
 80060c4:	2202      	movs	r2, #2
 80060c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80060c8:	4b13      	ldr	r3, [pc, #76]	; (8006118 <USBD_LL_Init+0x90>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80060ce:	4b12      	ldr	r3, [pc, #72]	; (8006118 <USBD_LL_Init+0x90>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80060d4:	4b10      	ldr	r3, [pc, #64]	; (8006118 <USBD_LL_Init+0x90>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80060da:	4b0f      	ldr	r3, [pc, #60]	; (8006118 <USBD_LL_Init+0x90>)
 80060dc:	2200      	movs	r2, #0
 80060de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80060e0:	480d      	ldr	r0, [pc, #52]	; (8006118 <USBD_LL_Init+0x90>)
 80060e2:	f7fa ffe4 	bl	80010ae <HAL_PCD_Init>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 80060ec:	f7fa fbac 	bl	8000848 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80060f0:	2180      	movs	r1, #128	; 0x80
 80060f2:	4809      	ldr	r0, [pc, #36]	; (8006118 <USBD_LL_Init+0x90>)
 80060f4:	f7fc f920 	bl	8002338 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80060f8:	2240      	movs	r2, #64	; 0x40
 80060fa:	2100      	movs	r1, #0
 80060fc:	4806      	ldr	r0, [pc, #24]	; (8006118 <USBD_LL_Init+0x90>)
 80060fe:	f7fc f8d5 	bl	80022ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006102:	2280      	movs	r2, #128	; 0x80
 8006104:	2101      	movs	r1, #1
 8006106:	4804      	ldr	r0, [pc, #16]	; (8006118 <USBD_LL_Init+0x90>)
 8006108:	f7fc f8d0 	bl	80022ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20002acc 	.word	0x20002acc

0800611c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006124:	2300      	movs	r3, #0
 8006126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006132:	4618      	mov	r0, r3
 8006134:	f7fb f8d8 	bl	80012e8 <HAL_PCD_Start>
 8006138:	4603      	mov	r3, r0
 800613a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	4618      	mov	r0, r3
 8006140:	f000 f92e 	bl	80063a0 <USBD_Get_USB_Status>
 8006144:	4603      	mov	r3, r0
 8006146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006148:	7bbb      	ldrb	r3, [r7, #14]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	4608      	mov	r0, r1
 800615c:	4611      	mov	r1, r2
 800615e:	461a      	mov	r2, r3
 8006160:	4603      	mov	r3, r0
 8006162:	70fb      	strb	r3, [r7, #3]
 8006164:	460b      	mov	r3, r1
 8006166:	70bb      	strb	r3, [r7, #2]
 8006168:	4613      	mov	r3, r2
 800616a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800617a:	78bb      	ldrb	r3, [r7, #2]
 800617c:	883a      	ldrh	r2, [r7, #0]
 800617e:	78f9      	ldrb	r1, [r7, #3]
 8006180:	f7fb fc9d 	bl	8001abe <HAL_PCD_EP_Open>
 8006184:	4603      	mov	r3, r0
 8006186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 f908 	bl	80063a0 <USBD_Get_USB_Status>
 8006190:	4603      	mov	r3, r0
 8006192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006194:	7bbb      	ldrb	r3, [r7, #14]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b084      	sub	sp, #16
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	460b      	mov	r3, r1
 80061a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061b8:	78fa      	ldrb	r2, [r7, #3]
 80061ba:	4611      	mov	r1, r2
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fb fce6 	bl	8001b8e <HAL_PCD_EP_Close>
 80061c2:	4603      	mov	r3, r0
 80061c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 f8e9 	bl	80063a0 <USBD_Get_USB_Status>
 80061ce:	4603      	mov	r3, r0
 80061d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061f6:	78fa      	ldrb	r2, [r7, #3]
 80061f8:	4611      	mov	r1, r2
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fb fdbd 	bl	8001d7a <HAL_PCD_EP_SetStall>
 8006200:	4603      	mov	r3, r0
 8006202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	4618      	mov	r0, r3
 8006208:	f000 f8ca 	bl	80063a0 <USBD_Get_USB_Status>
 800620c:	4603      	mov	r3, r0
 800620e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006210:	7bbb      	ldrb	r3, [r7, #14]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	460b      	mov	r3, r1
 8006224:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006234:	78fa      	ldrb	r2, [r7, #3]
 8006236:	4611      	mov	r1, r2
 8006238:	4618      	mov	r0, r3
 800623a:	f7fb fe02 	bl	8001e42 <HAL_PCD_EP_ClrStall>
 800623e:	4603      	mov	r3, r0
 8006240:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006242:	7bfb      	ldrb	r3, [r7, #15]
 8006244:	4618      	mov	r0, r3
 8006246:	f000 f8ab 	bl	80063a0 <USBD_Get_USB_Status>
 800624a:	4603      	mov	r3, r0
 800624c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800624e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800626a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800626c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006270:	2b00      	cmp	r3, #0
 8006272:	da0b      	bge.n	800628c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006274:	78fb      	ldrb	r3, [r7, #3]
 8006276:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800627a:	68f9      	ldr	r1, [r7, #12]
 800627c:	4613      	mov	r3, r2
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	1a9b      	subs	r3, r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	440b      	add	r3, r1
 8006286:	333e      	adds	r3, #62	; 0x3e
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	e00b      	b.n	80062a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006292:	68f9      	ldr	r1, [r7, #12]
 8006294:	4613      	mov	r3, r2
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	1a9b      	subs	r3, r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80062a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr

080062ae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062c8:	78fa      	ldrb	r2, [r7, #3]
 80062ca:	4611      	mov	r1, r2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7fb fbd1 	bl	8001a74 <HAL_PCD_SetAddress>
 80062d2:	4603      	mov	r3, r0
 80062d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 f861 	bl	80063a0 <USBD_Get_USB_Status>
 80062de:	4603      	mov	r3, r0
 80062e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	607a      	str	r2, [r7, #4]
 80062f6:	461a      	mov	r2, r3
 80062f8:	460b      	mov	r3, r1
 80062fa:	72fb      	strb	r3, [r7, #11]
 80062fc:	4613      	mov	r3, r2
 80062fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006304:	2300      	movs	r3, #0
 8006306:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800630e:	893b      	ldrh	r3, [r7, #8]
 8006310:	7af9      	ldrb	r1, [r7, #11]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	f7fb fce7 	bl	8001ce6 <HAL_PCD_EP_Transmit>
 8006318:	4603      	mov	r3, r0
 800631a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800631c:	7dfb      	ldrb	r3, [r7, #23]
 800631e:	4618      	mov	r0, r3
 8006320:	f000 f83e 	bl	80063a0 <USBD_Get_USB_Status>
 8006324:	4603      	mov	r3, r0
 8006326:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006328:	7dbb      	ldrb	r3, [r7, #22]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b086      	sub	sp, #24
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	461a      	mov	r2, r3
 800633e:	460b      	mov	r3, r1
 8006340:	72fb      	strb	r3, [r7, #11]
 8006342:	4613      	mov	r3, r2
 8006344:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006354:	893b      	ldrh	r3, [r7, #8]
 8006356:	7af9      	ldrb	r1, [r7, #11]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	f7fb fc62 	bl	8001c22 <HAL_PCD_EP_Receive>
 800635e:	4603      	mov	r3, r0
 8006360:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006362:	7dfb      	ldrb	r3, [r7, #23]
 8006364:	4618      	mov	r0, r3
 8006366:	f000 f81b 	bl	80063a0 <USBD_Get_USB_Status>
 800636a:	4603      	mov	r3, r0
 800636c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800636e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800638a:	78fa      	ldrb	r2, [r7, #3]
 800638c:	4611      	mov	r1, r2
 800638e:	4618      	mov	r0, r3
 8006390:	f7fb fc92 	bl	8001cb8 <HAL_PCD_EP_GetRxCount>
 8006394:	4603      	mov	r3, r0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	4603      	mov	r3, r0
 80063a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80063ae:	79fb      	ldrb	r3, [r7, #7]
 80063b0:	2b03      	cmp	r3, #3
 80063b2:	d817      	bhi.n	80063e4 <USBD_Get_USB_Status+0x44>
 80063b4:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <USBD_Get_USB_Status+0x1c>)
 80063b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ba:	bf00      	nop
 80063bc:	080063cd 	.word	0x080063cd
 80063c0:	080063d3 	.word	0x080063d3
 80063c4:	080063d9 	.word	0x080063d9
 80063c8:	080063df 	.word	0x080063df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	73fb      	strb	r3, [r7, #15]
    break;
 80063d0:	e00b      	b.n	80063ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80063d2:	2302      	movs	r3, #2
 80063d4:	73fb      	strb	r3, [r7, #15]
    break;
 80063d6:	e008      	b.n	80063ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80063d8:	2301      	movs	r3, #1
 80063da:	73fb      	strb	r3, [r7, #15]
    break;
 80063dc:	e005      	b.n	80063ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80063de:	2302      	movs	r3, #2
 80063e0:	73fb      	strb	r3, [r7, #15]
    break;
 80063e2:	e002      	b.n	80063ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80063e4:	2302      	movs	r3, #2
 80063e6:	73fb      	strb	r3, [r7, #15]
    break;
 80063e8:	bf00      	nop
  }
  return usb_status;
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bc80      	pop	{r7}
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop

080063f8 <__errno>:
 80063f8:	4b01      	ldr	r3, [pc, #4]	; (8006400 <__errno+0x8>)
 80063fa:	6818      	ldr	r0, [r3, #0]
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	2000018c 	.word	0x2000018c

08006404 <__libc_init_array>:
 8006404:	b570      	push	{r4, r5, r6, lr}
 8006406:	2600      	movs	r6, #0
 8006408:	4d0c      	ldr	r5, [pc, #48]	; (800643c <__libc_init_array+0x38>)
 800640a:	4c0d      	ldr	r4, [pc, #52]	; (8006440 <__libc_init_array+0x3c>)
 800640c:	1b64      	subs	r4, r4, r5
 800640e:	10a4      	asrs	r4, r4, #2
 8006410:	42a6      	cmp	r6, r4
 8006412:	d109      	bne.n	8006428 <__libc_init_array+0x24>
 8006414:	f000 fcac 	bl	8006d70 <_init>
 8006418:	2600      	movs	r6, #0
 800641a:	4d0a      	ldr	r5, [pc, #40]	; (8006444 <__libc_init_array+0x40>)
 800641c:	4c0a      	ldr	r4, [pc, #40]	; (8006448 <__libc_init_array+0x44>)
 800641e:	1b64      	subs	r4, r4, r5
 8006420:	10a4      	asrs	r4, r4, #2
 8006422:	42a6      	cmp	r6, r4
 8006424:	d105      	bne.n	8006432 <__libc_init_array+0x2e>
 8006426:	bd70      	pop	{r4, r5, r6, pc}
 8006428:	f855 3b04 	ldr.w	r3, [r5], #4
 800642c:	4798      	blx	r3
 800642e:	3601      	adds	r6, #1
 8006430:	e7ee      	b.n	8006410 <__libc_init_array+0xc>
 8006432:	f855 3b04 	ldr.w	r3, [r5], #4
 8006436:	4798      	blx	r3
 8006438:	3601      	adds	r6, #1
 800643a:	e7f2      	b.n	8006422 <__libc_init_array+0x1e>
 800643c:	08006e24 	.word	0x08006e24
 8006440:	08006e24 	.word	0x08006e24
 8006444:	08006e24 	.word	0x08006e24
 8006448:	08006e28 	.word	0x08006e28

0800644c <malloc>:
 800644c:	4b02      	ldr	r3, [pc, #8]	; (8006458 <malloc+0xc>)
 800644e:	4601      	mov	r1, r0
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	f000 b87b 	b.w	800654c <_malloc_r>
 8006456:	bf00      	nop
 8006458:	2000018c 	.word	0x2000018c

0800645c <free>:
 800645c:	4b02      	ldr	r3, [pc, #8]	; (8006468 <free+0xc>)
 800645e:	4601      	mov	r1, r0
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	f000 b80b 	b.w	800647c <_free_r>
 8006466:	bf00      	nop
 8006468:	2000018c 	.word	0x2000018c

0800646c <memset>:
 800646c:	4603      	mov	r3, r0
 800646e:	4402      	add	r2, r0
 8006470:	4293      	cmp	r3, r2
 8006472:	d100      	bne.n	8006476 <memset+0xa>
 8006474:	4770      	bx	lr
 8006476:	f803 1b01 	strb.w	r1, [r3], #1
 800647a:	e7f9      	b.n	8006470 <memset+0x4>

0800647c <_free_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4605      	mov	r5, r0
 8006480:	2900      	cmp	r1, #0
 8006482:	d040      	beq.n	8006506 <_free_r+0x8a>
 8006484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006488:	1f0c      	subs	r4, r1, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	bfb8      	it	lt
 800648e:	18e4      	addlt	r4, r4, r3
 8006490:	f000 f900 	bl	8006694 <__malloc_lock>
 8006494:	4a1c      	ldr	r2, [pc, #112]	; (8006508 <_free_r+0x8c>)
 8006496:	6813      	ldr	r3, [r2, #0]
 8006498:	b933      	cbnz	r3, 80064a8 <_free_r+0x2c>
 800649a:	6063      	str	r3, [r4, #4]
 800649c:	6014      	str	r4, [r2, #0]
 800649e:	4628      	mov	r0, r5
 80064a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064a4:	f000 b8fc 	b.w	80066a0 <__malloc_unlock>
 80064a8:	42a3      	cmp	r3, r4
 80064aa:	d908      	bls.n	80064be <_free_r+0x42>
 80064ac:	6820      	ldr	r0, [r4, #0]
 80064ae:	1821      	adds	r1, r4, r0
 80064b0:	428b      	cmp	r3, r1
 80064b2:	bf01      	itttt	eq
 80064b4:	6819      	ldreq	r1, [r3, #0]
 80064b6:	685b      	ldreq	r3, [r3, #4]
 80064b8:	1809      	addeq	r1, r1, r0
 80064ba:	6021      	streq	r1, [r4, #0]
 80064bc:	e7ed      	b.n	800649a <_free_r+0x1e>
 80064be:	461a      	mov	r2, r3
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	b10b      	cbz	r3, 80064c8 <_free_r+0x4c>
 80064c4:	42a3      	cmp	r3, r4
 80064c6:	d9fa      	bls.n	80064be <_free_r+0x42>
 80064c8:	6811      	ldr	r1, [r2, #0]
 80064ca:	1850      	adds	r0, r2, r1
 80064cc:	42a0      	cmp	r0, r4
 80064ce:	d10b      	bne.n	80064e8 <_free_r+0x6c>
 80064d0:	6820      	ldr	r0, [r4, #0]
 80064d2:	4401      	add	r1, r0
 80064d4:	1850      	adds	r0, r2, r1
 80064d6:	4283      	cmp	r3, r0
 80064d8:	6011      	str	r1, [r2, #0]
 80064da:	d1e0      	bne.n	800649e <_free_r+0x22>
 80064dc:	6818      	ldr	r0, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	4401      	add	r1, r0
 80064e2:	6011      	str	r1, [r2, #0]
 80064e4:	6053      	str	r3, [r2, #4]
 80064e6:	e7da      	b.n	800649e <_free_r+0x22>
 80064e8:	d902      	bls.n	80064f0 <_free_r+0x74>
 80064ea:	230c      	movs	r3, #12
 80064ec:	602b      	str	r3, [r5, #0]
 80064ee:	e7d6      	b.n	800649e <_free_r+0x22>
 80064f0:	6820      	ldr	r0, [r4, #0]
 80064f2:	1821      	adds	r1, r4, r0
 80064f4:	428b      	cmp	r3, r1
 80064f6:	bf01      	itttt	eq
 80064f8:	6819      	ldreq	r1, [r3, #0]
 80064fa:	685b      	ldreq	r3, [r3, #4]
 80064fc:	1809      	addeq	r1, r1, r0
 80064fe:	6021      	streq	r1, [r4, #0]
 8006500:	6063      	str	r3, [r4, #4]
 8006502:	6054      	str	r4, [r2, #4]
 8006504:	e7cb      	b.n	800649e <_free_r+0x22>
 8006506:	bd38      	pop	{r3, r4, r5, pc}
 8006508:	20002ecc 	.word	0x20002ecc

0800650c <sbrk_aligned>:
 800650c:	b570      	push	{r4, r5, r6, lr}
 800650e:	4e0e      	ldr	r6, [pc, #56]	; (8006548 <sbrk_aligned+0x3c>)
 8006510:	460c      	mov	r4, r1
 8006512:	6831      	ldr	r1, [r6, #0]
 8006514:	4605      	mov	r5, r0
 8006516:	b911      	cbnz	r1, 800651e <sbrk_aligned+0x12>
 8006518:	f000 f88c 	bl	8006634 <_sbrk_r>
 800651c:	6030      	str	r0, [r6, #0]
 800651e:	4621      	mov	r1, r4
 8006520:	4628      	mov	r0, r5
 8006522:	f000 f887 	bl	8006634 <_sbrk_r>
 8006526:	1c43      	adds	r3, r0, #1
 8006528:	d00a      	beq.n	8006540 <sbrk_aligned+0x34>
 800652a:	1cc4      	adds	r4, r0, #3
 800652c:	f024 0403 	bic.w	r4, r4, #3
 8006530:	42a0      	cmp	r0, r4
 8006532:	d007      	beq.n	8006544 <sbrk_aligned+0x38>
 8006534:	1a21      	subs	r1, r4, r0
 8006536:	4628      	mov	r0, r5
 8006538:	f000 f87c 	bl	8006634 <_sbrk_r>
 800653c:	3001      	adds	r0, #1
 800653e:	d101      	bne.n	8006544 <sbrk_aligned+0x38>
 8006540:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006544:	4620      	mov	r0, r4
 8006546:	bd70      	pop	{r4, r5, r6, pc}
 8006548:	20002ed0 	.word	0x20002ed0

0800654c <_malloc_r>:
 800654c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006550:	1ccd      	adds	r5, r1, #3
 8006552:	f025 0503 	bic.w	r5, r5, #3
 8006556:	3508      	adds	r5, #8
 8006558:	2d0c      	cmp	r5, #12
 800655a:	bf38      	it	cc
 800655c:	250c      	movcc	r5, #12
 800655e:	2d00      	cmp	r5, #0
 8006560:	4607      	mov	r7, r0
 8006562:	db01      	blt.n	8006568 <_malloc_r+0x1c>
 8006564:	42a9      	cmp	r1, r5
 8006566:	d905      	bls.n	8006574 <_malloc_r+0x28>
 8006568:	230c      	movs	r3, #12
 800656a:	2600      	movs	r6, #0
 800656c:	603b      	str	r3, [r7, #0]
 800656e:	4630      	mov	r0, r6
 8006570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006574:	4e2e      	ldr	r6, [pc, #184]	; (8006630 <_malloc_r+0xe4>)
 8006576:	f000 f88d 	bl	8006694 <__malloc_lock>
 800657a:	6833      	ldr	r3, [r6, #0]
 800657c:	461c      	mov	r4, r3
 800657e:	bb34      	cbnz	r4, 80065ce <_malloc_r+0x82>
 8006580:	4629      	mov	r1, r5
 8006582:	4638      	mov	r0, r7
 8006584:	f7ff ffc2 	bl	800650c <sbrk_aligned>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	4604      	mov	r4, r0
 800658c:	d14d      	bne.n	800662a <_malloc_r+0xde>
 800658e:	6834      	ldr	r4, [r6, #0]
 8006590:	4626      	mov	r6, r4
 8006592:	2e00      	cmp	r6, #0
 8006594:	d140      	bne.n	8006618 <_malloc_r+0xcc>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	4631      	mov	r1, r6
 800659a:	4638      	mov	r0, r7
 800659c:	eb04 0803 	add.w	r8, r4, r3
 80065a0:	f000 f848 	bl	8006634 <_sbrk_r>
 80065a4:	4580      	cmp	r8, r0
 80065a6:	d13a      	bne.n	800661e <_malloc_r+0xd2>
 80065a8:	6821      	ldr	r1, [r4, #0]
 80065aa:	3503      	adds	r5, #3
 80065ac:	1a6d      	subs	r5, r5, r1
 80065ae:	f025 0503 	bic.w	r5, r5, #3
 80065b2:	3508      	adds	r5, #8
 80065b4:	2d0c      	cmp	r5, #12
 80065b6:	bf38      	it	cc
 80065b8:	250c      	movcc	r5, #12
 80065ba:	4638      	mov	r0, r7
 80065bc:	4629      	mov	r1, r5
 80065be:	f7ff ffa5 	bl	800650c <sbrk_aligned>
 80065c2:	3001      	adds	r0, #1
 80065c4:	d02b      	beq.n	800661e <_malloc_r+0xd2>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	442b      	add	r3, r5
 80065ca:	6023      	str	r3, [r4, #0]
 80065cc:	e00e      	b.n	80065ec <_malloc_r+0xa0>
 80065ce:	6822      	ldr	r2, [r4, #0]
 80065d0:	1b52      	subs	r2, r2, r5
 80065d2:	d41e      	bmi.n	8006612 <_malloc_r+0xc6>
 80065d4:	2a0b      	cmp	r2, #11
 80065d6:	d916      	bls.n	8006606 <_malloc_r+0xba>
 80065d8:	1961      	adds	r1, r4, r5
 80065da:	42a3      	cmp	r3, r4
 80065dc:	6025      	str	r5, [r4, #0]
 80065de:	bf18      	it	ne
 80065e0:	6059      	strne	r1, [r3, #4]
 80065e2:	6863      	ldr	r3, [r4, #4]
 80065e4:	bf08      	it	eq
 80065e6:	6031      	streq	r1, [r6, #0]
 80065e8:	5162      	str	r2, [r4, r5]
 80065ea:	604b      	str	r3, [r1, #4]
 80065ec:	4638      	mov	r0, r7
 80065ee:	f104 060b 	add.w	r6, r4, #11
 80065f2:	f000 f855 	bl	80066a0 <__malloc_unlock>
 80065f6:	f026 0607 	bic.w	r6, r6, #7
 80065fa:	1d23      	adds	r3, r4, #4
 80065fc:	1af2      	subs	r2, r6, r3
 80065fe:	d0b6      	beq.n	800656e <_malloc_r+0x22>
 8006600:	1b9b      	subs	r3, r3, r6
 8006602:	50a3      	str	r3, [r4, r2]
 8006604:	e7b3      	b.n	800656e <_malloc_r+0x22>
 8006606:	6862      	ldr	r2, [r4, #4]
 8006608:	42a3      	cmp	r3, r4
 800660a:	bf0c      	ite	eq
 800660c:	6032      	streq	r2, [r6, #0]
 800660e:	605a      	strne	r2, [r3, #4]
 8006610:	e7ec      	b.n	80065ec <_malloc_r+0xa0>
 8006612:	4623      	mov	r3, r4
 8006614:	6864      	ldr	r4, [r4, #4]
 8006616:	e7b2      	b.n	800657e <_malloc_r+0x32>
 8006618:	4634      	mov	r4, r6
 800661a:	6876      	ldr	r6, [r6, #4]
 800661c:	e7b9      	b.n	8006592 <_malloc_r+0x46>
 800661e:	230c      	movs	r3, #12
 8006620:	4638      	mov	r0, r7
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	f000 f83c 	bl	80066a0 <__malloc_unlock>
 8006628:	e7a1      	b.n	800656e <_malloc_r+0x22>
 800662a:	6025      	str	r5, [r4, #0]
 800662c:	e7de      	b.n	80065ec <_malloc_r+0xa0>
 800662e:	bf00      	nop
 8006630:	20002ecc 	.word	0x20002ecc

08006634 <_sbrk_r>:
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	2300      	movs	r3, #0
 8006638:	4d05      	ldr	r5, [pc, #20]	; (8006650 <_sbrk_r+0x1c>)
 800663a:	4604      	mov	r4, r0
 800663c:	4608      	mov	r0, r1
 800663e:	602b      	str	r3, [r5, #0]
 8006640:	f7fa f960 	bl	8000904 <_sbrk>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_sbrk_r+0x1a>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	b103      	cbz	r3, 800664e <_sbrk_r+0x1a>
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	20002ed4 	.word	0x20002ed4

08006654 <siprintf>:
 8006654:	b40e      	push	{r1, r2, r3}
 8006656:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800665a:	b500      	push	{lr}
 800665c:	b09c      	sub	sp, #112	; 0x70
 800665e:	ab1d      	add	r3, sp, #116	; 0x74
 8006660:	9002      	str	r0, [sp, #8]
 8006662:	9006      	str	r0, [sp, #24]
 8006664:	9107      	str	r1, [sp, #28]
 8006666:	9104      	str	r1, [sp, #16]
 8006668:	4808      	ldr	r0, [pc, #32]	; (800668c <siprintf+0x38>)
 800666a:	4909      	ldr	r1, [pc, #36]	; (8006690 <siprintf+0x3c>)
 800666c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006670:	9105      	str	r1, [sp, #20]
 8006672:	6800      	ldr	r0, [r0, #0]
 8006674:	a902      	add	r1, sp, #8
 8006676:	9301      	str	r3, [sp, #4]
 8006678:	f000 f874 	bl	8006764 <_svfiprintf_r>
 800667c:	2200      	movs	r2, #0
 800667e:	9b02      	ldr	r3, [sp, #8]
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	b01c      	add	sp, #112	; 0x70
 8006684:	f85d eb04 	ldr.w	lr, [sp], #4
 8006688:	b003      	add	sp, #12
 800668a:	4770      	bx	lr
 800668c:	2000018c 	.word	0x2000018c
 8006690:	ffff0208 	.word	0xffff0208

08006694 <__malloc_lock>:
 8006694:	4801      	ldr	r0, [pc, #4]	; (800669c <__malloc_lock+0x8>)
 8006696:	f000 bafb 	b.w	8006c90 <__retarget_lock_acquire_recursive>
 800669a:	bf00      	nop
 800669c:	20002ed8 	.word	0x20002ed8

080066a0 <__malloc_unlock>:
 80066a0:	4801      	ldr	r0, [pc, #4]	; (80066a8 <__malloc_unlock+0x8>)
 80066a2:	f000 baf6 	b.w	8006c92 <__retarget_lock_release_recursive>
 80066a6:	bf00      	nop
 80066a8:	20002ed8 	.word	0x20002ed8

080066ac <__ssputs_r>:
 80066ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b0:	688e      	ldr	r6, [r1, #8]
 80066b2:	4682      	mov	sl, r0
 80066b4:	429e      	cmp	r6, r3
 80066b6:	460c      	mov	r4, r1
 80066b8:	4690      	mov	r8, r2
 80066ba:	461f      	mov	r7, r3
 80066bc:	d838      	bhi.n	8006730 <__ssputs_r+0x84>
 80066be:	898a      	ldrh	r2, [r1, #12]
 80066c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066c4:	d032      	beq.n	800672c <__ssputs_r+0x80>
 80066c6:	6825      	ldr	r5, [r4, #0]
 80066c8:	6909      	ldr	r1, [r1, #16]
 80066ca:	3301      	adds	r3, #1
 80066cc:	eba5 0901 	sub.w	r9, r5, r1
 80066d0:	6965      	ldr	r5, [r4, #20]
 80066d2:	444b      	add	r3, r9
 80066d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066dc:	106d      	asrs	r5, r5, #1
 80066de:	429d      	cmp	r5, r3
 80066e0:	bf38      	it	cc
 80066e2:	461d      	movcc	r5, r3
 80066e4:	0553      	lsls	r3, r2, #21
 80066e6:	d531      	bpl.n	800674c <__ssputs_r+0xa0>
 80066e8:	4629      	mov	r1, r5
 80066ea:	f7ff ff2f 	bl	800654c <_malloc_r>
 80066ee:	4606      	mov	r6, r0
 80066f0:	b950      	cbnz	r0, 8006708 <__ssputs_r+0x5c>
 80066f2:	230c      	movs	r3, #12
 80066f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066f8:	f8ca 3000 	str.w	r3, [sl]
 80066fc:	89a3      	ldrh	r3, [r4, #12]
 80066fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006702:	81a3      	strh	r3, [r4, #12]
 8006704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006708:	464a      	mov	r2, r9
 800670a:	6921      	ldr	r1, [r4, #16]
 800670c:	f000 fad0 	bl	8006cb0 <memcpy>
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671a:	81a3      	strh	r3, [r4, #12]
 800671c:	6126      	str	r6, [r4, #16]
 800671e:	444e      	add	r6, r9
 8006720:	6026      	str	r6, [r4, #0]
 8006722:	463e      	mov	r6, r7
 8006724:	6165      	str	r5, [r4, #20]
 8006726:	eba5 0509 	sub.w	r5, r5, r9
 800672a:	60a5      	str	r5, [r4, #8]
 800672c:	42be      	cmp	r6, r7
 800672e:	d900      	bls.n	8006732 <__ssputs_r+0x86>
 8006730:	463e      	mov	r6, r7
 8006732:	4632      	mov	r2, r6
 8006734:	4641      	mov	r1, r8
 8006736:	6820      	ldr	r0, [r4, #0]
 8006738:	f000 fac8 	bl	8006ccc <memmove>
 800673c:	68a3      	ldr	r3, [r4, #8]
 800673e:	2000      	movs	r0, #0
 8006740:	1b9b      	subs	r3, r3, r6
 8006742:	60a3      	str	r3, [r4, #8]
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	4433      	add	r3, r6
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	e7db      	b.n	8006704 <__ssputs_r+0x58>
 800674c:	462a      	mov	r2, r5
 800674e:	f000 fad7 	bl	8006d00 <_realloc_r>
 8006752:	4606      	mov	r6, r0
 8006754:	2800      	cmp	r0, #0
 8006756:	d1e1      	bne.n	800671c <__ssputs_r+0x70>
 8006758:	4650      	mov	r0, sl
 800675a:	6921      	ldr	r1, [r4, #16]
 800675c:	f7ff fe8e 	bl	800647c <_free_r>
 8006760:	e7c7      	b.n	80066f2 <__ssputs_r+0x46>
	...

08006764 <_svfiprintf_r>:
 8006764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006768:	4698      	mov	r8, r3
 800676a:	898b      	ldrh	r3, [r1, #12]
 800676c:	4607      	mov	r7, r0
 800676e:	061b      	lsls	r3, r3, #24
 8006770:	460d      	mov	r5, r1
 8006772:	4614      	mov	r4, r2
 8006774:	b09d      	sub	sp, #116	; 0x74
 8006776:	d50e      	bpl.n	8006796 <_svfiprintf_r+0x32>
 8006778:	690b      	ldr	r3, [r1, #16]
 800677a:	b963      	cbnz	r3, 8006796 <_svfiprintf_r+0x32>
 800677c:	2140      	movs	r1, #64	; 0x40
 800677e:	f7ff fee5 	bl	800654c <_malloc_r>
 8006782:	6028      	str	r0, [r5, #0]
 8006784:	6128      	str	r0, [r5, #16]
 8006786:	b920      	cbnz	r0, 8006792 <_svfiprintf_r+0x2e>
 8006788:	230c      	movs	r3, #12
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006790:	e0d1      	b.n	8006936 <_svfiprintf_r+0x1d2>
 8006792:	2340      	movs	r3, #64	; 0x40
 8006794:	616b      	str	r3, [r5, #20]
 8006796:	2300      	movs	r3, #0
 8006798:	9309      	str	r3, [sp, #36]	; 0x24
 800679a:	2320      	movs	r3, #32
 800679c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067a0:	2330      	movs	r3, #48	; 0x30
 80067a2:	f04f 0901 	mov.w	r9, #1
 80067a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80067aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006950 <_svfiprintf_r+0x1ec>
 80067ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067b2:	4623      	mov	r3, r4
 80067b4:	469a      	mov	sl, r3
 80067b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067ba:	b10a      	cbz	r2, 80067c0 <_svfiprintf_r+0x5c>
 80067bc:	2a25      	cmp	r2, #37	; 0x25
 80067be:	d1f9      	bne.n	80067b4 <_svfiprintf_r+0x50>
 80067c0:	ebba 0b04 	subs.w	fp, sl, r4
 80067c4:	d00b      	beq.n	80067de <_svfiprintf_r+0x7a>
 80067c6:	465b      	mov	r3, fp
 80067c8:	4622      	mov	r2, r4
 80067ca:	4629      	mov	r1, r5
 80067cc:	4638      	mov	r0, r7
 80067ce:	f7ff ff6d 	bl	80066ac <__ssputs_r>
 80067d2:	3001      	adds	r0, #1
 80067d4:	f000 80aa 	beq.w	800692c <_svfiprintf_r+0x1c8>
 80067d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067da:	445a      	add	r2, fp
 80067dc:	9209      	str	r2, [sp, #36]	; 0x24
 80067de:	f89a 3000 	ldrb.w	r3, [sl]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 80a2 	beq.w	800692c <_svfiprintf_r+0x1c8>
 80067e8:	2300      	movs	r3, #0
 80067ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067f2:	f10a 0a01 	add.w	sl, sl, #1
 80067f6:	9304      	str	r3, [sp, #16]
 80067f8:	9307      	str	r3, [sp, #28]
 80067fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067fe:	931a      	str	r3, [sp, #104]	; 0x68
 8006800:	4654      	mov	r4, sl
 8006802:	2205      	movs	r2, #5
 8006804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006808:	4851      	ldr	r0, [pc, #324]	; (8006950 <_svfiprintf_r+0x1ec>)
 800680a:	f000 fa43 	bl	8006c94 <memchr>
 800680e:	9a04      	ldr	r2, [sp, #16]
 8006810:	b9d8      	cbnz	r0, 800684a <_svfiprintf_r+0xe6>
 8006812:	06d0      	lsls	r0, r2, #27
 8006814:	bf44      	itt	mi
 8006816:	2320      	movmi	r3, #32
 8006818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800681c:	0711      	lsls	r1, r2, #28
 800681e:	bf44      	itt	mi
 8006820:	232b      	movmi	r3, #43	; 0x2b
 8006822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006826:	f89a 3000 	ldrb.w	r3, [sl]
 800682a:	2b2a      	cmp	r3, #42	; 0x2a
 800682c:	d015      	beq.n	800685a <_svfiprintf_r+0xf6>
 800682e:	4654      	mov	r4, sl
 8006830:	2000      	movs	r0, #0
 8006832:	f04f 0c0a 	mov.w	ip, #10
 8006836:	9a07      	ldr	r2, [sp, #28]
 8006838:	4621      	mov	r1, r4
 800683a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800683e:	3b30      	subs	r3, #48	; 0x30
 8006840:	2b09      	cmp	r3, #9
 8006842:	d94e      	bls.n	80068e2 <_svfiprintf_r+0x17e>
 8006844:	b1b0      	cbz	r0, 8006874 <_svfiprintf_r+0x110>
 8006846:	9207      	str	r2, [sp, #28]
 8006848:	e014      	b.n	8006874 <_svfiprintf_r+0x110>
 800684a:	eba0 0308 	sub.w	r3, r0, r8
 800684e:	fa09 f303 	lsl.w	r3, r9, r3
 8006852:	4313      	orrs	r3, r2
 8006854:	46a2      	mov	sl, r4
 8006856:	9304      	str	r3, [sp, #16]
 8006858:	e7d2      	b.n	8006800 <_svfiprintf_r+0x9c>
 800685a:	9b03      	ldr	r3, [sp, #12]
 800685c:	1d19      	adds	r1, r3, #4
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	9103      	str	r1, [sp, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	bfbb      	ittet	lt
 8006866:	425b      	neglt	r3, r3
 8006868:	f042 0202 	orrlt.w	r2, r2, #2
 800686c:	9307      	strge	r3, [sp, #28]
 800686e:	9307      	strlt	r3, [sp, #28]
 8006870:	bfb8      	it	lt
 8006872:	9204      	strlt	r2, [sp, #16]
 8006874:	7823      	ldrb	r3, [r4, #0]
 8006876:	2b2e      	cmp	r3, #46	; 0x2e
 8006878:	d10c      	bne.n	8006894 <_svfiprintf_r+0x130>
 800687a:	7863      	ldrb	r3, [r4, #1]
 800687c:	2b2a      	cmp	r3, #42	; 0x2a
 800687e:	d135      	bne.n	80068ec <_svfiprintf_r+0x188>
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	3402      	adds	r4, #2
 8006884:	1d1a      	adds	r2, r3, #4
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	9203      	str	r2, [sp, #12]
 800688a:	2b00      	cmp	r3, #0
 800688c:	bfb8      	it	lt
 800688e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006892:	9305      	str	r3, [sp, #20]
 8006894:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006954 <_svfiprintf_r+0x1f0>
 8006898:	2203      	movs	r2, #3
 800689a:	4650      	mov	r0, sl
 800689c:	7821      	ldrb	r1, [r4, #0]
 800689e:	f000 f9f9 	bl	8006c94 <memchr>
 80068a2:	b140      	cbz	r0, 80068b6 <_svfiprintf_r+0x152>
 80068a4:	2340      	movs	r3, #64	; 0x40
 80068a6:	eba0 000a 	sub.w	r0, r0, sl
 80068aa:	fa03 f000 	lsl.w	r0, r3, r0
 80068ae:	9b04      	ldr	r3, [sp, #16]
 80068b0:	3401      	adds	r4, #1
 80068b2:	4303      	orrs	r3, r0
 80068b4:	9304      	str	r3, [sp, #16]
 80068b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ba:	2206      	movs	r2, #6
 80068bc:	4826      	ldr	r0, [pc, #152]	; (8006958 <_svfiprintf_r+0x1f4>)
 80068be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068c2:	f000 f9e7 	bl	8006c94 <memchr>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d038      	beq.n	800693c <_svfiprintf_r+0x1d8>
 80068ca:	4b24      	ldr	r3, [pc, #144]	; (800695c <_svfiprintf_r+0x1f8>)
 80068cc:	bb1b      	cbnz	r3, 8006916 <_svfiprintf_r+0x1b2>
 80068ce:	9b03      	ldr	r3, [sp, #12]
 80068d0:	3307      	adds	r3, #7
 80068d2:	f023 0307 	bic.w	r3, r3, #7
 80068d6:	3308      	adds	r3, #8
 80068d8:	9303      	str	r3, [sp, #12]
 80068da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068dc:	4433      	add	r3, r6
 80068de:	9309      	str	r3, [sp, #36]	; 0x24
 80068e0:	e767      	b.n	80067b2 <_svfiprintf_r+0x4e>
 80068e2:	460c      	mov	r4, r1
 80068e4:	2001      	movs	r0, #1
 80068e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80068ea:	e7a5      	b.n	8006838 <_svfiprintf_r+0xd4>
 80068ec:	2300      	movs	r3, #0
 80068ee:	f04f 0c0a 	mov.w	ip, #10
 80068f2:	4619      	mov	r1, r3
 80068f4:	3401      	adds	r4, #1
 80068f6:	9305      	str	r3, [sp, #20]
 80068f8:	4620      	mov	r0, r4
 80068fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068fe:	3a30      	subs	r2, #48	; 0x30
 8006900:	2a09      	cmp	r2, #9
 8006902:	d903      	bls.n	800690c <_svfiprintf_r+0x1a8>
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0c5      	beq.n	8006894 <_svfiprintf_r+0x130>
 8006908:	9105      	str	r1, [sp, #20]
 800690a:	e7c3      	b.n	8006894 <_svfiprintf_r+0x130>
 800690c:	4604      	mov	r4, r0
 800690e:	2301      	movs	r3, #1
 8006910:	fb0c 2101 	mla	r1, ip, r1, r2
 8006914:	e7f0      	b.n	80068f8 <_svfiprintf_r+0x194>
 8006916:	ab03      	add	r3, sp, #12
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	462a      	mov	r2, r5
 800691c:	4638      	mov	r0, r7
 800691e:	4b10      	ldr	r3, [pc, #64]	; (8006960 <_svfiprintf_r+0x1fc>)
 8006920:	a904      	add	r1, sp, #16
 8006922:	f3af 8000 	nop.w
 8006926:	1c42      	adds	r2, r0, #1
 8006928:	4606      	mov	r6, r0
 800692a:	d1d6      	bne.n	80068da <_svfiprintf_r+0x176>
 800692c:	89ab      	ldrh	r3, [r5, #12]
 800692e:	065b      	lsls	r3, r3, #25
 8006930:	f53f af2c 	bmi.w	800678c <_svfiprintf_r+0x28>
 8006934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006936:	b01d      	add	sp, #116	; 0x74
 8006938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800693c:	ab03      	add	r3, sp, #12
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	462a      	mov	r2, r5
 8006942:	4638      	mov	r0, r7
 8006944:	4b06      	ldr	r3, [pc, #24]	; (8006960 <_svfiprintf_r+0x1fc>)
 8006946:	a904      	add	r1, sp, #16
 8006948:	f000 f87c 	bl	8006a44 <_printf_i>
 800694c:	e7eb      	b.n	8006926 <_svfiprintf_r+0x1c2>
 800694e:	bf00      	nop
 8006950:	08006de8 	.word	0x08006de8
 8006954:	08006dee 	.word	0x08006dee
 8006958:	08006df2 	.word	0x08006df2
 800695c:	00000000 	.word	0x00000000
 8006960:	080066ad 	.word	0x080066ad

08006964 <_printf_common>:
 8006964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006968:	4616      	mov	r6, r2
 800696a:	4699      	mov	r9, r3
 800696c:	688a      	ldr	r2, [r1, #8]
 800696e:	690b      	ldr	r3, [r1, #16]
 8006970:	4607      	mov	r7, r0
 8006972:	4293      	cmp	r3, r2
 8006974:	bfb8      	it	lt
 8006976:	4613      	movlt	r3, r2
 8006978:	6033      	str	r3, [r6, #0]
 800697a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800697e:	460c      	mov	r4, r1
 8006980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006984:	b10a      	cbz	r2, 800698a <_printf_common+0x26>
 8006986:	3301      	adds	r3, #1
 8006988:	6033      	str	r3, [r6, #0]
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	0699      	lsls	r1, r3, #26
 800698e:	bf42      	ittt	mi
 8006990:	6833      	ldrmi	r3, [r6, #0]
 8006992:	3302      	addmi	r3, #2
 8006994:	6033      	strmi	r3, [r6, #0]
 8006996:	6825      	ldr	r5, [r4, #0]
 8006998:	f015 0506 	ands.w	r5, r5, #6
 800699c:	d106      	bne.n	80069ac <_printf_common+0x48>
 800699e:	f104 0a19 	add.w	sl, r4, #25
 80069a2:	68e3      	ldr	r3, [r4, #12]
 80069a4:	6832      	ldr	r2, [r6, #0]
 80069a6:	1a9b      	subs	r3, r3, r2
 80069a8:	42ab      	cmp	r3, r5
 80069aa:	dc28      	bgt.n	80069fe <_printf_common+0x9a>
 80069ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069b0:	1e13      	subs	r3, r2, #0
 80069b2:	6822      	ldr	r2, [r4, #0]
 80069b4:	bf18      	it	ne
 80069b6:	2301      	movne	r3, #1
 80069b8:	0692      	lsls	r2, r2, #26
 80069ba:	d42d      	bmi.n	8006a18 <_printf_common+0xb4>
 80069bc:	4649      	mov	r1, r9
 80069be:	4638      	mov	r0, r7
 80069c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069c4:	47c0      	blx	r8
 80069c6:	3001      	adds	r0, #1
 80069c8:	d020      	beq.n	8006a0c <_printf_common+0xa8>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	68e5      	ldr	r5, [r4, #12]
 80069ce:	f003 0306 	and.w	r3, r3, #6
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	bf18      	it	ne
 80069d6:	2500      	movne	r5, #0
 80069d8:	6832      	ldr	r2, [r6, #0]
 80069da:	f04f 0600 	mov.w	r6, #0
 80069de:	68a3      	ldr	r3, [r4, #8]
 80069e0:	bf08      	it	eq
 80069e2:	1aad      	subeq	r5, r5, r2
 80069e4:	6922      	ldr	r2, [r4, #16]
 80069e6:	bf08      	it	eq
 80069e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069ec:	4293      	cmp	r3, r2
 80069ee:	bfc4      	itt	gt
 80069f0:	1a9b      	subgt	r3, r3, r2
 80069f2:	18ed      	addgt	r5, r5, r3
 80069f4:	341a      	adds	r4, #26
 80069f6:	42b5      	cmp	r5, r6
 80069f8:	d11a      	bne.n	8006a30 <_printf_common+0xcc>
 80069fa:	2000      	movs	r0, #0
 80069fc:	e008      	b.n	8006a10 <_printf_common+0xac>
 80069fe:	2301      	movs	r3, #1
 8006a00:	4652      	mov	r2, sl
 8006a02:	4649      	mov	r1, r9
 8006a04:	4638      	mov	r0, r7
 8006a06:	47c0      	blx	r8
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d103      	bne.n	8006a14 <_printf_common+0xb0>
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a14:	3501      	adds	r5, #1
 8006a16:	e7c4      	b.n	80069a2 <_printf_common+0x3e>
 8006a18:	2030      	movs	r0, #48	; 0x30
 8006a1a:	18e1      	adds	r1, r4, r3
 8006a1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a26:	4422      	add	r2, r4
 8006a28:	3302      	adds	r3, #2
 8006a2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a2e:	e7c5      	b.n	80069bc <_printf_common+0x58>
 8006a30:	2301      	movs	r3, #1
 8006a32:	4622      	mov	r2, r4
 8006a34:	4649      	mov	r1, r9
 8006a36:	4638      	mov	r0, r7
 8006a38:	47c0      	blx	r8
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	d0e6      	beq.n	8006a0c <_printf_common+0xa8>
 8006a3e:	3601      	adds	r6, #1
 8006a40:	e7d9      	b.n	80069f6 <_printf_common+0x92>
	...

08006a44 <_printf_i>:
 8006a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a48:	7e0f      	ldrb	r7, [r1, #24]
 8006a4a:	4691      	mov	r9, r2
 8006a4c:	2f78      	cmp	r7, #120	; 0x78
 8006a4e:	4680      	mov	r8, r0
 8006a50:	460c      	mov	r4, r1
 8006a52:	469a      	mov	sl, r3
 8006a54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a5a:	d807      	bhi.n	8006a6c <_printf_i+0x28>
 8006a5c:	2f62      	cmp	r7, #98	; 0x62
 8006a5e:	d80a      	bhi.n	8006a76 <_printf_i+0x32>
 8006a60:	2f00      	cmp	r7, #0
 8006a62:	f000 80d9 	beq.w	8006c18 <_printf_i+0x1d4>
 8006a66:	2f58      	cmp	r7, #88	; 0x58
 8006a68:	f000 80a4 	beq.w	8006bb4 <_printf_i+0x170>
 8006a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a74:	e03a      	b.n	8006aec <_printf_i+0xa8>
 8006a76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a7a:	2b15      	cmp	r3, #21
 8006a7c:	d8f6      	bhi.n	8006a6c <_printf_i+0x28>
 8006a7e:	a101      	add	r1, pc, #4	; (adr r1, 8006a84 <_printf_i+0x40>)
 8006a80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a84:	08006add 	.word	0x08006add
 8006a88:	08006af1 	.word	0x08006af1
 8006a8c:	08006a6d 	.word	0x08006a6d
 8006a90:	08006a6d 	.word	0x08006a6d
 8006a94:	08006a6d 	.word	0x08006a6d
 8006a98:	08006a6d 	.word	0x08006a6d
 8006a9c:	08006af1 	.word	0x08006af1
 8006aa0:	08006a6d 	.word	0x08006a6d
 8006aa4:	08006a6d 	.word	0x08006a6d
 8006aa8:	08006a6d 	.word	0x08006a6d
 8006aac:	08006a6d 	.word	0x08006a6d
 8006ab0:	08006bff 	.word	0x08006bff
 8006ab4:	08006b21 	.word	0x08006b21
 8006ab8:	08006be1 	.word	0x08006be1
 8006abc:	08006a6d 	.word	0x08006a6d
 8006ac0:	08006a6d 	.word	0x08006a6d
 8006ac4:	08006c21 	.word	0x08006c21
 8006ac8:	08006a6d 	.word	0x08006a6d
 8006acc:	08006b21 	.word	0x08006b21
 8006ad0:	08006a6d 	.word	0x08006a6d
 8006ad4:	08006a6d 	.word	0x08006a6d
 8006ad8:	08006be9 	.word	0x08006be9
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	1d1a      	adds	r2, r3, #4
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	602a      	str	r2, [r5, #0]
 8006ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006aec:	2301      	movs	r3, #1
 8006aee:	e0a4      	b.n	8006c3a <_printf_i+0x1f6>
 8006af0:	6820      	ldr	r0, [r4, #0]
 8006af2:	6829      	ldr	r1, [r5, #0]
 8006af4:	0606      	lsls	r6, r0, #24
 8006af6:	f101 0304 	add.w	r3, r1, #4
 8006afa:	d50a      	bpl.n	8006b12 <_printf_i+0xce>
 8006afc:	680e      	ldr	r6, [r1, #0]
 8006afe:	602b      	str	r3, [r5, #0]
 8006b00:	2e00      	cmp	r6, #0
 8006b02:	da03      	bge.n	8006b0c <_printf_i+0xc8>
 8006b04:	232d      	movs	r3, #45	; 0x2d
 8006b06:	4276      	negs	r6, r6
 8006b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b0c:	230a      	movs	r3, #10
 8006b0e:	485e      	ldr	r0, [pc, #376]	; (8006c88 <_printf_i+0x244>)
 8006b10:	e019      	b.n	8006b46 <_printf_i+0x102>
 8006b12:	680e      	ldr	r6, [r1, #0]
 8006b14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b18:	602b      	str	r3, [r5, #0]
 8006b1a:	bf18      	it	ne
 8006b1c:	b236      	sxthne	r6, r6
 8006b1e:	e7ef      	b.n	8006b00 <_printf_i+0xbc>
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	6820      	ldr	r0, [r4, #0]
 8006b24:	1d19      	adds	r1, r3, #4
 8006b26:	6029      	str	r1, [r5, #0]
 8006b28:	0601      	lsls	r1, r0, #24
 8006b2a:	d501      	bpl.n	8006b30 <_printf_i+0xec>
 8006b2c:	681e      	ldr	r6, [r3, #0]
 8006b2e:	e002      	b.n	8006b36 <_printf_i+0xf2>
 8006b30:	0646      	lsls	r6, r0, #25
 8006b32:	d5fb      	bpl.n	8006b2c <_printf_i+0xe8>
 8006b34:	881e      	ldrh	r6, [r3, #0]
 8006b36:	2f6f      	cmp	r7, #111	; 0x6f
 8006b38:	bf0c      	ite	eq
 8006b3a:	2308      	moveq	r3, #8
 8006b3c:	230a      	movne	r3, #10
 8006b3e:	4852      	ldr	r0, [pc, #328]	; (8006c88 <_printf_i+0x244>)
 8006b40:	2100      	movs	r1, #0
 8006b42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b46:	6865      	ldr	r5, [r4, #4]
 8006b48:	2d00      	cmp	r5, #0
 8006b4a:	bfa8      	it	ge
 8006b4c:	6821      	ldrge	r1, [r4, #0]
 8006b4e:	60a5      	str	r5, [r4, #8]
 8006b50:	bfa4      	itt	ge
 8006b52:	f021 0104 	bicge.w	r1, r1, #4
 8006b56:	6021      	strge	r1, [r4, #0]
 8006b58:	b90e      	cbnz	r6, 8006b5e <_printf_i+0x11a>
 8006b5a:	2d00      	cmp	r5, #0
 8006b5c:	d04d      	beq.n	8006bfa <_printf_i+0x1b6>
 8006b5e:	4615      	mov	r5, r2
 8006b60:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b64:	fb03 6711 	mls	r7, r3, r1, r6
 8006b68:	5dc7      	ldrb	r7, [r0, r7]
 8006b6a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b6e:	4637      	mov	r7, r6
 8006b70:	42bb      	cmp	r3, r7
 8006b72:	460e      	mov	r6, r1
 8006b74:	d9f4      	bls.n	8006b60 <_printf_i+0x11c>
 8006b76:	2b08      	cmp	r3, #8
 8006b78:	d10b      	bne.n	8006b92 <_printf_i+0x14e>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	07de      	lsls	r6, r3, #31
 8006b7e:	d508      	bpl.n	8006b92 <_printf_i+0x14e>
 8006b80:	6923      	ldr	r3, [r4, #16]
 8006b82:	6861      	ldr	r1, [r4, #4]
 8006b84:	4299      	cmp	r1, r3
 8006b86:	bfde      	ittt	le
 8006b88:	2330      	movle	r3, #48	; 0x30
 8006b8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b8e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006b92:	1b52      	subs	r2, r2, r5
 8006b94:	6122      	str	r2, [r4, #16]
 8006b96:	464b      	mov	r3, r9
 8006b98:	4621      	mov	r1, r4
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	f8cd a000 	str.w	sl, [sp]
 8006ba0:	aa03      	add	r2, sp, #12
 8006ba2:	f7ff fedf 	bl	8006964 <_printf_common>
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	d14c      	bne.n	8006c44 <_printf_i+0x200>
 8006baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bae:	b004      	add	sp, #16
 8006bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb4:	4834      	ldr	r0, [pc, #208]	; (8006c88 <_printf_i+0x244>)
 8006bb6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006bba:	6829      	ldr	r1, [r5, #0]
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	f851 6b04 	ldr.w	r6, [r1], #4
 8006bc2:	6029      	str	r1, [r5, #0]
 8006bc4:	061d      	lsls	r5, r3, #24
 8006bc6:	d514      	bpl.n	8006bf2 <_printf_i+0x1ae>
 8006bc8:	07df      	lsls	r7, r3, #31
 8006bca:	bf44      	itt	mi
 8006bcc:	f043 0320 	orrmi.w	r3, r3, #32
 8006bd0:	6023      	strmi	r3, [r4, #0]
 8006bd2:	b91e      	cbnz	r6, 8006bdc <_printf_i+0x198>
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	f023 0320 	bic.w	r3, r3, #32
 8006bda:	6023      	str	r3, [r4, #0]
 8006bdc:	2310      	movs	r3, #16
 8006bde:	e7af      	b.n	8006b40 <_printf_i+0xfc>
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	f043 0320 	orr.w	r3, r3, #32
 8006be6:	6023      	str	r3, [r4, #0]
 8006be8:	2378      	movs	r3, #120	; 0x78
 8006bea:	4828      	ldr	r0, [pc, #160]	; (8006c8c <_printf_i+0x248>)
 8006bec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bf0:	e7e3      	b.n	8006bba <_printf_i+0x176>
 8006bf2:	0659      	lsls	r1, r3, #25
 8006bf4:	bf48      	it	mi
 8006bf6:	b2b6      	uxthmi	r6, r6
 8006bf8:	e7e6      	b.n	8006bc8 <_printf_i+0x184>
 8006bfa:	4615      	mov	r5, r2
 8006bfc:	e7bb      	b.n	8006b76 <_printf_i+0x132>
 8006bfe:	682b      	ldr	r3, [r5, #0]
 8006c00:	6826      	ldr	r6, [r4, #0]
 8006c02:	1d18      	adds	r0, r3, #4
 8006c04:	6961      	ldr	r1, [r4, #20]
 8006c06:	6028      	str	r0, [r5, #0]
 8006c08:	0635      	lsls	r5, r6, #24
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	d501      	bpl.n	8006c12 <_printf_i+0x1ce>
 8006c0e:	6019      	str	r1, [r3, #0]
 8006c10:	e002      	b.n	8006c18 <_printf_i+0x1d4>
 8006c12:	0670      	lsls	r0, r6, #25
 8006c14:	d5fb      	bpl.n	8006c0e <_printf_i+0x1ca>
 8006c16:	8019      	strh	r1, [r3, #0]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	4615      	mov	r5, r2
 8006c1c:	6123      	str	r3, [r4, #16]
 8006c1e:	e7ba      	b.n	8006b96 <_printf_i+0x152>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	2100      	movs	r1, #0
 8006c24:	1d1a      	adds	r2, r3, #4
 8006c26:	602a      	str	r2, [r5, #0]
 8006c28:	681d      	ldr	r5, [r3, #0]
 8006c2a:	6862      	ldr	r2, [r4, #4]
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	f000 f831 	bl	8006c94 <memchr>
 8006c32:	b108      	cbz	r0, 8006c38 <_printf_i+0x1f4>
 8006c34:	1b40      	subs	r0, r0, r5
 8006c36:	6060      	str	r0, [r4, #4]
 8006c38:	6863      	ldr	r3, [r4, #4]
 8006c3a:	6123      	str	r3, [r4, #16]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c42:	e7a8      	b.n	8006b96 <_printf_i+0x152>
 8006c44:	462a      	mov	r2, r5
 8006c46:	4649      	mov	r1, r9
 8006c48:	4640      	mov	r0, r8
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	47d0      	blx	sl
 8006c4e:	3001      	adds	r0, #1
 8006c50:	d0ab      	beq.n	8006baa <_printf_i+0x166>
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	079b      	lsls	r3, r3, #30
 8006c56:	d413      	bmi.n	8006c80 <_printf_i+0x23c>
 8006c58:	68e0      	ldr	r0, [r4, #12]
 8006c5a:	9b03      	ldr	r3, [sp, #12]
 8006c5c:	4298      	cmp	r0, r3
 8006c5e:	bfb8      	it	lt
 8006c60:	4618      	movlt	r0, r3
 8006c62:	e7a4      	b.n	8006bae <_printf_i+0x16a>
 8006c64:	2301      	movs	r3, #1
 8006c66:	4632      	mov	r2, r6
 8006c68:	4649      	mov	r1, r9
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	47d0      	blx	sl
 8006c6e:	3001      	adds	r0, #1
 8006c70:	d09b      	beq.n	8006baa <_printf_i+0x166>
 8006c72:	3501      	adds	r5, #1
 8006c74:	68e3      	ldr	r3, [r4, #12]
 8006c76:	9903      	ldr	r1, [sp, #12]
 8006c78:	1a5b      	subs	r3, r3, r1
 8006c7a:	42ab      	cmp	r3, r5
 8006c7c:	dcf2      	bgt.n	8006c64 <_printf_i+0x220>
 8006c7e:	e7eb      	b.n	8006c58 <_printf_i+0x214>
 8006c80:	2500      	movs	r5, #0
 8006c82:	f104 0619 	add.w	r6, r4, #25
 8006c86:	e7f5      	b.n	8006c74 <_printf_i+0x230>
 8006c88:	08006df9 	.word	0x08006df9
 8006c8c:	08006e0a 	.word	0x08006e0a

08006c90 <__retarget_lock_acquire_recursive>:
 8006c90:	4770      	bx	lr

08006c92 <__retarget_lock_release_recursive>:
 8006c92:	4770      	bx	lr

08006c94 <memchr>:
 8006c94:	4603      	mov	r3, r0
 8006c96:	b510      	push	{r4, lr}
 8006c98:	b2c9      	uxtb	r1, r1
 8006c9a:	4402      	add	r2, r0
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	d101      	bne.n	8006ca6 <memchr+0x12>
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	e003      	b.n	8006cae <memchr+0x1a>
 8006ca6:	7804      	ldrb	r4, [r0, #0]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	428c      	cmp	r4, r1
 8006cac:	d1f6      	bne.n	8006c9c <memchr+0x8>
 8006cae:	bd10      	pop	{r4, pc}

08006cb0 <memcpy>:
 8006cb0:	440a      	add	r2, r1
 8006cb2:	4291      	cmp	r1, r2
 8006cb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006cb8:	d100      	bne.n	8006cbc <memcpy+0xc>
 8006cba:	4770      	bx	lr
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cc2:	4291      	cmp	r1, r2
 8006cc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cc8:	d1f9      	bne.n	8006cbe <memcpy+0xe>
 8006cca:	bd10      	pop	{r4, pc}

08006ccc <memmove>:
 8006ccc:	4288      	cmp	r0, r1
 8006cce:	b510      	push	{r4, lr}
 8006cd0:	eb01 0402 	add.w	r4, r1, r2
 8006cd4:	d902      	bls.n	8006cdc <memmove+0x10>
 8006cd6:	4284      	cmp	r4, r0
 8006cd8:	4623      	mov	r3, r4
 8006cda:	d807      	bhi.n	8006cec <memmove+0x20>
 8006cdc:	1e43      	subs	r3, r0, #1
 8006cde:	42a1      	cmp	r1, r4
 8006ce0:	d008      	beq.n	8006cf4 <memmove+0x28>
 8006ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cea:	e7f8      	b.n	8006cde <memmove+0x12>
 8006cec:	4601      	mov	r1, r0
 8006cee:	4402      	add	r2, r0
 8006cf0:	428a      	cmp	r2, r1
 8006cf2:	d100      	bne.n	8006cf6 <memmove+0x2a>
 8006cf4:	bd10      	pop	{r4, pc}
 8006cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cfe:	e7f7      	b.n	8006cf0 <memmove+0x24>

08006d00 <_realloc_r>:
 8006d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d04:	4680      	mov	r8, r0
 8006d06:	4614      	mov	r4, r2
 8006d08:	460e      	mov	r6, r1
 8006d0a:	b921      	cbnz	r1, 8006d16 <_realloc_r+0x16>
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d12:	f7ff bc1b 	b.w	800654c <_malloc_r>
 8006d16:	b92a      	cbnz	r2, 8006d24 <_realloc_r+0x24>
 8006d18:	f7ff fbb0 	bl	800647c <_free_r>
 8006d1c:	4625      	mov	r5, r4
 8006d1e:	4628      	mov	r0, r5
 8006d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d24:	f000 f81b 	bl	8006d5e <_malloc_usable_size_r>
 8006d28:	4284      	cmp	r4, r0
 8006d2a:	4607      	mov	r7, r0
 8006d2c:	d802      	bhi.n	8006d34 <_realloc_r+0x34>
 8006d2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d32:	d812      	bhi.n	8006d5a <_realloc_r+0x5a>
 8006d34:	4621      	mov	r1, r4
 8006d36:	4640      	mov	r0, r8
 8006d38:	f7ff fc08 	bl	800654c <_malloc_r>
 8006d3c:	4605      	mov	r5, r0
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d0ed      	beq.n	8006d1e <_realloc_r+0x1e>
 8006d42:	42bc      	cmp	r4, r7
 8006d44:	4622      	mov	r2, r4
 8006d46:	4631      	mov	r1, r6
 8006d48:	bf28      	it	cs
 8006d4a:	463a      	movcs	r2, r7
 8006d4c:	f7ff ffb0 	bl	8006cb0 <memcpy>
 8006d50:	4631      	mov	r1, r6
 8006d52:	4640      	mov	r0, r8
 8006d54:	f7ff fb92 	bl	800647c <_free_r>
 8006d58:	e7e1      	b.n	8006d1e <_realloc_r+0x1e>
 8006d5a:	4635      	mov	r5, r6
 8006d5c:	e7df      	b.n	8006d1e <_realloc_r+0x1e>

08006d5e <_malloc_usable_size_r>:
 8006d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d62:	1f18      	subs	r0, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	bfbc      	itt	lt
 8006d68:	580b      	ldrlt	r3, [r1, r0]
 8006d6a:	18c0      	addlt	r0, r0, r3
 8006d6c:	4770      	bx	lr
	...

08006d70 <_init>:
 8006d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d72:	bf00      	nop
 8006d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d76:	bc08      	pop	{r3}
 8006d78:	469e      	mov	lr, r3
 8006d7a:	4770      	bx	lr

08006d7c <_fini>:
 8006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7e:	bf00      	nop
 8006d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d82:	bc08      	pop	{r3}
 8006d84:	469e      	mov	lr, r3
 8006d86:	4770      	bx	lr
