
test_dmaGPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050ac  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005394  08005394  00015394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08005398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e4  24000010  080053a8  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240000f4  080053a8  000200f4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000dde1  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001b30  00000000  00000000  0002de1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000c60  00000000  00000000  0002f950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000b98  00000000  00000000  000305b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003153a  00000000  00000000  00031148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000f760  00000000  00000000  00062682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014386f  00000000  00000000  00071de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001b5651  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000033e0  00000000  00000000  001b56a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08005360 	.word	0x08005360

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08005360 	.word	0x08005360

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000310:	b084      	sub	sp, #16
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000314:	f000 fc8a 	bl	8000c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000318:	f000 f870 	bl	80003fc <SystemClock_Config>
//  MX_TIM1_Init();

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031c:	f000 f9aa 	bl	8000674 <MX_GPIO_Init>
  MX_DMA_Init();
 8000320:	f000 f988 	bl	8000634 <MX_DMA_Init>
  MX_TIM1_Init();
 8000324:	f000 f8da 	bl	80004dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  int memSize = 16;
 8000328:	2310      	movs	r3, #16
 800032a:	60bb      	str	r3, [r7, #8]
  uint32_t memToGpioData[memSize];
 800032c:	68b9      	ldr	r1, [r7, #8]
 800032e:	1e4b      	subs	r3, r1, #1
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	460a      	mov	r2, r1
 8000334:	2300      	movs	r3, #0
 8000336:	4690      	mov	r8, r2
 8000338:	4699      	mov	r9, r3
 800033a:	f04f 0200 	mov.w	r2, #0
 800033e:	f04f 0300 	mov.w	r3, #0
 8000342:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000346:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800034a:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800034e:	460a      	mov	r2, r1
 8000350:	2300      	movs	r3, #0
 8000352:	4614      	mov	r4, r2
 8000354:	461d      	mov	r5, r3
 8000356:	f04f 0200 	mov.w	r2, #0
 800035a:	f04f 0300 	mov.w	r3, #0
 800035e:	016b      	lsls	r3, r5, #5
 8000360:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000364:	0162      	lsls	r2, r4, #5
 8000366:	460b      	mov	r3, r1
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	3307      	adds	r3, #7
 800036c:	08db      	lsrs	r3, r3, #3
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	ebad 0d03 	sub.w	sp, sp, r3
 8000374:	466b      	mov	r3, sp
 8000376:	3303      	adds	r3, #3
 8000378:	089b      	lsrs	r3, r3, #2
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	603b      	str	r3, [r7, #0]
   for(int i=0;i<memSize;i++)
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	e007      	b.n	8000394 <main+0x88>
     memToGpioData[i]=0;
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	2100      	movs	r1, #0
 800038a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(int i=0;i<memSize;i++)
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	3301      	adds	r3, #1
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fa      	ldr	r2, [r7, #12]
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	429a      	cmp	r2, r3
 800039a:	dbf3      	blt.n	8000384 <main+0x78>

   memToGpioData[ 0] = 0x00000001;
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	2201      	movs	r2, #1
 80003a0:	601a      	str	r2, [r3, #0]
   memToGpioData[ 2] = 0x00010020;
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	4a0f      	ldr	r2, [pc, #60]	; (80003e4 <main+0xd8>)
 80003a6:	609a      	str	r2, [r3, #8]
   memToGpioData[ 9] = 0x00200040;
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	4a0f      	ldr	r2, [pc, #60]	; (80003e8 <main+0xdc>)
 80003ac:	625a      	str	r2, [r3, #36]	; 0x24
   memToGpioData[13] = 0x00400000;
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80003b4:	635a      	str	r2, [r3, #52]	; 0x34



   // DMA, circular memory-to-peripheral mode, full word (32 bit) transfer
   HAL_DMA_Start(&hdma_tim1_up,  (uint32_t)memToGpioData, (uint32_t)&(GPIOA->BSRR), memSize);
 80003b6:	6839      	ldr	r1, [r7, #0]
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	4a0c      	ldr	r2, [pc, #48]	; (80003ec <main+0xe0>)
 80003bc:	480c      	ldr	r0, [pc, #48]	; (80003f0 <main+0xe4>)
 80003be:	f001 f955 	bl	800166c <HAL_DMA_Start>
   HAL_TIM_Base_Start(&htim1);
 80003c2:	480c      	ldr	r0, [pc, #48]	; (80003f4 <main+0xe8>)
 80003c4:	f003 feb6 	bl	8004134 <HAL_TIM_Base_Start>
   HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 80003c8:	2100      	movs	r1, #0
 80003ca:	480a      	ldr	r0, [pc, #40]	; (80003f4 <main+0xe8>)
 80003cc:	f003 ff92 	bl	80042f4 <HAL_TIM_OC_Start>
   TIM1->DIER |= (1 << 8);   // set UDE bit (update dma request enable)
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <main+0xec>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <main+0xec>)
 80003d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003da:	60d3      	str	r3, [r2, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(100);
 80003dc:	2064      	movs	r0, #100	; 0x64
 80003de:	f000 fcb7 	bl	8000d50 <HAL_Delay>
 80003e2:	e7fb      	b.n	80003dc <main+0xd0>
 80003e4:	00010020 	.word	0x00010020
 80003e8:	00200040 	.word	0x00200040
 80003ec:	58020018 	.word	0x58020018
 80003f0:	24000078 	.word	0x24000078
 80003f4:	2400002c 	.word	0x2400002c
 80003f8:	40010000 	.word	0x40010000

080003fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b09c      	sub	sp, #112	; 0x70
 8000400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000406:	224c      	movs	r2, #76	; 0x4c
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f004 ffa0 	bl	8005350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2220      	movs	r2, #32
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f004 ff9a 	bl	8005350 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800041c:	2002      	movs	r0, #2
 800041e:	f002 ff19 	bl	8003254 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000422:	2300      	movs	r3, #0
 8000424:	603b      	str	r3, [r7, #0]
 8000426:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <SystemClock_Config+0xdc>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	4a2b      	ldr	r2, [pc, #172]	; (80004d8 <SystemClock_Config+0xdc>)
 800042c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000430:	6193      	str	r3, [r2, #24]
 8000432:	4b29      	ldr	r3, [pc, #164]	; (80004d8 <SystemClock_Config+0xdc>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800043a:	603b      	str	r3, [r7, #0]
 800043c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800043e:	bf00      	nop
 8000440:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <SystemClock_Config+0xdc>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800044c:	d1f8      	bne.n	8000440 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044e:	2302      	movs	r3, #2
 8000450:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000452:	2301      	movs	r3, #1
 8000454:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000456:	2340      	movs	r3, #64	; 0x40
 8000458:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045a:	2302      	movs	r3, #2
 800045c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800045e:	2300      	movs	r3, #0
 8000460:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000462:	2304      	movs	r3, #4
 8000464:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 33;
 8000466:	2321      	movs	r3, #33	; 0x21
 8000468:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800046a:	2301      	movs	r3, #1
 800046c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800046e:	2304      	movs	r3, #4
 8000470:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000472:	2302      	movs	r3, #2
 8000474:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000476:	230c      	movs	r3, #12
 8000478:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800047a:	2300      	movs	r3, #0
 800047c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800047e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000482:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000488:	4618      	mov	r0, r3
 800048a:	f002 ff1d 	bl	80032c8 <HAL_RCC_OscConfig>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000494:	f000 fa42 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000498:	233f      	movs	r3, #63	; 0x3f
 800049a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049c:	2303      	movs	r3, #3
 800049e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004a4:	2308      	movs	r3, #8
 80004a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004a8:	2340      	movs	r3, #64	; 0x40
 80004aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004ac:	2340      	movs	r3, #64	; 0x40
 80004ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004b6:	2340      	movs	r3, #64	; 0x40
 80004b8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2103      	movs	r1, #3
 80004be:	4618      	mov	r0, r3
 80004c0:	f003 fab0 	bl	8003a24 <HAL_RCC_ClockConfig>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80004ca:	f000 fa27 	bl	800091c <Error_Handler>
  }
}
 80004ce:	bf00      	nop
 80004d0:	3770      	adds	r7, #112	; 0x70
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	58024800 	.word	0x58024800

080004dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b09c      	sub	sp, #112	; 0x70
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]
 800050c:	615a      	str	r2, [r3, #20]
 800050e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2234      	movs	r2, #52	; 0x34
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f004 ff1a 	bl	8005350 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800051c:	4b43      	ldr	r3, [pc, #268]	; (800062c <MX_TIM1_Init+0x150>)
 800051e:	4a44      	ldr	r2, [pc, #272]	; (8000630 <MX_TIM1_Init+0x154>)
 8000520:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000522:	4b42      	ldr	r3, [pc, #264]	; (800062c <MX_TIM1_Init+0x150>)
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000528:	4b40      	ldr	r3, [pc, #256]	; (800062c <MX_TIM1_Init+0x150>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR;
 800052e:	4b3f      	ldr	r3, [pc, #252]	; (800062c <MX_TIM1_Init+0x150>)
 8000530:	2211      	movs	r2, #17
 8000532:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000534:	4b3d      	ldr	r3, [pc, #244]	; (800062c <MX_TIM1_Init+0x150>)
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800053a:	4b3c      	ldr	r3, [pc, #240]	; (800062c <MX_TIM1_Init+0x150>)
 800053c:	2200      	movs	r2, #0
 800053e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000540:	4b3a      	ldr	r3, [pc, #232]	; (800062c <MX_TIM1_Init+0x150>)
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000546:	4839      	ldr	r0, [pc, #228]	; (800062c <MX_TIM1_Init+0x150>)
 8000548:	f003 fd9c 	bl	8004084 <HAL_TIM_Base_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000552:	f000 f9e3 	bl	800091c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800055a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800055c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000560:	4619      	mov	r1, r3
 8000562:	4832      	ldr	r0, [pc, #200]	; (800062c <MX_TIM1_Init+0x150>)
 8000564:	f004 f85c 	bl	8004620 <HAL_TIM_ConfigClockSource>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800056e:	f000 f9d5 	bl	800091c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000572:	482e      	ldr	r0, [pc, #184]	; (800062c <MX_TIM1_Init+0x150>)
 8000574:	f003 fe5c 	bl	8004230 <HAL_TIM_OC_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800057e:	f000 f9cd 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000582:	2320      	movs	r3, #32
 8000584:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000586:	2300      	movs	r3, #0
 8000588:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800058a:	2300      	movs	r3, #0
 800058c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800058e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000592:	4619      	mov	r1, r3
 8000594:	4825      	ldr	r0, [pc, #148]	; (800062c <MX_TIM1_Init+0x150>)
 8000596:	f004 fd7b 	bl	8005090 <HAL_TIMEx_MasterConfigSynchronization>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80005a0:	f000 f9bc 	bl	800091c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80005a4:	2330      	movs	r3, #48	; 0x30
 80005a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005ac:	2300      	movs	r3, #0
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005b0:	2300      	movs	r3, #0
 80005b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005b8:	2300      	movs	r3, #0
 80005ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005bc:	2300      	movs	r3, #0
 80005be:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005c4:	2200      	movs	r2, #0
 80005c6:	4619      	mov	r1, r3
 80005c8:	4818      	ldr	r0, [pc, #96]	; (800062c <MX_TIM1_Init+0x150>)
 80005ca:	f003 ffaf 	bl	800452c <HAL_TIM_OC_ConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80005d4:	f000 f9a2 	bl	800091c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000604:	2300      	movs	r3, #0
 8000606:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4619      	mov	r1, r3
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <MX_TIM1_Init+0x150>)
 800060e:	f004 fddb 	bl	80051c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000618:	f000 f980 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <MX_TIM1_Init+0x150>)
 800061e:	f000 f9f3 	bl	8000a08 <HAL_TIM_MspPostInit>

}
 8000622:	bf00      	nop
 8000624:	3770      	adds	r7, #112	; 0x70
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	2400002c 	.word	0x2400002c
 8000630:	40010000 	.word	0x40010000

08000634 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <MX_DMA_Init+0x3c>)
 800063c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000640:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <MX_DMA_Init+0x3c>)
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_DMA_Init+0x3c>)
 800064c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2100      	movs	r1, #0
 800065c:	200b      	movs	r0, #11
 800065e:	f000 fc76 	bl	8000f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000662:	200b      	movs	r0, #11
 8000664:	f000 fc8d 	bl	8000f82 <HAL_NVIC_EnableIRQ>

}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	58024400 	.word	0x58024400

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08c      	sub	sp, #48	; 0x30
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b9d      	ldr	r3, [pc, #628]	; (8000900 <MX_GPIO_Init+0x28c>)
 800068c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000690:	4a9b      	ldr	r2, [pc, #620]	; (8000900 <MX_GPIO_Init+0x28c>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800069a:	4b99      	ldr	r3, [pc, #612]	; (8000900 <MX_GPIO_Init+0x28c>)
 800069c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a8:	4b95      	ldr	r3, [pc, #596]	; (8000900 <MX_GPIO_Init+0x28c>)
 80006aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ae:	4a94      	ldr	r2, [pc, #592]	; (8000900 <MX_GPIO_Init+0x28c>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b8:	4b91      	ldr	r3, [pc, #580]	; (8000900 <MX_GPIO_Init+0x28c>)
 80006ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b8e      	ldr	r3, [pc, #568]	; (8000900 <MX_GPIO_Init+0x28c>)
 80006c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006cc:	4a8c      	ldr	r2, [pc, #560]	; (8000900 <MX_GPIO_Init+0x28c>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d6:	4b8a      	ldr	r3, [pc, #552]	; (8000900 <MX_GPIO_Init+0x28c>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e4:	4b86      	ldr	r3, [pc, #536]	; (8000900 <MX_GPIO_Init+0x28c>)
 80006e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ea:	4a85      	ldr	r2, [pc, #532]	; (8000900 <MX_GPIO_Init+0x28c>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f4:	4b82      	ldr	r3, [pc, #520]	; (8000900 <MX_GPIO_Init+0x28c>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000702:	4b7f      	ldr	r3, [pc, #508]	; (8000900 <MX_GPIO_Init+0x28c>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000708:	4a7d      	ldr	r2, [pc, #500]	; (8000900 <MX_GPIO_Init+0x28c>)
 800070a:	f043 0310 	orr.w	r3, r3, #16
 800070e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000712:	4b7b      	ldr	r3, [pc, #492]	; (8000900 <MX_GPIO_Init+0x28c>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000718:	f003 0310 	and.w	r3, r3, #16
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000720:	4b77      	ldr	r3, [pc, #476]	; (8000900 <MX_GPIO_Init+0x28c>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000726:	4a76      	ldr	r2, [pc, #472]	; (8000900 <MX_GPIO_Init+0x28c>)
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000730:	4b73      	ldr	r3, [pc, #460]	; (8000900 <MX_GPIO_Init+0x28c>)
 8000732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000736:	f003 0308 	and.w	r3, r3, #8
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800073e:	4b70      	ldr	r3, [pc, #448]	; (8000900 <MX_GPIO_Init+0x28c>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a6e      	ldr	r2, [pc, #440]	; (8000900 <MX_GPIO_Init+0x28c>)
 8000746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b6c      	ldr	r3, [pc, #432]	; (8000900 <MX_GPIO_Init+0x28c>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2161      	movs	r1, #97	; 0x61
 8000760:	4868      	ldr	r0, [pc, #416]	; (8000904 <MX_GPIO_Init+0x290>)
 8000762:	f002 fd5d 	bl	8003220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f244 0101 	movw	r1, #16385	; 0x4001
 800076c:	4866      	ldr	r0, [pc, #408]	; (8000908 <MX_GPIO_Init+0x294>)
 800076e:	f002 fd57 	bl	8003220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000778:	4864      	ldr	r0, [pc, #400]	; (800090c <MX_GPIO_Init+0x298>)
 800077a:	f002 fd51 	bl	8003220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2102      	movs	r1, #2
 8000782:	4863      	ldr	r0, [pc, #396]	; (8000910 <MX_GPIO_Init+0x29c>)
 8000784:	f002 fd4c 	bl	8003220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	485d      	ldr	r0, [pc, #372]	; (8000914 <MX_GPIO_Init+0x2a0>)
 800079e:	f002 fb97 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007a2:	2332      	movs	r3, #50	; 0x32
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b2:	230b      	movs	r3, #11
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4855      	ldr	r0, [pc, #340]	; (8000914 <MX_GPIO_Init+0x2a0>)
 80007be:	f002 fb87 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6;
 80007c2:	2361      	movs	r3, #97	; 0x61
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	484a      	ldr	r0, [pc, #296]	; (8000904 <MX_GPIO_Init+0x290>)
 80007da:	f002 fb79 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007de:	2386      	movs	r3, #134	; 0x86
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ee:	230b      	movs	r3, #11
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	4842      	ldr	r0, [pc, #264]	; (8000904 <MX_GPIO_Init+0x290>)
 80007fa:	f002 fb69 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80007fe:	f244 0301 	movw	r3, #16385	; 0x4001
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	483c      	ldr	r0, [pc, #240]	; (8000908 <MX_GPIO_Init+0x294>)
 8000818:	f002 fb5a 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800081c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800082e:	230b      	movs	r3, #11
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4833      	ldr	r0, [pc, #204]	; (8000908 <MX_GPIO_Init+0x294>)
 800083a:	f002 fb49 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800083e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000850:	2307      	movs	r3, #7
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	482c      	ldr	r0, [pc, #176]	; (800090c <MX_GPIO_Init+0x298>)
 800085c:	f002 fb38 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4824      	ldr	r0, [pc, #144]	; (800090c <MX_GPIO_Init+0x298>)
 800087a:	f002 fb29 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000882:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4821      	ldr	r0, [pc, #132]	; (8000918 <MX_GPIO_Init+0x2a4>)
 8000894:	f002 fb1c 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80008aa:	230a      	movs	r3, #10
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4813      	ldr	r0, [pc, #76]	; (8000904 <MX_GPIO_Init+0x290>)
 80008b6:	f002 fb0b 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008cc:	230b      	movs	r3, #11
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4810      	ldr	r0, [pc, #64]	; (8000918 <MX_GPIO_Init+0x2a4>)
 80008d8:	f002 fafa 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80008dc:	2302      	movs	r3, #2
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <MX_GPIO_Init+0x29c>)
 80008f4:	f002 faec 	bl	8002ed0 <HAL_GPIO_Init>

}
 80008f8:	bf00      	nop
 80008fa:	3730      	adds	r7, #48	; 0x30
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	58024400 	.word	0x58024400
 8000904:	58020000 	.word	0x58020000
 8000908:	58020400 	.word	0x58020400
 800090c:	58020c00 	.word	0x58020c00
 8000910:	58021000 	.word	0x58021000
 8000914:	58020800 	.word	0x58020800
 8000918:	58021800 	.word	0x58021800

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <HAL_MspInit+0x30>)
 8000930:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000934:	4a08      	ldr	r2, [pc, #32]	; (8000958 <HAL_MspInit+0x30>)
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_MspInit+0x30>)
 8000940:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000944:	f003 0302 	and.w	r3, r3, #2
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	58024400 	.word	0x58024400

0800095c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a23      	ldr	r2, [pc, #140]	; (80009f8 <HAL_TIM_Base_MspInit+0x9c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d13f      	bne.n	80009ee <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <HAL_TIM_Base_MspInit+0xa0>)
 8000970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000974:	4a21      	ldr	r2, [pc, #132]	; (80009fc <HAL_TIM_Base_MspInit+0xa0>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <HAL_TIM_Base_MspInit+0xa0>)
 8000980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Stream0;
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <HAL_TIM_Base_MspInit+0xa4>)
 800098e:	4a1d      	ldr	r2, [pc, #116]	; (8000a04 <HAL_TIM_Base_MspInit+0xa8>)
 8000990:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <HAL_TIM_Base_MspInit+0xa4>)
 8000994:	220f      	movs	r2, #15
 8000996:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <HAL_TIM_Base_MspInit+0xa4>)
 800099a:	2240      	movs	r2, #64	; 0x40
 800099c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_TIM_Base_MspInit+0xa4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <HAL_TIM_Base_MspInit+0xa4>)
 80009a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009aa:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_TIM_Base_MspInit+0xa4>)
 80009ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009b2:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_TIM_Base_MspInit+0xa4>)
 80009b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ba:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80009bc:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_TIM_Base_MspInit+0xa4>)
 80009be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c2:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_HIGH;
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_TIM_Base_MspInit+0xa4>)
 80009c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009ca:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <HAL_TIM_Base_MspInit+0xa4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80009d2:	480b      	ldr	r0, [pc, #44]	; (8000a00 <HAL_TIM_Base_MspInit+0xa4>)
 80009d4:	f000 faf0 	bl	8000fb8 <HAL_DMA_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 80009de:	f7ff ff9d 	bl	800091c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <HAL_TIM_Base_MspInit+0xa4>)
 80009e6:	621a      	str	r2, [r3, #32]
 80009e8:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <HAL_TIM_Base_MspInit+0xa4>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40010000 	.word	0x40010000
 80009fc:	58024400 	.word	0x58024400
 8000a00:	24000078 	.word	0x24000078
 8000a04:	40020010 	.word	0x40020010

08000a08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a13      	ldr	r2, [pc, #76]	; (8000a74 <HAL_TIM_MspPostInit+0x6c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d11f      	bne.n	8000a6a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <HAL_TIM_MspPostInit+0x70>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a30:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <HAL_TIM_MspPostInit+0x70>)
 8000a32:	f043 0310 	orr.w	r3, r3, #16
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_TIM_MspPostInit+0x70>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	f003 0310 	and.w	r3, r3, #16
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <HAL_TIM_MspPostInit+0x74>)
 8000a66:	f002 fa33 	bl	8002ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3720      	adds	r7, #32
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40010000 	.word	0x40010000
 8000a78:	58024400 	.word	0x58024400
 8000a7c:	58021000 	.word	0x58021000

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <NMI_Handler+0x4>

08000a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler+0x4>

08000a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <MemManage_Handler+0x4>

08000a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <UsageFault_Handler+0x4>

08000a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000acc:	f000 f920 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <DMA1_Stream0_IRQHandler+0x10>)
 8000ada:	f000 fee7 	bl	80018ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	24000078 	.word	0x24000078

08000ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aec:	4b32      	ldr	r3, [pc, #200]	; (8000bb8 <SystemInit+0xd0>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af2:	4a31      	ldr	r2, [pc, #196]	; (8000bb8 <SystemInit+0xd0>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000afc:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <SystemInit+0xd4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f003 030f 	and.w	r3, r3, #15
 8000b04:	2b06      	cmp	r3, #6
 8000b06:	d807      	bhi.n	8000b18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b08:	4b2c      	ldr	r3, [pc, #176]	; (8000bbc <SystemInit+0xd4>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f023 030f 	bic.w	r3, r3, #15
 8000b10:	4a2a      	ldr	r2, [pc, #168]	; (8000bbc <SystemInit+0xd4>)
 8000b12:	f043 0307 	orr.w	r3, r3, #7
 8000b16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <SystemInit+0xd8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <SystemInit+0xd8>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b24:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <SystemInit+0xd8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b2a:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <SystemInit+0xd8>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4924      	ldr	r1, [pc, #144]	; (8000bc0 <SystemInit+0xd8>)
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <SystemInit+0xdc>)
 8000b32:	4013      	ands	r3, r2
 8000b34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <SystemInit+0xd4>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d007      	beq.n	8000b52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <SystemInit+0xd4>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f023 030f 	bic.w	r3, r3, #15
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <SystemInit+0xd4>)
 8000b4c:	f043 0307 	orr.w	r3, r3, #7
 8000b50:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <SystemInit+0xd8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <SystemInit+0xd8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <SystemInit+0xd8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <SystemInit+0xd8>)
 8000b66:	4a18      	ldr	r2, [pc, #96]	; (8000bc8 <SystemInit+0xe0>)
 8000b68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <SystemInit+0xd8>)
 8000b6c:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <SystemInit+0xe4>)
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <SystemInit+0xd8>)
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <SystemInit+0xe8>)
 8000b74:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <SystemInit+0xd8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <SystemInit+0xd8>)
 8000b7e:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <SystemInit+0xe8>)
 8000b80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <SystemInit+0xd8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <SystemInit+0xd8>)
 8000b8a:	4a11      	ldr	r2, [pc, #68]	; (8000bd0 <SystemInit+0xe8>)
 8000b8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <SystemInit+0xd8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <SystemInit+0xd8>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a09      	ldr	r2, [pc, #36]	; (8000bc0 <SystemInit+0xd8>)
 8000b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <SystemInit+0xd8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <SystemInit+0xec>)
 8000ba8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000bac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00
 8000bbc:	52002000 	.word	0x52002000
 8000bc0:	58024400 	.word	0x58024400
 8000bc4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bc8:	02020200 	.word	0x02020200
 8000bcc:	01ff0000 	.word	0x01ff0000
 8000bd0:	01010280 	.word	0x01010280
 8000bd4:	52004000 	.word	0x52004000

08000bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bdc:	f7ff ff84 	bl	8000ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be2:	490d      	ldr	r1, [pc, #52]	; (8000c18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	; (8000c24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c06:	f004 fb7f 	bl	8005308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0a:	f7ff fb7f 	bl	800030c <main>
  bx  lr
 8000c0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c10:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000c14:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c18:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c1c:	08005398 	.word	0x08005398
  ldr r2, =_sbss
 8000c20:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c24:	240000f4 	.word	0x240000f4

08000c28 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC3_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 f980 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c38:	f003 f8aa 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_Init+0x68>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	0a1b      	lsrs	r3, r3, #8
 8000c44:	f003 030f 	and.w	r3, r3, #15
 8000c48:	4913      	ldr	r1, [pc, #76]	; (8000c98 <HAL_Init+0x6c>)
 8000c4a:	5ccb      	ldrb	r3, [r1, r3]
 8000c4c:	f003 031f 	and.w	r3, r3, #31
 8000c50:	fa22 f303 	lsr.w	r3, r2, r3
 8000c54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_Init+0x68>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <HAL_Init+0x6c>)
 8000c60:	5cd3      	ldrb	r3, [r2, r3]
 8000c62:	f003 031f 	and.w	r3, r3, #31
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	fa22 f303 	lsr.w	r3, r2, r3
 8000c6c:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <HAL_Init+0x70>)
 8000c6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c70:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <HAL_Init+0x74>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f000 f814 	bl	8000ca4 <HAL_InitTick>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e002      	b.n	8000c8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c86:	f7ff fe4f 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	58024400 	.word	0x58024400
 8000c98:	08005378 	.word	0x08005378
 8000c9c:	24000004 	.word	0x24000004
 8000ca0:	24000000 	.word	0x24000000

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_InitTick+0x60>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d101      	bne.n	8000cb8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e021      	b.n	8000cfc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <HAL_InitTick+0x64>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_InitTick+0x60>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f965 	bl	8000f9e <HAL_SYSTICK_Config>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00e      	b.n	8000cfc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d80a      	bhi.n	8000cfa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cec:	f000 f92f 	bl	8000f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf0:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <HAL_InitTick+0x68>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e000      	b.n	8000cfc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	2400000c 	.word	0x2400000c
 8000d08:	24000000 	.word	0x24000000
 8000d0c:	24000008 	.word	0x24000008

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	2400000c 	.word	0x2400000c
 8000d34:	240000f0 	.word	0x240000f0

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	240000f0 	.word	0x240000f0

08000d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d58:	f7ff ffee 	bl	8000d38 <HAL_GetTick>
 8000d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d68:	d005      	beq.n	8000d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_Delay+0x44>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d76:	bf00      	nop
 8000d78:	f7ff ffde 	bl	8000d38 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d8f7      	bhi.n	8000d78 <HAL_Delay+0x28>
  {
  }
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2400000c 	.word	0x2400000c

08000d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00
 8000ddc:	05fa0000 	.word	0x05fa0000

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	db0b      	blt.n	8000e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	f003 021f 	and.w	r2, r3, #31
 8000e14:	4907      	ldr	r1, [pc, #28]	; (8000e34 <__NVIC_EnableIRQ+0x38>)
 8000e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e1a:	095b      	lsrs	r3, r3, #5
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000e100 	.word	0xe000e100

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db0a      	blt.n	8000e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	; (8000e84 <__NVIC_SetPriority+0x4c>)
 8000e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e60:	e00a      	b.n	8000e78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4908      	ldr	r1, [pc, #32]	; (8000e88 <__NVIC_SetPriority+0x50>)
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	0112      	lsls	r2, r2, #4
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	440b      	add	r3, r1
 8000e76:	761a      	strb	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf28      	it	cs
 8000eaa:	2304      	movcs	r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d902      	bls.n	8000ebc <NVIC_EncodePriority+0x30>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3b03      	subs	r3, #3
 8000eba:	e000      	b.n	8000ebe <NVIC_EncodePriority+0x32>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
         );
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f04:	d301      	bcc.n	8000f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00f      	b.n	8000f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <SysTick_Config+0x40>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f12:	210f      	movs	r1, #15
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f18:	f7ff ff8e 	bl	8000e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <SysTick_Config+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SysTick_Config+0x40>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010

08000f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff29 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5c:	f7ff ff40 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	6978      	ldr	r0, [r7, #20]
 8000f68:	f7ff ff90 	bl	8000e8c <NVIC_EncodePriority>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff5f 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff33 	bl	8000dfc <__NVIC_EnableIRQ>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffa4 	bl	8000ef4 <SysTick_Config>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000fc0:	f7ff feba 	bl	8000d38 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e314      	b.n	80015fa <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a66      	ldr	r2, [pc, #408]	; (8001170 <HAL_DMA_Init+0x1b8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d04a      	beq.n	8001070 <HAL_DMA_Init+0xb8>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a65      	ldr	r2, [pc, #404]	; (8001174 <HAL_DMA_Init+0x1bc>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d045      	beq.n	8001070 <HAL_DMA_Init+0xb8>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a63      	ldr	r2, [pc, #396]	; (8001178 <HAL_DMA_Init+0x1c0>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d040      	beq.n	8001070 <HAL_DMA_Init+0xb8>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a62      	ldr	r2, [pc, #392]	; (800117c <HAL_DMA_Init+0x1c4>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d03b      	beq.n	8001070 <HAL_DMA_Init+0xb8>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a60      	ldr	r2, [pc, #384]	; (8001180 <HAL_DMA_Init+0x1c8>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d036      	beq.n	8001070 <HAL_DMA_Init+0xb8>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a5f      	ldr	r2, [pc, #380]	; (8001184 <HAL_DMA_Init+0x1cc>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d031      	beq.n	8001070 <HAL_DMA_Init+0xb8>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a5d      	ldr	r2, [pc, #372]	; (8001188 <HAL_DMA_Init+0x1d0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d02c      	beq.n	8001070 <HAL_DMA_Init+0xb8>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a5c      	ldr	r2, [pc, #368]	; (800118c <HAL_DMA_Init+0x1d4>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d027      	beq.n	8001070 <HAL_DMA_Init+0xb8>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a5a      	ldr	r2, [pc, #360]	; (8001190 <HAL_DMA_Init+0x1d8>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d022      	beq.n	8001070 <HAL_DMA_Init+0xb8>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a59      	ldr	r2, [pc, #356]	; (8001194 <HAL_DMA_Init+0x1dc>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d01d      	beq.n	8001070 <HAL_DMA_Init+0xb8>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a57      	ldr	r2, [pc, #348]	; (8001198 <HAL_DMA_Init+0x1e0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d018      	beq.n	8001070 <HAL_DMA_Init+0xb8>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a56      	ldr	r2, [pc, #344]	; (800119c <HAL_DMA_Init+0x1e4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d013      	beq.n	8001070 <HAL_DMA_Init+0xb8>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a54      	ldr	r2, [pc, #336]	; (80011a0 <HAL_DMA_Init+0x1e8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d00e      	beq.n	8001070 <HAL_DMA_Init+0xb8>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a53      	ldr	r2, [pc, #332]	; (80011a4 <HAL_DMA_Init+0x1ec>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d009      	beq.n	8001070 <HAL_DMA_Init+0xb8>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a51      	ldr	r2, [pc, #324]	; (80011a8 <HAL_DMA_Init+0x1f0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d004      	beq.n	8001070 <HAL_DMA_Init+0xb8>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a50      	ldr	r2, [pc, #320]	; (80011ac <HAL_DMA_Init+0x1f4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d101      	bne.n	8001074 <HAL_DMA_Init+0xbc>
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <HAL_DMA_Init+0xbe>
 8001074:	2300      	movs	r3, #0
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 813c 	beq.w	80012f4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2202      	movs	r2, #2
 8001080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a37      	ldr	r2, [pc, #220]	; (8001170 <HAL_DMA_Init+0x1b8>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d04a      	beq.n	800112c <HAL_DMA_Init+0x174>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a36      	ldr	r2, [pc, #216]	; (8001174 <HAL_DMA_Init+0x1bc>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d045      	beq.n	800112c <HAL_DMA_Init+0x174>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a34      	ldr	r2, [pc, #208]	; (8001178 <HAL_DMA_Init+0x1c0>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d040      	beq.n	800112c <HAL_DMA_Init+0x174>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a33      	ldr	r2, [pc, #204]	; (800117c <HAL_DMA_Init+0x1c4>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d03b      	beq.n	800112c <HAL_DMA_Init+0x174>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a31      	ldr	r2, [pc, #196]	; (8001180 <HAL_DMA_Init+0x1c8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d036      	beq.n	800112c <HAL_DMA_Init+0x174>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a30      	ldr	r2, [pc, #192]	; (8001184 <HAL_DMA_Init+0x1cc>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d031      	beq.n	800112c <HAL_DMA_Init+0x174>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a2e      	ldr	r2, [pc, #184]	; (8001188 <HAL_DMA_Init+0x1d0>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d02c      	beq.n	800112c <HAL_DMA_Init+0x174>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a2d      	ldr	r2, [pc, #180]	; (800118c <HAL_DMA_Init+0x1d4>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d027      	beq.n	800112c <HAL_DMA_Init+0x174>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a2b      	ldr	r2, [pc, #172]	; (8001190 <HAL_DMA_Init+0x1d8>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d022      	beq.n	800112c <HAL_DMA_Init+0x174>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a2a      	ldr	r2, [pc, #168]	; (8001194 <HAL_DMA_Init+0x1dc>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d01d      	beq.n	800112c <HAL_DMA_Init+0x174>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a28      	ldr	r2, [pc, #160]	; (8001198 <HAL_DMA_Init+0x1e0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d018      	beq.n	800112c <HAL_DMA_Init+0x174>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a27      	ldr	r2, [pc, #156]	; (800119c <HAL_DMA_Init+0x1e4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d013      	beq.n	800112c <HAL_DMA_Init+0x174>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a25      	ldr	r2, [pc, #148]	; (80011a0 <HAL_DMA_Init+0x1e8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d00e      	beq.n	800112c <HAL_DMA_Init+0x174>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a24      	ldr	r2, [pc, #144]	; (80011a4 <HAL_DMA_Init+0x1ec>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d009      	beq.n	800112c <HAL_DMA_Init+0x174>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a22      	ldr	r2, [pc, #136]	; (80011a8 <HAL_DMA_Init+0x1f0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d004      	beq.n	800112c <HAL_DMA_Init+0x174>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a21      	ldr	r2, [pc, #132]	; (80011ac <HAL_DMA_Init+0x1f4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d108      	bne.n	800113e <HAL_DMA_Init+0x186>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0201 	bic.w	r2, r2, #1
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	e007      	b.n	800114e <HAL_DMA_Init+0x196>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0201 	bic.w	r2, r2, #1
 800114c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800114e:	e02f      	b.n	80011b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001150:	f7ff fdf2 	bl	8000d38 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b05      	cmp	r3, #5
 800115c:	d928      	bls.n	80011b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2220      	movs	r2, #32
 8001162:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2203      	movs	r2, #3
 8001168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e244      	b.n	80015fa <HAL_DMA_Init+0x642>
 8001170:	40020010 	.word	0x40020010
 8001174:	40020028 	.word	0x40020028
 8001178:	40020040 	.word	0x40020040
 800117c:	40020058 	.word	0x40020058
 8001180:	40020070 	.word	0x40020070
 8001184:	40020088 	.word	0x40020088
 8001188:	400200a0 	.word	0x400200a0
 800118c:	400200b8 	.word	0x400200b8
 8001190:	40020410 	.word	0x40020410
 8001194:	40020428 	.word	0x40020428
 8001198:	40020440 	.word	0x40020440
 800119c:	40020458 	.word	0x40020458
 80011a0:	40020470 	.word	0x40020470
 80011a4:	40020488 	.word	0x40020488
 80011a8:	400204a0 	.word	0x400204a0
 80011ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1c8      	bne.n	8001150 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4b84      	ldr	r3, [pc, #528]	; (80013dc <HAL_DMA_Init+0x424>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80011d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	2b04      	cmp	r3, #4
 8001202:	d107      	bne.n	8001214 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	4313      	orrs	r3, r2
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4313      	orrs	r3, r2
 8001212:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b28      	cmp	r3, #40	; 0x28
 800121a:	d903      	bls.n	8001224 <HAL_DMA_Init+0x26c>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b2e      	cmp	r3, #46	; 0x2e
 8001222:	d91f      	bls.n	8001264 <HAL_DMA_Init+0x2ac>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b3e      	cmp	r3, #62	; 0x3e
 800122a:	d903      	bls.n	8001234 <HAL_DMA_Init+0x27c>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b42      	cmp	r3, #66	; 0x42
 8001232:	d917      	bls.n	8001264 <HAL_DMA_Init+0x2ac>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b46      	cmp	r3, #70	; 0x46
 800123a:	d903      	bls.n	8001244 <HAL_DMA_Init+0x28c>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b48      	cmp	r3, #72	; 0x48
 8001242:	d90f      	bls.n	8001264 <HAL_DMA_Init+0x2ac>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b4e      	cmp	r3, #78	; 0x4e
 800124a:	d903      	bls.n	8001254 <HAL_DMA_Init+0x29c>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b52      	cmp	r3, #82	; 0x52
 8001252:	d907      	bls.n	8001264 <HAL_DMA_Init+0x2ac>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b73      	cmp	r3, #115	; 0x73
 800125a:	d905      	bls.n	8001268 <HAL_DMA_Init+0x2b0>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b77      	cmp	r3, #119	; 0x77
 8001262:	d801      	bhi.n	8001268 <HAL_DMA_Init+0x2b0>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <HAL_DMA_Init+0x2b2>
 8001268:	2300      	movs	r3, #0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001274:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f023 0307 	bic.w	r3, r3, #7
 800128c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	4313      	orrs	r3, r2
 8001296:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	2b04      	cmp	r3, #4
 800129e:	d117      	bne.n	80012d0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00e      	beq.n	80012d0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f001 fc82 	bl	8002bbc <DMA_CheckFifoParam>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d008      	beq.n	80012d0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2240      	movs	r2, #64	; 0x40
 80012c2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e194      	b.n	80015fa <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f001 fbbd 	bl	8002a58 <DMA_CalcBaseAndBitshift>
 80012de:	4603      	mov	r3, r0
 80012e0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	223f      	movs	r2, #63	; 0x3f
 80012ec:	409a      	lsls	r2, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	e0ca      	b.n	800148a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a39      	ldr	r2, [pc, #228]	; (80013e0 <HAL_DMA_Init+0x428>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d022      	beq.n	8001344 <HAL_DMA_Init+0x38c>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a38      	ldr	r2, [pc, #224]	; (80013e4 <HAL_DMA_Init+0x42c>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d01d      	beq.n	8001344 <HAL_DMA_Init+0x38c>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a36      	ldr	r2, [pc, #216]	; (80013e8 <HAL_DMA_Init+0x430>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d018      	beq.n	8001344 <HAL_DMA_Init+0x38c>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a35      	ldr	r2, [pc, #212]	; (80013ec <HAL_DMA_Init+0x434>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d013      	beq.n	8001344 <HAL_DMA_Init+0x38c>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a33      	ldr	r2, [pc, #204]	; (80013f0 <HAL_DMA_Init+0x438>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00e      	beq.n	8001344 <HAL_DMA_Init+0x38c>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a32      	ldr	r2, [pc, #200]	; (80013f4 <HAL_DMA_Init+0x43c>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d009      	beq.n	8001344 <HAL_DMA_Init+0x38c>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a30      	ldr	r2, [pc, #192]	; (80013f8 <HAL_DMA_Init+0x440>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d004      	beq.n	8001344 <HAL_DMA_Init+0x38c>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a2f      	ldr	r2, [pc, #188]	; (80013fc <HAL_DMA_Init+0x444>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d101      	bne.n	8001348 <HAL_DMA_Init+0x390>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <HAL_DMA_Init+0x392>
 8001348:	2300      	movs	r3, #0
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 8094 	beq.w	8001478 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <HAL_DMA_Init+0x428>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d021      	beq.n	800139e <HAL_DMA_Init+0x3e6>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a21      	ldr	r2, [pc, #132]	; (80013e4 <HAL_DMA_Init+0x42c>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d01c      	beq.n	800139e <HAL_DMA_Init+0x3e6>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a1f      	ldr	r2, [pc, #124]	; (80013e8 <HAL_DMA_Init+0x430>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d017      	beq.n	800139e <HAL_DMA_Init+0x3e6>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <HAL_DMA_Init+0x434>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d012      	beq.n	800139e <HAL_DMA_Init+0x3e6>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <HAL_DMA_Init+0x438>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_DMA_Init+0x3e6>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a1b      	ldr	r2, [pc, #108]	; (80013f4 <HAL_DMA_Init+0x43c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d008      	beq.n	800139e <HAL_DMA_Init+0x3e6>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a19      	ldr	r2, [pc, #100]	; (80013f8 <HAL_DMA_Init+0x440>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d003      	beq.n	800139e <HAL_DMA_Init+0x3e6>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a18      	ldr	r2, [pc, #96]	; (80013fc <HAL_DMA_Init+0x444>)
 800139c:	4293      	cmp	r3, r2
 800139e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2202      	movs	r2, #2
 80013a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_DMA_Init+0x448>)
 80013bc:	4013      	ands	r3, r2
 80013be:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b40      	cmp	r3, #64	; 0x40
 80013c6:	d01d      	beq.n	8001404 <HAL_DMA_Init+0x44c>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b80      	cmp	r3, #128	; 0x80
 80013ce:	d102      	bne.n	80013d6 <HAL_DMA_Init+0x41e>
 80013d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013d4:	e017      	b.n	8001406 <HAL_DMA_Init+0x44e>
 80013d6:	2300      	movs	r3, #0
 80013d8:	e015      	b.n	8001406 <HAL_DMA_Init+0x44e>
 80013da:	bf00      	nop
 80013dc:	fe10803f 	.word	0xfe10803f
 80013e0:	58025408 	.word	0x58025408
 80013e4:	5802541c 	.word	0x5802541c
 80013e8:	58025430 	.word	0x58025430
 80013ec:	58025444 	.word	0x58025444
 80013f0:	58025458 	.word	0x58025458
 80013f4:	5802546c 	.word	0x5802546c
 80013f8:	58025480 	.word	0x58025480
 80013fc:	58025494 	.word	0x58025494
 8001400:	fffe000f 	.word	0xfffe000f
 8001404:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68d2      	ldr	r2, [r2, #12]
 800140a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800140c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001414:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800141c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001424:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800142c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001434:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4313      	orrs	r3, r2
 800143a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b6e      	ldr	r3, [pc, #440]	; (8001604 <HAL_DMA_Init+0x64c>)
 800144c:	4413      	add	r3, r2
 800144e:	4a6e      	ldr	r2, [pc, #440]	; (8001608 <HAL_DMA_Init+0x650>)
 8001450:	fba2 2303 	umull	r2, r3, r2, r3
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	009a      	lsls	r2, r3, #2
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f001 fafb 	bl	8002a58 <DMA_CalcBaseAndBitshift>
 8001462:	4603      	mov	r3, r0
 8001464:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	2201      	movs	r2, #1
 8001470:	409a      	lsls	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	e008      	b.n	800148a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2240      	movs	r2, #64	; 0x40
 800147c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2203      	movs	r2, #3
 8001482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e0b7      	b.n	80015fa <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a5f      	ldr	r2, [pc, #380]	; (800160c <HAL_DMA_Init+0x654>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d072      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a5d      	ldr	r2, [pc, #372]	; (8001610 <HAL_DMA_Init+0x658>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d06d      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a5c      	ldr	r2, [pc, #368]	; (8001614 <HAL_DMA_Init+0x65c>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d068      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a5a      	ldr	r2, [pc, #360]	; (8001618 <HAL_DMA_Init+0x660>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d063      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a59      	ldr	r2, [pc, #356]	; (800161c <HAL_DMA_Init+0x664>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d05e      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a57      	ldr	r2, [pc, #348]	; (8001620 <HAL_DMA_Init+0x668>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d059      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a56      	ldr	r2, [pc, #344]	; (8001624 <HAL_DMA_Init+0x66c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d054      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a54      	ldr	r2, [pc, #336]	; (8001628 <HAL_DMA_Init+0x670>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d04f      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a53      	ldr	r2, [pc, #332]	; (800162c <HAL_DMA_Init+0x674>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d04a      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a51      	ldr	r2, [pc, #324]	; (8001630 <HAL_DMA_Init+0x678>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d045      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a50      	ldr	r2, [pc, #320]	; (8001634 <HAL_DMA_Init+0x67c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d040      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a4e      	ldr	r2, [pc, #312]	; (8001638 <HAL_DMA_Init+0x680>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d03b      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a4d      	ldr	r2, [pc, #308]	; (800163c <HAL_DMA_Init+0x684>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d036      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a4b      	ldr	r2, [pc, #300]	; (8001640 <HAL_DMA_Init+0x688>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d031      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a4a      	ldr	r2, [pc, #296]	; (8001644 <HAL_DMA_Init+0x68c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d02c      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a48      	ldr	r2, [pc, #288]	; (8001648 <HAL_DMA_Init+0x690>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d027      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a47      	ldr	r2, [pc, #284]	; (800164c <HAL_DMA_Init+0x694>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d022      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a45      	ldr	r2, [pc, #276]	; (8001650 <HAL_DMA_Init+0x698>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d01d      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a44      	ldr	r2, [pc, #272]	; (8001654 <HAL_DMA_Init+0x69c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d018      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a42      	ldr	r2, [pc, #264]	; (8001658 <HAL_DMA_Init+0x6a0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d013      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a41      	ldr	r2, [pc, #260]	; (800165c <HAL_DMA_Init+0x6a4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d00e      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a3f      	ldr	r2, [pc, #252]	; (8001660 <HAL_DMA_Init+0x6a8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d009      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a3e      	ldr	r2, [pc, #248]	; (8001664 <HAL_DMA_Init+0x6ac>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d004      	beq.n	800157a <HAL_DMA_Init+0x5c2>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a3c      	ldr	r2, [pc, #240]	; (8001668 <HAL_DMA_Init+0x6b0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d101      	bne.n	800157e <HAL_DMA_Init+0x5c6>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <HAL_DMA_Init+0x5c8>
 800157e:	2300      	movs	r3, #0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d032      	beq.n	80015ea <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f001 fb95 	bl	8002cb4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b80      	cmp	r3, #128	; 0x80
 8001590:	d102      	bne.n	8001598 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80015ac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d010      	beq.n	80015d8 <HAL_DMA_Init+0x620>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d80c      	bhi.n	80015d8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f001 fc12 	bl	8002de8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	e008      	b.n	80015ea <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	a7fdabf8 	.word	0xa7fdabf8
 8001608:	cccccccd 	.word	0xcccccccd
 800160c:	40020010 	.word	0x40020010
 8001610:	40020028 	.word	0x40020028
 8001614:	40020040 	.word	0x40020040
 8001618:	40020058 	.word	0x40020058
 800161c:	40020070 	.word	0x40020070
 8001620:	40020088 	.word	0x40020088
 8001624:	400200a0 	.word	0x400200a0
 8001628:	400200b8 	.word	0x400200b8
 800162c:	40020410 	.word	0x40020410
 8001630:	40020428 	.word	0x40020428
 8001634:	40020440 	.word	0x40020440
 8001638:	40020458 	.word	0x40020458
 800163c:	40020470 	.word	0x40020470
 8001640:	40020488 	.word	0x40020488
 8001644:	400204a0 	.word	0x400204a0
 8001648:	400204b8 	.word	0x400204b8
 800164c:	58025408 	.word	0x58025408
 8001650:	5802541c 	.word	0x5802541c
 8001654:	58025430 	.word	0x58025430
 8001658:	58025444 	.word	0x58025444
 800165c:	58025458 	.word	0x58025458
 8001660:	5802546c 	.word	0x5802546c
 8001664:	58025480 	.word	0x58025480
 8001668:	58025494 	.word	0x58025494

0800166c <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0ec      	b.n	8001862 <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_DMA_Start+0x2a>
 8001692:	2302      	movs	r3, #2
 8001694:	e0e5      	b.n	8001862 <HAL_DMA_Start+0x1f6>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	f040 80d0 	bne.w	800184c <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2202      	movs	r2, #2
 80016b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a6b      	ldr	r2, [pc, #428]	; (800186c <HAL_DMA_Start+0x200>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d04a      	beq.n	800175a <HAL_DMA_Start+0xee>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a69      	ldr	r2, [pc, #420]	; (8001870 <HAL_DMA_Start+0x204>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d045      	beq.n	800175a <HAL_DMA_Start+0xee>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a68      	ldr	r2, [pc, #416]	; (8001874 <HAL_DMA_Start+0x208>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d040      	beq.n	800175a <HAL_DMA_Start+0xee>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a66      	ldr	r2, [pc, #408]	; (8001878 <HAL_DMA_Start+0x20c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d03b      	beq.n	800175a <HAL_DMA_Start+0xee>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a65      	ldr	r2, [pc, #404]	; (800187c <HAL_DMA_Start+0x210>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d036      	beq.n	800175a <HAL_DMA_Start+0xee>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a63      	ldr	r2, [pc, #396]	; (8001880 <HAL_DMA_Start+0x214>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d031      	beq.n	800175a <HAL_DMA_Start+0xee>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a62      	ldr	r2, [pc, #392]	; (8001884 <HAL_DMA_Start+0x218>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d02c      	beq.n	800175a <HAL_DMA_Start+0xee>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a60      	ldr	r2, [pc, #384]	; (8001888 <HAL_DMA_Start+0x21c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d027      	beq.n	800175a <HAL_DMA_Start+0xee>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a5f      	ldr	r2, [pc, #380]	; (800188c <HAL_DMA_Start+0x220>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d022      	beq.n	800175a <HAL_DMA_Start+0xee>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a5d      	ldr	r2, [pc, #372]	; (8001890 <HAL_DMA_Start+0x224>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d01d      	beq.n	800175a <HAL_DMA_Start+0xee>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a5c      	ldr	r2, [pc, #368]	; (8001894 <HAL_DMA_Start+0x228>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d018      	beq.n	800175a <HAL_DMA_Start+0xee>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a5a      	ldr	r2, [pc, #360]	; (8001898 <HAL_DMA_Start+0x22c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d013      	beq.n	800175a <HAL_DMA_Start+0xee>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a59      	ldr	r2, [pc, #356]	; (800189c <HAL_DMA_Start+0x230>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d00e      	beq.n	800175a <HAL_DMA_Start+0xee>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a57      	ldr	r2, [pc, #348]	; (80018a0 <HAL_DMA_Start+0x234>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d009      	beq.n	800175a <HAL_DMA_Start+0xee>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a56      	ldr	r2, [pc, #344]	; (80018a4 <HAL_DMA_Start+0x238>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d004      	beq.n	800175a <HAL_DMA_Start+0xee>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a54      	ldr	r2, [pc, #336]	; (80018a8 <HAL_DMA_Start+0x23c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d108      	bne.n	800176c <HAL_DMA_Start+0x100>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0201 	bic.w	r2, r2, #1
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e007      	b.n	800177c <HAL_DMA_Start+0x110>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 ffbc 	bl	8002700 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a37      	ldr	r2, [pc, #220]	; (800186c <HAL_DMA_Start+0x200>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d04a      	beq.n	8001828 <HAL_DMA_Start+0x1bc>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a36      	ldr	r2, [pc, #216]	; (8001870 <HAL_DMA_Start+0x204>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d045      	beq.n	8001828 <HAL_DMA_Start+0x1bc>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a34      	ldr	r2, [pc, #208]	; (8001874 <HAL_DMA_Start+0x208>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d040      	beq.n	8001828 <HAL_DMA_Start+0x1bc>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a33      	ldr	r2, [pc, #204]	; (8001878 <HAL_DMA_Start+0x20c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d03b      	beq.n	8001828 <HAL_DMA_Start+0x1bc>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a31      	ldr	r2, [pc, #196]	; (800187c <HAL_DMA_Start+0x210>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d036      	beq.n	8001828 <HAL_DMA_Start+0x1bc>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a30      	ldr	r2, [pc, #192]	; (8001880 <HAL_DMA_Start+0x214>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d031      	beq.n	8001828 <HAL_DMA_Start+0x1bc>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a2e      	ldr	r2, [pc, #184]	; (8001884 <HAL_DMA_Start+0x218>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d02c      	beq.n	8001828 <HAL_DMA_Start+0x1bc>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a2d      	ldr	r2, [pc, #180]	; (8001888 <HAL_DMA_Start+0x21c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d027      	beq.n	8001828 <HAL_DMA_Start+0x1bc>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a2b      	ldr	r2, [pc, #172]	; (800188c <HAL_DMA_Start+0x220>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d022      	beq.n	8001828 <HAL_DMA_Start+0x1bc>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a2a      	ldr	r2, [pc, #168]	; (8001890 <HAL_DMA_Start+0x224>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d01d      	beq.n	8001828 <HAL_DMA_Start+0x1bc>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a28      	ldr	r2, [pc, #160]	; (8001894 <HAL_DMA_Start+0x228>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d018      	beq.n	8001828 <HAL_DMA_Start+0x1bc>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a27      	ldr	r2, [pc, #156]	; (8001898 <HAL_DMA_Start+0x22c>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d013      	beq.n	8001828 <HAL_DMA_Start+0x1bc>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a25      	ldr	r2, [pc, #148]	; (800189c <HAL_DMA_Start+0x230>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d00e      	beq.n	8001828 <HAL_DMA_Start+0x1bc>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a24      	ldr	r2, [pc, #144]	; (80018a0 <HAL_DMA_Start+0x234>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d009      	beq.n	8001828 <HAL_DMA_Start+0x1bc>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a22      	ldr	r2, [pc, #136]	; (80018a4 <HAL_DMA_Start+0x238>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d004      	beq.n	8001828 <HAL_DMA_Start+0x1bc>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a21      	ldr	r2, [pc, #132]	; (80018a8 <HAL_DMA_Start+0x23c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d108      	bne.n	800183a <HAL_DMA_Start+0x1ce>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e012      	b.n	8001860 <HAL_DMA_Start+0x1f4>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0201 	orr.w	r2, r2, #1
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e009      	b.n	8001860 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001852:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001860:	7dfb      	ldrb	r3, [r7, #23]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40020010 	.word	0x40020010
 8001870:	40020028 	.word	0x40020028
 8001874:	40020040 	.word	0x40020040
 8001878:	40020058 	.word	0x40020058
 800187c:	40020070 	.word	0x40020070
 8001880:	40020088 	.word	0x40020088
 8001884:	400200a0 	.word	0x400200a0
 8001888:	400200b8 	.word	0x400200b8
 800188c:	40020410 	.word	0x40020410
 8001890:	40020428 	.word	0x40020428
 8001894:	40020440 	.word	0x40020440
 8001898:	40020458 	.word	0x40020458
 800189c:	40020470 	.word	0x40020470
 80018a0:	40020488 	.word	0x40020488
 80018a4:	400204a0 	.word	0x400204a0
 80018a8:	400204b8 	.word	0x400204b8

080018ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018b8:	4b67      	ldr	r3, [pc, #412]	; (8001a58 <HAL_DMA_IRQHandler+0x1ac>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a67      	ldr	r2, [pc, #412]	; (8001a5c <HAL_DMA_IRQHandler+0x1b0>)
 80018be:	fba2 2303 	umull	r2, r3, r2, r3
 80018c2:	0a9b      	lsrs	r3, r3, #10
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a5f      	ldr	r2, [pc, #380]	; (8001a60 <HAL_DMA_IRQHandler+0x1b4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d04a      	beq.n	800197e <HAL_DMA_IRQHandler+0xd2>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a5d      	ldr	r2, [pc, #372]	; (8001a64 <HAL_DMA_IRQHandler+0x1b8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d045      	beq.n	800197e <HAL_DMA_IRQHandler+0xd2>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a5c      	ldr	r2, [pc, #368]	; (8001a68 <HAL_DMA_IRQHandler+0x1bc>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d040      	beq.n	800197e <HAL_DMA_IRQHandler+0xd2>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a5a      	ldr	r2, [pc, #360]	; (8001a6c <HAL_DMA_IRQHandler+0x1c0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d03b      	beq.n	800197e <HAL_DMA_IRQHandler+0xd2>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a59      	ldr	r2, [pc, #356]	; (8001a70 <HAL_DMA_IRQHandler+0x1c4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d036      	beq.n	800197e <HAL_DMA_IRQHandler+0xd2>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a57      	ldr	r2, [pc, #348]	; (8001a74 <HAL_DMA_IRQHandler+0x1c8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d031      	beq.n	800197e <HAL_DMA_IRQHandler+0xd2>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a56      	ldr	r2, [pc, #344]	; (8001a78 <HAL_DMA_IRQHandler+0x1cc>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d02c      	beq.n	800197e <HAL_DMA_IRQHandler+0xd2>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a54      	ldr	r2, [pc, #336]	; (8001a7c <HAL_DMA_IRQHandler+0x1d0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d027      	beq.n	800197e <HAL_DMA_IRQHandler+0xd2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a53      	ldr	r2, [pc, #332]	; (8001a80 <HAL_DMA_IRQHandler+0x1d4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d022      	beq.n	800197e <HAL_DMA_IRQHandler+0xd2>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a51      	ldr	r2, [pc, #324]	; (8001a84 <HAL_DMA_IRQHandler+0x1d8>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d01d      	beq.n	800197e <HAL_DMA_IRQHandler+0xd2>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a50      	ldr	r2, [pc, #320]	; (8001a88 <HAL_DMA_IRQHandler+0x1dc>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d018      	beq.n	800197e <HAL_DMA_IRQHandler+0xd2>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a4e      	ldr	r2, [pc, #312]	; (8001a8c <HAL_DMA_IRQHandler+0x1e0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d013      	beq.n	800197e <HAL_DMA_IRQHandler+0xd2>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a4d      	ldr	r2, [pc, #308]	; (8001a90 <HAL_DMA_IRQHandler+0x1e4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d00e      	beq.n	800197e <HAL_DMA_IRQHandler+0xd2>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a4b      	ldr	r2, [pc, #300]	; (8001a94 <HAL_DMA_IRQHandler+0x1e8>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d009      	beq.n	800197e <HAL_DMA_IRQHandler+0xd2>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a4a      	ldr	r2, [pc, #296]	; (8001a98 <HAL_DMA_IRQHandler+0x1ec>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d004      	beq.n	800197e <HAL_DMA_IRQHandler+0xd2>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a48      	ldr	r2, [pc, #288]	; (8001a9c <HAL_DMA_IRQHandler+0x1f0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_DMA_IRQHandler+0xd6>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <HAL_DMA_IRQHandler+0xd8>
 8001982:	2300      	movs	r3, #0
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 842b 	beq.w	80021e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	2208      	movs	r2, #8
 8001994:	409a      	lsls	r2, r3
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80a2 	beq.w	8001ae4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a2e      	ldr	r2, [pc, #184]	; (8001a60 <HAL_DMA_IRQHandler+0x1b4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d04a      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x194>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a2d      	ldr	r2, [pc, #180]	; (8001a64 <HAL_DMA_IRQHandler+0x1b8>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d045      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x194>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a2b      	ldr	r2, [pc, #172]	; (8001a68 <HAL_DMA_IRQHandler+0x1bc>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d040      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x194>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a2a      	ldr	r2, [pc, #168]	; (8001a6c <HAL_DMA_IRQHandler+0x1c0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d03b      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x194>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a28      	ldr	r2, [pc, #160]	; (8001a70 <HAL_DMA_IRQHandler+0x1c4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d036      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x194>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a27      	ldr	r2, [pc, #156]	; (8001a74 <HAL_DMA_IRQHandler+0x1c8>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d031      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x194>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a25      	ldr	r2, [pc, #148]	; (8001a78 <HAL_DMA_IRQHandler+0x1cc>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d02c      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x194>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a24      	ldr	r2, [pc, #144]	; (8001a7c <HAL_DMA_IRQHandler+0x1d0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d027      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x194>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <HAL_DMA_IRQHandler+0x1d4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d022      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x194>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <HAL_DMA_IRQHandler+0x1d8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d01d      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x194>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1f      	ldr	r2, [pc, #124]	; (8001a88 <HAL_DMA_IRQHandler+0x1dc>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d018      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x194>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1e      	ldr	r2, [pc, #120]	; (8001a8c <HAL_DMA_IRQHandler+0x1e0>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d013      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x194>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1c      	ldr	r2, [pc, #112]	; (8001a90 <HAL_DMA_IRQHandler+0x1e4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00e      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x194>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a1b      	ldr	r2, [pc, #108]	; (8001a94 <HAL_DMA_IRQHandler+0x1e8>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d009      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x194>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <HAL_DMA_IRQHandler+0x1ec>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d004      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x194>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <HAL_DMA_IRQHandler+0x1f0>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d12f      	bne.n	8001aa0 <HAL_DMA_IRQHandler+0x1f4>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bf14      	ite	ne
 8001a4e:	2301      	movne	r3, #1
 8001a50:	2300      	moveq	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	e02e      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x208>
 8001a56:	bf00      	nop
 8001a58:	24000000 	.word	0x24000000
 8001a5c:	1b4e81b5 	.word	0x1b4e81b5
 8001a60:	40020010 	.word	0x40020010
 8001a64:	40020028 	.word	0x40020028
 8001a68:	40020040 	.word	0x40020040
 8001a6c:	40020058 	.word	0x40020058
 8001a70:	40020070 	.word	0x40020070
 8001a74:	40020088 	.word	0x40020088
 8001a78:	400200a0 	.word	0x400200a0
 8001a7c:	400200b8 	.word	0x400200b8
 8001a80:	40020410 	.word	0x40020410
 8001a84:	40020428 	.word	0x40020428
 8001a88:	40020440 	.word	0x40020440
 8001a8c:	40020458 	.word	0x40020458
 8001a90:	40020470 	.word	0x40020470
 8001a94:	40020488 	.word	0x40020488
 8001a98:	400204a0 	.word	0x400204a0
 8001a9c:	400204b8 	.word	0x400204b8
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bf14      	ite	ne
 8001aae:	2301      	movne	r3, #1
 8001ab0:	2300      	moveq	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d015      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0204 	bic.w	r2, r2, #4
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001acc:	f003 031f 	and.w	r3, r3, #31
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001adc:	f043 0201 	orr.w	r2, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae8:	f003 031f 	and.w	r3, r3, #31
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	fa22 f303 	lsr.w	r3, r2, r3
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d06e      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a69      	ldr	r2, [pc, #420]	; (8001ca4 <HAL_DMA_IRQHandler+0x3f8>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d04a      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x2ee>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a67      	ldr	r2, [pc, #412]	; (8001ca8 <HAL_DMA_IRQHandler+0x3fc>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d045      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x2ee>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a66      	ldr	r2, [pc, #408]	; (8001cac <HAL_DMA_IRQHandler+0x400>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d040      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x2ee>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a64      	ldr	r2, [pc, #400]	; (8001cb0 <HAL_DMA_IRQHandler+0x404>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d03b      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x2ee>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a63      	ldr	r2, [pc, #396]	; (8001cb4 <HAL_DMA_IRQHandler+0x408>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d036      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x2ee>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a61      	ldr	r2, [pc, #388]	; (8001cb8 <HAL_DMA_IRQHandler+0x40c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d031      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x2ee>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a60      	ldr	r2, [pc, #384]	; (8001cbc <HAL_DMA_IRQHandler+0x410>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d02c      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x2ee>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a5e      	ldr	r2, [pc, #376]	; (8001cc0 <HAL_DMA_IRQHandler+0x414>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d027      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x2ee>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a5d      	ldr	r2, [pc, #372]	; (8001cc4 <HAL_DMA_IRQHandler+0x418>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d022      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x2ee>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a5b      	ldr	r2, [pc, #364]	; (8001cc8 <HAL_DMA_IRQHandler+0x41c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d01d      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x2ee>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a5a      	ldr	r2, [pc, #360]	; (8001ccc <HAL_DMA_IRQHandler+0x420>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d018      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x2ee>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a58      	ldr	r2, [pc, #352]	; (8001cd0 <HAL_DMA_IRQHandler+0x424>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x2ee>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a57      	ldr	r2, [pc, #348]	; (8001cd4 <HAL_DMA_IRQHandler+0x428>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d00e      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x2ee>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a55      	ldr	r2, [pc, #340]	; (8001cd8 <HAL_DMA_IRQHandler+0x42c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d009      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x2ee>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a54      	ldr	r2, [pc, #336]	; (8001cdc <HAL_DMA_IRQHandler+0x430>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d004      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x2ee>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a52      	ldr	r2, [pc, #328]	; (8001ce0 <HAL_DMA_IRQHandler+0x434>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d10a      	bne.n	8001bb0 <HAL_DMA_IRQHandler+0x304>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf14      	ite	ne
 8001ba8:	2301      	movne	r3, #1
 8001baa:	2300      	moveq	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	e003      	b.n	8001bb8 <HAL_DMA_IRQHandler+0x30c>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00d      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd0:	f043 0202 	orr.w	r2, r3, #2
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	2204      	movs	r2, #4
 8001be2:	409a      	lsls	r2, r3
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 808f 	beq.w	8001d0c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a2c      	ldr	r2, [pc, #176]	; (8001ca4 <HAL_DMA_IRQHandler+0x3f8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d04a      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x3e2>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <HAL_DMA_IRQHandler+0x3fc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d045      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x3e2>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a29      	ldr	r2, [pc, #164]	; (8001cac <HAL_DMA_IRQHandler+0x400>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d040      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x3e2>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a27      	ldr	r2, [pc, #156]	; (8001cb0 <HAL_DMA_IRQHandler+0x404>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d03b      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x3e2>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a26      	ldr	r2, [pc, #152]	; (8001cb4 <HAL_DMA_IRQHandler+0x408>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d036      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x3e2>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a24      	ldr	r2, [pc, #144]	; (8001cb8 <HAL_DMA_IRQHandler+0x40c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d031      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x3e2>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a23      	ldr	r2, [pc, #140]	; (8001cbc <HAL_DMA_IRQHandler+0x410>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d02c      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x3e2>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a21      	ldr	r2, [pc, #132]	; (8001cc0 <HAL_DMA_IRQHandler+0x414>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d027      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x3e2>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a20      	ldr	r2, [pc, #128]	; (8001cc4 <HAL_DMA_IRQHandler+0x418>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d022      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x3e2>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1e      	ldr	r2, [pc, #120]	; (8001cc8 <HAL_DMA_IRQHandler+0x41c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01d      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x3e2>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <HAL_DMA_IRQHandler+0x420>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d018      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x3e2>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <HAL_DMA_IRQHandler+0x424>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x3e2>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a1a      	ldr	r2, [pc, #104]	; (8001cd4 <HAL_DMA_IRQHandler+0x428>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00e      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x3e2>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <HAL_DMA_IRQHandler+0x42c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d009      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x3e2>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a17      	ldr	r2, [pc, #92]	; (8001cdc <HAL_DMA_IRQHandler+0x430>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d004      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x3e2>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <HAL_DMA_IRQHandler+0x434>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12a      	bne.n	8001ce4 <HAL_DMA_IRQHandler+0x438>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf14      	ite	ne
 8001c9c:	2301      	movne	r3, #1
 8001c9e:	2300      	moveq	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	e023      	b.n	8001cec <HAL_DMA_IRQHandler+0x440>
 8001ca4:	40020010 	.word	0x40020010
 8001ca8:	40020028 	.word	0x40020028
 8001cac:	40020040 	.word	0x40020040
 8001cb0:	40020058 	.word	0x40020058
 8001cb4:	40020070 	.word	0x40020070
 8001cb8:	40020088 	.word	0x40020088
 8001cbc:	400200a0 	.word	0x400200a0
 8001cc0:	400200b8 	.word	0x400200b8
 8001cc4:	40020410 	.word	0x40020410
 8001cc8:	40020428 	.word	0x40020428
 8001ccc:	40020440 	.word	0x40020440
 8001cd0:	40020458 	.word	0x40020458
 8001cd4:	40020470 	.word	0x40020470
 8001cd8:	40020488 	.word	0x40020488
 8001cdc:	400204a0 	.word	0x400204a0
 8001ce0:	400204b8 	.word	0x400204b8
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2300      	movs	r3, #0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00d      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d04:	f043 0204 	orr.w	r2, r3, #4
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	2210      	movs	r2, #16
 8001d16:	409a      	lsls	r2, r3
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80a6 	beq.w	8001e6e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a85      	ldr	r2, [pc, #532]	; (8001f3c <HAL_DMA_IRQHandler+0x690>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d04a      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x516>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a83      	ldr	r2, [pc, #524]	; (8001f40 <HAL_DMA_IRQHandler+0x694>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d045      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x516>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a82      	ldr	r2, [pc, #520]	; (8001f44 <HAL_DMA_IRQHandler+0x698>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d040      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x516>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a80      	ldr	r2, [pc, #512]	; (8001f48 <HAL_DMA_IRQHandler+0x69c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d03b      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x516>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a7f      	ldr	r2, [pc, #508]	; (8001f4c <HAL_DMA_IRQHandler+0x6a0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d036      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x516>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a7d      	ldr	r2, [pc, #500]	; (8001f50 <HAL_DMA_IRQHandler+0x6a4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d031      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x516>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7c      	ldr	r2, [pc, #496]	; (8001f54 <HAL_DMA_IRQHandler+0x6a8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d02c      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x516>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a7a      	ldr	r2, [pc, #488]	; (8001f58 <HAL_DMA_IRQHandler+0x6ac>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d027      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x516>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a79      	ldr	r2, [pc, #484]	; (8001f5c <HAL_DMA_IRQHandler+0x6b0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d022      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x516>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a77      	ldr	r2, [pc, #476]	; (8001f60 <HAL_DMA_IRQHandler+0x6b4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d01d      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x516>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a76      	ldr	r2, [pc, #472]	; (8001f64 <HAL_DMA_IRQHandler+0x6b8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d018      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x516>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a74      	ldr	r2, [pc, #464]	; (8001f68 <HAL_DMA_IRQHandler+0x6bc>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d013      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x516>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a73      	ldr	r2, [pc, #460]	; (8001f6c <HAL_DMA_IRQHandler+0x6c0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d00e      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x516>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a71      	ldr	r2, [pc, #452]	; (8001f70 <HAL_DMA_IRQHandler+0x6c4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d009      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x516>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a70      	ldr	r2, [pc, #448]	; (8001f74 <HAL_DMA_IRQHandler+0x6c8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d004      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x516>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a6e      	ldr	r2, [pc, #440]	; (8001f78 <HAL_DMA_IRQHandler+0x6cc>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d10a      	bne.n	8001dd8 <HAL_DMA_IRQHandler+0x52c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf14      	ite	ne
 8001dd0:	2301      	movne	r3, #1
 8001dd2:	2300      	moveq	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	e009      	b.n	8001dec <HAL_DMA_IRQHandler+0x540>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bf14      	ite	ne
 8001de6:	2301      	movne	r3, #1
 8001de8:	2300      	moveq	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d03e      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	2210      	movs	r2, #16
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d018      	beq.n	8001e40 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d108      	bne.n	8001e2e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d024      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
 8001e2c:	e01f      	b.n	8001e6e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d01b      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	4798      	blx	r3
 8001e3e:	e016      	b.n	8001e6e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d107      	bne.n	8001e5e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0208 	bic.w	r2, r2, #8
 8001e5c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	2220      	movs	r2, #32
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8110 	beq.w	80020a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a2c      	ldr	r2, [pc, #176]	; (8001f3c <HAL_DMA_IRQHandler+0x690>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d04a      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x678>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a2b      	ldr	r2, [pc, #172]	; (8001f40 <HAL_DMA_IRQHandler+0x694>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d045      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x678>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a29      	ldr	r2, [pc, #164]	; (8001f44 <HAL_DMA_IRQHandler+0x698>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d040      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x678>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a28      	ldr	r2, [pc, #160]	; (8001f48 <HAL_DMA_IRQHandler+0x69c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d03b      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x678>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a26      	ldr	r2, [pc, #152]	; (8001f4c <HAL_DMA_IRQHandler+0x6a0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d036      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x678>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a25      	ldr	r2, [pc, #148]	; (8001f50 <HAL_DMA_IRQHandler+0x6a4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d031      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x678>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a23      	ldr	r2, [pc, #140]	; (8001f54 <HAL_DMA_IRQHandler+0x6a8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d02c      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x678>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a22      	ldr	r2, [pc, #136]	; (8001f58 <HAL_DMA_IRQHandler+0x6ac>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d027      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x678>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a20      	ldr	r2, [pc, #128]	; (8001f5c <HAL_DMA_IRQHandler+0x6b0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d022      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x678>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <HAL_DMA_IRQHandler+0x6b4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d01d      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x678>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a1d      	ldr	r2, [pc, #116]	; (8001f64 <HAL_DMA_IRQHandler+0x6b8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d018      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x678>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1c      	ldr	r2, [pc, #112]	; (8001f68 <HAL_DMA_IRQHandler+0x6bc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d013      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x678>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1a      	ldr	r2, [pc, #104]	; (8001f6c <HAL_DMA_IRQHandler+0x6c0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00e      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x678>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <HAL_DMA_IRQHandler+0x6c4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d009      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x678>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <HAL_DMA_IRQHandler+0x6c8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d004      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x678>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a16      	ldr	r2, [pc, #88]	; (8001f78 <HAL_DMA_IRQHandler+0x6cc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d12b      	bne.n	8001f7c <HAL_DMA_IRQHandler+0x6d0>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf14      	ite	ne
 8001f32:	2301      	movne	r3, #1
 8001f34:	2300      	moveq	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	e02a      	b.n	8001f90 <HAL_DMA_IRQHandler+0x6e4>
 8001f3a:	bf00      	nop
 8001f3c:	40020010 	.word	0x40020010
 8001f40:	40020028 	.word	0x40020028
 8001f44:	40020040 	.word	0x40020040
 8001f48:	40020058 	.word	0x40020058
 8001f4c:	40020070 	.word	0x40020070
 8001f50:	40020088 	.word	0x40020088
 8001f54:	400200a0 	.word	0x400200a0
 8001f58:	400200b8 	.word	0x400200b8
 8001f5c:	40020410 	.word	0x40020410
 8001f60:	40020428 	.word	0x40020428
 8001f64:	40020440 	.word	0x40020440
 8001f68:	40020458 	.word	0x40020458
 8001f6c:	40020470 	.word	0x40020470
 8001f70:	40020488 	.word	0x40020488
 8001f74:	400204a0 	.word	0x400204a0
 8001f78:	400204b8 	.word	0x400204b8
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	bf14      	ite	ne
 8001f8a:	2301      	movne	r3, #1
 8001f8c:	2300      	moveq	r3, #0
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 8087 	beq.w	80020a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d139      	bne.n	8002026 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0216 	bic.w	r2, r2, #22
 8001fc0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d103      	bne.n	8001fe2 <HAL_DMA_IRQHandler+0x736>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0208 	bic.w	r2, r2, #8
 8001ff0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	223f      	movs	r2, #63	; 0x3f
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 834a 	beq.w	80026b0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
          }
          return;
 8002024:	e344      	b.n	80026b0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d018      	beq.n	8002066 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d108      	bne.n	8002054 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	2b00      	cmp	r3, #0
 8002048:	d02c      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	4798      	blx	r3
 8002052:	e027      	b.n	80020a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d023      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
 8002064:	e01e      	b.n	80020a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10f      	bne.n	8002094 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0210 	bic.w	r2, r2, #16
 8002082:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8306 	beq.w	80026ba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8088 	beq.w	80021cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2204      	movs	r2, #4
 80020c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a7a      	ldr	r2, [pc, #488]	; (80022b4 <HAL_DMA_IRQHandler+0xa08>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d04a      	beq.n	8002164 <HAL_DMA_IRQHandler+0x8b8>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a79      	ldr	r2, [pc, #484]	; (80022b8 <HAL_DMA_IRQHandler+0xa0c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d045      	beq.n	8002164 <HAL_DMA_IRQHandler+0x8b8>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a77      	ldr	r2, [pc, #476]	; (80022bc <HAL_DMA_IRQHandler+0xa10>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d040      	beq.n	8002164 <HAL_DMA_IRQHandler+0x8b8>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a76      	ldr	r2, [pc, #472]	; (80022c0 <HAL_DMA_IRQHandler+0xa14>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d03b      	beq.n	8002164 <HAL_DMA_IRQHandler+0x8b8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a74      	ldr	r2, [pc, #464]	; (80022c4 <HAL_DMA_IRQHandler+0xa18>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d036      	beq.n	8002164 <HAL_DMA_IRQHandler+0x8b8>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a73      	ldr	r2, [pc, #460]	; (80022c8 <HAL_DMA_IRQHandler+0xa1c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d031      	beq.n	8002164 <HAL_DMA_IRQHandler+0x8b8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a71      	ldr	r2, [pc, #452]	; (80022cc <HAL_DMA_IRQHandler+0xa20>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d02c      	beq.n	8002164 <HAL_DMA_IRQHandler+0x8b8>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a70      	ldr	r2, [pc, #448]	; (80022d0 <HAL_DMA_IRQHandler+0xa24>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d027      	beq.n	8002164 <HAL_DMA_IRQHandler+0x8b8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a6e      	ldr	r2, [pc, #440]	; (80022d4 <HAL_DMA_IRQHandler+0xa28>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d022      	beq.n	8002164 <HAL_DMA_IRQHandler+0x8b8>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a6d      	ldr	r2, [pc, #436]	; (80022d8 <HAL_DMA_IRQHandler+0xa2c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d01d      	beq.n	8002164 <HAL_DMA_IRQHandler+0x8b8>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a6b      	ldr	r2, [pc, #428]	; (80022dc <HAL_DMA_IRQHandler+0xa30>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d018      	beq.n	8002164 <HAL_DMA_IRQHandler+0x8b8>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a6a      	ldr	r2, [pc, #424]	; (80022e0 <HAL_DMA_IRQHandler+0xa34>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d013      	beq.n	8002164 <HAL_DMA_IRQHandler+0x8b8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a68      	ldr	r2, [pc, #416]	; (80022e4 <HAL_DMA_IRQHandler+0xa38>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00e      	beq.n	8002164 <HAL_DMA_IRQHandler+0x8b8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a67      	ldr	r2, [pc, #412]	; (80022e8 <HAL_DMA_IRQHandler+0xa3c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d009      	beq.n	8002164 <HAL_DMA_IRQHandler+0x8b8>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a65      	ldr	r2, [pc, #404]	; (80022ec <HAL_DMA_IRQHandler+0xa40>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d004      	beq.n	8002164 <HAL_DMA_IRQHandler+0x8b8>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a64      	ldr	r2, [pc, #400]	; (80022f0 <HAL_DMA_IRQHandler+0xa44>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d108      	bne.n	8002176 <HAL_DMA_IRQHandler+0x8ca>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	e007      	b.n	8002186 <HAL_DMA_IRQHandler+0x8da>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0201 	bic.w	r2, r2, #1
 8002184:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3301      	adds	r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218e:	429a      	cmp	r2, r3
 8002190:	d307      	bcc.n	80021a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f2      	bne.n	8002186 <HAL_DMA_IRQHandler+0x8da>
 80021a0:	e000      	b.n	80021a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80021a2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2203      	movs	r2, #3
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80021ba:	e003      	b.n	80021c4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8272 	beq.w	80026ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	4798      	blx	r3
 80021de:	e26c      	b.n	80026ba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a43      	ldr	r2, [pc, #268]	; (80022f4 <HAL_DMA_IRQHandler+0xa48>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d022      	beq.n	8002230 <HAL_DMA_IRQHandler+0x984>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a42      	ldr	r2, [pc, #264]	; (80022f8 <HAL_DMA_IRQHandler+0xa4c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d01d      	beq.n	8002230 <HAL_DMA_IRQHandler+0x984>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a40      	ldr	r2, [pc, #256]	; (80022fc <HAL_DMA_IRQHandler+0xa50>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d018      	beq.n	8002230 <HAL_DMA_IRQHandler+0x984>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a3f      	ldr	r2, [pc, #252]	; (8002300 <HAL_DMA_IRQHandler+0xa54>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d013      	beq.n	8002230 <HAL_DMA_IRQHandler+0x984>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a3d      	ldr	r2, [pc, #244]	; (8002304 <HAL_DMA_IRQHandler+0xa58>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00e      	beq.n	8002230 <HAL_DMA_IRQHandler+0x984>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a3c      	ldr	r2, [pc, #240]	; (8002308 <HAL_DMA_IRQHandler+0xa5c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d009      	beq.n	8002230 <HAL_DMA_IRQHandler+0x984>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a3a      	ldr	r2, [pc, #232]	; (800230c <HAL_DMA_IRQHandler+0xa60>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d004      	beq.n	8002230 <HAL_DMA_IRQHandler+0x984>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a39      	ldr	r2, [pc, #228]	; (8002310 <HAL_DMA_IRQHandler+0xa64>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d101      	bne.n	8002234 <HAL_DMA_IRQHandler+0x988>
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <HAL_DMA_IRQHandler+0x98a>
 8002234:	2300      	movs	r3, #0
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 823f 	beq.w	80026ba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	2204      	movs	r2, #4
 800224e:	409a      	lsls	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80cd 	beq.w	80023f4 <HAL_DMA_IRQHandler+0xb48>
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80c7 	beq.w	80023f4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	2204      	movs	r2, #4
 8002270:	409a      	lsls	r2, r3
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d049      	beq.n	8002314 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d109      	bne.n	800229e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8210 	beq.w	80026b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800229c:	e20a      	b.n	80026b4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8206 	beq.w	80026b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80022b0:	e200      	b.n	80026b4 <HAL_DMA_IRQHandler+0xe08>
 80022b2:	bf00      	nop
 80022b4:	40020010 	.word	0x40020010
 80022b8:	40020028 	.word	0x40020028
 80022bc:	40020040 	.word	0x40020040
 80022c0:	40020058 	.word	0x40020058
 80022c4:	40020070 	.word	0x40020070
 80022c8:	40020088 	.word	0x40020088
 80022cc:	400200a0 	.word	0x400200a0
 80022d0:	400200b8 	.word	0x400200b8
 80022d4:	40020410 	.word	0x40020410
 80022d8:	40020428 	.word	0x40020428
 80022dc:	40020440 	.word	0x40020440
 80022e0:	40020458 	.word	0x40020458
 80022e4:	40020470 	.word	0x40020470
 80022e8:	40020488 	.word	0x40020488
 80022ec:	400204a0 	.word	0x400204a0
 80022f0:	400204b8 	.word	0x400204b8
 80022f4:	58025408 	.word	0x58025408
 80022f8:	5802541c 	.word	0x5802541c
 80022fc:	58025430 	.word	0x58025430
 8002300:	58025444 	.word	0x58025444
 8002304:	58025458 	.word	0x58025458
 8002308:	5802546c 	.word	0x5802546c
 800230c:	58025480 	.word	0x58025480
 8002310:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b00      	cmp	r3, #0
 800231c:	d160      	bne.n	80023e0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a7f      	ldr	r2, [pc, #508]	; (8002520 <HAL_DMA_IRQHandler+0xc74>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d04a      	beq.n	80023be <HAL_DMA_IRQHandler+0xb12>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a7d      	ldr	r2, [pc, #500]	; (8002524 <HAL_DMA_IRQHandler+0xc78>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d045      	beq.n	80023be <HAL_DMA_IRQHandler+0xb12>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a7c      	ldr	r2, [pc, #496]	; (8002528 <HAL_DMA_IRQHandler+0xc7c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d040      	beq.n	80023be <HAL_DMA_IRQHandler+0xb12>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a7a      	ldr	r2, [pc, #488]	; (800252c <HAL_DMA_IRQHandler+0xc80>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d03b      	beq.n	80023be <HAL_DMA_IRQHandler+0xb12>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a79      	ldr	r2, [pc, #484]	; (8002530 <HAL_DMA_IRQHandler+0xc84>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d036      	beq.n	80023be <HAL_DMA_IRQHandler+0xb12>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a77      	ldr	r2, [pc, #476]	; (8002534 <HAL_DMA_IRQHandler+0xc88>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d031      	beq.n	80023be <HAL_DMA_IRQHandler+0xb12>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a76      	ldr	r2, [pc, #472]	; (8002538 <HAL_DMA_IRQHandler+0xc8c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d02c      	beq.n	80023be <HAL_DMA_IRQHandler+0xb12>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a74      	ldr	r2, [pc, #464]	; (800253c <HAL_DMA_IRQHandler+0xc90>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d027      	beq.n	80023be <HAL_DMA_IRQHandler+0xb12>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a73      	ldr	r2, [pc, #460]	; (8002540 <HAL_DMA_IRQHandler+0xc94>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d022      	beq.n	80023be <HAL_DMA_IRQHandler+0xb12>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a71      	ldr	r2, [pc, #452]	; (8002544 <HAL_DMA_IRQHandler+0xc98>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d01d      	beq.n	80023be <HAL_DMA_IRQHandler+0xb12>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a70      	ldr	r2, [pc, #448]	; (8002548 <HAL_DMA_IRQHandler+0xc9c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d018      	beq.n	80023be <HAL_DMA_IRQHandler+0xb12>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a6e      	ldr	r2, [pc, #440]	; (800254c <HAL_DMA_IRQHandler+0xca0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d013      	beq.n	80023be <HAL_DMA_IRQHandler+0xb12>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a6d      	ldr	r2, [pc, #436]	; (8002550 <HAL_DMA_IRQHandler+0xca4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d00e      	beq.n	80023be <HAL_DMA_IRQHandler+0xb12>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a6b      	ldr	r2, [pc, #428]	; (8002554 <HAL_DMA_IRQHandler+0xca8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d009      	beq.n	80023be <HAL_DMA_IRQHandler+0xb12>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a6a      	ldr	r2, [pc, #424]	; (8002558 <HAL_DMA_IRQHandler+0xcac>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d004      	beq.n	80023be <HAL_DMA_IRQHandler+0xb12>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a68      	ldr	r2, [pc, #416]	; (800255c <HAL_DMA_IRQHandler+0xcb0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d108      	bne.n	80023d0 <HAL_DMA_IRQHandler+0xb24>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0208 	bic.w	r2, r2, #8
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	e007      	b.n	80023e0 <HAL_DMA_IRQHandler+0xb34>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0204 	bic.w	r2, r2, #4
 80023de:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8165 	beq.w	80026b4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80023f2:	e15f      	b.n	80026b4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	2202      	movs	r2, #2
 80023fe:	409a      	lsls	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80c5 	beq.w	8002594 <HAL_DMA_IRQHandler+0xce8>
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80bf 	beq.w	8002594 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	2202      	movs	r2, #2
 8002420:	409a      	lsls	r2, r3
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d018      	beq.n	8002462 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 813a 	beq.w	80026b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800244c:	e134      	b.n	80026b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 8130 	beq.w	80026b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002460:	e12a      	b.n	80026b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 8089 	bne.w	8002580 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a2b      	ldr	r2, [pc, #172]	; (8002520 <HAL_DMA_IRQHandler+0xc74>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d04a      	beq.n	800250e <HAL_DMA_IRQHandler+0xc62>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a29      	ldr	r2, [pc, #164]	; (8002524 <HAL_DMA_IRQHandler+0xc78>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d045      	beq.n	800250e <HAL_DMA_IRQHandler+0xc62>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a28      	ldr	r2, [pc, #160]	; (8002528 <HAL_DMA_IRQHandler+0xc7c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d040      	beq.n	800250e <HAL_DMA_IRQHandler+0xc62>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a26      	ldr	r2, [pc, #152]	; (800252c <HAL_DMA_IRQHandler+0xc80>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d03b      	beq.n	800250e <HAL_DMA_IRQHandler+0xc62>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a25      	ldr	r2, [pc, #148]	; (8002530 <HAL_DMA_IRQHandler+0xc84>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d036      	beq.n	800250e <HAL_DMA_IRQHandler+0xc62>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a23      	ldr	r2, [pc, #140]	; (8002534 <HAL_DMA_IRQHandler+0xc88>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d031      	beq.n	800250e <HAL_DMA_IRQHandler+0xc62>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a22      	ldr	r2, [pc, #136]	; (8002538 <HAL_DMA_IRQHandler+0xc8c>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d02c      	beq.n	800250e <HAL_DMA_IRQHandler+0xc62>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a20      	ldr	r2, [pc, #128]	; (800253c <HAL_DMA_IRQHandler+0xc90>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d027      	beq.n	800250e <HAL_DMA_IRQHandler+0xc62>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a1f      	ldr	r2, [pc, #124]	; (8002540 <HAL_DMA_IRQHandler+0xc94>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d022      	beq.n	800250e <HAL_DMA_IRQHandler+0xc62>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <HAL_DMA_IRQHandler+0xc98>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d01d      	beq.n	800250e <HAL_DMA_IRQHandler+0xc62>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <HAL_DMA_IRQHandler+0xc9c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d018      	beq.n	800250e <HAL_DMA_IRQHandler+0xc62>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a1a      	ldr	r2, [pc, #104]	; (800254c <HAL_DMA_IRQHandler+0xca0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <HAL_DMA_IRQHandler+0xc62>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a19      	ldr	r2, [pc, #100]	; (8002550 <HAL_DMA_IRQHandler+0xca4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d00e      	beq.n	800250e <HAL_DMA_IRQHandler+0xc62>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a17      	ldr	r2, [pc, #92]	; (8002554 <HAL_DMA_IRQHandler+0xca8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d009      	beq.n	800250e <HAL_DMA_IRQHandler+0xc62>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a16      	ldr	r2, [pc, #88]	; (8002558 <HAL_DMA_IRQHandler+0xcac>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d004      	beq.n	800250e <HAL_DMA_IRQHandler+0xc62>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a14      	ldr	r2, [pc, #80]	; (800255c <HAL_DMA_IRQHandler+0xcb0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d128      	bne.n	8002560 <HAL_DMA_IRQHandler+0xcb4>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0214 	bic.w	r2, r2, #20
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	e027      	b.n	8002570 <HAL_DMA_IRQHandler+0xcc4>
 8002520:	40020010 	.word	0x40020010
 8002524:	40020028 	.word	0x40020028
 8002528:	40020040 	.word	0x40020040
 800252c:	40020058 	.word	0x40020058
 8002530:	40020070 	.word	0x40020070
 8002534:	40020088 	.word	0x40020088
 8002538:	400200a0 	.word	0x400200a0
 800253c:	400200b8 	.word	0x400200b8
 8002540:	40020410 	.word	0x40020410
 8002544:	40020428 	.word	0x40020428
 8002548:	40020440 	.word	0x40020440
 800254c:	40020458 	.word	0x40020458
 8002550:	40020470 	.word	0x40020470
 8002554:	40020488 	.word	0x40020488
 8002558:	400204a0 	.word	0x400204a0
 800255c:	400204b8 	.word	0x400204b8
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 020a 	bic.w	r2, r2, #10
 800256e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8097 	beq.w	80026b8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002592:	e091      	b.n	80026b8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	2208      	movs	r2, #8
 800259e:	409a      	lsls	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 8088 	beq.w	80026ba <HAL_DMA_IRQHandler+0xe0e>
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 8082 	beq.w	80026ba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a41      	ldr	r2, [pc, #260]	; (80026c0 <HAL_DMA_IRQHandler+0xe14>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d04a      	beq.n	8002656 <HAL_DMA_IRQHandler+0xdaa>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a3f      	ldr	r2, [pc, #252]	; (80026c4 <HAL_DMA_IRQHandler+0xe18>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d045      	beq.n	8002656 <HAL_DMA_IRQHandler+0xdaa>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a3e      	ldr	r2, [pc, #248]	; (80026c8 <HAL_DMA_IRQHandler+0xe1c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d040      	beq.n	8002656 <HAL_DMA_IRQHandler+0xdaa>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a3c      	ldr	r2, [pc, #240]	; (80026cc <HAL_DMA_IRQHandler+0xe20>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d03b      	beq.n	8002656 <HAL_DMA_IRQHandler+0xdaa>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a3b      	ldr	r2, [pc, #236]	; (80026d0 <HAL_DMA_IRQHandler+0xe24>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d036      	beq.n	8002656 <HAL_DMA_IRQHandler+0xdaa>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a39      	ldr	r2, [pc, #228]	; (80026d4 <HAL_DMA_IRQHandler+0xe28>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d031      	beq.n	8002656 <HAL_DMA_IRQHandler+0xdaa>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a38      	ldr	r2, [pc, #224]	; (80026d8 <HAL_DMA_IRQHandler+0xe2c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d02c      	beq.n	8002656 <HAL_DMA_IRQHandler+0xdaa>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a36      	ldr	r2, [pc, #216]	; (80026dc <HAL_DMA_IRQHandler+0xe30>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d027      	beq.n	8002656 <HAL_DMA_IRQHandler+0xdaa>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a35      	ldr	r2, [pc, #212]	; (80026e0 <HAL_DMA_IRQHandler+0xe34>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d022      	beq.n	8002656 <HAL_DMA_IRQHandler+0xdaa>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a33      	ldr	r2, [pc, #204]	; (80026e4 <HAL_DMA_IRQHandler+0xe38>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d01d      	beq.n	8002656 <HAL_DMA_IRQHandler+0xdaa>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a32      	ldr	r2, [pc, #200]	; (80026e8 <HAL_DMA_IRQHandler+0xe3c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d018      	beq.n	8002656 <HAL_DMA_IRQHandler+0xdaa>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a30      	ldr	r2, [pc, #192]	; (80026ec <HAL_DMA_IRQHandler+0xe40>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <HAL_DMA_IRQHandler+0xdaa>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a2f      	ldr	r2, [pc, #188]	; (80026f0 <HAL_DMA_IRQHandler+0xe44>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00e      	beq.n	8002656 <HAL_DMA_IRQHandler+0xdaa>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a2d      	ldr	r2, [pc, #180]	; (80026f4 <HAL_DMA_IRQHandler+0xe48>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d009      	beq.n	8002656 <HAL_DMA_IRQHandler+0xdaa>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a2c      	ldr	r2, [pc, #176]	; (80026f8 <HAL_DMA_IRQHandler+0xe4c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d004      	beq.n	8002656 <HAL_DMA_IRQHandler+0xdaa>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a2a      	ldr	r2, [pc, #168]	; (80026fc <HAL_DMA_IRQHandler+0xe50>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d108      	bne.n	8002668 <HAL_DMA_IRQHandler+0xdbc>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 021c 	bic.w	r2, r2, #28
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e007      	b.n	8002678 <HAL_DMA_IRQHandler+0xdcc>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 020e 	bic.w	r2, r2, #14
 8002676:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	2201      	movs	r2, #1
 8002682:	409a      	lsls	r2, r3
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
 80026ae:	e004      	b.n	80026ba <HAL_DMA_IRQHandler+0xe0e>
          return;
 80026b0:	bf00      	nop
 80026b2:	e002      	b.n	80026ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026b4:	bf00      	nop
 80026b6:	e000      	b.n	80026ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80026ba:	3728      	adds	r7, #40	; 0x28
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40020010 	.word	0x40020010
 80026c4:	40020028 	.word	0x40020028
 80026c8:	40020040 	.word	0x40020040
 80026cc:	40020058 	.word	0x40020058
 80026d0:	40020070 	.word	0x40020070
 80026d4:	40020088 	.word	0x40020088
 80026d8:	400200a0 	.word	0x400200a0
 80026dc:	400200b8 	.word	0x400200b8
 80026e0:	40020410 	.word	0x40020410
 80026e4:	40020428 	.word	0x40020428
 80026e8:	40020440 	.word	0x40020440
 80026ec:	40020458 	.word	0x40020458
 80026f0:	40020470 	.word	0x40020470
 80026f4:	40020488 	.word	0x40020488
 80026f8:	400204a0 	.word	0x400204a0
 80026fc:	400204b8 	.word	0x400204b8

08002700 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002712:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a7f      	ldr	r2, [pc, #508]	; (800291c <DMA_SetConfig+0x21c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d072      	beq.n	800280a <DMA_SetConfig+0x10a>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a7d      	ldr	r2, [pc, #500]	; (8002920 <DMA_SetConfig+0x220>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d06d      	beq.n	800280a <DMA_SetConfig+0x10a>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a7c      	ldr	r2, [pc, #496]	; (8002924 <DMA_SetConfig+0x224>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d068      	beq.n	800280a <DMA_SetConfig+0x10a>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a7a      	ldr	r2, [pc, #488]	; (8002928 <DMA_SetConfig+0x228>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d063      	beq.n	800280a <DMA_SetConfig+0x10a>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a79      	ldr	r2, [pc, #484]	; (800292c <DMA_SetConfig+0x22c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d05e      	beq.n	800280a <DMA_SetConfig+0x10a>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a77      	ldr	r2, [pc, #476]	; (8002930 <DMA_SetConfig+0x230>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d059      	beq.n	800280a <DMA_SetConfig+0x10a>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a76      	ldr	r2, [pc, #472]	; (8002934 <DMA_SetConfig+0x234>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d054      	beq.n	800280a <DMA_SetConfig+0x10a>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a74      	ldr	r2, [pc, #464]	; (8002938 <DMA_SetConfig+0x238>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d04f      	beq.n	800280a <DMA_SetConfig+0x10a>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a73      	ldr	r2, [pc, #460]	; (800293c <DMA_SetConfig+0x23c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d04a      	beq.n	800280a <DMA_SetConfig+0x10a>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a71      	ldr	r2, [pc, #452]	; (8002940 <DMA_SetConfig+0x240>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d045      	beq.n	800280a <DMA_SetConfig+0x10a>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a70      	ldr	r2, [pc, #448]	; (8002944 <DMA_SetConfig+0x244>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d040      	beq.n	800280a <DMA_SetConfig+0x10a>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a6e      	ldr	r2, [pc, #440]	; (8002948 <DMA_SetConfig+0x248>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d03b      	beq.n	800280a <DMA_SetConfig+0x10a>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6d      	ldr	r2, [pc, #436]	; (800294c <DMA_SetConfig+0x24c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d036      	beq.n	800280a <DMA_SetConfig+0x10a>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6b      	ldr	r2, [pc, #428]	; (8002950 <DMA_SetConfig+0x250>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d031      	beq.n	800280a <DMA_SetConfig+0x10a>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a6a      	ldr	r2, [pc, #424]	; (8002954 <DMA_SetConfig+0x254>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d02c      	beq.n	800280a <DMA_SetConfig+0x10a>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a68      	ldr	r2, [pc, #416]	; (8002958 <DMA_SetConfig+0x258>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d027      	beq.n	800280a <DMA_SetConfig+0x10a>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a67      	ldr	r2, [pc, #412]	; (800295c <DMA_SetConfig+0x25c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d022      	beq.n	800280a <DMA_SetConfig+0x10a>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a65      	ldr	r2, [pc, #404]	; (8002960 <DMA_SetConfig+0x260>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01d      	beq.n	800280a <DMA_SetConfig+0x10a>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a64      	ldr	r2, [pc, #400]	; (8002964 <DMA_SetConfig+0x264>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d018      	beq.n	800280a <DMA_SetConfig+0x10a>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a62      	ldr	r2, [pc, #392]	; (8002968 <DMA_SetConfig+0x268>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <DMA_SetConfig+0x10a>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a61      	ldr	r2, [pc, #388]	; (800296c <DMA_SetConfig+0x26c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00e      	beq.n	800280a <DMA_SetConfig+0x10a>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a5f      	ldr	r2, [pc, #380]	; (8002970 <DMA_SetConfig+0x270>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d009      	beq.n	800280a <DMA_SetConfig+0x10a>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a5e      	ldr	r2, [pc, #376]	; (8002974 <DMA_SetConfig+0x274>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d004      	beq.n	800280a <DMA_SetConfig+0x10a>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a5c      	ldr	r2, [pc, #368]	; (8002978 <DMA_SetConfig+0x278>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d101      	bne.n	800280e <DMA_SetConfig+0x10e>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <DMA_SetConfig+0x110>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00d      	beq.n	8002830 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800281c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002822:	2b00      	cmp	r3, #0
 8002824:	d004      	beq.n	8002830 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800282e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a39      	ldr	r2, [pc, #228]	; (800291c <DMA_SetConfig+0x21c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d04a      	beq.n	80028d0 <DMA_SetConfig+0x1d0>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a38      	ldr	r2, [pc, #224]	; (8002920 <DMA_SetConfig+0x220>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d045      	beq.n	80028d0 <DMA_SetConfig+0x1d0>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a36      	ldr	r2, [pc, #216]	; (8002924 <DMA_SetConfig+0x224>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d040      	beq.n	80028d0 <DMA_SetConfig+0x1d0>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a35      	ldr	r2, [pc, #212]	; (8002928 <DMA_SetConfig+0x228>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d03b      	beq.n	80028d0 <DMA_SetConfig+0x1d0>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a33      	ldr	r2, [pc, #204]	; (800292c <DMA_SetConfig+0x22c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d036      	beq.n	80028d0 <DMA_SetConfig+0x1d0>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a32      	ldr	r2, [pc, #200]	; (8002930 <DMA_SetConfig+0x230>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d031      	beq.n	80028d0 <DMA_SetConfig+0x1d0>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a30      	ldr	r2, [pc, #192]	; (8002934 <DMA_SetConfig+0x234>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d02c      	beq.n	80028d0 <DMA_SetConfig+0x1d0>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a2f      	ldr	r2, [pc, #188]	; (8002938 <DMA_SetConfig+0x238>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d027      	beq.n	80028d0 <DMA_SetConfig+0x1d0>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a2d      	ldr	r2, [pc, #180]	; (800293c <DMA_SetConfig+0x23c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d022      	beq.n	80028d0 <DMA_SetConfig+0x1d0>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a2c      	ldr	r2, [pc, #176]	; (8002940 <DMA_SetConfig+0x240>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d01d      	beq.n	80028d0 <DMA_SetConfig+0x1d0>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a2a      	ldr	r2, [pc, #168]	; (8002944 <DMA_SetConfig+0x244>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d018      	beq.n	80028d0 <DMA_SetConfig+0x1d0>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a29      	ldr	r2, [pc, #164]	; (8002948 <DMA_SetConfig+0x248>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d013      	beq.n	80028d0 <DMA_SetConfig+0x1d0>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a27      	ldr	r2, [pc, #156]	; (800294c <DMA_SetConfig+0x24c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00e      	beq.n	80028d0 <DMA_SetConfig+0x1d0>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a26      	ldr	r2, [pc, #152]	; (8002950 <DMA_SetConfig+0x250>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d009      	beq.n	80028d0 <DMA_SetConfig+0x1d0>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a24      	ldr	r2, [pc, #144]	; (8002954 <DMA_SetConfig+0x254>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d004      	beq.n	80028d0 <DMA_SetConfig+0x1d0>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a23      	ldr	r2, [pc, #140]	; (8002958 <DMA_SetConfig+0x258>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d101      	bne.n	80028d4 <DMA_SetConfig+0x1d4>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <DMA_SetConfig+0x1d6>
 80028d4:	2300      	movs	r3, #0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d059      	beq.n	800298e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	223f      	movs	r2, #63	; 0x3f
 80028e4:	409a      	lsls	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028f8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b40      	cmp	r3, #64	; 0x40
 8002908:	d138      	bne.n	800297c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800291a:	e086      	b.n	8002a2a <DMA_SetConfig+0x32a>
 800291c:	40020010 	.word	0x40020010
 8002920:	40020028 	.word	0x40020028
 8002924:	40020040 	.word	0x40020040
 8002928:	40020058 	.word	0x40020058
 800292c:	40020070 	.word	0x40020070
 8002930:	40020088 	.word	0x40020088
 8002934:	400200a0 	.word	0x400200a0
 8002938:	400200b8 	.word	0x400200b8
 800293c:	40020410 	.word	0x40020410
 8002940:	40020428 	.word	0x40020428
 8002944:	40020440 	.word	0x40020440
 8002948:	40020458 	.word	0x40020458
 800294c:	40020470 	.word	0x40020470
 8002950:	40020488 	.word	0x40020488
 8002954:	400204a0 	.word	0x400204a0
 8002958:	400204b8 	.word	0x400204b8
 800295c:	58025408 	.word	0x58025408
 8002960:	5802541c 	.word	0x5802541c
 8002964:	58025430 	.word	0x58025430
 8002968:	58025444 	.word	0x58025444
 800296c:	58025458 	.word	0x58025458
 8002970:	5802546c 	.word	0x5802546c
 8002974:	58025480 	.word	0x58025480
 8002978:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	60da      	str	r2, [r3, #12]
}
 800298c:	e04d      	b.n	8002a2a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a29      	ldr	r2, [pc, #164]	; (8002a38 <DMA_SetConfig+0x338>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d022      	beq.n	80029de <DMA_SetConfig+0x2de>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a27      	ldr	r2, [pc, #156]	; (8002a3c <DMA_SetConfig+0x33c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01d      	beq.n	80029de <DMA_SetConfig+0x2de>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a26      	ldr	r2, [pc, #152]	; (8002a40 <DMA_SetConfig+0x340>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d018      	beq.n	80029de <DMA_SetConfig+0x2de>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a24      	ldr	r2, [pc, #144]	; (8002a44 <DMA_SetConfig+0x344>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <DMA_SetConfig+0x2de>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <DMA_SetConfig+0x348>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00e      	beq.n	80029de <DMA_SetConfig+0x2de>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a21      	ldr	r2, [pc, #132]	; (8002a4c <DMA_SetConfig+0x34c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d009      	beq.n	80029de <DMA_SetConfig+0x2de>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a20      	ldr	r2, [pc, #128]	; (8002a50 <DMA_SetConfig+0x350>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d004      	beq.n	80029de <DMA_SetConfig+0x2de>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <DMA_SetConfig+0x354>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d101      	bne.n	80029e2 <DMA_SetConfig+0x2e2>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <DMA_SetConfig+0x2e4>
 80029e2:	2300      	movs	r3, #0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	2201      	movs	r2, #1
 80029f2:	409a      	lsls	r2, r3
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b40      	cmp	r3, #64	; 0x40
 8002a06:	d108      	bne.n	8002a1a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	60da      	str	r2, [r3, #12]
}
 8002a18:	e007      	b.n	8002a2a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	60da      	str	r2, [r3, #12]
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	58025408 	.word	0x58025408
 8002a3c:	5802541c 	.word	0x5802541c
 8002a40:	58025430 	.word	0x58025430
 8002a44:	58025444 	.word	0x58025444
 8002a48:	58025458 	.word	0x58025458
 8002a4c:	5802546c 	.word	0x5802546c
 8002a50:	58025480 	.word	0x58025480
 8002a54:	58025494 	.word	0x58025494

08002a58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a42      	ldr	r2, [pc, #264]	; (8002b70 <DMA_CalcBaseAndBitshift+0x118>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d04a      	beq.n	8002b00 <DMA_CalcBaseAndBitshift+0xa8>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a41      	ldr	r2, [pc, #260]	; (8002b74 <DMA_CalcBaseAndBitshift+0x11c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d045      	beq.n	8002b00 <DMA_CalcBaseAndBitshift+0xa8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a3f      	ldr	r2, [pc, #252]	; (8002b78 <DMA_CalcBaseAndBitshift+0x120>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d040      	beq.n	8002b00 <DMA_CalcBaseAndBitshift+0xa8>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a3e      	ldr	r2, [pc, #248]	; (8002b7c <DMA_CalcBaseAndBitshift+0x124>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d03b      	beq.n	8002b00 <DMA_CalcBaseAndBitshift+0xa8>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a3c      	ldr	r2, [pc, #240]	; (8002b80 <DMA_CalcBaseAndBitshift+0x128>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d036      	beq.n	8002b00 <DMA_CalcBaseAndBitshift+0xa8>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a3b      	ldr	r2, [pc, #236]	; (8002b84 <DMA_CalcBaseAndBitshift+0x12c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d031      	beq.n	8002b00 <DMA_CalcBaseAndBitshift+0xa8>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a39      	ldr	r2, [pc, #228]	; (8002b88 <DMA_CalcBaseAndBitshift+0x130>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d02c      	beq.n	8002b00 <DMA_CalcBaseAndBitshift+0xa8>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a38      	ldr	r2, [pc, #224]	; (8002b8c <DMA_CalcBaseAndBitshift+0x134>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d027      	beq.n	8002b00 <DMA_CalcBaseAndBitshift+0xa8>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a36      	ldr	r2, [pc, #216]	; (8002b90 <DMA_CalcBaseAndBitshift+0x138>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d022      	beq.n	8002b00 <DMA_CalcBaseAndBitshift+0xa8>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a35      	ldr	r2, [pc, #212]	; (8002b94 <DMA_CalcBaseAndBitshift+0x13c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d01d      	beq.n	8002b00 <DMA_CalcBaseAndBitshift+0xa8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a33      	ldr	r2, [pc, #204]	; (8002b98 <DMA_CalcBaseAndBitshift+0x140>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d018      	beq.n	8002b00 <DMA_CalcBaseAndBitshift+0xa8>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a32      	ldr	r2, [pc, #200]	; (8002b9c <DMA_CalcBaseAndBitshift+0x144>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d013      	beq.n	8002b00 <DMA_CalcBaseAndBitshift+0xa8>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a30      	ldr	r2, [pc, #192]	; (8002ba0 <DMA_CalcBaseAndBitshift+0x148>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00e      	beq.n	8002b00 <DMA_CalcBaseAndBitshift+0xa8>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2f      	ldr	r2, [pc, #188]	; (8002ba4 <DMA_CalcBaseAndBitshift+0x14c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d009      	beq.n	8002b00 <DMA_CalcBaseAndBitshift+0xa8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a2d      	ldr	r2, [pc, #180]	; (8002ba8 <DMA_CalcBaseAndBitshift+0x150>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <DMA_CalcBaseAndBitshift+0xa8>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2c      	ldr	r2, [pc, #176]	; (8002bac <DMA_CalcBaseAndBitshift+0x154>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d101      	bne.n	8002b04 <DMA_CalcBaseAndBitshift+0xac>
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <DMA_CalcBaseAndBitshift+0xae>
 8002b04:	2300      	movs	r3, #0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d024      	beq.n	8002b54 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	3b10      	subs	r3, #16
 8002b12:	4a27      	ldr	r2, [pc, #156]	; (8002bb0 <DMA_CalcBaseAndBitshift+0x158>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <DMA_CalcBaseAndBitshift+0x15c>)
 8002b24:	5cd3      	ldrb	r3, [r2, r3]
 8002b26:	461a      	mov	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d908      	bls.n	8002b44 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b1f      	ldr	r3, [pc, #124]	; (8002bb8 <DMA_CalcBaseAndBitshift+0x160>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	1d1a      	adds	r2, r3, #4
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	659a      	str	r2, [r3, #88]	; 0x58
 8002b42:	e00d      	b.n	8002b60 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <DMA_CalcBaseAndBitshift+0x160>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6593      	str	r3, [r2, #88]	; 0x58
 8002b52:	e005      	b.n	8002b60 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	40020010 	.word	0x40020010
 8002b74:	40020028 	.word	0x40020028
 8002b78:	40020040 	.word	0x40020040
 8002b7c:	40020058 	.word	0x40020058
 8002b80:	40020070 	.word	0x40020070
 8002b84:	40020088 	.word	0x40020088
 8002b88:	400200a0 	.word	0x400200a0
 8002b8c:	400200b8 	.word	0x400200b8
 8002b90:	40020410 	.word	0x40020410
 8002b94:	40020428 	.word	0x40020428
 8002b98:	40020440 	.word	0x40020440
 8002b9c:	40020458 	.word	0x40020458
 8002ba0:	40020470 	.word	0x40020470
 8002ba4:	40020488 	.word	0x40020488
 8002ba8:	400204a0 	.word	0x400204a0
 8002bac:	400204b8 	.word	0x400204b8
 8002bb0:	aaaaaaab 	.word	0xaaaaaaab
 8002bb4:	08005388 	.word	0x08005388
 8002bb8:	fffffc00 	.word	0xfffffc00

08002bbc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d120      	bne.n	8002c12 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d858      	bhi.n	8002c8a <DMA_CheckFifoParam+0xce>
 8002bd8:	a201      	add	r2, pc, #4	; (adr r2, 8002be0 <DMA_CheckFifoParam+0x24>)
 8002bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bde:	bf00      	nop
 8002be0:	08002bf1 	.word	0x08002bf1
 8002be4:	08002c03 	.word	0x08002c03
 8002be8:	08002bf1 	.word	0x08002bf1
 8002bec:	08002c8b 	.word	0x08002c8b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d048      	beq.n	8002c8e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002c00:	e045      	b.n	8002c8e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c0a:	d142      	bne.n	8002c92 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002c10:	e03f      	b.n	8002c92 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1a:	d123      	bne.n	8002c64 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d838      	bhi.n	8002c96 <DMA_CheckFifoParam+0xda>
 8002c24:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <DMA_CheckFifoParam+0x70>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c3d 	.word	0x08002c3d
 8002c30:	08002c43 	.word	0x08002c43
 8002c34:	08002c3d 	.word	0x08002c3d
 8002c38:	08002c55 	.word	0x08002c55
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
        break;
 8002c40:	e030      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d025      	beq.n	8002c9a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002c52:	e022      	b.n	8002c9a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c5c:	d11f      	bne.n	8002c9e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002c62:	e01c      	b.n	8002c9e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d902      	bls.n	8002c72 <DMA_CheckFifoParam+0xb6>
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d003      	beq.n	8002c78 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002c70:	e018      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
        break;
 8002c76:	e015      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00e      	beq.n	8002ca2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
    break;
 8002c88:	e00b      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
        break;
 8002c8a:	bf00      	nop
 8002c8c:	e00a      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
        break;
 8002c8e:	bf00      	nop
 8002c90:	e008      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
        break;
 8002c92:	bf00      	nop
 8002c94:	e006      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
        break;
 8002c96:	bf00      	nop
 8002c98:	e004      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
        break;
 8002c9a:	bf00      	nop
 8002c9c:	e002      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
        break;
 8002c9e:	bf00      	nop
 8002ca0:	e000      	b.n	8002ca4 <DMA_CheckFifoParam+0xe8>
    break;
 8002ca2:	bf00      	nop
    }
  }

  return status;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop

08002cb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a38      	ldr	r2, [pc, #224]	; (8002da8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d022      	beq.n	8002d12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a36      	ldr	r2, [pc, #216]	; (8002dac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01d      	beq.n	8002d12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a35      	ldr	r2, [pc, #212]	; (8002db0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d018      	beq.n	8002d12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a33      	ldr	r2, [pc, #204]	; (8002db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a32      	ldr	r2, [pc, #200]	; (8002db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00e      	beq.n	8002d12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a30      	ldr	r2, [pc, #192]	; (8002dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a2f      	ldr	r2, [pc, #188]	; (8002dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a2d      	ldr	r2, [pc, #180]	; (8002dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d01a      	beq.n	8002d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	3b08      	subs	r3, #8
 8002d24:	4a28      	ldr	r2, [pc, #160]	; (8002dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	091b      	lsrs	r3, r3, #4
 8002d2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	461a      	mov	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a24      	ldr	r2, [pc, #144]	; (8002dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002d40:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	2201      	movs	r2, #1
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002d50:	e024      	b.n	8002d9c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	3b10      	subs	r3, #16
 8002d5a:	4a1e      	ldr	r2, [pc, #120]	; (8002dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4a1c      	ldr	r2, [pc, #112]	; (8002dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d806      	bhi.n	8002d7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4a1b      	ldr	r2, [pc, #108]	; (8002ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d902      	bls.n	8002d7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3308      	adds	r3, #8
 8002d78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	461a      	mov	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a16      	ldr	r2, [pc, #88]	; (8002de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002d8c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	2201      	movs	r2, #1
 8002d96:	409a      	lsls	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	58025408 	.word	0x58025408
 8002dac:	5802541c 	.word	0x5802541c
 8002db0:	58025430 	.word	0x58025430
 8002db4:	58025444 	.word	0x58025444
 8002db8:	58025458 	.word	0x58025458
 8002dbc:	5802546c 	.word	0x5802546c
 8002dc0:	58025480 	.word	0x58025480
 8002dc4:	58025494 	.word	0x58025494
 8002dc8:	cccccccd 	.word	0xcccccccd
 8002dcc:	16009600 	.word	0x16009600
 8002dd0:	58025880 	.word	0x58025880
 8002dd4:	aaaaaaab 	.word	0xaaaaaaab
 8002dd8:	400204b8 	.word	0x400204b8
 8002ddc:	4002040f 	.word	0x4002040f
 8002de0:	10008200 	.word	0x10008200
 8002de4:	40020880 	.word	0x40020880

08002de8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d04a      	beq.n	8002e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d847      	bhi.n	8002e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a25      	ldr	r2, [pc, #148]	; (8002ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d022      	beq.n	8002e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a24      	ldr	r2, [pc, #144]	; (8002ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d01d      	beq.n	8002e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a22      	ldr	r2, [pc, #136]	; (8002ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d018      	beq.n	8002e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a21      	ldr	r2, [pc, #132]	; (8002eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d013      	beq.n	8002e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00e      	beq.n	8002e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1e      	ldr	r2, [pc, #120]	; (8002eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1b      	ldr	r2, [pc, #108]	; (8002ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d101      	bne.n	8002e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	461a      	mov	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002e70:	671a      	str	r2, [r3, #112]	; 0x70
 8002e72:	e009      	b.n	8002e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a11      	ldr	r2, [pc, #68]	; (8002ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002e86:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	58025408 	.word	0x58025408
 8002ea4:	5802541c 	.word	0x5802541c
 8002ea8:	58025430 	.word	0x58025430
 8002eac:	58025444 	.word	0x58025444
 8002eb0:	58025458 	.word	0x58025458
 8002eb4:	5802546c 	.word	0x5802546c
 8002eb8:	58025480 	.word	0x58025480
 8002ebc:	58025494 	.word	0x58025494
 8002ec0:	1600963f 	.word	0x1600963f
 8002ec4:	58025940 	.word	0x58025940
 8002ec8:	1000823f 	.word	0x1000823f
 8002ecc:	40020940 	.word	0x40020940

08002ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	; 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ede:	4b86      	ldr	r3, [pc, #536]	; (80030f8 <HAL_GPIO_Init+0x228>)
 8002ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ee2:	e18c      	b.n	80031fe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	2101      	movs	r1, #1
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 817e 	beq.w	80031f8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d005      	beq.n	8002f14 <HAL_GPIO_Init+0x44>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d130      	bne.n	8002f76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	2203      	movs	r2, #3
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	091b      	lsrs	r3, r3, #4
 8002f60:	f003 0201 	and.w	r2, r3, #1
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d017      	beq.n	8002fb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d123      	bne.n	8003006 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	08da      	lsrs	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3208      	adds	r2, #8
 8002fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	220f      	movs	r2, #15
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	691a      	ldr	r2, [r3, #16]
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	08da      	lsrs	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3208      	adds	r2, #8
 8003000:	69b9      	ldr	r1, [r7, #24]
 8003002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	2203      	movs	r2, #3
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 0203 	and.w	r2, r3, #3
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 80d8 	beq.w	80031f8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003048:	4b2c      	ldr	r3, [pc, #176]	; (80030fc <HAL_GPIO_Init+0x22c>)
 800304a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800304e:	4a2b      	ldr	r2, [pc, #172]	; (80030fc <HAL_GPIO_Init+0x22c>)
 8003050:	f043 0302 	orr.w	r3, r3, #2
 8003054:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003058:	4b28      	ldr	r3, [pc, #160]	; (80030fc <HAL_GPIO_Init+0x22c>)
 800305a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003066:	4a26      	ldr	r2, [pc, #152]	; (8003100 <HAL_GPIO_Init+0x230>)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	3302      	adds	r3, #2
 800306e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	220f      	movs	r2, #15
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <HAL_GPIO_Init+0x234>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d04a      	beq.n	8003128 <HAL_GPIO_Init+0x258>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a1c      	ldr	r2, [pc, #112]	; (8003108 <HAL_GPIO_Init+0x238>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d02b      	beq.n	80030f2 <HAL_GPIO_Init+0x222>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a1b      	ldr	r2, [pc, #108]	; (800310c <HAL_GPIO_Init+0x23c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d025      	beq.n	80030ee <HAL_GPIO_Init+0x21e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a1a      	ldr	r2, [pc, #104]	; (8003110 <HAL_GPIO_Init+0x240>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d01f      	beq.n	80030ea <HAL_GPIO_Init+0x21a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a19      	ldr	r2, [pc, #100]	; (8003114 <HAL_GPIO_Init+0x244>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d019      	beq.n	80030e6 <HAL_GPIO_Init+0x216>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a18      	ldr	r2, [pc, #96]	; (8003118 <HAL_GPIO_Init+0x248>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_GPIO_Init+0x212>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a17      	ldr	r2, [pc, #92]	; (800311c <HAL_GPIO_Init+0x24c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00d      	beq.n	80030de <HAL_GPIO_Init+0x20e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a16      	ldr	r2, [pc, #88]	; (8003120 <HAL_GPIO_Init+0x250>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d007      	beq.n	80030da <HAL_GPIO_Init+0x20a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a15      	ldr	r2, [pc, #84]	; (8003124 <HAL_GPIO_Init+0x254>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d101      	bne.n	80030d6 <HAL_GPIO_Init+0x206>
 80030d2:	2309      	movs	r3, #9
 80030d4:	e029      	b.n	800312a <HAL_GPIO_Init+0x25a>
 80030d6:	230a      	movs	r3, #10
 80030d8:	e027      	b.n	800312a <HAL_GPIO_Init+0x25a>
 80030da:	2307      	movs	r3, #7
 80030dc:	e025      	b.n	800312a <HAL_GPIO_Init+0x25a>
 80030de:	2306      	movs	r3, #6
 80030e0:	e023      	b.n	800312a <HAL_GPIO_Init+0x25a>
 80030e2:	2305      	movs	r3, #5
 80030e4:	e021      	b.n	800312a <HAL_GPIO_Init+0x25a>
 80030e6:	2304      	movs	r3, #4
 80030e8:	e01f      	b.n	800312a <HAL_GPIO_Init+0x25a>
 80030ea:	2303      	movs	r3, #3
 80030ec:	e01d      	b.n	800312a <HAL_GPIO_Init+0x25a>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e01b      	b.n	800312a <HAL_GPIO_Init+0x25a>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e019      	b.n	800312a <HAL_GPIO_Init+0x25a>
 80030f6:	bf00      	nop
 80030f8:	58000080 	.word	0x58000080
 80030fc:	58024400 	.word	0x58024400
 8003100:	58000400 	.word	0x58000400
 8003104:	58020000 	.word	0x58020000
 8003108:	58020400 	.word	0x58020400
 800310c:	58020800 	.word	0x58020800
 8003110:	58020c00 	.word	0x58020c00
 8003114:	58021000 	.word	0x58021000
 8003118:	58021400 	.word	0x58021400
 800311c:	58021800 	.word	0x58021800
 8003120:	58021c00 	.word	0x58021c00
 8003124:	58022400 	.word	0x58022400
 8003128:	2300      	movs	r3, #0
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	f002 0203 	and.w	r2, r2, #3
 8003130:	0092      	lsls	r2, r2, #2
 8003132:	4093      	lsls	r3, r2
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800313a:	4938      	ldr	r1, [pc, #224]	; (800321c <HAL_GPIO_Init+0x34c>)
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	3302      	adds	r3, #2
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	43db      	mvns	r3, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4013      	ands	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800316e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800319c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	3301      	adds	r3, #1
 80031fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	f47f ae6b 	bne.w	8002ee4 <HAL_GPIO_Init+0x14>
  }
}
 800320e:	bf00      	nop
 8003210:	bf00      	nop
 8003212:	3724      	adds	r7, #36	; 0x24
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	58000400 	.word	0x58000400

08003220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	807b      	strh	r3, [r7, #2]
 800322c:	4613      	mov	r3, r2
 800322e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003230:	787b      	ldrb	r3, [r7, #1]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003236:	887a      	ldrh	r2, [r7, #2]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800323c:	e003      	b.n	8003246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800323e:	887b      	ldrh	r3, [r7, #2]
 8003240:	041a      	lsls	r2, r3, #16
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	619a      	str	r2, [r3, #24]
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800325c:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <HAL_PWREx_ConfigSupply+0x70>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b04      	cmp	r3, #4
 8003266:	d00a      	beq.n	800327e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003268:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <HAL_PWREx_ConfigSupply+0x70>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	429a      	cmp	r2, r3
 8003274:	d001      	beq.n	800327a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e01f      	b.n	80032ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	e01d      	b.n	80032ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_PWREx_ConfigSupply+0x70>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f023 0207 	bic.w	r2, r3, #7
 8003286:	490f      	ldr	r1, [pc, #60]	; (80032c4 <HAL_PWREx_ConfigSupply+0x70>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4313      	orrs	r3, r2
 800328c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800328e:	f7fd fd53 	bl	8000d38 <HAL_GetTick>
 8003292:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003294:	e009      	b.n	80032aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003296:	f7fd fd4f 	bl	8000d38 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032a4:	d901      	bls.n	80032aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e007      	b.n	80032ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_PWREx_ConfigSupply+0x70>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b6:	d1ee      	bne.n	8003296 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	58024800 	.word	0x58024800

080032c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08c      	sub	sp, #48	; 0x30
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e39d      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8087 	beq.w	80033f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032e8:	4b88      	ldr	r3, [pc, #544]	; (800350c <HAL_RCC_OscConfig+0x244>)
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032f2:	4b86      	ldr	r3, [pc, #536]	; (800350c <HAL_RCC_OscConfig+0x244>)
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	2b10      	cmp	r3, #16
 80032fc:	d007      	beq.n	800330e <HAL_RCC_OscConfig+0x46>
 80032fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003300:	2b18      	cmp	r3, #24
 8003302:	d110      	bne.n	8003326 <HAL_RCC_OscConfig+0x5e>
 8003304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d10b      	bne.n	8003326 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330e:	4b7f      	ldr	r3, [pc, #508]	; (800350c <HAL_RCC_OscConfig+0x244>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d06c      	beq.n	80033f4 <HAL_RCC_OscConfig+0x12c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d168      	bne.n	80033f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e377      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332e:	d106      	bne.n	800333e <HAL_RCC_OscConfig+0x76>
 8003330:	4b76      	ldr	r3, [pc, #472]	; (800350c <HAL_RCC_OscConfig+0x244>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a75      	ldr	r2, [pc, #468]	; (800350c <HAL_RCC_OscConfig+0x244>)
 8003336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	e02e      	b.n	800339c <HAL_RCC_OscConfig+0xd4>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10c      	bne.n	8003360 <HAL_RCC_OscConfig+0x98>
 8003346:	4b71      	ldr	r3, [pc, #452]	; (800350c <HAL_RCC_OscConfig+0x244>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a70      	ldr	r2, [pc, #448]	; (800350c <HAL_RCC_OscConfig+0x244>)
 800334c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	4b6e      	ldr	r3, [pc, #440]	; (800350c <HAL_RCC_OscConfig+0x244>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a6d      	ldr	r2, [pc, #436]	; (800350c <HAL_RCC_OscConfig+0x244>)
 8003358:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e01d      	b.n	800339c <HAL_RCC_OscConfig+0xd4>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003368:	d10c      	bne.n	8003384 <HAL_RCC_OscConfig+0xbc>
 800336a:	4b68      	ldr	r3, [pc, #416]	; (800350c <HAL_RCC_OscConfig+0x244>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a67      	ldr	r2, [pc, #412]	; (800350c <HAL_RCC_OscConfig+0x244>)
 8003370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	4b65      	ldr	r3, [pc, #404]	; (800350c <HAL_RCC_OscConfig+0x244>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a64      	ldr	r2, [pc, #400]	; (800350c <HAL_RCC_OscConfig+0x244>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e00b      	b.n	800339c <HAL_RCC_OscConfig+0xd4>
 8003384:	4b61      	ldr	r3, [pc, #388]	; (800350c <HAL_RCC_OscConfig+0x244>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a60      	ldr	r2, [pc, #384]	; (800350c <HAL_RCC_OscConfig+0x244>)
 800338a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b5e      	ldr	r3, [pc, #376]	; (800350c <HAL_RCC_OscConfig+0x244>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a5d      	ldr	r2, [pc, #372]	; (800350c <HAL_RCC_OscConfig+0x244>)
 8003396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d013      	beq.n	80033cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fd fcc8 	bl	8000d38 <HAL_GetTick>
 80033a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fd fcc4 	bl	8000d38 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e32b      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033be:	4b53      	ldr	r3, [pc, #332]	; (800350c <HAL_RCC_OscConfig+0x244>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0xe4>
 80033ca:	e014      	b.n	80033f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fd fcb4 	bl	8000d38 <HAL_GetTick>
 80033d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d4:	f7fd fcb0 	bl	8000d38 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e317      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033e6:	4b49      	ldr	r3, [pc, #292]	; (800350c <HAL_RCC_OscConfig+0x244>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x10c>
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 808c 	beq.w	800351c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003404:	4b41      	ldr	r3, [pc, #260]	; (800350c <HAL_RCC_OscConfig+0x244>)
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800340c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800340e:	4b3f      	ldr	r3, [pc, #252]	; (800350c <HAL_RCC_OscConfig+0x244>)
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <HAL_RCC_OscConfig+0x162>
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	2b18      	cmp	r3, #24
 800341e:	d137      	bne.n	8003490 <HAL_RCC_OscConfig+0x1c8>
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d132      	bne.n	8003490 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800342a:	4b38      	ldr	r3, [pc, #224]	; (800350c <HAL_RCC_OscConfig+0x244>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <HAL_RCC_OscConfig+0x17a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e2e9      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003442:	4b32      	ldr	r3, [pc, #200]	; (800350c <HAL_RCC_OscConfig+0x244>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 0219 	bic.w	r2, r3, #25
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	492f      	ldr	r1, [pc, #188]	; (800350c <HAL_RCC_OscConfig+0x244>)
 8003450:	4313      	orrs	r3, r2
 8003452:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003454:	f7fd fc70 	bl	8000d38 <HAL_GetTick>
 8003458:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800345c:	f7fd fc6c 	bl	8000d38 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e2d3      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800346e:	4b27      	ldr	r3, [pc, #156]	; (800350c <HAL_RCC_OscConfig+0x244>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347a:	4b24      	ldr	r3, [pc, #144]	; (800350c <HAL_RCC_OscConfig+0x244>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	061b      	lsls	r3, r3, #24
 8003488:	4920      	ldr	r1, [pc, #128]	; (800350c <HAL_RCC_OscConfig+0x244>)
 800348a:	4313      	orrs	r3, r2
 800348c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800348e:	e045      	b.n	800351c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d026      	beq.n	80034e6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003498:	4b1c      	ldr	r3, [pc, #112]	; (800350c <HAL_RCC_OscConfig+0x244>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f023 0219 	bic.w	r2, r3, #25
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4919      	ldr	r1, [pc, #100]	; (800350c <HAL_RCC_OscConfig+0x244>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034aa:	f7fd fc45 	bl	8000d38 <HAL_GetTick>
 80034ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b2:	f7fd fc41 	bl	8000d38 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e2a8      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034c4:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_RCC_OscConfig+0x244>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <HAL_RCC_OscConfig+0x244>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	490b      	ldr	r1, [pc, #44]	; (800350c <HAL_RCC_OscConfig+0x244>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
 80034e4:	e01a      	b.n	800351c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_RCC_OscConfig+0x244>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a08      	ldr	r2, [pc, #32]	; (800350c <HAL_RCC_OscConfig+0x244>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f2:	f7fd fc21 	bl	8000d38 <HAL_GetTick>
 80034f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034f8:	e00a      	b.n	8003510 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034fa:	f7fd fc1d 	bl	8000d38 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d903      	bls.n	8003510 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e284      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
 800350c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003510:	4b96      	ldr	r3, [pc, #600]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1ee      	bne.n	80034fa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b00      	cmp	r3, #0
 8003526:	d06a      	beq.n	80035fe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003528:	4b90      	ldr	r3, [pc, #576]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003530:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003532:	4b8e      	ldr	r3, [pc, #568]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 8003534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003536:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2b08      	cmp	r3, #8
 800353c:	d007      	beq.n	800354e <HAL_RCC_OscConfig+0x286>
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b18      	cmp	r3, #24
 8003542:	d11b      	bne.n	800357c <HAL_RCC_OscConfig+0x2b4>
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d116      	bne.n	800357c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800354e:	4b87      	ldr	r3, [pc, #540]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	d005      	beq.n	8003566 <HAL_RCC_OscConfig+0x29e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	2b80      	cmp	r3, #128	; 0x80
 8003560:	d001      	beq.n	8003566 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e257      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003566:	4b81      	ldr	r3, [pc, #516]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	061b      	lsls	r3, r3, #24
 8003574:	497d      	ldr	r1, [pc, #500]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 8003576:	4313      	orrs	r3, r2
 8003578:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800357a:	e040      	b.n	80035fe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d023      	beq.n	80035cc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003584:	4b79      	ldr	r3, [pc, #484]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a78      	ldr	r2, [pc, #480]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 800358a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fd fbd2 	bl	8000d38 <HAL_GetTick>
 8003594:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003598:	f7fd fbce 	bl	8000d38 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e235      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035aa:	4b70      	ldr	r3, [pc, #448]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035b6:	4b6d      	ldr	r3, [pc, #436]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	061b      	lsls	r3, r3, #24
 80035c4:	4969      	ldr	r1, [pc, #420]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60cb      	str	r3, [r1, #12]
 80035ca:	e018      	b.n	80035fe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80035cc:	4b67      	ldr	r3, [pc, #412]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a66      	ldr	r2, [pc, #408]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 80035d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fd fbae 	bl	8000d38 <HAL_GetTick>
 80035dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80035e0:	f7fd fbaa 	bl	8000d38 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e211      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035f2:	4b5e      	ldr	r3, [pc, #376]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d036      	beq.n	8003678 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d019      	beq.n	8003646 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003612:	4b56      	ldr	r3, [pc, #344]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 8003614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003616:	4a55      	ldr	r2, [pc, #340]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361e:	f7fd fb8b 	bl	8000d38 <HAL_GetTick>
 8003622:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003626:	f7fd fb87 	bl	8000d38 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e1ee      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003638:	4b4c      	ldr	r3, [pc, #304]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 800363a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x35e>
 8003644:	e018      	b.n	8003678 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003646:	4b49      	ldr	r3, [pc, #292]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 8003648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364a:	4a48      	ldr	r2, [pc, #288]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 800364c:	f023 0301 	bic.w	r3, r3, #1
 8003650:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7fd fb71 	bl	8000d38 <HAL_GetTick>
 8003656:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800365a:	f7fd fb6d 	bl	8000d38 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e1d4      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800366c:	4b3f      	ldr	r3, [pc, #252]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 800366e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f0      	bne.n	800365a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b00      	cmp	r3, #0
 8003682:	d036      	beq.n	80036f2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d019      	beq.n	80036c0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800368c:	4b37      	ldr	r3, [pc, #220]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a36      	ldr	r2, [pc, #216]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 8003692:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003696:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003698:	f7fd fb4e 	bl	8000d38 <HAL_GetTick>
 800369c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80036a0:	f7fd fb4a 	bl	8000d38 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e1b1      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036b2:	4b2e      	ldr	r3, [pc, #184]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0x3d8>
 80036be:	e018      	b.n	80036f2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036c0:	4b2a      	ldr	r3, [pc, #168]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a29      	ldr	r2, [pc, #164]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 80036c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036cc:	f7fd fb34 	bl	8000d38 <HAL_GetTick>
 80036d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80036d4:	f7fd fb30 	bl	8000d38 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e197      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036e6:	4b21      	ldr	r3, [pc, #132]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8086 	beq.w	800380c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800370c:	f7fd fb14 	bl	8000d38 <HAL_GetTick>
 8003710:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003714:	f7fd fb10 	bl	8000d38 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e177      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003726:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d106      	bne.n	8003748 <HAL_RCC_OscConfig+0x480>
 800373a:	4b0c      	ldr	r3, [pc, #48]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	4a0b      	ldr	r2, [pc, #44]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	6713      	str	r3, [r2, #112]	; 0x70
 8003746:	e032      	b.n	80037ae <HAL_RCC_OscConfig+0x4e6>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d111      	bne.n	8003774 <HAL_RCC_OscConfig+0x4ac>
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	4a05      	ldr	r2, [pc, #20]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 8003756:	f023 0301 	bic.w	r3, r3, #1
 800375a:	6713      	str	r3, [r2, #112]	; 0x70
 800375c:	4b03      	ldr	r3, [pc, #12]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	4a02      	ldr	r2, [pc, #8]	; (800376c <HAL_RCC_OscConfig+0x4a4>)
 8003762:	f023 0304 	bic.w	r3, r3, #4
 8003766:	6713      	str	r3, [r2, #112]	; 0x70
 8003768:	e021      	b.n	80037ae <HAL_RCC_OscConfig+0x4e6>
 800376a:	bf00      	nop
 800376c:	58024400 	.word	0x58024400
 8003770:	58024800 	.word	0x58024800
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b05      	cmp	r3, #5
 800377a:	d10c      	bne.n	8003796 <HAL_RCC_OscConfig+0x4ce>
 800377c:	4b83      	ldr	r3, [pc, #524]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	4a82      	ldr	r2, [pc, #520]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 8003782:	f043 0304 	orr.w	r3, r3, #4
 8003786:	6713      	str	r3, [r2, #112]	; 0x70
 8003788:	4b80      	ldr	r3, [pc, #512]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	4a7f      	ldr	r2, [pc, #508]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6713      	str	r3, [r2, #112]	; 0x70
 8003794:	e00b      	b.n	80037ae <HAL_RCC_OscConfig+0x4e6>
 8003796:	4b7d      	ldr	r3, [pc, #500]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	4a7c      	ldr	r2, [pc, #496]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	6713      	str	r3, [r2, #112]	; 0x70
 80037a2:	4b7a      	ldr	r3, [pc, #488]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	4a79      	ldr	r2, [pc, #484]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 80037a8:	f023 0304 	bic.w	r3, r3, #4
 80037ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d015      	beq.n	80037e2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b6:	f7fd fabf 	bl	8000d38 <HAL_GetTick>
 80037ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037bc:	e00a      	b.n	80037d4 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037be:	f7fd fabb 	bl	8000d38 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e120      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037d4:	4b6d      	ldr	r3, [pc, #436]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0ee      	beq.n	80037be <HAL_RCC_OscConfig+0x4f6>
 80037e0:	e014      	b.n	800380c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e2:	f7fd faa9 	bl	8000d38 <HAL_GetTick>
 80037e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ea:	f7fd faa5 	bl	8000d38 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e10a      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003800:	4b62      	ldr	r3, [pc, #392]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1ee      	bne.n	80037ea <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80ff 	beq.w	8003a14 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003816:	4b5d      	ldr	r3, [pc, #372]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800381e:	2b18      	cmp	r3, #24
 8003820:	f000 80ba 	beq.w	8003998 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	2b02      	cmp	r3, #2
 800382a:	f040 8095 	bne.w	8003958 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382e:	4b57      	ldr	r3, [pc, #348]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a56      	ldr	r2, [pc, #344]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 8003834:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7fd fa7d 	bl	8000d38 <HAL_GetTick>
 800383e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003842:	f7fd fa79 	bl	8000d38 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e0e0      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003854:	4b4d      	ldr	r3, [pc, #308]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003860:	4b4a      	ldr	r3, [pc, #296]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 8003862:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003864:	4b4a      	ldr	r3, [pc, #296]	; (8003990 <HAL_RCC_OscConfig+0x6c8>)
 8003866:	4013      	ands	r3, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003870:	0112      	lsls	r2, r2, #4
 8003872:	430a      	orrs	r2, r1
 8003874:	4945      	ldr	r1, [pc, #276]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	628b      	str	r3, [r1, #40]	; 0x28
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	3b01      	subs	r3, #1
 8003880:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003888:	3b01      	subs	r3, #1
 800388a:	025b      	lsls	r3, r3, #9
 800388c:	b29b      	uxth	r3, r3
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	3b01      	subs	r3, #1
 8003896:	041b      	lsls	r3, r3, #16
 8003898:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a2:	3b01      	subs	r3, #1
 80038a4:	061b      	lsls	r3, r3, #24
 80038a6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80038aa:	4938      	ldr	r1, [pc, #224]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80038b0:	4b36      	ldr	r3, [pc, #216]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	4a35      	ldr	r2, [pc, #212]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 80038b6:	f023 0301 	bic.w	r3, r3, #1
 80038ba:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80038bc:	4b33      	ldr	r3, [pc, #204]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 80038be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c0:	4b34      	ldr	r3, [pc, #208]	; (8003994 <HAL_RCC_OscConfig+0x6cc>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038c8:	00d2      	lsls	r2, r2, #3
 80038ca:	4930      	ldr	r1, [pc, #192]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80038d0:	4b2e      	ldr	r3, [pc, #184]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	f023 020c 	bic.w	r2, r3, #12
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	492b      	ldr	r1, [pc, #172]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80038e2:	4b2a      	ldr	r3, [pc, #168]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	f023 0202 	bic.w	r2, r3, #2
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	4927      	ldr	r1, [pc, #156]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038f4:	4b25      	ldr	r3, [pc, #148]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	4a24      	ldr	r2, [pc, #144]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 80038fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003900:	4b22      	ldr	r3, [pc, #136]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	4a21      	ldr	r2, [pc, #132]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 8003906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800390a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800390c:	4b1f      	ldr	r3, [pc, #124]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	4a1e      	ldr	r2, [pc, #120]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 8003912:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003916:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003918:	4b1c      	ldr	r3, [pc, #112]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	4a1b      	ldr	r2, [pc, #108]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003924:	4b19      	ldr	r3, [pc, #100]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a18      	ldr	r2, [pc, #96]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 800392a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800392e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7fd fa02 	bl	8000d38 <HAL_GetTick>
 8003934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003938:	f7fd f9fe 	bl	8000d38 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e065      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800394a:	4b10      	ldr	r3, [pc, #64]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0x670>
 8003956:	e05d      	b.n	8003a14 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0b      	ldr	r2, [pc, #44]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 800395e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fd f9e8 	bl	8000d38 <HAL_GetTick>
 8003968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396c:	f7fd f9e4 	bl	8000d38 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e04b      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800397e:	4b03      	ldr	r3, [pc, #12]	; (800398c <HAL_RCC_OscConfig+0x6c4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x6a4>
 800398a:	e043      	b.n	8003a14 <HAL_RCC_OscConfig+0x74c>
 800398c:	58024400 	.word	0x58024400
 8003990:	fffffc0c 	.word	0xfffffc0c
 8003994:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003998:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <HAL_RCC_OscConfig+0x758>)
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800399e:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_RCC_OscConfig+0x758>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d031      	beq.n	8003a10 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f003 0203 	and.w	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d12a      	bne.n	8003a10 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d122      	bne.n	8003a10 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d11a      	bne.n	8003a10 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	0a5b      	lsrs	r3, r3, #9
 80039de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d111      	bne.n	8003a10 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	0c1b      	lsrs	r3, r3, #16
 80039f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d108      	bne.n	8003a10 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	0e1b      	lsrs	r3, r3, #24
 8003a02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3730      	adds	r7, #48	; 0x30
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	58024400 	.word	0x58024400

08003a24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e19c      	b.n	8003d72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a38:	4b8a      	ldr	r3, [pc, #552]	; (8003c64 <HAL_RCC_ClockConfig+0x240>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d910      	bls.n	8003a68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a46:	4b87      	ldr	r3, [pc, #540]	; (8003c64 <HAL_RCC_ClockConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 020f 	bic.w	r2, r3, #15
 8003a4e:	4985      	ldr	r1, [pc, #532]	; (8003c64 <HAL_RCC_ClockConfig+0x240>)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a56:	4b83      	ldr	r3, [pc, #524]	; (8003c64 <HAL_RCC_ClockConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e184      	b.n	8003d72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d010      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	4b7b      	ldr	r3, [pc, #492]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d908      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a84:	4b78      	ldr	r3, [pc, #480]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	4975      	ldr	r1, [pc, #468]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d010      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	4b70      	ldr	r3, [pc, #448]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d908      	bls.n	8003ac4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ab2:	4b6d      	ldr	r3, [pc, #436]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	496a      	ldr	r1, [pc, #424]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d010      	beq.n	8003af2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	4b64      	ldr	r3, [pc, #400]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d908      	bls.n	8003af2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ae0:	4b61      	ldr	r3, [pc, #388]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	495e      	ldr	r1, [pc, #376]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d010      	beq.n	8003b20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69da      	ldr	r2, [r3, #28]
 8003b02:	4b59      	ldr	r3, [pc, #356]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d908      	bls.n	8003b20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b0e:	4b56      	ldr	r3, [pc, #344]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	4953      	ldr	r1, [pc, #332]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d010      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	4b4d      	ldr	r3, [pc, #308]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d908      	bls.n	8003b4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b3c:	4b4a      	ldr	r3, [pc, #296]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f023 020f 	bic.w	r2, r3, #15
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4947      	ldr	r1, [pc, #284]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d055      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b5a:	4b43      	ldr	r3, [pc, #268]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	4940      	ldr	r1, [pc, #256]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d107      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b74:	4b3c      	ldr	r3, [pc, #240]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d121      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0f6      	b.n	8003d72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d107      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b8c:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d115      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0ea      	b.n	8003d72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d107      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ba4:	4b30      	ldr	r3, [pc, #192]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0de      	b.n	8003d72 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bb4:	4b2c      	ldr	r3, [pc, #176]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0d6      	b.n	8003d72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bc4:	4b28      	ldr	r3, [pc, #160]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	f023 0207 	bic.w	r2, r3, #7
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4925      	ldr	r1, [pc, #148]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd6:	f7fd f8af 	bl	8000d38 <HAL_GetTick>
 8003bda:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bdc:	e00a      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bde:	f7fd f8ab 	bl	8000d38 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e0be      	b.n	8003d72 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf4:	4b1c      	ldr	r3, [pc, #112]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d1eb      	bne.n	8003bde <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d010      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d208      	bcs.n	8003c34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	f023 020f 	bic.w	r2, r3, #15
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	490e      	ldr	r1, [pc, #56]	; (8003c68 <HAL_RCC_ClockConfig+0x244>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_RCC_ClockConfig+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d214      	bcs.n	8003c6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <HAL_RCC_ClockConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 020f 	bic.w	r2, r3, #15
 8003c4a:	4906      	ldr	r1, [pc, #24]	; (8003c64 <HAL_RCC_ClockConfig+0x240>)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <HAL_RCC_ClockConfig+0x240>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e086      	b.n	8003d72 <HAL_RCC_ClockConfig+0x34e>
 8003c64:	52002000 	.word	0x52002000
 8003c68:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d010      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	4b3f      	ldr	r3, [pc, #252]	; (8003d7c <HAL_RCC_ClockConfig+0x358>)
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d208      	bcs.n	8003c9a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c88:	4b3c      	ldr	r3, [pc, #240]	; (8003d7c <HAL_RCC_ClockConfig+0x358>)
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	4939      	ldr	r1, [pc, #228]	; (8003d7c <HAL_RCC_ClockConfig+0x358>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d010      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	4b34      	ldr	r3, [pc, #208]	; (8003d7c <HAL_RCC_ClockConfig+0x358>)
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d208      	bcs.n	8003cc8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cb6:	4b31      	ldr	r3, [pc, #196]	; (8003d7c <HAL_RCC_ClockConfig+0x358>)
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	492e      	ldr	r1, [pc, #184]	; (8003d7c <HAL_RCC_ClockConfig+0x358>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d010      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699a      	ldr	r2, [r3, #24]
 8003cd8:	4b28      	ldr	r3, [pc, #160]	; (8003d7c <HAL_RCC_ClockConfig+0x358>)
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d208      	bcs.n	8003cf6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ce4:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <HAL_RCC_ClockConfig+0x358>)
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	4922      	ldr	r1, [pc, #136]	; (8003d7c <HAL_RCC_ClockConfig+0x358>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d010      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69da      	ldr	r2, [r3, #28]
 8003d06:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <HAL_RCC_ClockConfig+0x358>)
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d208      	bcs.n	8003d24 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003d12:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <HAL_RCC_ClockConfig+0x358>)
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	4917      	ldr	r1, [pc, #92]	; (8003d7c <HAL_RCC_ClockConfig+0x358>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d24:	f000 f834 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b14      	ldr	r3, [pc, #80]	; (8003d7c <HAL_RCC_ClockConfig+0x358>)
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	0a1b      	lsrs	r3, r3, #8
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	4912      	ldr	r1, [pc, #72]	; (8003d80 <HAL_RCC_ClockConfig+0x35c>)
 8003d36:	5ccb      	ldrb	r3, [r1, r3]
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d42:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <HAL_RCC_ClockConfig+0x358>)
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	4a0d      	ldr	r2, [pc, #52]	; (8003d80 <HAL_RCC_ClockConfig+0x35c>)
 8003d4c:	5cd3      	ldrb	r3, [r2, r3]
 8003d4e:	f003 031f 	and.w	r3, r3, #31
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
 8003d58:	4a0a      	ldr	r2, [pc, #40]	; (8003d84 <HAL_RCC_ClockConfig+0x360>)
 8003d5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d5c:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <HAL_RCC_ClockConfig+0x364>)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <HAL_RCC_ClockConfig+0x368>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc ff9c 	bl	8000ca4 <HAL_InitTick>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	58024400 	.word	0x58024400
 8003d80:	08005378 	.word	0x08005378
 8003d84:	24000004 	.word	0x24000004
 8003d88:	24000000 	.word	0x24000000
 8003d8c:	24000008 	.word	0x24000008

08003d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b089      	sub	sp, #36	; 0x24
 8003d94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d96:	4bb3      	ldr	r3, [pc, #716]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d9e:	2b18      	cmp	r3, #24
 8003da0:	f200 8155 	bhi.w	800404e <HAL_RCC_GetSysClockFreq+0x2be>
 8003da4:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <HAL_RCC_GetSysClockFreq+0x1c>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003e11 	.word	0x08003e11
 8003db0:	0800404f 	.word	0x0800404f
 8003db4:	0800404f 	.word	0x0800404f
 8003db8:	0800404f 	.word	0x0800404f
 8003dbc:	0800404f 	.word	0x0800404f
 8003dc0:	0800404f 	.word	0x0800404f
 8003dc4:	0800404f 	.word	0x0800404f
 8003dc8:	0800404f 	.word	0x0800404f
 8003dcc:	08003e37 	.word	0x08003e37
 8003dd0:	0800404f 	.word	0x0800404f
 8003dd4:	0800404f 	.word	0x0800404f
 8003dd8:	0800404f 	.word	0x0800404f
 8003ddc:	0800404f 	.word	0x0800404f
 8003de0:	0800404f 	.word	0x0800404f
 8003de4:	0800404f 	.word	0x0800404f
 8003de8:	0800404f 	.word	0x0800404f
 8003dec:	08003e3d 	.word	0x08003e3d
 8003df0:	0800404f 	.word	0x0800404f
 8003df4:	0800404f 	.word	0x0800404f
 8003df8:	0800404f 	.word	0x0800404f
 8003dfc:	0800404f 	.word	0x0800404f
 8003e00:	0800404f 	.word	0x0800404f
 8003e04:	0800404f 	.word	0x0800404f
 8003e08:	0800404f 	.word	0x0800404f
 8003e0c:	08003e43 	.word	0x08003e43
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e10:	4b94      	ldr	r3, [pc, #592]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d009      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e1c:	4b91      	ldr	r3, [pc, #580]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	08db      	lsrs	r3, r3, #3
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	4a90      	ldr	r2, [pc, #576]	; (8004068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e28:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003e2e:	e111      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e30:	4b8d      	ldr	r3, [pc, #564]	; (8004068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e32:	61bb      	str	r3, [r7, #24]
    break;
 8003e34:	e10e      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003e36:	4b8d      	ldr	r3, [pc, #564]	; (800406c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e38:	61bb      	str	r3, [r7, #24]
    break;
 8003e3a:	e10b      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003e3c:	4b8c      	ldr	r3, [pc, #560]	; (8004070 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e3e:	61bb      	str	r3, [r7, #24]
    break;
 8003e40:	e108      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e42:	4b88      	ldr	r3, [pc, #544]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003e4c:	4b85      	ldr	r3, [pc, #532]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e56:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e58:	4b82      	ldr	r3, [pc, #520]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003e62:	4b80      	ldr	r3, [pc, #512]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	08db      	lsrs	r3, r3, #3
 8003e68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80e1 	beq.w	8004048 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	f000 8083 	beq.w	8003f94 <HAL_RCC_GetSysClockFreq+0x204>
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	f200 80a1 	bhi.w	8003fd8 <HAL_RCC_GetSysClockFreq+0x248>
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x114>
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d056      	beq.n	8003f50 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ea2:	e099      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ea4:	4b6f      	ldr	r3, [pc, #444]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d02d      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003eb0:	4b6c      	ldr	r3, [pc, #432]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	08db      	lsrs	r3, r3, #3
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	4a6b      	ldr	r2, [pc, #428]	; (8004068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	ee07 3a90 	vmov	s15, r3
 8003ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	ee07 3a90 	vmov	s15, r3
 8003ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eda:	4b62      	ldr	r3, [pc, #392]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003f0a:	e087      	b.n	800401c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f16:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004078 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1e:	4b51      	ldr	r3, [pc, #324]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f32:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f4e:	e065      	b.n	800401c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800407c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f62:	4b40      	ldr	r3, [pc, #256]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f76:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f92:	e043      	b.n	800401c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004080 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fa6:	4b2f      	ldr	r3, [pc, #188]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fd6:	e021      	b.n	800401c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800407c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fea:	4b1e      	ldr	r3, [pc, #120]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ffe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800400a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800400e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800401a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	0a5b      	lsrs	r3, r3, #9
 8004022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004026:	3301      	adds	r3, #1
 8004028:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	ee07 3a90 	vmov	s15, r3
 8004030:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004034:	edd7 6a07 	vldr	s13, [r7, #28]
 8004038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800403c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004040:	ee17 3a90 	vmov	r3, s15
 8004044:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004046:	e005      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	61bb      	str	r3, [r7, #24]
    break;
 800404c:	e002      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800404e:	4b07      	ldr	r3, [pc, #28]	; (800406c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004050:	61bb      	str	r3, [r7, #24]
    break;
 8004052:	bf00      	nop
  }

  return sysclockfreq;
 8004054:	69bb      	ldr	r3, [r7, #24]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3724      	adds	r7, #36	; 0x24
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	58024400 	.word	0x58024400
 8004068:	03d09000 	.word	0x03d09000
 800406c:	003d0900 	.word	0x003d0900
 8004070:	007a1200 	.word	0x007a1200
 8004074:	46000000 	.word	0x46000000
 8004078:	4c742400 	.word	0x4c742400
 800407c:	4a742400 	.word	0x4a742400
 8004080:	4af42400 	.word	0x4af42400

08004084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e049      	b.n	800412a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fc fc56 	bl	800095c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3304      	adds	r3, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4610      	mov	r0, r2
 80040c4:	f000 fba4 	bl	8004810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	d001      	beq.n	800414c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e056      	b.n	80041fa <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a2b      	ldr	r2, [pc, #172]	; (8004208 <HAL_TIM_Base_Start+0xd4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d02c      	beq.n	80041b8 <HAL_TIM_Base_Start+0x84>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004166:	d027      	beq.n	80041b8 <HAL_TIM_Base_Start+0x84>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a27      	ldr	r2, [pc, #156]	; (800420c <HAL_TIM_Base_Start+0xd8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d022      	beq.n	80041b8 <HAL_TIM_Base_Start+0x84>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a26      	ldr	r2, [pc, #152]	; (8004210 <HAL_TIM_Base_Start+0xdc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d01d      	beq.n	80041b8 <HAL_TIM_Base_Start+0x84>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a24      	ldr	r2, [pc, #144]	; (8004214 <HAL_TIM_Base_Start+0xe0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d018      	beq.n	80041b8 <HAL_TIM_Base_Start+0x84>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a23      	ldr	r2, [pc, #140]	; (8004218 <HAL_TIM_Base_Start+0xe4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d013      	beq.n	80041b8 <HAL_TIM_Base_Start+0x84>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a21      	ldr	r2, [pc, #132]	; (800421c <HAL_TIM_Base_Start+0xe8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00e      	beq.n	80041b8 <HAL_TIM_Base_Start+0x84>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a20      	ldr	r2, [pc, #128]	; (8004220 <HAL_TIM_Base_Start+0xec>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d009      	beq.n	80041b8 <HAL_TIM_Base_Start+0x84>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1e      	ldr	r2, [pc, #120]	; (8004224 <HAL_TIM_Base_Start+0xf0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d004      	beq.n	80041b8 <HAL_TIM_Base_Start+0x84>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a1d      	ldr	r2, [pc, #116]	; (8004228 <HAL_TIM_Base_Start+0xf4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d115      	bne.n	80041e4 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	4b1b      	ldr	r3, [pc, #108]	; (800422c <HAL_TIM_Base_Start+0xf8>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b06      	cmp	r3, #6
 80041c8:	d015      	beq.n	80041f6 <HAL_TIM_Base_Start+0xc2>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d0:	d011      	beq.n	80041f6 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0201 	orr.w	r2, r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e2:	e008      	b.n	80041f6 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	e000      	b.n	80041f8 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40010000 	.word	0x40010000
 800420c:	40000400 	.word	0x40000400
 8004210:	40000800 	.word	0x40000800
 8004214:	40000c00 	.word	0x40000c00
 8004218:	40010400 	.word	0x40010400
 800421c:	40001800 	.word	0x40001800
 8004220:	40014000 	.word	0x40014000
 8004224:	4000e000 	.word	0x4000e000
 8004228:	4000e400 	.word	0x4000e400
 800422c:	00010007 	.word	0x00010007

08004230 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e049      	b.n	80042d6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f841 	bl	80042de <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3304      	adds	r3, #4
 800426c:	4619      	mov	r1, r3
 800426e:	4610      	mov	r0, r2
 8004270:	f000 face 	bl	8004810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d109      	bne.n	8004318 <HAL_TIM_OC_Start+0x24>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b01      	cmp	r3, #1
 800430e:	bf14      	ite	ne
 8004310:	2301      	movne	r3, #1
 8004312:	2300      	moveq	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	e03c      	b.n	8004392 <HAL_TIM_OC_Start+0x9e>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2b04      	cmp	r3, #4
 800431c:	d109      	bne.n	8004332 <HAL_TIM_OC_Start+0x3e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b01      	cmp	r3, #1
 8004328:	bf14      	ite	ne
 800432a:	2301      	movne	r3, #1
 800432c:	2300      	moveq	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	e02f      	b.n	8004392 <HAL_TIM_OC_Start+0x9e>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d109      	bne.n	800434c <HAL_TIM_OC_Start+0x58>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b01      	cmp	r3, #1
 8004342:	bf14      	ite	ne
 8004344:	2301      	movne	r3, #1
 8004346:	2300      	moveq	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e022      	b.n	8004392 <HAL_TIM_OC_Start+0x9e>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b0c      	cmp	r3, #12
 8004350:	d109      	bne.n	8004366 <HAL_TIM_OC_Start+0x72>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b01      	cmp	r3, #1
 800435c:	bf14      	ite	ne
 800435e:	2301      	movne	r3, #1
 8004360:	2300      	moveq	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	e015      	b.n	8004392 <HAL_TIM_OC_Start+0x9e>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b10      	cmp	r3, #16
 800436a:	d109      	bne.n	8004380 <HAL_TIM_OC_Start+0x8c>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b01      	cmp	r3, #1
 8004376:	bf14      	ite	ne
 8004378:	2301      	movne	r3, #1
 800437a:	2300      	moveq	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	e008      	b.n	8004392 <HAL_TIM_OC_Start+0x9e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e0ab      	b.n	80044f2 <HAL_TIM_OC_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d104      	bne.n	80043aa <HAL_TIM_OC_Start+0xb6>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a8:	e023      	b.n	80043f2 <HAL_TIM_OC_Start+0xfe>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d104      	bne.n	80043ba <HAL_TIM_OC_Start+0xc6>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b8:	e01b      	b.n	80043f2 <HAL_TIM_OC_Start+0xfe>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d104      	bne.n	80043ca <HAL_TIM_OC_Start+0xd6>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043c8:	e013      	b.n	80043f2 <HAL_TIM_OC_Start+0xfe>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b0c      	cmp	r3, #12
 80043ce:	d104      	bne.n	80043da <HAL_TIM_OC_Start+0xe6>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043d8:	e00b      	b.n	80043f2 <HAL_TIM_OC_Start+0xfe>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d104      	bne.n	80043ea <HAL_TIM_OC_Start+0xf6>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e8:	e003      	b.n	80043f2 <HAL_TIM_OC_Start+0xfe>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2201      	movs	r2, #1
 80043f8:	6839      	ldr	r1, [r7, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fe22 	bl	8005044 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a3d      	ldr	r2, [pc, #244]	; (80044fc <HAL_TIM_OC_Start+0x208>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d013      	beq.n	8004432 <HAL_TIM_OC_Start+0x13e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a3c      	ldr	r2, [pc, #240]	; (8004500 <HAL_TIM_OC_Start+0x20c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00e      	beq.n	8004432 <HAL_TIM_OC_Start+0x13e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a3a      	ldr	r2, [pc, #232]	; (8004504 <HAL_TIM_OC_Start+0x210>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d009      	beq.n	8004432 <HAL_TIM_OC_Start+0x13e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a39      	ldr	r2, [pc, #228]	; (8004508 <HAL_TIM_OC_Start+0x214>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <HAL_TIM_OC_Start+0x13e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a37      	ldr	r2, [pc, #220]	; (800450c <HAL_TIM_OC_Start+0x218>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d101      	bne.n	8004436 <HAL_TIM_OC_Start+0x142>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <HAL_TIM_OC_Start+0x144>
 8004436:	2300      	movs	r3, #0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800444a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2a      	ldr	r2, [pc, #168]	; (80044fc <HAL_TIM_OC_Start+0x208>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d02c      	beq.n	80044b0 <HAL_TIM_OC_Start+0x1bc>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445e:	d027      	beq.n	80044b0 <HAL_TIM_OC_Start+0x1bc>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2a      	ldr	r2, [pc, #168]	; (8004510 <HAL_TIM_OC_Start+0x21c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d022      	beq.n	80044b0 <HAL_TIM_OC_Start+0x1bc>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a29      	ldr	r2, [pc, #164]	; (8004514 <HAL_TIM_OC_Start+0x220>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d01d      	beq.n	80044b0 <HAL_TIM_OC_Start+0x1bc>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a27      	ldr	r2, [pc, #156]	; (8004518 <HAL_TIM_OC_Start+0x224>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d018      	beq.n	80044b0 <HAL_TIM_OC_Start+0x1bc>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <HAL_TIM_OC_Start+0x20c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d013      	beq.n	80044b0 <HAL_TIM_OC_Start+0x1bc>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a23      	ldr	r2, [pc, #140]	; (800451c <HAL_TIM_OC_Start+0x228>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00e      	beq.n	80044b0 <HAL_TIM_OC_Start+0x1bc>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1b      	ldr	r2, [pc, #108]	; (8004504 <HAL_TIM_OC_Start+0x210>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d009      	beq.n	80044b0 <HAL_TIM_OC_Start+0x1bc>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <HAL_TIM_OC_Start+0x22c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d004      	beq.n	80044b0 <HAL_TIM_OC_Start+0x1bc>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <HAL_TIM_OC_Start+0x230>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d115      	bne.n	80044dc <HAL_TIM_OC_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	4b1c      	ldr	r3, [pc, #112]	; (8004528 <HAL_TIM_OC_Start+0x234>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b06      	cmp	r3, #6
 80044c0:	d015      	beq.n	80044ee <HAL_TIM_OC_Start+0x1fa>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c8:	d011      	beq.n	80044ee <HAL_TIM_OC_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0201 	orr.w	r2, r2, #1
 80044d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044da:	e008      	b.n	80044ee <HAL_TIM_OC_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	e000      	b.n	80044f0 <HAL_TIM_OC_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40010000 	.word	0x40010000
 8004500:	40010400 	.word	0x40010400
 8004504:	40014000 	.word	0x40014000
 8004508:	40014400 	.word	0x40014400
 800450c:	40014800 	.word	0x40014800
 8004510:	40000400 	.word	0x40000400
 8004514:	40000800 	.word	0x40000800
 8004518:	40000c00 	.word	0x40000c00
 800451c:	40001800 	.word	0x40001800
 8004520:	4000e000 	.word	0x4000e000
 8004524:	4000e400 	.word	0x4000e400
 8004528:	00010007 	.word	0x00010007

0800452c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004546:	2302      	movs	r3, #2
 8004548:	e066      	b.n	8004618 <HAL_TIM_OC_ConfigChannel+0xec>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b14      	cmp	r3, #20
 8004556:	d857      	bhi.n	8004608 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004558:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <HAL_TIM_OC_ConfigChannel+0x34>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	080045b5 	.word	0x080045b5
 8004564:	08004609 	.word	0x08004609
 8004568:	08004609 	.word	0x08004609
 800456c:	08004609 	.word	0x08004609
 8004570:	080045c3 	.word	0x080045c3
 8004574:	08004609 	.word	0x08004609
 8004578:	08004609 	.word	0x08004609
 800457c:	08004609 	.word	0x08004609
 8004580:	080045d1 	.word	0x080045d1
 8004584:	08004609 	.word	0x08004609
 8004588:	08004609 	.word	0x08004609
 800458c:	08004609 	.word	0x08004609
 8004590:	080045df 	.word	0x080045df
 8004594:	08004609 	.word	0x08004609
 8004598:	08004609 	.word	0x08004609
 800459c:	08004609 	.word	0x08004609
 80045a0:	080045ed 	.word	0x080045ed
 80045a4:	08004609 	.word	0x08004609
 80045a8:	08004609 	.word	0x08004609
 80045ac:	08004609 	.word	0x08004609
 80045b0:	080045fb 	.word	0x080045fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f9ce 	bl	800495c <TIM_OC1_SetConfig>
      break;
 80045c0:	e025      	b.n	800460e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fa57 	bl	8004a7c <TIM_OC2_SetConfig>
      break;
 80045ce:	e01e      	b.n	800460e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fada 	bl	8004b90 <TIM_OC3_SetConfig>
      break;
 80045dc:	e017      	b.n	800460e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fb5b 	bl	8004ca0 <TIM_OC4_SetConfig>
      break;
 80045ea:	e010      	b.n	800460e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fbbe 	bl	8004d74 <TIM_OC5_SetConfig>
      break;
 80045f8:	e009      	b.n	800460e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68b9      	ldr	r1, [r7, #8]
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fc1b 	bl	8004e3c <TIM_OC6_SetConfig>
      break;
 8004606:	e002      	b.n	800460e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	75fb      	strb	r3, [r7, #23]
      break;
 800460c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004616:	7dfb      	ldrb	r3, [r7, #23]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_TIM_ConfigClockSource+0x1c>
 8004638:	2302      	movs	r3, #2
 800463a:	e0dc      	b.n	80047f6 <HAL_TIM_ConfigClockSource+0x1d6>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	4b6a      	ldr	r3, [pc, #424]	; (8004800 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004658:	4013      	ands	r3, r2
 800465a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004662:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a64      	ldr	r2, [pc, #400]	; (8004804 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	f000 80a9 	beq.w	80047ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004678:	4a62      	ldr	r2, [pc, #392]	; (8004804 <HAL_TIM_ConfigClockSource+0x1e4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	f200 80ae 	bhi.w	80047dc <HAL_TIM_ConfigClockSource+0x1bc>
 8004680:	4a61      	ldr	r2, [pc, #388]	; (8004808 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	f000 80a1 	beq.w	80047ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004688:	4a5f      	ldr	r2, [pc, #380]	; (8004808 <HAL_TIM_ConfigClockSource+0x1e8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	f200 80a6 	bhi.w	80047dc <HAL_TIM_ConfigClockSource+0x1bc>
 8004690:	4a5e      	ldr	r2, [pc, #376]	; (800480c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004692:	4293      	cmp	r3, r2
 8004694:	f000 8099 	beq.w	80047ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004698:	4a5c      	ldr	r2, [pc, #368]	; (800480c <HAL_TIM_ConfigClockSource+0x1ec>)
 800469a:	4293      	cmp	r3, r2
 800469c:	f200 809e 	bhi.w	80047dc <HAL_TIM_ConfigClockSource+0x1bc>
 80046a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80046a4:	f000 8091 	beq.w	80047ca <HAL_TIM_ConfigClockSource+0x1aa>
 80046a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80046ac:	f200 8096 	bhi.w	80047dc <HAL_TIM_ConfigClockSource+0x1bc>
 80046b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b4:	f000 8089 	beq.w	80047ca <HAL_TIM_ConfigClockSource+0x1aa>
 80046b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046bc:	f200 808e 	bhi.w	80047dc <HAL_TIM_ConfigClockSource+0x1bc>
 80046c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c4:	d03e      	beq.n	8004744 <HAL_TIM_ConfigClockSource+0x124>
 80046c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ca:	f200 8087 	bhi.w	80047dc <HAL_TIM_ConfigClockSource+0x1bc>
 80046ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d2:	f000 8086 	beq.w	80047e2 <HAL_TIM_ConfigClockSource+0x1c2>
 80046d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046da:	d87f      	bhi.n	80047dc <HAL_TIM_ConfigClockSource+0x1bc>
 80046dc:	2b70      	cmp	r3, #112	; 0x70
 80046de:	d01a      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0xf6>
 80046e0:	2b70      	cmp	r3, #112	; 0x70
 80046e2:	d87b      	bhi.n	80047dc <HAL_TIM_ConfigClockSource+0x1bc>
 80046e4:	2b60      	cmp	r3, #96	; 0x60
 80046e6:	d050      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x16a>
 80046e8:	2b60      	cmp	r3, #96	; 0x60
 80046ea:	d877      	bhi.n	80047dc <HAL_TIM_ConfigClockSource+0x1bc>
 80046ec:	2b50      	cmp	r3, #80	; 0x50
 80046ee:	d03c      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x14a>
 80046f0:	2b50      	cmp	r3, #80	; 0x50
 80046f2:	d873      	bhi.n	80047dc <HAL_TIM_ConfigClockSource+0x1bc>
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d058      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0x18a>
 80046f8:	2b40      	cmp	r3, #64	; 0x40
 80046fa:	d86f      	bhi.n	80047dc <HAL_TIM_ConfigClockSource+0x1bc>
 80046fc:	2b30      	cmp	r3, #48	; 0x30
 80046fe:	d064      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004700:	2b30      	cmp	r3, #48	; 0x30
 8004702:	d86b      	bhi.n	80047dc <HAL_TIM_ConfigClockSource+0x1bc>
 8004704:	2b20      	cmp	r3, #32
 8004706:	d060      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004708:	2b20      	cmp	r3, #32
 800470a:	d867      	bhi.n	80047dc <HAL_TIM_ConfigClockSource+0x1bc>
 800470c:	2b00      	cmp	r3, #0
 800470e:	d05c      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004710:	2b10      	cmp	r3, #16
 8004712:	d05a      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004714:	e062      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6899      	ldr	r1, [r3, #8]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f000 fc6d 	bl	8005004 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004738:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	609a      	str	r2, [r3, #8]
      break;
 8004742:	e04f      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	6899      	ldr	r1, [r3, #8]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f000 fc56 	bl	8005004 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004766:	609a      	str	r2, [r3, #8]
      break;
 8004768:	e03c      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	6859      	ldr	r1, [r3, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	461a      	mov	r2, r3
 8004778:	f000 fbc6 	bl	8004f08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2150      	movs	r1, #80	; 0x50
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fc20 	bl	8004fc8 <TIM_ITRx_SetConfig>
      break;
 8004788:	e02c      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6859      	ldr	r1, [r3, #4]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	461a      	mov	r2, r3
 8004798:	f000 fbe5 	bl	8004f66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2160      	movs	r1, #96	; 0x60
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fc10 	bl	8004fc8 <TIM_ITRx_SetConfig>
      break;
 80047a8:	e01c      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6818      	ldr	r0, [r3, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6859      	ldr	r1, [r3, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	461a      	mov	r2, r3
 80047b8:	f000 fba6 	bl	8004f08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2140      	movs	r1, #64	; 0x40
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fc00 	bl	8004fc8 <TIM_ITRx_SetConfig>
      break;
 80047c8:	e00c      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4619      	mov	r1, r3
 80047d4:	4610      	mov	r0, r2
 80047d6:	f000 fbf7 	bl	8004fc8 <TIM_ITRx_SetConfig>
      break;
 80047da:	e003      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	73fb      	strb	r3, [r7, #15]
      break;
 80047e0:	e000      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80047e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	ffceff88 	.word	0xffceff88
 8004804:	00100040 	.word	0x00100040
 8004808:	00100030 	.word	0x00100030
 800480c:	00100020 	.word	0x00100020

08004810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a44      	ldr	r2, [pc, #272]	; (8004934 <TIM_Base_SetConfig+0x124>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d013      	beq.n	8004850 <TIM_Base_SetConfig+0x40>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482e:	d00f      	beq.n	8004850 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a41      	ldr	r2, [pc, #260]	; (8004938 <TIM_Base_SetConfig+0x128>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00b      	beq.n	8004850 <TIM_Base_SetConfig+0x40>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a40      	ldr	r2, [pc, #256]	; (800493c <TIM_Base_SetConfig+0x12c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d007      	beq.n	8004850 <TIM_Base_SetConfig+0x40>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a3f      	ldr	r2, [pc, #252]	; (8004940 <TIM_Base_SetConfig+0x130>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d003      	beq.n	8004850 <TIM_Base_SetConfig+0x40>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a3e      	ldr	r2, [pc, #248]	; (8004944 <TIM_Base_SetConfig+0x134>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d108      	bne.n	8004862 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a33      	ldr	r2, [pc, #204]	; (8004934 <TIM_Base_SetConfig+0x124>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d027      	beq.n	80048ba <TIM_Base_SetConfig+0xaa>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004870:	d023      	beq.n	80048ba <TIM_Base_SetConfig+0xaa>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a30      	ldr	r2, [pc, #192]	; (8004938 <TIM_Base_SetConfig+0x128>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d01f      	beq.n	80048ba <TIM_Base_SetConfig+0xaa>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a2f      	ldr	r2, [pc, #188]	; (800493c <TIM_Base_SetConfig+0x12c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d01b      	beq.n	80048ba <TIM_Base_SetConfig+0xaa>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a2e      	ldr	r2, [pc, #184]	; (8004940 <TIM_Base_SetConfig+0x130>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d017      	beq.n	80048ba <TIM_Base_SetConfig+0xaa>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a2d      	ldr	r2, [pc, #180]	; (8004944 <TIM_Base_SetConfig+0x134>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <TIM_Base_SetConfig+0xaa>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a2c      	ldr	r2, [pc, #176]	; (8004948 <TIM_Base_SetConfig+0x138>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00f      	beq.n	80048ba <TIM_Base_SetConfig+0xaa>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a2b      	ldr	r2, [pc, #172]	; (800494c <TIM_Base_SetConfig+0x13c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00b      	beq.n	80048ba <TIM_Base_SetConfig+0xaa>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a2a      	ldr	r2, [pc, #168]	; (8004950 <TIM_Base_SetConfig+0x140>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d007      	beq.n	80048ba <TIM_Base_SetConfig+0xaa>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a29      	ldr	r2, [pc, #164]	; (8004954 <TIM_Base_SetConfig+0x144>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d003      	beq.n	80048ba <TIM_Base_SetConfig+0xaa>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a28      	ldr	r2, [pc, #160]	; (8004958 <TIM_Base_SetConfig+0x148>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d108      	bne.n	80048cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a10      	ldr	r2, [pc, #64]	; (8004934 <TIM_Base_SetConfig+0x124>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00f      	beq.n	8004918 <TIM_Base_SetConfig+0x108>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a12      	ldr	r2, [pc, #72]	; (8004944 <TIM_Base_SetConfig+0x134>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00b      	beq.n	8004918 <TIM_Base_SetConfig+0x108>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a11      	ldr	r2, [pc, #68]	; (8004948 <TIM_Base_SetConfig+0x138>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d007      	beq.n	8004918 <TIM_Base_SetConfig+0x108>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a10      	ldr	r2, [pc, #64]	; (800494c <TIM_Base_SetConfig+0x13c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d003      	beq.n	8004918 <TIM_Base_SetConfig+0x108>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a0f      	ldr	r2, [pc, #60]	; (8004950 <TIM_Base_SetConfig+0x140>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d103      	bne.n	8004920 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	615a      	str	r2, [r3, #20]
}
 8004926:	bf00      	nop
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40010000 	.word	0x40010000
 8004938:	40000400 	.word	0x40000400
 800493c:	40000800 	.word	0x40000800
 8004940:	40000c00 	.word	0x40000c00
 8004944:	40010400 	.word	0x40010400
 8004948:	40014000 	.word	0x40014000
 800494c:	40014400 	.word	0x40014400
 8004950:	40014800 	.word	0x40014800
 8004954:	4000e000 	.word	0x4000e000
 8004958:	4000e400 	.word	0x4000e400

0800495c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	f023 0201 	bic.w	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4b37      	ldr	r3, [pc, #220]	; (8004a64 <TIM_OC1_SetConfig+0x108>)
 8004988:	4013      	ands	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0303 	bic.w	r3, r3, #3
 8004992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f023 0302 	bic.w	r3, r3, #2
 80049a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a2d      	ldr	r2, [pc, #180]	; (8004a68 <TIM_OC1_SetConfig+0x10c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00f      	beq.n	80049d8 <TIM_OC1_SetConfig+0x7c>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a2c      	ldr	r2, [pc, #176]	; (8004a6c <TIM_OC1_SetConfig+0x110>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00b      	beq.n	80049d8 <TIM_OC1_SetConfig+0x7c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a2b      	ldr	r2, [pc, #172]	; (8004a70 <TIM_OC1_SetConfig+0x114>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d007      	beq.n	80049d8 <TIM_OC1_SetConfig+0x7c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a2a      	ldr	r2, [pc, #168]	; (8004a74 <TIM_OC1_SetConfig+0x118>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d003      	beq.n	80049d8 <TIM_OC1_SetConfig+0x7c>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a29      	ldr	r2, [pc, #164]	; (8004a78 <TIM_OC1_SetConfig+0x11c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d10c      	bne.n	80049f2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f023 0308 	bic.w	r3, r3, #8
 80049de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f023 0304 	bic.w	r3, r3, #4
 80049f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a1c      	ldr	r2, [pc, #112]	; (8004a68 <TIM_OC1_SetConfig+0x10c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00f      	beq.n	8004a1a <TIM_OC1_SetConfig+0xbe>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1b      	ldr	r2, [pc, #108]	; (8004a6c <TIM_OC1_SetConfig+0x110>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00b      	beq.n	8004a1a <TIM_OC1_SetConfig+0xbe>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a1a      	ldr	r2, [pc, #104]	; (8004a70 <TIM_OC1_SetConfig+0x114>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d007      	beq.n	8004a1a <TIM_OC1_SetConfig+0xbe>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <TIM_OC1_SetConfig+0x118>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <TIM_OC1_SetConfig+0xbe>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a18      	ldr	r2, [pc, #96]	; (8004a78 <TIM_OC1_SetConfig+0x11c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d111      	bne.n	8004a3e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	621a      	str	r2, [r3, #32]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	fffeff8f 	.word	0xfffeff8f
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40010400 	.word	0x40010400
 8004a70:	40014000 	.word	0x40014000
 8004a74:	40014400 	.word	0x40014400
 8004a78:	40014800 	.word	0x40014800

08004a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f023 0210 	bic.w	r2, r3, #16
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4b34      	ldr	r3, [pc, #208]	; (8004b78 <TIM_OC2_SetConfig+0xfc>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f023 0320 	bic.w	r3, r3, #32
 8004ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a29      	ldr	r2, [pc, #164]	; (8004b7c <TIM_OC2_SetConfig+0x100>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d003      	beq.n	8004ae4 <TIM_OC2_SetConfig+0x68>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a28      	ldr	r2, [pc, #160]	; (8004b80 <TIM_OC2_SetConfig+0x104>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d10d      	bne.n	8004b00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004afe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a1e      	ldr	r2, [pc, #120]	; (8004b7c <TIM_OC2_SetConfig+0x100>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00f      	beq.n	8004b28 <TIM_OC2_SetConfig+0xac>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a1d      	ldr	r2, [pc, #116]	; (8004b80 <TIM_OC2_SetConfig+0x104>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00b      	beq.n	8004b28 <TIM_OC2_SetConfig+0xac>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a1c      	ldr	r2, [pc, #112]	; (8004b84 <TIM_OC2_SetConfig+0x108>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d007      	beq.n	8004b28 <TIM_OC2_SetConfig+0xac>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a1b      	ldr	r2, [pc, #108]	; (8004b88 <TIM_OC2_SetConfig+0x10c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <TIM_OC2_SetConfig+0xac>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a1a      	ldr	r2, [pc, #104]	; (8004b8c <TIM_OC2_SetConfig+0x110>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d113      	bne.n	8004b50 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	feff8fff 	.word	0xfeff8fff
 8004b7c:	40010000 	.word	0x40010000
 8004b80:	40010400 	.word	0x40010400
 8004b84:	40014000 	.word	0x40014000
 8004b88:	40014400 	.word	0x40014400
 8004b8c:	40014800 	.word	0x40014800

08004b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4b33      	ldr	r3, [pc, #204]	; (8004c88 <TIM_OC3_SetConfig+0xf8>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0303 	bic.w	r3, r3, #3
 8004bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a28      	ldr	r2, [pc, #160]	; (8004c8c <TIM_OC3_SetConfig+0xfc>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d003      	beq.n	8004bf6 <TIM_OC3_SetConfig+0x66>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a27      	ldr	r2, [pc, #156]	; (8004c90 <TIM_OC3_SetConfig+0x100>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d10d      	bne.n	8004c12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a1d      	ldr	r2, [pc, #116]	; (8004c8c <TIM_OC3_SetConfig+0xfc>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00f      	beq.n	8004c3a <TIM_OC3_SetConfig+0xaa>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a1c      	ldr	r2, [pc, #112]	; (8004c90 <TIM_OC3_SetConfig+0x100>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00b      	beq.n	8004c3a <TIM_OC3_SetConfig+0xaa>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a1b      	ldr	r2, [pc, #108]	; (8004c94 <TIM_OC3_SetConfig+0x104>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d007      	beq.n	8004c3a <TIM_OC3_SetConfig+0xaa>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a1a      	ldr	r2, [pc, #104]	; (8004c98 <TIM_OC3_SetConfig+0x108>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d003      	beq.n	8004c3a <TIM_OC3_SetConfig+0xaa>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a19      	ldr	r2, [pc, #100]	; (8004c9c <TIM_OC3_SetConfig+0x10c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d113      	bne.n	8004c62 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	621a      	str	r2, [r3, #32]
}
 8004c7c:	bf00      	nop
 8004c7e:	371c      	adds	r7, #28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	fffeff8f 	.word	0xfffeff8f
 8004c8c:	40010000 	.word	0x40010000
 8004c90:	40010400 	.word	0x40010400
 8004c94:	40014000 	.word	0x40014000
 8004c98:	40014400 	.word	0x40014400
 8004c9c:	40014800 	.word	0x40014800

08004ca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4b24      	ldr	r3, [pc, #144]	; (8004d5c <TIM_OC4_SetConfig+0xbc>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	031b      	lsls	r3, r3, #12
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a19      	ldr	r2, [pc, #100]	; (8004d60 <TIM_OC4_SetConfig+0xc0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00f      	beq.n	8004d20 <TIM_OC4_SetConfig+0x80>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a18      	ldr	r2, [pc, #96]	; (8004d64 <TIM_OC4_SetConfig+0xc4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00b      	beq.n	8004d20 <TIM_OC4_SetConfig+0x80>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a17      	ldr	r2, [pc, #92]	; (8004d68 <TIM_OC4_SetConfig+0xc8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d007      	beq.n	8004d20 <TIM_OC4_SetConfig+0x80>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a16      	ldr	r2, [pc, #88]	; (8004d6c <TIM_OC4_SetConfig+0xcc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d003      	beq.n	8004d20 <TIM_OC4_SetConfig+0x80>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a15      	ldr	r2, [pc, #84]	; (8004d70 <TIM_OC4_SetConfig+0xd0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d109      	bne.n	8004d34 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	019b      	lsls	r3, r3, #6
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	621a      	str	r2, [r3, #32]
}
 8004d4e:	bf00      	nop
 8004d50:	371c      	adds	r7, #28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	feff8fff 	.word	0xfeff8fff
 8004d60:	40010000 	.word	0x40010000
 8004d64:	40010400 	.word	0x40010400
 8004d68:	40014000 	.word	0x40014000
 8004d6c:	40014400 	.word	0x40014400
 8004d70:	40014800 	.word	0x40014800

08004d74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4b21      	ldr	r3, [pc, #132]	; (8004e24 <TIM_OC5_SetConfig+0xb0>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004db4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	041b      	lsls	r3, r3, #16
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a18      	ldr	r2, [pc, #96]	; (8004e28 <TIM_OC5_SetConfig+0xb4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00f      	beq.n	8004dea <TIM_OC5_SetConfig+0x76>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a17      	ldr	r2, [pc, #92]	; (8004e2c <TIM_OC5_SetConfig+0xb8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00b      	beq.n	8004dea <TIM_OC5_SetConfig+0x76>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a16      	ldr	r2, [pc, #88]	; (8004e30 <TIM_OC5_SetConfig+0xbc>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <TIM_OC5_SetConfig+0x76>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a15      	ldr	r2, [pc, #84]	; (8004e34 <TIM_OC5_SetConfig+0xc0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d003      	beq.n	8004dea <TIM_OC5_SetConfig+0x76>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a14      	ldr	r2, [pc, #80]	; (8004e38 <TIM_OC5_SetConfig+0xc4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d109      	bne.n	8004dfe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	021b      	lsls	r3, r3, #8
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	621a      	str	r2, [r3, #32]
}
 8004e18:	bf00      	nop
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	fffeff8f 	.word	0xfffeff8f
 8004e28:	40010000 	.word	0x40010000
 8004e2c:	40010400 	.word	0x40010400
 8004e30:	40014000 	.word	0x40014000
 8004e34:	40014400 	.word	0x40014400
 8004e38:	40014800 	.word	0x40014800

08004e3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4b22      	ldr	r3, [pc, #136]	; (8004ef0 <TIM_OC6_SetConfig+0xb4>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	051b      	lsls	r3, r3, #20
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a19      	ldr	r2, [pc, #100]	; (8004ef4 <TIM_OC6_SetConfig+0xb8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00f      	beq.n	8004eb4 <TIM_OC6_SetConfig+0x78>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a18      	ldr	r2, [pc, #96]	; (8004ef8 <TIM_OC6_SetConfig+0xbc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00b      	beq.n	8004eb4 <TIM_OC6_SetConfig+0x78>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a17      	ldr	r2, [pc, #92]	; (8004efc <TIM_OC6_SetConfig+0xc0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d007      	beq.n	8004eb4 <TIM_OC6_SetConfig+0x78>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <TIM_OC6_SetConfig+0xc4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_OC6_SetConfig+0x78>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <TIM_OC6_SetConfig+0xc8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d109      	bne.n	8004ec8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	029b      	lsls	r3, r3, #10
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	feff8fff 	.word	0xfeff8fff
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40010400 	.word	0x40010400
 8004efc:	40014000 	.word	0x40014000
 8004f00:	40014400 	.word	0x40014400
 8004f04:	40014800 	.word	0x40014800

08004f08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f023 0201 	bic.w	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f023 030a 	bic.w	r3, r3, #10
 8004f44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b087      	sub	sp, #28
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f023 0210 	bic.w	r2, r3, #16
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	031b      	lsls	r3, r3, #12
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fa2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4b09      	ldr	r3, [pc, #36]	; (8005000 <TIM_ITRx_SetConfig+0x38>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f043 0307 	orr.w	r3, r3, #7
 8004fea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	609a      	str	r2, [r3, #8]
}
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	ffcfff8f 	.word	0xffcfff8f

08005004 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800501e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	021a      	lsls	r2, r3, #8
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	431a      	orrs	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4313      	orrs	r3, r2
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	609a      	str	r2, [r3, #8]
}
 8005038:	bf00      	nop
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	2201      	movs	r2, #1
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a1a      	ldr	r2, [r3, #32]
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	43db      	mvns	r3, r3
 8005066:	401a      	ands	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a1a      	ldr	r2, [r3, #32]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f003 031f 	and.w	r3, r3, #31
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	fa01 f303 	lsl.w	r3, r1, r3
 800507c:	431a      	orrs	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	621a      	str	r2, [r3, #32]
}
 8005082:	bf00      	nop
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
	...

08005090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e077      	b.n	8005198 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a35      	ldr	r2, [pc, #212]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d004      	beq.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a34      	ldr	r2, [pc, #208]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d108      	bne.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a25      	ldr	r2, [pc, #148]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d02c      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511a:	d027      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a22      	ldr	r2, [pc, #136]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d022      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a21      	ldr	r2, [pc, #132]	; (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d01d      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a1f      	ldr	r2, [pc, #124]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d018      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a1a      	ldr	r2, [pc, #104]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d013      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1b      	ldr	r2, [pc, #108]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00e      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1a      	ldr	r2, [pc, #104]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d009      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a18      	ldr	r2, [pc, #96]	; (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d004      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a17      	ldr	r2, [pc, #92]	; (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d10c      	bne.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005172:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	4313      	orrs	r3, r2
 800517c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	40010000 	.word	0x40010000
 80051a8:	40010400 	.word	0x40010400
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40001800 	.word	0x40001800
 80051bc:	40014000 	.word	0x40014000
 80051c0:	4000e000 	.word	0x4000e000
 80051c4:	4000e400 	.word	0x4000e400

080051c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051e0:	2302      	movs	r3, #2
 80051e2:	e087      	b.n	80052f4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4313      	orrs	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	041b      	lsls	r3, r3, #16
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a27      	ldr	r2, [pc, #156]	; (8005300 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a25      	ldr	r2, [pc, #148]	; (8005304 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d106      	bne.n	8005280 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d004      	beq.n	8005294 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1d      	ldr	r2, [pc, #116]	; (8005304 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d126      	bne.n	80052e2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529e:	051b      	lsls	r3, r3, #20
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a0e      	ldr	r2, [pc, #56]	; (8005300 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d004      	beq.n	80052d4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a0d      	ldr	r2, [pc, #52]	; (8005304 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d106      	bne.n	80052e2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	40010000 	.word	0x40010000
 8005304:	40010400 	.word	0x40010400

08005308 <__libc_init_array>:
 8005308:	b570      	push	{r4, r5, r6, lr}
 800530a:	4d0d      	ldr	r5, [pc, #52]	; (8005340 <__libc_init_array+0x38>)
 800530c:	4c0d      	ldr	r4, [pc, #52]	; (8005344 <__libc_init_array+0x3c>)
 800530e:	1b64      	subs	r4, r4, r5
 8005310:	10a4      	asrs	r4, r4, #2
 8005312:	2600      	movs	r6, #0
 8005314:	42a6      	cmp	r6, r4
 8005316:	d109      	bne.n	800532c <__libc_init_array+0x24>
 8005318:	4d0b      	ldr	r5, [pc, #44]	; (8005348 <__libc_init_array+0x40>)
 800531a:	4c0c      	ldr	r4, [pc, #48]	; (800534c <__libc_init_array+0x44>)
 800531c:	f000 f820 	bl	8005360 <_init>
 8005320:	1b64      	subs	r4, r4, r5
 8005322:	10a4      	asrs	r4, r4, #2
 8005324:	2600      	movs	r6, #0
 8005326:	42a6      	cmp	r6, r4
 8005328:	d105      	bne.n	8005336 <__libc_init_array+0x2e>
 800532a:	bd70      	pop	{r4, r5, r6, pc}
 800532c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005330:	4798      	blx	r3
 8005332:	3601      	adds	r6, #1
 8005334:	e7ee      	b.n	8005314 <__libc_init_array+0xc>
 8005336:	f855 3b04 	ldr.w	r3, [r5], #4
 800533a:	4798      	blx	r3
 800533c:	3601      	adds	r6, #1
 800533e:	e7f2      	b.n	8005326 <__libc_init_array+0x1e>
 8005340:	08005390 	.word	0x08005390
 8005344:	08005390 	.word	0x08005390
 8005348:	08005390 	.word	0x08005390
 800534c:	08005394 	.word	0x08005394

08005350 <memset>:
 8005350:	4402      	add	r2, r0
 8005352:	4603      	mov	r3, r0
 8005354:	4293      	cmp	r3, r2
 8005356:	d100      	bne.n	800535a <memset+0xa>
 8005358:	4770      	bx	lr
 800535a:	f803 1b01 	strb.w	r1, [r3], #1
 800535e:	e7f9      	b.n	8005354 <memset+0x4>

08005360 <_init>:
 8005360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005362:	bf00      	nop
 8005364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005366:	bc08      	pop	{r3}
 8005368:	469e      	mov	lr, r3
 800536a:	4770      	bx	lr

0800536c <_fini>:
 800536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536e:	bf00      	nop
 8005370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005372:	bc08      	pop	{r3}
 8005374:	469e      	mov	lr, r3
 8005376:	4770      	bx	lr
