
STM32H723ZG_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d84  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003050  08003050  00013050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08003068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  24000010  08003078  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400007c  08003078  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c84c  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000017b3  00000000  00000000  0002c88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000bb0  00000000  00000000  0002e040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000af8  00000000  00000000  0002ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003111a  00000000  00000000  0002f6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000cefe  00000000  00000000  00060802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00142ad2  00000000  00000000  0006d700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001b01d2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000030e8  00000000  00000000  001b0224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08003038 	.word	0x08003038

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08003038 	.word	0x08003038

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000312:	f000 fad3 	bl	80008bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000316:	f000 f81b 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031a:	f000 f935 	bl	8000588 <MX_GPIO_Init>
  MX_TIM1_Init();
 800031e:	f000 f887 	bl	8000430 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t timerReloadValue = 0;
 8000322:	2300      	movs	r3, #0
 8000324:	80fb      	strh	r3, [r7, #6]

//  timerReloadValue = TIM2->ARR;
//  TIM2->CCR4 = ( ( (timerReloadValue+1) * (50) )/100) -1;

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000326:	2100      	movs	r1, #0
 8000328:	4807      	ldr	r0, [pc, #28]	; (8000348 <main+0x3c>)
 800032a:	f001 fdb5 	bl	8001e98 <HAL_TIM_PWM_Start>
//
  timerReloadValue = TIM1->ARR;
 800032e:	4b07      	ldr	r3, [pc, #28]	; (800034c <main+0x40>)
 8000330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000332:	80fb      	strh	r3, [r7, #6]
//  TIM1->CCR1 = ( ( (timerReloadValue+1) * (50) )/100) -1;

  TIM1->CCR1 = ( ( (timerReloadValue+1) * (50) )/100) -1;
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	3301      	adds	r3, #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <main+0x32>
 800033c:	3301      	adds	r3, #1
 800033e:	105b      	asrs	r3, r3, #1
 8000340:	1e5a      	subs	r2, r3, #1
 8000342:	4b02      	ldr	r3, [pc, #8]	; (800034c <main+0x40>)
 8000344:	635a      	str	r2, [r3, #52]	; 0x34


  while (1)
 8000346:	e7fe      	b.n	8000346 <main+0x3a>
 8000348:	2400002c 	.word	0x2400002c
 800034c:	40010000 	.word	0x40010000

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b09c      	sub	sp, #112	; 0x70
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800035a:	224c      	movs	r2, #76	; 0x4c
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f002 fe62 	bl	8003028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	2220      	movs	r2, #32
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f002 fe5c 	bl	8003028 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000370:	2002      	movs	r0, #2
 8000372:	f000 fdc1 	bl	8000ef8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000376:	2300      	movs	r3, #0
 8000378:	603b      	str	r3, [r7, #0]
 800037a:	4b2c      	ldr	r3, [pc, #176]	; (800042c <SystemClock_Config+0xdc>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	4a2b      	ldr	r2, [pc, #172]	; (800042c <SystemClock_Config+0xdc>)
 8000380:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000384:	6193      	str	r3, [r2, #24]
 8000386:	4b29      	ldr	r3, [pc, #164]	; (800042c <SystemClock_Config+0xdc>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800038e:	603b      	str	r3, [r7, #0]
 8000390:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000392:	bf00      	nop
 8000394:	4b25      	ldr	r3, [pc, #148]	; (800042c <SystemClock_Config+0xdc>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800039c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003a0:	d1f8      	bne.n	8000394 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a2:	2302      	movs	r3, #2
 80003a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003a6:	2301      	movs	r3, #1
 80003a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003aa:	2340      	movs	r3, #64	; 0x40
 80003ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ae:	2302      	movs	r3, #2
 80003b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003b2:	2300      	movs	r3, #0
 80003b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80003b6:	2304      	movs	r3, #4
 80003b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 80003ba:	2322      	movs	r3, #34	; 0x22
 80003bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80003be:	2301      	movs	r3, #1
 80003c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003c2:	2302      	movs	r3, #2
 80003c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003c6:	2302      	movs	r3, #2
 80003c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003ca:	230c      	movs	r3, #12
 80003cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003ce:	2300      	movs	r3, #0
 80003d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80003d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80003d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fdc5 	bl	8000f6c <HAL_RCC_OscConfig>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003e8:	f000 f91e 	bl	8000628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ec:	233f      	movs	r3, #63	; 0x3f
 80003ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f0:	2303      	movs	r3, #3
 80003f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80003f8:	2308      	movs	r3, #8
 80003fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003fc:	2340      	movs	r3, #64	; 0x40
 80003fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000400:	2340      	movs	r3, #64	; 0x40
 8000402:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000408:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800040a:	2340      	movs	r3, #64	; 0x40
 800040c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2103      	movs	r1, #3
 8000412:	4618      	mov	r0, r3
 8000414:	f001 f958 	bl	80016c8 <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800041e:	f000 f903 	bl	8000628 <Error_Handler>
  }
}
 8000422:	bf00      	nop
 8000424:	3770      	adds	r7, #112	; 0x70
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	58024800 	.word	0x58024800

08000430 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b09c      	sub	sp, #112	; 0x70
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000436:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000444:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000450:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
 8000460:	615a      	str	r2, [r3, #20]
 8000462:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2234      	movs	r2, #52	; 0x34
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f002 fddc 	bl	8003028 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000470:	4b43      	ldr	r3, [pc, #268]	; (8000580 <MX_TIM1_Init+0x150>)
 8000472:	4a44      	ldr	r2, [pc, #272]	; (8000584 <MX_TIM1_Init+0x154>)
 8000474:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3-1;
 8000476:	4b42      	ldr	r3, [pc, #264]	; (8000580 <MX_TIM1_Init+0x150>)
 8000478:	2202      	movs	r2, #2
 800047a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800047c:	4b40      	ldr	r3, [pc, #256]	; (8000580 <MX_TIM1_Init+0x150>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4-1;
 8000482:	4b3f      	ldr	r3, [pc, #252]	; (8000580 <MX_TIM1_Init+0x150>)
 8000484:	2203      	movs	r2, #3
 8000486:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000488:	4b3d      	ldr	r3, [pc, #244]	; (8000580 <MX_TIM1_Init+0x150>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800048e:	4b3c      	ldr	r3, [pc, #240]	; (8000580 <MX_TIM1_Init+0x150>)
 8000490:	2200      	movs	r2, #0
 8000492:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000494:	4b3a      	ldr	r3, [pc, #232]	; (8000580 <MX_TIM1_Init+0x150>)
 8000496:	2280      	movs	r2, #128	; 0x80
 8000498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800049a:	4839      	ldr	r0, [pc, #228]	; (8000580 <MX_TIM1_Init+0x150>)
 800049c:	f001 fc44 	bl	8001d28 <HAL_TIM_Base_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80004a6:	f000 f8bf 	bl	8000628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ae:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80004b4:	4619      	mov	r1, r3
 80004b6:	4832      	ldr	r0, [pc, #200]	; (8000580 <MX_TIM1_Init+0x150>)
 80004b8:	f001 ff1e 	bl	80022f8 <HAL_TIM_ConfigClockSource>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80004c2:	f000 f8b1 	bl	8000628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004c6:	482e      	ldr	r0, [pc, #184]	; (8000580 <MX_TIM1_Init+0x150>)
 80004c8:	f001 fc85 	bl	8001dd6 <HAL_TIM_PWM_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80004d2:	f000 f8a9 	bl	8000628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d6:	2300      	movs	r3, #0
 80004d8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004da:	2300      	movs	r3, #0
 80004dc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004de:	2300      	movs	r3, #0
 80004e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004e6:	4619      	mov	r1, r3
 80004e8:	4825      	ldr	r0, [pc, #148]	; (8000580 <MX_TIM1_Init+0x150>)
 80004ea:	f002 fc3d 	bl	8002d68 <HAL_TIMEx_MasterConfigSynchronization>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80004f4:	f000 f898 	bl	8000628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004f8:	2360      	movs	r3, #96	; 0x60
 80004fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000500:	2300      	movs	r3, #0
 8000502:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000504:	2300      	movs	r3, #0
 8000506:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000508:	2300      	movs	r3, #0
 800050a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800050c:	2300      	movs	r3, #0
 800050e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000510:	2300      	movs	r3, #0
 8000512:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000514:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000518:	2200      	movs	r2, #0
 800051a:	4619      	mov	r1, r3
 800051c:	4818      	ldr	r0, [pc, #96]	; (8000580 <MX_TIM1_Init+0x150>)
 800051e:	f001 fdd7 	bl	80020d0 <HAL_TIM_PWM_ConfigChannel>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000528:	f000 f87e 	bl	8000628 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000544:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800054a:	2300      	movs	r3, #0
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800054e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000552:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000558:	2300      	movs	r3, #0
 800055a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	4619      	mov	r1, r3
 8000560:	4807      	ldr	r0, [pc, #28]	; (8000580 <MX_TIM1_Init+0x150>)
 8000562:	f002 fc9d 	bl	8002ea0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800056c:	f000 f85c 	bl	8000628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000570:	4803      	ldr	r0, [pc, #12]	; (8000580 <MX_TIM1_Init+0x150>)
 8000572:	f000 f89b 	bl	80006ac <HAL_TIM_MspPostInit>

}
 8000576:	bf00      	nop
 8000578:	3770      	adds	r7, #112	; 0x70
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	2400002c 	.word	0x2400002c
 8000584:	40010000 	.word	0x40010000

08000588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	4b20      	ldr	r3, [pc, #128]	; (8000620 <MX_GPIO_Init+0x98>)
 80005a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a4:	4a1e      	ldr	r2, [pc, #120]	; (8000620 <MX_GPIO_Init+0x98>)
 80005a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ae:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <MX_GPIO_Init+0x98>)
 80005b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <MX_GPIO_Init+0x98>)
 80005be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <MX_GPIO_Init+0x98>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <MX_GPIO_Init+0x98>)
 80005ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_GPIO_Init+0x98>)
 80005dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e0:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <MX_GPIO_Init+0x98>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <MX_GPIO_Init+0x98>)
 80005ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f0:	f003 0310 	and.w	r3, r3, #16
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005f8:	2308      	movs	r3, #8
 80005fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000608:	2301      	movs	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	4619      	mov	r1, r3
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_GPIO_Init+0x9c>)
 8000614:	f000 fac8 	bl	8000ba8 <HAL_GPIO_Init>

}
 8000618:	bf00      	nop
 800061a:	3720      	adds	r7, #32
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	58024400 	.word	0x58024400
 8000624:	58020000 	.word	0x58020000

08000628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000630:	e7fe      	b.n	8000630 <Error_Handler+0x8>
	...

08000634 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <HAL_MspInit+0x30>)
 800063c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000640:	4a08      	ldr	r2, [pc, #32]	; (8000664 <HAL_MspInit+0x30>)
 8000642:	f043 0302 	orr.w	r3, r3, #2
 8000646:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_MspInit+0x30>)
 800064c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000650:	f003 0302 	and.w	r3, r3, #2
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	58024400 	.word	0x58024400

08000668 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <HAL_TIM_Base_MspInit+0x3c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d10e      	bne.n	8000698 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <HAL_TIM_Base_MspInit+0x40>)
 800067c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000680:	4a09      	ldr	r2, [pc, #36]	; (80006a8 <HAL_TIM_Base_MspInit+0x40>)
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <HAL_TIM_Base_MspInit+0x40>)
 800068c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	40010000 	.word	0x40010000
 80006a8:	58024400 	.word	0x58024400

080006ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a13      	ldr	r2, [pc, #76]	; (8000718 <HAL_TIM_MspPostInit+0x6c>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d11f      	bne.n	800070e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <HAL_TIM_MspPostInit+0x70>)
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d4:	4a11      	ldr	r2, [pc, #68]	; (800071c <HAL_TIM_MspPostInit+0x70>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_TIM_MspPostInit+0x70>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e4:	f003 0310 	and.w	r3, r3, #16
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80006fe:	2301      	movs	r3, #1
 8000700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <HAL_TIM_MspPostInit+0x74>)
 800070a:	f000 fa4d 	bl	8000ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800070e:	bf00      	nop
 8000710:	3720      	adds	r7, #32
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40010000 	.word	0x40010000
 800071c:	58024400 	.word	0x58024400
 8000720:	58021000 	.word	0x58021000

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <NMI_Handler+0x4>

0800072a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <HardFault_Handler+0x4>

08000730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <MemManage_Handler+0x4>

08000736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <BusFault_Handler+0x4>

0800073c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <UsageFault_Handler+0x4>

08000742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000770:	f000 f916 	bl	80009a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}

08000778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800077c:	4b32      	ldr	r3, [pc, #200]	; (8000848 <SystemInit+0xd0>)
 800077e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000782:	4a31      	ldr	r2, [pc, #196]	; (8000848 <SystemInit+0xd0>)
 8000784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <SystemInit+0xd4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f003 030f 	and.w	r3, r3, #15
 8000794:	2b06      	cmp	r3, #6
 8000796:	d807      	bhi.n	80007a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000798:	4b2c      	ldr	r3, [pc, #176]	; (800084c <SystemInit+0xd4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f023 030f 	bic.w	r3, r3, #15
 80007a0:	4a2a      	ldr	r2, [pc, #168]	; (800084c <SystemInit+0xd4>)
 80007a2:	f043 0307 	orr.w	r3, r3, #7
 80007a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <SystemInit+0xd8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a28      	ldr	r2, [pc, #160]	; (8000850 <SystemInit+0xd8>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007b4:	4b26      	ldr	r3, [pc, #152]	; (8000850 <SystemInit+0xd8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <SystemInit+0xd8>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	4924      	ldr	r1, [pc, #144]	; (8000850 <SystemInit+0xd8>)
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <SystemInit+0xdc>)
 80007c2:	4013      	ands	r3, r2
 80007c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <SystemInit+0xd4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f003 0308 	and.w	r3, r3, #8
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d007      	beq.n	80007e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <SystemInit+0xd4>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f023 030f 	bic.w	r3, r3, #15
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <SystemInit+0xd4>)
 80007dc:	f043 0307 	orr.w	r3, r3, #7
 80007e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007e2:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <SystemInit+0xd8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <SystemInit+0xd8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <SystemInit+0xd8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007f4:	4b16      	ldr	r3, [pc, #88]	; (8000850 <SystemInit+0xd8>)
 80007f6:	4a18      	ldr	r2, [pc, #96]	; (8000858 <SystemInit+0xe0>)
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <SystemInit+0xd8>)
 80007fc:	4a17      	ldr	r2, [pc, #92]	; (800085c <SystemInit+0xe4>)
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <SystemInit+0xd8>)
 8000802:	4a17      	ldr	r2, [pc, #92]	; (8000860 <SystemInit+0xe8>)
 8000804:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <SystemInit+0xd8>)
 8000808:	2200      	movs	r2, #0
 800080a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <SystemInit+0xd8>)
 800080e:	4a14      	ldr	r2, [pc, #80]	; (8000860 <SystemInit+0xe8>)
 8000810:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <SystemInit+0xd8>)
 8000814:	2200      	movs	r2, #0
 8000816:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <SystemInit+0xd8>)
 800081a:	4a11      	ldr	r2, [pc, #68]	; (8000860 <SystemInit+0xe8>)
 800081c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <SystemInit+0xd8>)
 8000820:	2200      	movs	r2, #0
 8000822:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <SystemInit+0xd8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a09      	ldr	r2, [pc, #36]	; (8000850 <SystemInit+0xd8>)
 800082a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800082e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <SystemInit+0xd8>)
 8000832:	2200      	movs	r2, #0
 8000834:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <SystemInit+0xec>)
 8000838:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800083c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00
 800084c:	52002000 	.word	0x52002000
 8000850:	58024400 	.word	0x58024400
 8000854:	eaf6ed7f 	.word	0xeaf6ed7f
 8000858:	02020200 	.word	0x02020200
 800085c:	01ff0000 	.word	0x01ff0000
 8000860:	01010280 	.word	0x01010280
 8000864:	52004000 	.word	0x52004000

08000868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800086c:	f7ff ff84 	bl	8000778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000870:	480c      	ldr	r0, [pc, #48]	; (80008a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000872:	490d      	ldr	r1, [pc, #52]	; (80008a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000878:	e002      	b.n	8000880 <LoopCopyDataInit>

0800087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087e:	3304      	adds	r3, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000884:	d3f9      	bcc.n	800087a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000888:	4c0a      	ldr	r4, [pc, #40]	; (80008b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800088c:	e001      	b.n	8000892 <LoopFillZerobss>

0800088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000890:	3204      	adds	r2, #4

08000892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000894:	d3fb      	bcc.n	800088e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000896:	f002 fba3 	bl	8002fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800089a:	f7ff fd37 	bl	800030c <main>
  bx  lr
 800089e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008a0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80008a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008a8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80008ac:	08003068 	.word	0x08003068
  ldr r2, =_sbss
 80008b0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80008b4:	2400007c 	.word	0x2400007c

080008b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC3_IRQHandler>
	...

080008bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c2:	2003      	movs	r0, #3
 80008c4:	f000 f93e 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008c8:	f001 f8b4 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 80008cc:	4602      	mov	r2, r0
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <HAL_Init+0x68>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	0a1b      	lsrs	r3, r3, #8
 80008d4:	f003 030f 	and.w	r3, r3, #15
 80008d8:	4913      	ldr	r1, [pc, #76]	; (8000928 <HAL_Init+0x6c>)
 80008da:	5ccb      	ldrb	r3, [r1, r3]
 80008dc:	f003 031f 	and.w	r3, r3, #31
 80008e0:	fa22 f303 	lsr.w	r3, r2, r3
 80008e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <HAL_Init+0x68>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	f003 030f 	and.w	r3, r3, #15
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_Init+0x6c>)
 80008f0:	5cd3      	ldrb	r3, [r2, r3]
 80008f2:	f003 031f 	and.w	r3, r3, #31
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	fa22 f303 	lsr.w	r3, r2, r3
 80008fc:	4a0b      	ldr	r2, [pc, #44]	; (800092c <HAL_Init+0x70>)
 80008fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000900:	4a0b      	ldr	r2, [pc, #44]	; (8000930 <HAL_Init+0x74>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000906:	200f      	movs	r0, #15
 8000908:	f000 f814 	bl	8000934 <HAL_InitTick>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e002      	b.n	800091c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000916:	f7ff fe8d 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	58024400 	.word	0x58024400
 8000928:	08003050 	.word	0x08003050
 800092c:	24000004 	.word	0x24000004
 8000930:	24000000 	.word	0x24000000

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_InitTick+0x60>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d101      	bne.n	8000948 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000944:	2301      	movs	r3, #1
 8000946:	e021      	b.n	800098c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <HAL_InitTick+0x64>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_InitTick+0x60>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	fbb3 f3f1 	udiv	r3, r3, r1
 800095a:	fbb2 f3f3 	udiv	r3, r2, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f915 	bl	8000b8e <HAL_SYSTICK_Config>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e00e      	b.n	800098c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b0f      	cmp	r3, #15
 8000972:	d80a      	bhi.n	800098a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000974:	2200      	movs	r2, #0
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800097c:	f000 f8ed 	bl	8000b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <HAL_InitTick+0x68>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	e000      	b.n	800098c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2400000c 	.word	0x2400000c
 8000998:	24000000 	.word	0x24000000
 800099c:	24000008 	.word	0x24000008

080009a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x20>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_IncTick+0x24>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_IncTick+0x24>)
 80009b2:	6013      	str	r3, [r2, #0]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	2400000c 	.word	0x2400000c
 80009c4:	24000078 	.word	0x24000078

080009c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <HAL_GetTick+0x14>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	24000078 	.word	0x24000078

080009e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <__NVIC_SetPriorityGrouping+0x40>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <__NVIC_SetPriorityGrouping+0x40>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00
 8000a24:	05fa0000 	.word	0x05fa0000

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	db0a      	blt.n	8000a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	490c      	ldr	r1, [pc, #48]	; (8000a90 <__NVIC_SetPriority+0x4c>)
 8000a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a62:	0112      	lsls	r2, r2, #4
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	440b      	add	r3, r1
 8000a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a6c:	e00a      	b.n	8000a84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4908      	ldr	r1, [pc, #32]	; (8000a94 <__NVIC_SetPriority+0x50>)
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	0112      	lsls	r2, r2, #4
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	440b      	add	r3, r1
 8000a82:	761a      	strb	r2, [r3, #24]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000e100 	.word	0xe000e100
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f1c3 0307 	rsb	r3, r3, #7
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	bf28      	it	cs
 8000ab6:	2304      	movcs	r3, #4
 8000ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3304      	adds	r3, #4
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d902      	bls.n	8000ac8 <NVIC_EncodePriority+0x30>
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3b03      	subs	r3, #3
 8000ac6:	e000      	b.n	8000aca <NVIC_EncodePriority+0x32>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	43d9      	mvns	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	4313      	orrs	r3, r2
         );
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b10:	d301      	bcc.n	8000b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00f      	b.n	8000b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <SysTick_Config+0x40>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1e:	210f      	movs	r1, #15
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b24:	f7ff ff8e 	bl	8000a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <SysTick_Config+0x40>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SysTick_Config+0x40>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff47 	bl	80009e0 <__NVIC_SetPriorityGrouping>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b68:	f7ff ff5e 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000b6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	6978      	ldr	r0, [r7, #20]
 8000b74:	f7ff ff90 	bl	8000a98 <NVIC_EncodePriority>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff5f 	bl	8000a44 <__NVIC_SetPriority>
}
 8000b86:	bf00      	nop
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ffb2 	bl	8000b00 <SysTick_Config>
 8000b9c:	4603      	mov	r3, r0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000bb6:	4b86      	ldr	r3, [pc, #536]	; (8000dd0 <HAL_GPIO_Init+0x228>)
 8000bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000bba:	e18c      	b.n	8000ed6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 817e 	beq.w	8000ed0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 0303 	and.w	r3, r3, #3
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d005      	beq.n	8000bec <HAL_GPIO_Init+0x44>
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d130      	bne.n	8000c4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4013      	ands	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c22:	2201      	movs	r2, #1
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	091b      	lsrs	r3, r3, #4
 8000c38:	f003 0201 	and.w	r2, r3, #1
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d017      	beq.n	8000c8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2203      	movs	r2, #3
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d123      	bne.n	8000cde <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	08da      	lsrs	r2, r3, #3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3208      	adds	r2, #8
 8000c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	220f      	movs	r2, #15
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	691a      	ldr	r2, [r3, #16]
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	f003 0307 	and.w	r3, r3, #7
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	08da      	lsrs	r2, r3, #3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3208      	adds	r2, #8
 8000cd8:	69b9      	ldr	r1, [r7, #24]
 8000cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	2203      	movs	r2, #3
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0203 	and.w	r2, r3, #3
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 80d8 	beq.w	8000ed0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d20:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <HAL_GPIO_Init+0x22c>)
 8000d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d26:	4a2b      	ldr	r2, [pc, #172]	; (8000dd4 <HAL_GPIO_Init+0x22c>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d30:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <HAL_GPIO_Init+0x22c>)
 8000d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d3e:	4a26      	ldr	r2, [pc, #152]	; (8000dd8 <HAL_GPIO_Init+0x230>)
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3302      	adds	r3, #2
 8000d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	220f      	movs	r2, #15
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a1d      	ldr	r2, [pc, #116]	; (8000ddc <HAL_GPIO_Init+0x234>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d04a      	beq.n	8000e00 <HAL_GPIO_Init+0x258>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <HAL_GPIO_Init+0x238>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d02b      	beq.n	8000dca <HAL_GPIO_Init+0x222>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a1b      	ldr	r2, [pc, #108]	; (8000de4 <HAL_GPIO_Init+0x23c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d025      	beq.n	8000dc6 <HAL_GPIO_Init+0x21e>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a1a      	ldr	r2, [pc, #104]	; (8000de8 <HAL_GPIO_Init+0x240>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d01f      	beq.n	8000dc2 <HAL_GPIO_Init+0x21a>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a19      	ldr	r2, [pc, #100]	; (8000dec <HAL_GPIO_Init+0x244>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d019      	beq.n	8000dbe <HAL_GPIO_Init+0x216>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a18      	ldr	r2, [pc, #96]	; (8000df0 <HAL_GPIO_Init+0x248>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d013      	beq.n	8000dba <HAL_GPIO_Init+0x212>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <HAL_GPIO_Init+0x24c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d00d      	beq.n	8000db6 <HAL_GPIO_Init+0x20e>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a16      	ldr	r2, [pc, #88]	; (8000df8 <HAL_GPIO_Init+0x250>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d007      	beq.n	8000db2 <HAL_GPIO_Init+0x20a>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a15      	ldr	r2, [pc, #84]	; (8000dfc <HAL_GPIO_Init+0x254>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d101      	bne.n	8000dae <HAL_GPIO_Init+0x206>
 8000daa:	2309      	movs	r3, #9
 8000dac:	e029      	b.n	8000e02 <HAL_GPIO_Init+0x25a>
 8000dae:	230a      	movs	r3, #10
 8000db0:	e027      	b.n	8000e02 <HAL_GPIO_Init+0x25a>
 8000db2:	2307      	movs	r3, #7
 8000db4:	e025      	b.n	8000e02 <HAL_GPIO_Init+0x25a>
 8000db6:	2306      	movs	r3, #6
 8000db8:	e023      	b.n	8000e02 <HAL_GPIO_Init+0x25a>
 8000dba:	2305      	movs	r3, #5
 8000dbc:	e021      	b.n	8000e02 <HAL_GPIO_Init+0x25a>
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	e01f      	b.n	8000e02 <HAL_GPIO_Init+0x25a>
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e01d      	b.n	8000e02 <HAL_GPIO_Init+0x25a>
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	e01b      	b.n	8000e02 <HAL_GPIO_Init+0x25a>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e019      	b.n	8000e02 <HAL_GPIO_Init+0x25a>
 8000dce:	bf00      	nop
 8000dd0:	58000080 	.word	0x58000080
 8000dd4:	58024400 	.word	0x58024400
 8000dd8:	58000400 	.word	0x58000400
 8000ddc:	58020000 	.word	0x58020000
 8000de0:	58020400 	.word	0x58020400
 8000de4:	58020800 	.word	0x58020800
 8000de8:	58020c00 	.word	0x58020c00
 8000dec:	58021000 	.word	0x58021000
 8000df0:	58021400 	.word	0x58021400
 8000df4:	58021800 	.word	0x58021800
 8000df8:	58021c00 	.word	0x58021c00
 8000dfc:	58022400 	.word	0x58022400
 8000e00:	2300      	movs	r3, #0
 8000e02:	69fa      	ldr	r2, [r7, #28]
 8000e04:	f002 0203 	and.w	r2, r2, #3
 8000e08:	0092      	lsls	r2, r2, #2
 8000e0a:	4093      	lsls	r3, r2
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e12:	4938      	ldr	r1, [pc, #224]	; (8000ef4 <HAL_GPIO_Init+0x34c>)
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3302      	adds	r3, #2
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f47f ae6b 	bne.w	8000bbc <HAL_GPIO_Init+0x14>
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	bf00      	nop
 8000eea:	3724      	adds	r7, #36	; 0x24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	58000400 	.word	0x58000400

08000ef8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_PWREx_ConfigSupply+0x70>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d00a      	beq.n	8000f22 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_PWREx_ConfigSupply+0x70>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d001      	beq.n	8000f1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e01f      	b.n	8000f5e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e01d      	b.n	8000f5e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_PWREx_ConfigSupply+0x70>)
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	f023 0207 	bic.w	r2, r3, #7
 8000f2a:	490f      	ldr	r1, [pc, #60]	; (8000f68 <HAL_PWREx_ConfigSupply+0x70>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000f32:	f7ff fd49 	bl	80009c8 <HAL_GetTick>
 8000f36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000f38:	e009      	b.n	8000f4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000f3a:	f7ff fd45 	bl	80009c8 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f48:	d901      	bls.n	8000f4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e007      	b.n	8000f5e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_PWREx_ConfigSupply+0x70>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f5a:	d1ee      	bne.n	8000f3a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	58024800 	.word	0x58024800

08000f6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e39d      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 8087 	beq.w	800109a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f8c:	4b88      	ldr	r3, [pc, #544]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f96:	4b86      	ldr	r3, [pc, #536]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8000f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f9e:	2b10      	cmp	r3, #16
 8000fa0:	d007      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x46>
 8000fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa4:	2b18      	cmp	r3, #24
 8000fa6:	d110      	bne.n	8000fca <HAL_RCC_OscConfig+0x5e>
 8000fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d10b      	bne.n	8000fca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb2:	4b7f      	ldr	r3, [pc, #508]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d06c      	beq.n	8001098 <HAL_RCC_OscConfig+0x12c>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d168      	bne.n	8001098 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e377      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd2:	d106      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x76>
 8000fd4:	4b76      	ldr	r3, [pc, #472]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a75      	ldr	r2, [pc, #468]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8000fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	e02e      	b.n	8001040 <HAL_RCC_OscConfig+0xd4>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10c      	bne.n	8001004 <HAL_RCC_OscConfig+0x98>
 8000fea:	4b71      	ldr	r3, [pc, #452]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a70      	ldr	r2, [pc, #448]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8000ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b6e      	ldr	r3, [pc, #440]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a6d      	ldr	r2, [pc, #436]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8000ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e01d      	b.n	8001040 <HAL_RCC_OscConfig+0xd4>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0xbc>
 800100e:	4b68      	ldr	r3, [pc, #416]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a67      	ldr	r2, [pc, #412]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b65      	ldr	r3, [pc, #404]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a64      	ldr	r2, [pc, #400]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8001020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e00b      	b.n	8001040 <HAL_RCC_OscConfig+0xd4>
 8001028:	4b61      	ldr	r3, [pc, #388]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a60      	ldr	r2, [pc, #384]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 800102e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b5e      	ldr	r3, [pc, #376]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a5d      	ldr	r2, [pc, #372]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 800103a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d013      	beq.n	8001070 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001048:	f7ff fcbe 	bl	80009c8 <HAL_GetTick>
 800104c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001050:	f7ff fcba 	bl	80009c8 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b64      	cmp	r3, #100	; 0x64
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e32b      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001062:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f0      	beq.n	8001050 <HAL_RCC_OscConfig+0xe4>
 800106e:	e014      	b.n	800109a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001070:	f7ff fcaa 	bl	80009c8 <HAL_GetTick>
 8001074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fca6 	bl	80009c8 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b64      	cmp	r3, #100	; 0x64
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e317      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800108a:	4b49      	ldr	r3, [pc, #292]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0x10c>
 8001096:	e000      	b.n	800109a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 808c 	beq.w	80011c0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010a8:	4b41      	ldr	r3, [pc, #260]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010b2:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 80010b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80010b8:	6a3b      	ldr	r3, [r7, #32]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d007      	beq.n	80010ce <HAL_RCC_OscConfig+0x162>
 80010be:	6a3b      	ldr	r3, [r7, #32]
 80010c0:	2b18      	cmp	r3, #24
 80010c2:	d137      	bne.n	8001134 <HAL_RCC_OscConfig+0x1c8>
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d132      	bne.n	8001134 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <HAL_RCC_OscConfig+0x17a>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e2e9      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80010e6:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 0219 	bic.w	r2, r3, #25
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	492f      	ldr	r1, [pc, #188]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80010f8:	f7ff fc66 	bl	80009c8 <HAL_GetTick>
 80010fc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001100:	f7ff fc62 	bl	80009c8 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e2d3      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001112:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111e:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	061b      	lsls	r3, r3, #24
 800112c:	4920      	ldr	r1, [pc, #128]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 800112e:	4313      	orrs	r3, r2
 8001130:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001132:	e045      	b.n	80011c0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d026      	beq.n	800118a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800113c:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f023 0219 	bic.w	r2, r3, #25
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	4919      	ldr	r1, [pc, #100]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 800114a:	4313      	orrs	r3, r2
 800114c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114e:	f7ff fc3b 	bl	80009c8 <HAL_GetTick>
 8001152:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001156:	f7ff fc37 	bl	80009c8 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e2a8      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f0      	beq.n	8001156 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	061b      	lsls	r3, r3, #24
 8001182:	490b      	ldr	r1, [pc, #44]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]
 8001188:	e01a      	b.n	80011c0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001196:	f7ff fc17 	bl	80009c8 <HAL_GetTick>
 800119a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800119c:	e00a      	b.n	80011b4 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119e:	f7ff fc13 	bl	80009c8 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d903      	bls.n	80011b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e284      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
 80011b0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011b4:	4b96      	ldr	r3, [pc, #600]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1ee      	bne.n	800119e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d06a      	beq.n	80012a2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011cc:	4b90      	ldr	r3, [pc, #576]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011d4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011d6:	4b8e      	ldr	r3, [pc, #568]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 80011d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011da:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d007      	beq.n	80011f2 <HAL_RCC_OscConfig+0x286>
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	2b18      	cmp	r3, #24
 80011e6:	d11b      	bne.n	8001220 <HAL_RCC_OscConfig+0x2b4>
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d116      	bne.n	8001220 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80011f2:	4b87      	ldr	r3, [pc, #540]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d005      	beq.n	800120a <HAL_RCC_OscConfig+0x29e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	2b80      	cmp	r3, #128	; 0x80
 8001204:	d001      	beq.n	800120a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e257      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800120a:	4b81      	ldr	r3, [pc, #516]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	061b      	lsls	r3, r3, #24
 8001218:	497d      	ldr	r1, [pc, #500]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 800121a:	4313      	orrs	r3, r2
 800121c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800121e:	e040      	b.n	80012a2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d023      	beq.n	8001270 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001228:	4b79      	ldr	r3, [pc, #484]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a78      	ldr	r2, [pc, #480]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 800122e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001234:	f7ff fbc8 	bl	80009c8 <HAL_GetTick>
 8001238:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800123c:	f7ff fbc4 	bl	80009c8 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e235      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800124e:	4b70      	ldr	r3, [pc, #448]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f0      	beq.n	800123c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800125a:	4b6d      	ldr	r3, [pc, #436]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	061b      	lsls	r3, r3, #24
 8001268:	4969      	ldr	r1, [pc, #420]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 800126a:	4313      	orrs	r3, r2
 800126c:	60cb      	str	r3, [r1, #12]
 800126e:	e018      	b.n	80012a2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001270:	4b67      	ldr	r3, [pc, #412]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a66      	ldr	r2, [pc, #408]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 8001276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800127a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127c:	f7ff fba4 	bl	80009c8 <HAL_GetTick>
 8001280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001284:	f7ff fba0 	bl	80009c8 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e211      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001296:	4b5e      	ldr	r3, [pc, #376]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d036      	beq.n	800131c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d019      	beq.n	80012ea <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b6:	4b56      	ldr	r3, [pc, #344]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 80012b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ba:	4a55      	ldr	r2, [pc, #340]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c2:	f7ff fb81 	bl	80009c8 <HAL_GetTick>
 80012c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ca:	f7ff fb7d 	bl	80009c8 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e1ee      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012dc:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 80012de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x35e>
 80012e8:	e018      	b.n	800131c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ea:	4b49      	ldr	r3, [pc, #292]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 80012ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ee:	4a48      	ldr	r2, [pc, #288]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 80012f0:	f023 0301 	bic.w	r3, r3, #1
 80012f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f6:	f7ff fb67 	bl	80009c8 <HAL_GetTick>
 80012fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fe:	f7ff fb63 	bl	80009c8 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e1d4      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001310:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 8001312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f0      	bne.n	80012fe <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0320 	and.w	r3, r3, #32
 8001324:	2b00      	cmp	r3, #0
 8001326:	d036      	beq.n	8001396 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d019      	beq.n	8001364 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001330:	4b37      	ldr	r3, [pc, #220]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a36      	ldr	r2, [pc, #216]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 8001336:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800133a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800133c:	f7ff fb44 	bl	80009c8 <HAL_GetTick>
 8001340:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001344:	f7ff fb40 	bl	80009c8 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e1b1      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001356:	4b2e      	ldr	r3, [pc, #184]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0x3d8>
 8001362:	e018      	b.n	8001396 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001364:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a29      	ldr	r2, [pc, #164]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 800136a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800136e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001370:	f7ff fb2a 	bl	80009c8 <HAL_GetTick>
 8001374:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001378:	f7ff fb26 	bl	80009c8 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e197      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 8086 	beq.w	80014b0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_RCC_OscConfig+0x4a8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a1a      	ldr	r2, [pc, #104]	; (8001414 <HAL_RCC_OscConfig+0x4a8>)
 80013aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80013b0:	f7ff fb0a 	bl	80009c8 <HAL_GetTick>
 80013b4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80013b8:	f7ff fb06 	bl	80009c8 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	; 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e177      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_RCC_OscConfig+0x4a8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d106      	bne.n	80013ec <HAL_RCC_OscConfig+0x480>
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 80013e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6713      	str	r3, [r2, #112]	; 0x70
 80013ea:	e032      	b.n	8001452 <HAL_RCC_OscConfig+0x4e6>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d111      	bne.n	8001418 <HAL_RCC_OscConfig+0x4ac>
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	4a05      	ldr	r2, [pc, #20]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001404:	4a02      	ldr	r2, [pc, #8]	; (8001410 <HAL_RCC_OscConfig+0x4a4>)
 8001406:	f023 0304 	bic.w	r3, r3, #4
 800140a:	6713      	str	r3, [r2, #112]	; 0x70
 800140c:	e021      	b.n	8001452 <HAL_RCC_OscConfig+0x4e6>
 800140e:	bf00      	nop
 8001410:	58024400 	.word	0x58024400
 8001414:	58024800 	.word	0x58024800
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b05      	cmp	r3, #5
 800141e:	d10c      	bne.n	800143a <HAL_RCC_OscConfig+0x4ce>
 8001420:	4b83      	ldr	r3, [pc, #524]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001424:	4a82      	ldr	r2, [pc, #520]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6713      	str	r3, [r2, #112]	; 0x70
 800142c:	4b80      	ldr	r3, [pc, #512]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001430:	4a7f      	ldr	r2, [pc, #508]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6713      	str	r3, [r2, #112]	; 0x70
 8001438:	e00b      	b.n	8001452 <HAL_RCC_OscConfig+0x4e6>
 800143a:	4b7d      	ldr	r3, [pc, #500]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 800143c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143e:	4a7c      	ldr	r2, [pc, #496]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	6713      	str	r3, [r2, #112]	; 0x70
 8001446:	4b7a      	ldr	r3, [pc, #488]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144a:	4a79      	ldr	r2, [pc, #484]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 800144c:	f023 0304 	bic.w	r3, r3, #4
 8001450:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d015      	beq.n	8001486 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145a:	f7ff fab5 	bl	80009c8 <HAL_GetTick>
 800145e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001460:	e00a      	b.n	8001478 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001462:	f7ff fab1 	bl	80009c8 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001470:	4293      	cmp	r3, r2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e120      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001478:	4b6d      	ldr	r3, [pc, #436]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 800147a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0ee      	beq.n	8001462 <HAL_RCC_OscConfig+0x4f6>
 8001484:	e014      	b.n	80014b0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001486:	f7ff fa9f 	bl	80009c8 <HAL_GetTick>
 800148a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800148c:	e00a      	b.n	80014a4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148e:	f7ff fa9b 	bl	80009c8 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	f241 3288 	movw	r2, #5000	; 0x1388
 800149c:	4293      	cmp	r3, r2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e10a      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014a4:	4b62      	ldr	r3, [pc, #392]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1ee      	bne.n	800148e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 80ff 	beq.w	80016b8 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80014ba:	4b5d      	ldr	r3, [pc, #372]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014c2:	2b18      	cmp	r3, #24
 80014c4:	f000 80ba 	beq.w	800163c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	f040 8095 	bne.w	80015fc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d2:	4b57      	ldr	r3, [pc, #348]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a56      	ldr	r2, [pc, #344]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 80014d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014de:	f7ff fa73 	bl	80009c8 <HAL_GetTick>
 80014e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e6:	f7ff fa6f 	bl	80009c8 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e0e0      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014f8:	4b4d      	ldr	r3, [pc, #308]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f0      	bne.n	80014e6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001504:	4b4a      	ldr	r3, [pc, #296]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 8001506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001508:	4b4a      	ldr	r3, [pc, #296]	; (8001634 <HAL_RCC_OscConfig+0x6c8>)
 800150a:	4013      	ands	r3, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	430a      	orrs	r2, r1
 8001518:	4945      	ldr	r1, [pc, #276]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 800151a:	4313      	orrs	r3, r2
 800151c:	628b      	str	r3, [r1, #40]	; 0x28
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	3b01      	subs	r3, #1
 8001524:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152c:	3b01      	subs	r3, #1
 800152e:	025b      	lsls	r3, r3, #9
 8001530:	b29b      	uxth	r3, r3
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001538:	3b01      	subs	r3, #1
 800153a:	041b      	lsls	r3, r3, #16
 800153c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001546:	3b01      	subs	r3, #1
 8001548:	061b      	lsls	r3, r3, #24
 800154a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800154e:	4938      	ldr	r1, [pc, #224]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 8001550:	4313      	orrs	r3, r2
 8001552:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001554:	4b36      	ldr	r3, [pc, #216]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	4a35      	ldr	r2, [pc, #212]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 800155a:	f023 0301 	bic.w	r3, r3, #1
 800155e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001560:	4b33      	ldr	r3, [pc, #204]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 8001562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001564:	4b34      	ldr	r3, [pc, #208]	; (8001638 <HAL_RCC_OscConfig+0x6cc>)
 8001566:	4013      	ands	r3, r2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800156c:	00d2      	lsls	r2, r2, #3
 800156e:	4930      	ldr	r1, [pc, #192]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 8001570:	4313      	orrs	r3, r2
 8001572:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001574:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	f023 020c 	bic.w	r2, r3, #12
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	492b      	ldr	r1, [pc, #172]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 8001582:	4313      	orrs	r3, r2
 8001584:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001586:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	f023 0202 	bic.w	r2, r3, #2
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4927      	ldr	r1, [pc, #156]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 8001594:	4313      	orrs	r3, r2
 8001596:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001598:	4b25      	ldr	r3, [pc, #148]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	4a24      	ldr	r2, [pc, #144]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 800159e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	4a21      	ldr	r2, [pc, #132]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 80015aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 80015b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	4a1b      	ldr	r2, [pc, #108]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a18      	ldr	r2, [pc, #96]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 80015ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff f9f8 	bl	80009c8 <HAL_GetTick>
 80015d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015dc:	f7ff f9f4 	bl	80009c8 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e065      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0x670>
 80015fa:	e05d      	b.n	80016b8 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 8001602:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff f9de 	bl	80009c8 <HAL_GetTick>
 800160c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff f9da 	bl	80009c8 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e04b      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001622:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_RCC_OscConfig+0x6c4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x6a4>
 800162e:	e043      	b.n	80016b8 <HAL_RCC_OscConfig+0x74c>
 8001630:	58024400 	.word	0x58024400
 8001634:	fffffc0c 	.word	0xfffffc0c
 8001638:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_RCC_OscConfig+0x758>)
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001640:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <HAL_RCC_OscConfig+0x758>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	2b01      	cmp	r3, #1
 800164e:	d031      	beq.n	80016b4 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	f003 0203 	and.w	r2, r3, #3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d12a      	bne.n	80016b4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	429a      	cmp	r2, r3
 800166c:	d122      	bne.n	80016b4 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800167a:	429a      	cmp	r2, r3
 800167c:	d11a      	bne.n	80016b4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	0a5b      	lsrs	r3, r3, #9
 8001682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800168c:	429a      	cmp	r2, r3
 800168e:	d111      	bne.n	80016b4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	0c1b      	lsrs	r3, r3, #16
 8001694:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d108      	bne.n	80016b4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	0e1b      	lsrs	r3, r3, #24
 80016a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3730      	adds	r7, #48	; 0x30
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	58024400 	.word	0x58024400

080016c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e19c      	b.n	8001a16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016dc:	4b8a      	ldr	r3, [pc, #552]	; (8001908 <HAL_RCC_ClockConfig+0x240>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d910      	bls.n	800170c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	4b87      	ldr	r3, [pc, #540]	; (8001908 <HAL_RCC_ClockConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 020f 	bic.w	r2, r3, #15
 80016f2:	4985      	ldr	r1, [pc, #532]	; (8001908 <HAL_RCC_ClockConfig+0x240>)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fa:	4b83      	ldr	r3, [pc, #524]	; (8001908 <HAL_RCC_ClockConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d001      	beq.n	800170c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e184      	b.n	8001a16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d010      	beq.n	800173a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	4b7b      	ldr	r3, [pc, #492]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001724:	429a      	cmp	r2, r3
 8001726:	d908      	bls.n	800173a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001728:	4b78      	ldr	r3, [pc, #480]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	4975      	ldr	r1, [pc, #468]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 8001736:	4313      	orrs	r3, r2
 8001738:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d010      	beq.n	8001768 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	4b70      	ldr	r3, [pc, #448]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001752:	429a      	cmp	r2, r3
 8001754:	d908      	bls.n	8001768 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001756:	4b6d      	ldr	r3, [pc, #436]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	496a      	ldr	r1, [pc, #424]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 8001764:	4313      	orrs	r3, r2
 8001766:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	d010      	beq.n	8001796 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699a      	ldr	r2, [r3, #24]
 8001778:	4b64      	ldr	r3, [pc, #400]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001780:	429a      	cmp	r2, r3
 8001782:	d908      	bls.n	8001796 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001784:	4b61      	ldr	r3, [pc, #388]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	495e      	ldr	r1, [pc, #376]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 8001792:	4313      	orrs	r3, r2
 8001794:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0320 	and.w	r3, r3, #32
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d010      	beq.n	80017c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69da      	ldr	r2, [r3, #28]
 80017a6:	4b59      	ldr	r3, [pc, #356]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d908      	bls.n	80017c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80017b2:	4b56      	ldr	r3, [pc, #344]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4953      	ldr	r1, [pc, #332]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d010      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	4b4d      	ldr	r3, [pc, #308]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	429a      	cmp	r2, r3
 80017de:	d908      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b4a      	ldr	r3, [pc, #296]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f023 020f 	bic.w	r2, r3, #15
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	4947      	ldr	r1, [pc, #284]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d055      	beq.n	80018aa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80017fe:	4b43      	ldr	r3, [pc, #268]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	4940      	ldr	r1, [pc, #256]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 800180c:	4313      	orrs	r3, r2
 800180e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d107      	bne.n	8001828 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001818:	4b3c      	ldr	r3, [pc, #240]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d121      	bne.n	8001868 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0f6      	b.n	8001a16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d107      	bne.n	8001840 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001830:	4b36      	ldr	r3, [pc, #216]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d115      	bne.n	8001868 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0ea      	b.n	8001a16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d107      	bne.n	8001858 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001848:	4b30      	ldr	r3, [pc, #192]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001850:	2b00      	cmp	r3, #0
 8001852:	d109      	bne.n	8001868 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0de      	b.n	8001a16 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001858:	4b2c      	ldr	r3, [pc, #176]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0d6      	b.n	8001a16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001868:	4b28      	ldr	r3, [pc, #160]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	f023 0207 	bic.w	r2, r3, #7
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4925      	ldr	r1, [pc, #148]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 8001876:	4313      	orrs	r3, r2
 8001878:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187a:	f7ff f8a5 	bl	80009c8 <HAL_GetTick>
 800187e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001880:	e00a      	b.n	8001898 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001882:	f7ff f8a1 	bl	80009c8 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001890:	4293      	cmp	r3, r2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e0be      	b.n	8001a16 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001898:	4b1c      	ldr	r3, [pc, #112]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d1eb      	bne.n	8001882 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d010      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d208      	bcs.n	80018d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f023 020f 	bic.w	r2, r3, #15
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	490e      	ldr	r1, [pc, #56]	; (800190c <HAL_RCC_ClockConfig+0x244>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_RCC_ClockConfig+0x240>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d214      	bcs.n	8001910 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <HAL_RCC_ClockConfig+0x240>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 020f 	bic.w	r2, r3, #15
 80018ee:	4906      	ldr	r1, [pc, #24]	; (8001908 <HAL_RCC_ClockConfig+0x240>)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <HAL_RCC_ClockConfig+0x240>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d005      	beq.n	8001910 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e086      	b.n	8001a16 <HAL_RCC_ClockConfig+0x34e>
 8001908:	52002000 	.word	0x52002000
 800190c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d010      	beq.n	800193e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <HAL_RCC_ClockConfig+0x358>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001928:	429a      	cmp	r2, r3
 800192a:	d208      	bcs.n	800193e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800192c:	4b3c      	ldr	r3, [pc, #240]	; (8001a20 <HAL_RCC_ClockConfig+0x358>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	4939      	ldr	r1, [pc, #228]	; (8001a20 <HAL_RCC_ClockConfig+0x358>)
 800193a:	4313      	orrs	r3, r2
 800193c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d010      	beq.n	800196c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695a      	ldr	r2, [r3, #20]
 800194e:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <HAL_RCC_ClockConfig+0x358>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001956:	429a      	cmp	r2, r3
 8001958:	d208      	bcs.n	800196c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800195a:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <HAL_RCC_ClockConfig+0x358>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	492e      	ldr	r1, [pc, #184]	; (8001a20 <HAL_RCC_ClockConfig+0x358>)
 8001968:	4313      	orrs	r3, r2
 800196a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d010      	beq.n	800199a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699a      	ldr	r2, [r3, #24]
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <HAL_RCC_ClockConfig+0x358>)
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001984:	429a      	cmp	r2, r3
 8001986:	d208      	bcs.n	800199a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <HAL_RCC_ClockConfig+0x358>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4922      	ldr	r1, [pc, #136]	; (8001a20 <HAL_RCC_ClockConfig+0x358>)
 8001996:	4313      	orrs	r3, r2
 8001998:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d010      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69da      	ldr	r2, [r3, #28]
 80019aa:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_RCC_ClockConfig+0x358>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d208      	bcs.n	80019c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <HAL_RCC_ClockConfig+0x358>)
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	4917      	ldr	r1, [pc, #92]	; (8001a20 <HAL_RCC_ClockConfig+0x358>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019c8:	f000 f834 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <HAL_RCC_ClockConfig+0x358>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	4912      	ldr	r1, [pc, #72]	; (8001a24 <HAL_RCC_ClockConfig+0x35c>)
 80019da:	5ccb      	ldrb	r3, [r1, r3]
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
 80019e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_RCC_ClockConfig+0x358>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <HAL_RCC_ClockConfig+0x35c>)
 80019f0:	5cd3      	ldrb	r3, [r2, r3]
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
 80019fc:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_RCC_ClockConfig+0x360>)
 80019fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_RCC_ClockConfig+0x364>)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_RCC_ClockConfig+0x368>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe ff92 	bl	8000934 <HAL_InitTick>
 8001a10:	4603      	mov	r3, r0
 8001a12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	58024400 	.word	0x58024400
 8001a24:	08003050 	.word	0x08003050
 8001a28:	24000004 	.word	0x24000004
 8001a2c:	24000000 	.word	0x24000000
 8001a30:	24000008 	.word	0x24000008

08001a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a3a:	4bb3      	ldr	r3, [pc, #716]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a42:	2b18      	cmp	r3, #24
 8001a44:	f200 8155 	bhi.w	8001cf2 <HAL_RCC_GetSysClockFreq+0x2be>
 8001a48:	a201      	add	r2, pc, #4	; (adr r2, 8001a50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4e:	bf00      	nop
 8001a50:	08001ab5 	.word	0x08001ab5
 8001a54:	08001cf3 	.word	0x08001cf3
 8001a58:	08001cf3 	.word	0x08001cf3
 8001a5c:	08001cf3 	.word	0x08001cf3
 8001a60:	08001cf3 	.word	0x08001cf3
 8001a64:	08001cf3 	.word	0x08001cf3
 8001a68:	08001cf3 	.word	0x08001cf3
 8001a6c:	08001cf3 	.word	0x08001cf3
 8001a70:	08001adb 	.word	0x08001adb
 8001a74:	08001cf3 	.word	0x08001cf3
 8001a78:	08001cf3 	.word	0x08001cf3
 8001a7c:	08001cf3 	.word	0x08001cf3
 8001a80:	08001cf3 	.word	0x08001cf3
 8001a84:	08001cf3 	.word	0x08001cf3
 8001a88:	08001cf3 	.word	0x08001cf3
 8001a8c:	08001cf3 	.word	0x08001cf3
 8001a90:	08001ae1 	.word	0x08001ae1
 8001a94:	08001cf3 	.word	0x08001cf3
 8001a98:	08001cf3 	.word	0x08001cf3
 8001a9c:	08001cf3 	.word	0x08001cf3
 8001aa0:	08001cf3 	.word	0x08001cf3
 8001aa4:	08001cf3 	.word	0x08001cf3
 8001aa8:	08001cf3 	.word	0x08001cf3
 8001aac:	08001cf3 	.word	0x08001cf3
 8001ab0:	08001ae7 	.word	0x08001ae7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ab4:	4b94      	ldr	r3, [pc, #592]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0320 	and.w	r3, r3, #32
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d009      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ac0:	4b91      	ldr	r3, [pc, #580]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	08db      	lsrs	r3, r3, #3
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	4a90      	ldr	r2, [pc, #576]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001acc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001ad2:	e111      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ad4:	4b8d      	ldr	r3, [pc, #564]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ad6:	61bb      	str	r3, [r7, #24]
    break;
 8001ad8:	e10e      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001ada:	4b8d      	ldr	r3, [pc, #564]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001adc:	61bb      	str	r3, [r7, #24]
    break;
 8001ade:	e10b      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001ae0:	4b8c      	ldr	r3, [pc, #560]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001ae2:	61bb      	str	r3, [r7, #24]
    break;
 8001ae4:	e108      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001ae6:	4b88      	ldr	r3, [pc, #544]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001af0:	4b85      	ldr	r3, [pc, #532]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001afa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001afc:	4b82      	ldr	r3, [pc, #520]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001b06:	4b80      	ldr	r3, [pc, #512]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0a:	08db      	lsrs	r3, r3, #3
 8001b0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	fb02 f303 	mul.w	r3, r2, r3
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b1e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80e1 	beq.w	8001cec <HAL_RCC_GetSysClockFreq+0x2b8>
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	f000 8083 	beq.w	8001c38 <HAL_RCC_GetSysClockFreq+0x204>
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	f200 80a1 	bhi.w	8001c7c <HAL_RCC_GetSysClockFreq+0x248>
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x114>
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d056      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001b46:	e099      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b48:	4b6f      	ldr	r3, [pc, #444]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0320 	and.w	r3, r3, #32
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d02d      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b54:	4b6c      	ldr	r3, [pc, #432]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	08db      	lsrs	r3, r3, #3
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	4a6b      	ldr	r2, [pc, #428]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
 8001b64:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	ee07 3a90 	vmov	s15, r3
 8001b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b7e:	4b62      	ldr	r3, [pc, #392]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b92:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001d18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001baa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001bae:	e087      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bba:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001d1c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bc2:	4b51      	ldr	r3, [pc, #324]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001bd6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001d18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001bf2:	e065      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	ee07 3a90 	vmov	s15, r3
 8001bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bfe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001d20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c06:	4b40      	ldr	r3, [pc, #256]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c1a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001d18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001c36:	e043      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	ee07 3a90 	vmov	s15, r3
 8001c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c42:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001d24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c4a:	4b2f      	ldr	r3, [pc, #188]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c5e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001d18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001c7a:	e021      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c86:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001d20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ca2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001d18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001cbe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	0a5b      	lsrs	r3, r3, #9
 8001cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cca:	3301      	adds	r3, #1
 8001ccc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8001cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ce4:	ee17 3a90 	vmov	r3, s15
 8001ce8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001cea:	e005      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
    break;
 8001cf0:	e002      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001cf4:	61bb      	str	r3, [r7, #24]
    break;
 8001cf6:	bf00      	nop
  }

  return sysclockfreq;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	; 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	58024400 	.word	0x58024400
 8001d0c:	03d09000 	.word	0x03d09000
 8001d10:	003d0900 	.word	0x003d0900
 8001d14:	017d7840 	.word	0x017d7840
 8001d18:	46000000 	.word	0x46000000
 8001d1c:	4c742400 	.word	0x4c742400
 8001d20:	4a742400 	.word	0x4a742400
 8001d24:	4bbebc20 	.word	0x4bbebc20

08001d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e049      	b.n	8001dce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7fe fc8a 	bl	8000668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3304      	adds	r3, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	4610      	mov	r0, r2
 8001d68:	f000 fbbe 	bl	80024e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e049      	b.n	8001e7c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d106      	bne.n	8001e02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f841 	bl	8001e84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2202      	movs	r2, #2
 8001e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3304      	adds	r3, #4
 8001e12:	4619      	mov	r1, r3
 8001e14:	4610      	mov	r0, r2
 8001e16:	f000 fb67 	bl	80024e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <HAL_TIM_PWM_Start+0x24>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	e03c      	b.n	8001f36 <HAL_TIM_PWM_Start+0x9e>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d109      	bne.n	8001ed6 <HAL_TIM_PWM_Start+0x3e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	bf14      	ite	ne
 8001ece:	2301      	movne	r3, #1
 8001ed0:	2300      	moveq	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	e02f      	b.n	8001f36 <HAL_TIM_PWM_Start+0x9e>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d109      	bne.n	8001ef0 <HAL_TIM_PWM_Start+0x58>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	bf14      	ite	ne
 8001ee8:	2301      	movne	r3, #1
 8001eea:	2300      	moveq	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	e022      	b.n	8001f36 <HAL_TIM_PWM_Start+0x9e>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d109      	bne.n	8001f0a <HAL_TIM_PWM_Start+0x72>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	bf14      	ite	ne
 8001f02:	2301      	movne	r3, #1
 8001f04:	2300      	moveq	r3, #0
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	e015      	b.n	8001f36 <HAL_TIM_PWM_Start+0x9e>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b10      	cmp	r3, #16
 8001f0e:	d109      	bne.n	8001f24 <HAL_TIM_PWM_Start+0x8c>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	bf14      	ite	ne
 8001f1c:	2301      	movne	r3, #1
 8001f1e:	2300      	moveq	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	e008      	b.n	8001f36 <HAL_TIM_PWM_Start+0x9e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	bf14      	ite	ne
 8001f30:	2301      	movne	r3, #1
 8001f32:	2300      	moveq	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0ab      	b.n	8002096 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d104      	bne.n	8001f4e <HAL_TIM_PWM_Start+0xb6>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f4c:	e023      	b.n	8001f96 <HAL_TIM_PWM_Start+0xfe>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d104      	bne.n	8001f5e <HAL_TIM_PWM_Start+0xc6>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f5c:	e01b      	b.n	8001f96 <HAL_TIM_PWM_Start+0xfe>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d104      	bne.n	8001f6e <HAL_TIM_PWM_Start+0xd6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f6c:	e013      	b.n	8001f96 <HAL_TIM_PWM_Start+0xfe>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2b0c      	cmp	r3, #12
 8001f72:	d104      	bne.n	8001f7e <HAL_TIM_PWM_Start+0xe6>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f7c:	e00b      	b.n	8001f96 <HAL_TIM_PWM_Start+0xfe>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b10      	cmp	r3, #16
 8001f82:	d104      	bne.n	8001f8e <HAL_TIM_PWM_Start+0xf6>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f8c:	e003      	b.n	8001f96 <HAL_TIM_PWM_Start+0xfe>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2202      	movs	r2, #2
 8001f92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	6839      	ldr	r1, [r7, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 febc 	bl	8002d1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a3d      	ldr	r2, [pc, #244]	; (80020a0 <HAL_TIM_PWM_Start+0x208>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <HAL_TIM_PWM_Start+0x13e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a3c      	ldr	r2, [pc, #240]	; (80020a4 <HAL_TIM_PWM_Start+0x20c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00e      	beq.n	8001fd6 <HAL_TIM_PWM_Start+0x13e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a3a      	ldr	r2, [pc, #232]	; (80020a8 <HAL_TIM_PWM_Start+0x210>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_TIM_PWM_Start+0x13e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a39      	ldr	r2, [pc, #228]	; (80020ac <HAL_TIM_PWM_Start+0x214>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d004      	beq.n	8001fd6 <HAL_TIM_PWM_Start+0x13e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a37      	ldr	r2, [pc, #220]	; (80020b0 <HAL_TIM_PWM_Start+0x218>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_TIM_PWM_Start+0x142>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_TIM_PWM_Start+0x144>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a2a      	ldr	r2, [pc, #168]	; (80020a0 <HAL_TIM_PWM_Start+0x208>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d02c      	beq.n	8002054 <HAL_TIM_PWM_Start+0x1bc>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002002:	d027      	beq.n	8002054 <HAL_TIM_PWM_Start+0x1bc>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a2a      	ldr	r2, [pc, #168]	; (80020b4 <HAL_TIM_PWM_Start+0x21c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d022      	beq.n	8002054 <HAL_TIM_PWM_Start+0x1bc>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a29      	ldr	r2, [pc, #164]	; (80020b8 <HAL_TIM_PWM_Start+0x220>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d01d      	beq.n	8002054 <HAL_TIM_PWM_Start+0x1bc>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a27      	ldr	r2, [pc, #156]	; (80020bc <HAL_TIM_PWM_Start+0x224>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d018      	beq.n	8002054 <HAL_TIM_PWM_Start+0x1bc>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <HAL_TIM_PWM_Start+0x20c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d013      	beq.n	8002054 <HAL_TIM_PWM_Start+0x1bc>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a23      	ldr	r2, [pc, #140]	; (80020c0 <HAL_TIM_PWM_Start+0x228>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00e      	beq.n	8002054 <HAL_TIM_PWM_Start+0x1bc>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1b      	ldr	r2, [pc, #108]	; (80020a8 <HAL_TIM_PWM_Start+0x210>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d009      	beq.n	8002054 <HAL_TIM_PWM_Start+0x1bc>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <HAL_TIM_PWM_Start+0x22c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d004      	beq.n	8002054 <HAL_TIM_PWM_Start+0x1bc>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1e      	ldr	r2, [pc, #120]	; (80020c8 <HAL_TIM_PWM_Start+0x230>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d115      	bne.n	8002080 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <HAL_TIM_PWM_Start+0x234>)
 800205c:	4013      	ands	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b06      	cmp	r3, #6
 8002064:	d015      	beq.n	8002092 <HAL_TIM_PWM_Start+0x1fa>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206c:	d011      	beq.n	8002092 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0201 	orr.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207e:	e008      	b.n	8002092 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e000      	b.n	8002094 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002092:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40010000 	.word	0x40010000
 80020a4:	40010400 	.word	0x40010400
 80020a8:	40014000 	.word	0x40014000
 80020ac:	40014400 	.word	0x40014400
 80020b0:	40014800 	.word	0x40014800
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40000800 	.word	0x40000800
 80020bc:	40000c00 	.word	0x40000c00
 80020c0:	40001800 	.word	0x40001800
 80020c4:	4000e000 	.word	0x4000e000
 80020c8:	4000e400 	.word	0x4000e400
 80020cc:	00010007 	.word	0x00010007

080020d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e0ff      	b.n	80022ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b14      	cmp	r3, #20
 80020fa:	f200 80f0 	bhi.w	80022de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80020fe:	a201      	add	r2, pc, #4	; (adr r2, 8002104 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002104:	08002159 	.word	0x08002159
 8002108:	080022df 	.word	0x080022df
 800210c:	080022df 	.word	0x080022df
 8002110:	080022df 	.word	0x080022df
 8002114:	08002199 	.word	0x08002199
 8002118:	080022df 	.word	0x080022df
 800211c:	080022df 	.word	0x080022df
 8002120:	080022df 	.word	0x080022df
 8002124:	080021db 	.word	0x080021db
 8002128:	080022df 	.word	0x080022df
 800212c:	080022df 	.word	0x080022df
 8002130:	080022df 	.word	0x080022df
 8002134:	0800221b 	.word	0x0800221b
 8002138:	080022df 	.word	0x080022df
 800213c:	080022df 	.word	0x080022df
 8002140:	080022df 	.word	0x080022df
 8002144:	0800225d 	.word	0x0800225d
 8002148:	080022df 	.word	0x080022df
 800214c:	080022df 	.word	0x080022df
 8002150:	080022df 	.word	0x080022df
 8002154:	0800229d 	.word	0x0800229d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fa68 	bl	8002634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699a      	ldr	r2, [r3, #24]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0208 	orr.w	r2, r2, #8
 8002172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699a      	ldr	r2, [r3, #24]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0204 	bic.w	r2, r2, #4
 8002182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6999      	ldr	r1, [r3, #24]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	619a      	str	r2, [r3, #24]
      break;
 8002196:	e0a5      	b.n	80022e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 fad8 	bl	8002754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6999      	ldr	r1, [r3, #24]
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	021a      	lsls	r2, r3, #8
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	619a      	str	r2, [r3, #24]
      break;
 80021d8:	e084      	b.n	80022e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fb41 	bl	8002868 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0208 	orr.w	r2, r2, #8
 80021f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	69da      	ldr	r2, [r3, #28]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0204 	bic.w	r2, r2, #4
 8002204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	69d9      	ldr	r1, [r3, #28]
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	61da      	str	r2, [r3, #28]
      break;
 8002218:	e064      	b.n	80022e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68b9      	ldr	r1, [r7, #8]
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fba9 	bl	8002978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69da      	ldr	r2, [r3, #28]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	69d9      	ldr	r1, [r3, #28]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	021a      	lsls	r2, r3, #8
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	61da      	str	r2, [r3, #28]
      break;
 800225a:	e043      	b.n	80022e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fbf2 	bl	8002a4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0208 	orr.w	r2, r2, #8
 8002276:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0204 	bic.w	r2, r2, #4
 8002286:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800229a:	e023      	b.n	80022e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fc36 	bl	8002b14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	021a      	lsls	r2, r3, #8
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80022dc:	e002      	b.n	80022e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	75fb      	strb	r3, [r7, #23]
      break;
 80022e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop

080022f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_TIM_ConfigClockSource+0x1c>
 8002310:	2302      	movs	r3, #2
 8002312:	e0dc      	b.n	80024ce <HAL_TIM_ConfigClockSource+0x1d6>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800233a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a64      	ldr	r2, [pc, #400]	; (80024dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	f000 80a9 	beq.w	80024a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002350:	4a62      	ldr	r2, [pc, #392]	; (80024dc <HAL_TIM_ConfigClockSource+0x1e4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	f200 80ae 	bhi.w	80024b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002358:	4a61      	ldr	r2, [pc, #388]	; (80024e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	f000 80a1 	beq.w	80024a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002360:	4a5f      	ldr	r2, [pc, #380]	; (80024e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	f200 80a6 	bhi.w	80024b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002368:	4a5e      	ldr	r2, [pc, #376]	; (80024e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800236a:	4293      	cmp	r3, r2
 800236c:	f000 8099 	beq.w	80024a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002370:	4a5c      	ldr	r2, [pc, #368]	; (80024e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002372:	4293      	cmp	r3, r2
 8002374:	f200 809e 	bhi.w	80024b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002378:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800237c:	f000 8091 	beq.w	80024a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002380:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002384:	f200 8096 	bhi.w	80024b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800238c:	f000 8089 	beq.w	80024a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002394:	f200 808e 	bhi.w	80024b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239c:	d03e      	beq.n	800241c <HAL_TIM_ConfigClockSource+0x124>
 800239e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a2:	f200 8087 	bhi.w	80024b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80023a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023aa:	f000 8086 	beq.w	80024ba <HAL_TIM_ConfigClockSource+0x1c2>
 80023ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b2:	d87f      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80023b4:	2b70      	cmp	r3, #112	; 0x70
 80023b6:	d01a      	beq.n	80023ee <HAL_TIM_ConfigClockSource+0xf6>
 80023b8:	2b70      	cmp	r3, #112	; 0x70
 80023ba:	d87b      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80023bc:	2b60      	cmp	r3, #96	; 0x60
 80023be:	d050      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0x16a>
 80023c0:	2b60      	cmp	r3, #96	; 0x60
 80023c2:	d877      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80023c4:	2b50      	cmp	r3, #80	; 0x50
 80023c6:	d03c      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x14a>
 80023c8:	2b50      	cmp	r3, #80	; 0x50
 80023ca:	d873      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80023cc:	2b40      	cmp	r3, #64	; 0x40
 80023ce:	d058      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x18a>
 80023d0:	2b40      	cmp	r3, #64	; 0x40
 80023d2:	d86f      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80023d4:	2b30      	cmp	r3, #48	; 0x30
 80023d6:	d064      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80023d8:	2b30      	cmp	r3, #48	; 0x30
 80023da:	d86b      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d060      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d867      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d05c      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80023e8:	2b10      	cmp	r3, #16
 80023ea:	d05a      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80023ec:	e062      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6899      	ldr	r1, [r3, #8]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f000 fc6d 	bl	8002cdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002410:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	609a      	str	r2, [r3, #8]
      break;
 800241a:	e04f      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6899      	ldr	r1, [r3, #8]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f000 fc56 	bl	8002cdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800243e:	609a      	str	r2, [r3, #8]
      break;
 8002440:	e03c      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6859      	ldr	r1, [r3, #4]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	461a      	mov	r2, r3
 8002450:	f000 fbc6 	bl	8002be0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2150      	movs	r1, #80	; 0x50
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fc20 	bl	8002ca0 <TIM_ITRx_SetConfig>
      break;
 8002460:	e02c      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6859      	ldr	r1, [r3, #4]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	461a      	mov	r2, r3
 8002470:	f000 fbe5 	bl	8002c3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2160      	movs	r1, #96	; 0x60
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fc10 	bl	8002ca0 <TIM_ITRx_SetConfig>
      break;
 8002480:	e01c      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6859      	ldr	r1, [r3, #4]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	461a      	mov	r2, r3
 8002490:	f000 fba6 	bl	8002be0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2140      	movs	r1, #64	; 0x40
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fc00 	bl	8002ca0 <TIM_ITRx_SetConfig>
      break;
 80024a0:	e00c      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4619      	mov	r1, r3
 80024ac:	4610      	mov	r0, r2
 80024ae:	f000 fbf7 	bl	8002ca0 <TIM_ITRx_SetConfig>
      break;
 80024b2:	e003      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      break;
 80024b8:	e000      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80024ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	ffceff88 	.word	0xffceff88
 80024dc:	00100040 	.word	0x00100040
 80024e0:	00100030 	.word	0x00100030
 80024e4:	00100020 	.word	0x00100020

080024e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a44      	ldr	r2, [pc, #272]	; (800260c <TIM_Base_SetConfig+0x124>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d013      	beq.n	8002528 <TIM_Base_SetConfig+0x40>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002506:	d00f      	beq.n	8002528 <TIM_Base_SetConfig+0x40>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a41      	ldr	r2, [pc, #260]	; (8002610 <TIM_Base_SetConfig+0x128>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00b      	beq.n	8002528 <TIM_Base_SetConfig+0x40>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a40      	ldr	r2, [pc, #256]	; (8002614 <TIM_Base_SetConfig+0x12c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <TIM_Base_SetConfig+0x40>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a3f      	ldr	r2, [pc, #252]	; (8002618 <TIM_Base_SetConfig+0x130>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d003      	beq.n	8002528 <TIM_Base_SetConfig+0x40>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a3e      	ldr	r2, [pc, #248]	; (800261c <TIM_Base_SetConfig+0x134>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d108      	bne.n	800253a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a33      	ldr	r2, [pc, #204]	; (800260c <TIM_Base_SetConfig+0x124>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d027      	beq.n	8002592 <TIM_Base_SetConfig+0xaa>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002548:	d023      	beq.n	8002592 <TIM_Base_SetConfig+0xaa>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a30      	ldr	r2, [pc, #192]	; (8002610 <TIM_Base_SetConfig+0x128>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d01f      	beq.n	8002592 <TIM_Base_SetConfig+0xaa>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a2f      	ldr	r2, [pc, #188]	; (8002614 <TIM_Base_SetConfig+0x12c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01b      	beq.n	8002592 <TIM_Base_SetConfig+0xaa>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a2e      	ldr	r2, [pc, #184]	; (8002618 <TIM_Base_SetConfig+0x130>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d017      	beq.n	8002592 <TIM_Base_SetConfig+0xaa>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a2d      	ldr	r2, [pc, #180]	; (800261c <TIM_Base_SetConfig+0x134>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <TIM_Base_SetConfig+0xaa>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a2c      	ldr	r2, [pc, #176]	; (8002620 <TIM_Base_SetConfig+0x138>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00f      	beq.n	8002592 <TIM_Base_SetConfig+0xaa>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a2b      	ldr	r2, [pc, #172]	; (8002624 <TIM_Base_SetConfig+0x13c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00b      	beq.n	8002592 <TIM_Base_SetConfig+0xaa>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a2a      	ldr	r2, [pc, #168]	; (8002628 <TIM_Base_SetConfig+0x140>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d007      	beq.n	8002592 <TIM_Base_SetConfig+0xaa>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a29      	ldr	r2, [pc, #164]	; (800262c <TIM_Base_SetConfig+0x144>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d003      	beq.n	8002592 <TIM_Base_SetConfig+0xaa>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a28      	ldr	r2, [pc, #160]	; (8002630 <TIM_Base_SetConfig+0x148>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d108      	bne.n	80025a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a10      	ldr	r2, [pc, #64]	; (800260c <TIM_Base_SetConfig+0x124>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00f      	beq.n	80025f0 <TIM_Base_SetConfig+0x108>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a12      	ldr	r2, [pc, #72]	; (800261c <TIM_Base_SetConfig+0x134>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00b      	beq.n	80025f0 <TIM_Base_SetConfig+0x108>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a11      	ldr	r2, [pc, #68]	; (8002620 <TIM_Base_SetConfig+0x138>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d007      	beq.n	80025f0 <TIM_Base_SetConfig+0x108>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a10      	ldr	r2, [pc, #64]	; (8002624 <TIM_Base_SetConfig+0x13c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d003      	beq.n	80025f0 <TIM_Base_SetConfig+0x108>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <TIM_Base_SetConfig+0x140>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d103      	bne.n	80025f8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	615a      	str	r2, [r3, #20]
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40010000 	.word	0x40010000
 8002610:	40000400 	.word	0x40000400
 8002614:	40000800 	.word	0x40000800
 8002618:	40000c00 	.word	0x40000c00
 800261c:	40010400 	.word	0x40010400
 8002620:	40014000 	.word	0x40014000
 8002624:	40014400 	.word	0x40014400
 8002628:	40014800 	.word	0x40014800
 800262c:	4000e000 	.word	0x4000e000
 8002630:	4000e400 	.word	0x4000e400

08002634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	f023 0201 	bic.w	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4b37      	ldr	r3, [pc, #220]	; (800273c <TIM_OC1_SetConfig+0x108>)
 8002660:	4013      	ands	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f023 0303 	bic.w	r3, r3, #3
 800266a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f023 0302 	bic.w	r3, r3, #2
 800267c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a2d      	ldr	r2, [pc, #180]	; (8002740 <TIM_OC1_SetConfig+0x10c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d00f      	beq.n	80026b0 <TIM_OC1_SetConfig+0x7c>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a2c      	ldr	r2, [pc, #176]	; (8002744 <TIM_OC1_SetConfig+0x110>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00b      	beq.n	80026b0 <TIM_OC1_SetConfig+0x7c>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a2b      	ldr	r2, [pc, #172]	; (8002748 <TIM_OC1_SetConfig+0x114>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d007      	beq.n	80026b0 <TIM_OC1_SetConfig+0x7c>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a2a      	ldr	r2, [pc, #168]	; (800274c <TIM_OC1_SetConfig+0x118>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d003      	beq.n	80026b0 <TIM_OC1_SetConfig+0x7c>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a29      	ldr	r2, [pc, #164]	; (8002750 <TIM_OC1_SetConfig+0x11c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d10c      	bne.n	80026ca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f023 0308 	bic.w	r3, r3, #8
 80026b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	4313      	orrs	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f023 0304 	bic.w	r3, r3, #4
 80026c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <TIM_OC1_SetConfig+0x10c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00f      	beq.n	80026f2 <TIM_OC1_SetConfig+0xbe>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <TIM_OC1_SetConfig+0x110>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00b      	beq.n	80026f2 <TIM_OC1_SetConfig+0xbe>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a1a      	ldr	r2, [pc, #104]	; (8002748 <TIM_OC1_SetConfig+0x114>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d007      	beq.n	80026f2 <TIM_OC1_SetConfig+0xbe>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a19      	ldr	r2, [pc, #100]	; (800274c <TIM_OC1_SetConfig+0x118>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d003      	beq.n	80026f2 <TIM_OC1_SetConfig+0xbe>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a18      	ldr	r2, [pc, #96]	; (8002750 <TIM_OC1_SetConfig+0x11c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d111      	bne.n	8002716 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	621a      	str	r2, [r3, #32]
}
 8002730:	bf00      	nop
 8002732:	371c      	adds	r7, #28
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	fffeff8f 	.word	0xfffeff8f
 8002740:	40010000 	.word	0x40010000
 8002744:	40010400 	.word	0x40010400
 8002748:	40014000 	.word	0x40014000
 800274c:	40014400 	.word	0x40014400
 8002750:	40014800 	.word	0x40014800

08002754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	f023 0210 	bic.w	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4b34      	ldr	r3, [pc, #208]	; (8002850 <TIM_OC2_SetConfig+0xfc>)
 8002780:	4013      	ands	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800278a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4313      	orrs	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f023 0320 	bic.w	r3, r3, #32
 800279e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a29      	ldr	r2, [pc, #164]	; (8002854 <TIM_OC2_SetConfig+0x100>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d003      	beq.n	80027bc <TIM_OC2_SetConfig+0x68>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a28      	ldr	r2, [pc, #160]	; (8002858 <TIM_OC2_SetConfig+0x104>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d10d      	bne.n	80027d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a1e      	ldr	r2, [pc, #120]	; (8002854 <TIM_OC2_SetConfig+0x100>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00f      	beq.n	8002800 <TIM_OC2_SetConfig+0xac>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <TIM_OC2_SetConfig+0x104>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d00b      	beq.n	8002800 <TIM_OC2_SetConfig+0xac>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a1c      	ldr	r2, [pc, #112]	; (800285c <TIM_OC2_SetConfig+0x108>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d007      	beq.n	8002800 <TIM_OC2_SetConfig+0xac>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a1b      	ldr	r2, [pc, #108]	; (8002860 <TIM_OC2_SetConfig+0x10c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d003      	beq.n	8002800 <TIM_OC2_SetConfig+0xac>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a1a      	ldr	r2, [pc, #104]	; (8002864 <TIM_OC2_SetConfig+0x110>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d113      	bne.n	8002828 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002806:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800280e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	621a      	str	r2, [r3, #32]
}
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	feff8fff 	.word	0xfeff8fff
 8002854:	40010000 	.word	0x40010000
 8002858:	40010400 	.word	0x40010400
 800285c:	40014000 	.word	0x40014000
 8002860:	40014400 	.word	0x40014400
 8002864:	40014800 	.word	0x40014800

08002868 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4b33      	ldr	r3, [pc, #204]	; (8002960 <TIM_OC3_SetConfig+0xf8>)
 8002894:	4013      	ands	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0303 	bic.w	r3, r3, #3
 800289e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a28      	ldr	r2, [pc, #160]	; (8002964 <TIM_OC3_SetConfig+0xfc>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d003      	beq.n	80028ce <TIM_OC3_SetConfig+0x66>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a27      	ldr	r2, [pc, #156]	; (8002968 <TIM_OC3_SetConfig+0x100>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d10d      	bne.n	80028ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a1d      	ldr	r2, [pc, #116]	; (8002964 <TIM_OC3_SetConfig+0xfc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00f      	beq.n	8002912 <TIM_OC3_SetConfig+0xaa>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a1c      	ldr	r2, [pc, #112]	; (8002968 <TIM_OC3_SetConfig+0x100>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d00b      	beq.n	8002912 <TIM_OC3_SetConfig+0xaa>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a1b      	ldr	r2, [pc, #108]	; (800296c <TIM_OC3_SetConfig+0x104>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d007      	beq.n	8002912 <TIM_OC3_SetConfig+0xaa>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1a      	ldr	r2, [pc, #104]	; (8002970 <TIM_OC3_SetConfig+0x108>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d003      	beq.n	8002912 <TIM_OC3_SetConfig+0xaa>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a19      	ldr	r2, [pc, #100]	; (8002974 <TIM_OC3_SetConfig+0x10c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d113      	bne.n	800293a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	621a      	str	r2, [r3, #32]
}
 8002954:	bf00      	nop
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	fffeff8f 	.word	0xfffeff8f
 8002964:	40010000 	.word	0x40010000
 8002968:	40010400 	.word	0x40010400
 800296c:	40014000 	.word	0x40014000
 8002970:	40014400 	.word	0x40014400
 8002974:	40014800 	.word	0x40014800

08002978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4b24      	ldr	r3, [pc, #144]	; (8002a34 <TIM_OC4_SetConfig+0xbc>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	021b      	lsls	r3, r3, #8
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	031b      	lsls	r3, r3, #12
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a19      	ldr	r2, [pc, #100]	; (8002a38 <TIM_OC4_SetConfig+0xc0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00f      	beq.n	80029f8 <TIM_OC4_SetConfig+0x80>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <TIM_OC4_SetConfig+0xc4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d00b      	beq.n	80029f8 <TIM_OC4_SetConfig+0x80>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a17      	ldr	r2, [pc, #92]	; (8002a40 <TIM_OC4_SetConfig+0xc8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d007      	beq.n	80029f8 <TIM_OC4_SetConfig+0x80>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <TIM_OC4_SetConfig+0xcc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d003      	beq.n	80029f8 <TIM_OC4_SetConfig+0x80>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <TIM_OC4_SetConfig+0xd0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d109      	bne.n	8002a0c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	019b      	lsls	r3, r3, #6
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	621a      	str	r2, [r3, #32]
}
 8002a26:	bf00      	nop
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	feff8fff 	.word	0xfeff8fff
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	40010400 	.word	0x40010400
 8002a40:	40014000 	.word	0x40014000
 8002a44:	40014400 	.word	0x40014400
 8002a48:	40014800 	.word	0x40014800

08002a4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4b21      	ldr	r3, [pc, #132]	; (8002afc <TIM_OC5_SetConfig+0xb0>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002a8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	041b      	lsls	r3, r3, #16
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a18      	ldr	r2, [pc, #96]	; (8002b00 <TIM_OC5_SetConfig+0xb4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00f      	beq.n	8002ac2 <TIM_OC5_SetConfig+0x76>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a17      	ldr	r2, [pc, #92]	; (8002b04 <TIM_OC5_SetConfig+0xb8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00b      	beq.n	8002ac2 <TIM_OC5_SetConfig+0x76>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a16      	ldr	r2, [pc, #88]	; (8002b08 <TIM_OC5_SetConfig+0xbc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <TIM_OC5_SetConfig+0x76>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a15      	ldr	r2, [pc, #84]	; (8002b0c <TIM_OC5_SetConfig+0xc0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d003      	beq.n	8002ac2 <TIM_OC5_SetConfig+0x76>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a14      	ldr	r2, [pc, #80]	; (8002b10 <TIM_OC5_SetConfig+0xc4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d109      	bne.n	8002ad6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	621a      	str	r2, [r3, #32]
}
 8002af0:	bf00      	nop
 8002af2:	371c      	adds	r7, #28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	fffeff8f 	.word	0xfffeff8f
 8002b00:	40010000 	.word	0x40010000
 8002b04:	40010400 	.word	0x40010400
 8002b08:	40014000 	.word	0x40014000
 8002b0c:	40014400 	.word	0x40014400
 8002b10:	40014800 	.word	0x40014800

08002b14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <TIM_OC6_SetConfig+0xb4>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	051b      	lsls	r3, r3, #20
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a19      	ldr	r2, [pc, #100]	; (8002bcc <TIM_OC6_SetConfig+0xb8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d00f      	beq.n	8002b8c <TIM_OC6_SetConfig+0x78>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <TIM_OC6_SetConfig+0xbc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00b      	beq.n	8002b8c <TIM_OC6_SetConfig+0x78>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <TIM_OC6_SetConfig+0xc0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d007      	beq.n	8002b8c <TIM_OC6_SetConfig+0x78>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a16      	ldr	r2, [pc, #88]	; (8002bd8 <TIM_OC6_SetConfig+0xc4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d003      	beq.n	8002b8c <TIM_OC6_SetConfig+0x78>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a15      	ldr	r2, [pc, #84]	; (8002bdc <TIM_OC6_SetConfig+0xc8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d109      	bne.n	8002ba0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	029b      	lsls	r3, r3, #10
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	621a      	str	r2, [r3, #32]
}
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	feff8fff 	.word	0xfeff8fff
 8002bcc:	40010000 	.word	0x40010000
 8002bd0:	40010400 	.word	0x40010400
 8002bd4:	40014000 	.word	0x40014000
 8002bd8:	40014400 	.word	0x40014400
 8002bdc:	40014800 	.word	0x40014800

08002be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	f023 0201 	bic.w	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f023 030a 	bic.w	r3, r3, #10
 8002c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	621a      	str	r2, [r3, #32]
}
 8002c32:	bf00      	nop
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b087      	sub	sp, #28
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f023 0210 	bic.w	r2, r3, #16
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	031b      	lsls	r3, r3, #12
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	621a      	str	r2, [r3, #32]
}
 8002c92:	bf00      	nop
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <TIM_ITRx_SetConfig+0x38>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f043 0307 	orr.w	r3, r3, #7
 8002cc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	609a      	str	r2, [r3, #8]
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	ffcfff8f 	.word	0xffcfff8f

08002cdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	021a      	lsls	r2, r3, #8
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	609a      	str	r2, [r3, #8]
}
 8002d10:	bf00      	nop
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	2201      	movs	r2, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a1a      	ldr	r2, [r3, #32]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	401a      	ands	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a1a      	ldr	r2, [r3, #32]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	431a      	orrs	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	621a      	str	r2, [r3, #32]
}
 8002d5a:	bf00      	nop
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e077      	b.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a35      	ldr	r2, [pc, #212]	; (8002e7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d004      	beq.n	8002db4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a34      	ldr	r2, [pc, #208]	; (8002e80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d108      	bne.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002dba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a25      	ldr	r2, [pc, #148]	; (8002e7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d02c      	beq.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df2:	d027      	beq.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a22      	ldr	r2, [pc, #136]	; (8002e84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d022      	beq.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a21      	ldr	r2, [pc, #132]	; (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d01d      	beq.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1f      	ldr	r2, [pc, #124]	; (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d018      	beq.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d013      	beq.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1b      	ldr	r2, [pc, #108]	; (8002e90 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00e      	beq.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d009      	beq.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d004      	beq.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d10c      	bne.n	8002e5e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	40010400 	.word	0x40010400
 8002e84:	40000400 	.word	0x40000400
 8002e88:	40000800 	.word	0x40000800
 8002e8c:	40000c00 	.word	0x40000c00
 8002e90:	40001800 	.word	0x40001800
 8002e94:	40014000 	.word	0x40014000
 8002e98:	4000e000 	.word	0x4000e000
 8002e9c:	4000e400 	.word	0x4000e400

08002ea0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e087      	b.n	8002fcc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	041b      	lsls	r3, r3, #16
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a27      	ldr	r2, [pc, #156]	; (8002fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d004      	beq.n	8002f4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a25      	ldr	r2, [pc, #148]	; (8002fdc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d106      	bne.n	8002f58 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1e      	ldr	r2, [pc, #120]	; (8002fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d004      	beq.n	8002f6c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1d      	ldr	r2, [pc, #116]	; (8002fdc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d126      	bne.n	8002fba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	051b      	lsls	r3, r3, #20
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a0d      	ldr	r2, [pc, #52]	; (8002fdc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d106      	bne.n	8002fba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <__libc_init_array>:
 8002fe0:	b570      	push	{r4, r5, r6, lr}
 8002fe2:	4d0d      	ldr	r5, [pc, #52]	; (8003018 <__libc_init_array+0x38>)
 8002fe4:	4c0d      	ldr	r4, [pc, #52]	; (800301c <__libc_init_array+0x3c>)
 8002fe6:	1b64      	subs	r4, r4, r5
 8002fe8:	10a4      	asrs	r4, r4, #2
 8002fea:	2600      	movs	r6, #0
 8002fec:	42a6      	cmp	r6, r4
 8002fee:	d109      	bne.n	8003004 <__libc_init_array+0x24>
 8002ff0:	4d0b      	ldr	r5, [pc, #44]	; (8003020 <__libc_init_array+0x40>)
 8002ff2:	4c0c      	ldr	r4, [pc, #48]	; (8003024 <__libc_init_array+0x44>)
 8002ff4:	f000 f820 	bl	8003038 <_init>
 8002ff8:	1b64      	subs	r4, r4, r5
 8002ffa:	10a4      	asrs	r4, r4, #2
 8002ffc:	2600      	movs	r6, #0
 8002ffe:	42a6      	cmp	r6, r4
 8003000:	d105      	bne.n	800300e <__libc_init_array+0x2e>
 8003002:	bd70      	pop	{r4, r5, r6, pc}
 8003004:	f855 3b04 	ldr.w	r3, [r5], #4
 8003008:	4798      	blx	r3
 800300a:	3601      	adds	r6, #1
 800300c:	e7ee      	b.n	8002fec <__libc_init_array+0xc>
 800300e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003012:	4798      	blx	r3
 8003014:	3601      	adds	r6, #1
 8003016:	e7f2      	b.n	8002ffe <__libc_init_array+0x1e>
 8003018:	08003060 	.word	0x08003060
 800301c:	08003060 	.word	0x08003060
 8003020:	08003060 	.word	0x08003060
 8003024:	08003064 	.word	0x08003064

08003028 <memset>:
 8003028:	4402      	add	r2, r0
 800302a:	4603      	mov	r3, r0
 800302c:	4293      	cmp	r3, r2
 800302e:	d100      	bne.n	8003032 <memset+0xa>
 8003030:	4770      	bx	lr
 8003032:	f803 1b01 	strb.w	r1, [r3], #1
 8003036:	e7f9      	b.n	800302c <memset+0x4>

08003038 <_init>:
 8003038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303a:	bf00      	nop
 800303c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303e:	bc08      	pop	{r3}
 8003040:	469e      	mov	lr, r3
 8003042:	4770      	bx	lr

08003044 <_fini>:
 8003044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003046:	bf00      	nop
 8003048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304a:	bc08      	pop	{r3}
 800304c:	469e      	mov	lr, r3
 800304e:	4770      	bx	lr
