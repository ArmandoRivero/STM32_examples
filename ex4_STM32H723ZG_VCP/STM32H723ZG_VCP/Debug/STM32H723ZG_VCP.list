
STM32H723ZG_VCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ba0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08009e70  08009e70  00019e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a030  0800a030  0001a030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a034  0800a034  0001a034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000018c  24000000  0800a038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003094  2400018c  0800a1c4  0002018c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24003220  0800a1c4  00023220  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013bff  00000000  00000000  000201ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003204  00000000  00000000  00033db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000f40  00000000  00000000  00036fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000dc8  00000000  00000000  00037f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000347e8  00000000  00000000  00038cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00014165  00000000  00000000  0006d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013d588  00000000  00000000  00081615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001beb9d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004874  00000000  00000000  001bebf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400018c 	.word	0x2400018c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009e58 	.word	0x08009e58

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000190 	.word	0x24000190
 800030c:	08009e58 	.word	0x08009e58

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  const char *tokenSeparator = ".\n\r";
 80003d6:	4b56      	ldr	r3, [pc, #344]	; (8000530 <main+0x160>)
 80003d8:	60bb      	str	r3, [r7, #8]
  char* token;
  int toggleVar = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003de:	f000 fb5b 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e2:	f000 f8c1 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e6:	f000 f931 	bl	800064c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80003ea:	f007 fdab 	bl	8007f44 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  unsigned int cnt = 100;
 80003ee:	2364      	movs	r3, #100	; 0x64
 80003f0:	613b      	str	r3, [r7, #16]

  // Filling a vector with dummy consecutive data
  for(int i=0; i<VCP_BUFF_SIZE_2;i++)
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	e016      	b.n	8000426 <main+0x56>
  {
    msgVCP_2[i] = 0x30 + (i % 10);
 80003f8:	68fa      	ldr	r2, [r7, #12]
 80003fa:	4b4e      	ldr	r3, [pc, #312]	; (8000534 <main+0x164>)
 80003fc:	fb83 1302 	smull	r1, r3, r3, r2
 8000400:	1099      	asrs	r1, r3, #2
 8000402:	17d3      	asrs	r3, r2, #31
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	460b      	mov	r3, r1
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	440b      	add	r3, r1
 800040c:	005b      	lsls	r3, r3, #1
 800040e:	1ad1      	subs	r1, r2, r3
 8000410:	b2cb      	uxtb	r3, r1
 8000412:	3330      	adds	r3, #48	; 0x30
 8000414:	b2d9      	uxtb	r1, r3
 8000416:	4a48      	ldr	r2, [pc, #288]	; (8000538 <main+0x168>)
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	4413      	add	r3, r2
 800041c:	460a      	mov	r2, r1
 800041e:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<VCP_BUFF_SIZE_2;i++)
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	3301      	adds	r3, #1
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	f241 3287 	movw	r2, #4999	; 0x1387
 800042c:	4293      	cmp	r3, r2
 800042e:	dde3      	ble.n	80003f8 <main+0x28>
  }

  while (1)
  {
    // tokenize command recevied in CDC_Receive_FS(...) (file: usbd_cdc_ig.c)
    token = strtok((char*)bufferVCP_Rx,tokenSeparator);
 8000430:	68b9      	ldr	r1, [r7, #8]
 8000432:	4842      	ldr	r0, [pc, #264]	; (800053c <main+0x16c>)
 8000434:	f008 fb0c 	bl	8008a50 <strtok>
 8000438:	6078      	str	r0, [r7, #4]
    if (token != NULL)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0f7      	beq.n	8000430 <main+0x60>
    {
      if(strcmp(token,strCMD_1) == 0)
 8000440:	493f      	ldr	r1, [pc, #252]	; (8000540 <main+0x170>)
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f7ff ff64 	bl	8000310 <strcmp>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d130      	bne.n	80004b0 <main+0xe0>
      {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800044e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000452:	483c      	ldr	r0, [pc, #240]	; (8000544 <main+0x174>)
 8000454:	f000 fea7 	bl	80011a6 <HAL_GPIO_TogglePin>
        memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000458:	2240      	movs	r2, #64	; 0x40
 800045a:	2100      	movs	r1, #0
 800045c:	4837      	ldr	r0, [pc, #220]	; (800053c <main+0x16c>)
 800045e:	f008 facf 	bl	8008a00 <memset>
        toggleVar = !toggleVar;
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	2b00      	cmp	r3, #0
 8000466:	bf0c      	ite	eq
 8000468:	2301      	moveq	r3, #1
 800046a:	2300      	movne	r3, #0
 800046c:	b2db      	uxtb	r3, r3
 800046e:	617b      	str	r3, [r7, #20]
        if(toggleVar)
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d00e      	beq.n	8000494 <main+0xc4>
        {
          msgVCP_len = sprintf(msgVCP, "LED ON\n");
 8000476:	4934      	ldr	r1, [pc, #208]	; (8000548 <main+0x178>)
 8000478:	4834      	ldr	r0, [pc, #208]	; (800054c <main+0x17c>)
 800047a:	f008 fac9 	bl	8008a10 <siprintf>
 800047e:	4603      	mov	r3, r0
 8000480:	4a33      	ldr	r2, [pc, #204]	; (8000550 <main+0x180>)
 8000482:	6013      	str	r3, [r2, #0]
          CDC_Transmit_HS((uint8_t *)msgVCP, msgVCP_len);
 8000484:	4b32      	ldr	r3, [pc, #200]	; (8000550 <main+0x180>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	b29b      	uxth	r3, r3
 800048a:	4619      	mov	r1, r3
 800048c:	482f      	ldr	r0, [pc, #188]	; (800054c <main+0x17c>)
 800048e:	f007 fe2f 	bl	80080f0 <CDC_Transmit_HS>
 8000492:	e00d      	b.n	80004b0 <main+0xe0>
        }
        else
        {
          msgVCP_len = sprintf(msgVCP, "LED OFF\n");
 8000494:	492f      	ldr	r1, [pc, #188]	; (8000554 <main+0x184>)
 8000496:	482d      	ldr	r0, [pc, #180]	; (800054c <main+0x17c>)
 8000498:	f008 faba 	bl	8008a10 <siprintf>
 800049c:	4603      	mov	r3, r0
 800049e:	4a2c      	ldr	r2, [pc, #176]	; (8000550 <main+0x180>)
 80004a0:	6013      	str	r3, [r2, #0]
          CDC_Transmit_HS((uint8_t *)msgVCP, msgVCP_len);
 80004a2:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <main+0x180>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	4619      	mov	r1, r3
 80004aa:	4828      	ldr	r0, [pc, #160]	; (800054c <main+0x17c>)
 80004ac:	f007 fe20 	bl	80080f0 <CDC_Transmit_HS>
        }
      }
      if(strcmp(token,strCMD_2) == 0)
 80004b0:	4929      	ldr	r1, [pc, #164]	; (8000558 <main+0x188>)
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f7ff ff2c 	bl	8000310 <strcmp>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d1b8      	bne.n	8000430 <main+0x60>
      {
        CDC_Transmit_HS(msgStr,sizeof(msgStr)-1);
 80004be:	210d      	movs	r1, #13
 80004c0:	4826      	ldr	r0, [pc, #152]	; (800055c <main+0x18c>)
 80004c2:	f007 fe15 	bl	80080f0 <CDC_Transmit_HS>

        while(cnt != 0)
 80004c6:	e01c      	b.n	8000502 <main+0x132>
        {
          HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
 80004c8:	2101      	movs	r1, #1
 80004ca:	481e      	ldr	r0, [pc, #120]	; (8000544 <main+0x174>)
 80004cc:	f000 fe6b 	bl	80011a6 <HAL_GPIO_TogglePin>
          HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_1);
 80004d0:	2102      	movs	r1, #2
 80004d2:	4823      	ldr	r0, [pc, #140]	; (8000560 <main+0x190>)
 80004d4:	f000 fe67 	bl	80011a6 <HAL_GPIO_TogglePin>

          msgVCP_len = sprintf(msgVCP, "cnt:%u ", cnt);
 80004d8:	693a      	ldr	r2, [r7, #16]
 80004da:	4922      	ldr	r1, [pc, #136]	; (8000564 <main+0x194>)
 80004dc:	481b      	ldr	r0, [pc, #108]	; (800054c <main+0x17c>)
 80004de:	f008 fa97 	bl	8008a10 <siprintf>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4a1a      	ldr	r2, [pc, #104]	; (8000550 <main+0x180>)
 80004e6:	6013      	str	r3, [r2, #0]
          CDC_Transmit_HS((uint8_t *)msgVCP, msgVCP_len);
 80004e8:	4b19      	ldr	r3, [pc, #100]	; (8000550 <main+0x180>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	4619      	mov	r1, r3
 80004f0:	4816      	ldr	r0, [pc, #88]	; (800054c <main+0x17c>)
 80004f2:	f007 fdfd 	bl	80080f0 <CDC_Transmit_HS>

          HAL_Delay(1);
 80004f6:	2001      	movs	r0, #1
 80004f8:	f000 fb60 	bl	8000bbc <HAL_Delay>

          cnt --;
 80004fc:	693b      	ldr	r3, [r7, #16]
 80004fe:	3b01      	subs	r3, #1
 8000500:	613b      	str	r3, [r7, #16]
        while(cnt != 0)
 8000502:	693b      	ldr	r3, [r7, #16]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d1df      	bne.n	80004c8 <main+0xf8>
        }
        HAL_Delay(500);
 8000508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050c:	f000 fb56 	bl	8000bbc <HAL_Delay>
        cnt=100;
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	613b      	str	r3, [r7, #16]

        // OPTIONAL: send 5000 characters
        CDC_Transmit_HS((uint8_t *)msgVCP_2,sizeof(msgVCP_2));
 8000514:	f241 3188 	movw	r1, #5000	; 0x1388
 8000518:	4807      	ldr	r0, [pc, #28]	; (8000538 <main+0x168>)
 800051a:	f007 fde9 	bl	80080f0 <CDC_Transmit_HS>
        HAL_Delay(100);
 800051e:	2064      	movs	r0, #100	; 0x64
 8000520:	f000 fb4c 	bl	8000bbc <HAL_Delay>

        memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000524:	2240      	movs	r2, #64	; 0x40
 8000526:	2100      	movs	r1, #0
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <main+0x16c>)
 800052a:	f008 fa69 	bl	8008a00 <memset>
    token = strtok((char*)bufferVCP_Rx,tokenSeparator);
 800052e:	e77f      	b.n	8000430 <main+0x60>
 8000530:	08009e70 	.word	0x08009e70
 8000534:	66666667 	.word	0x66666667
 8000538:	24000210 	.word	0x24000210
 800053c:	24001598 	.word	0x24001598
 8000540:	24000010 	.word	0x24000010
 8000544:	58020400 	.word	0x58020400
 8000548:	08009e74 	.word	0x08009e74
 800054c:	240001ac 	.word	0x240001ac
 8000550:	240001a8 	.word	0x240001a8
 8000554:	08009e7c 	.word	0x08009e7c
 8000558:	2400001c 	.word	0x2400001c
 800055c:	24000000 	.word	0x24000000
 8000560:	58021000 	.word	0x58021000
 8000564:	08009e88 	.word	0x08009e88

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b09c      	sub	sp, #112	; 0x70
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000572:	224c      	movs	r2, #76	; 0x4c
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f008 fa42 	bl	8008a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2220      	movs	r2, #32
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f008 fa3c 	bl	8008a00 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000588:	2002      	movs	r0, #2
 800058a:	f002 f8fb 	bl	8002784 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <SystemClock_Config+0xe0>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	4a2c      	ldr	r2, [pc, #176]	; (8000648 <SystemClock_Config+0xe0>)
 8000598:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800059c:	6193      	str	r3, [r2, #24]
 800059e:	4b2a      	ldr	r3, [pc, #168]	; (8000648 <SystemClock_Config+0xe0>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005aa:	bf00      	nop
 80005ac:	4b26      	ldr	r3, [pc, #152]	; (8000648 <SystemClock_Config+0xe0>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005b8:	d1f8      	bne.n	80005ac <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80005ba:	2322      	movs	r3, #34	; 0x22
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005be:	2301      	movs	r3, #1
 80005c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2340      	movs	r3, #64	; 0x40
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005c6:	2301      	movs	r3, #1
 80005c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ce:	2300      	movs	r3, #0
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d2:	2304      	movs	r3, #4
 80005d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 80005d6:	2322      	movs	r3, #34	; 0x22
 80005d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005de:	2304      	movs	r3, #4
 80005e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80005e6:	230c      	movs	r3, #12
 80005e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80005ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 f90d 	bl	8002818 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000604:	f000 f88c 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	233f      	movs	r3, #63	; 0x3f
 800060a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2303      	movs	r3, #3
 800060e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000614:	2308      	movs	r3, #8
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000618:	2340      	movs	r3, #64	; 0x40
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800061c:	2340      	movs	r3, #64	; 0x40
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000624:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000626:	2340      	movs	r3, #64	; 0x40
 8000628:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2103      	movs	r1, #3
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fca0 	bl	8002f74 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800063a:	f000 f871 	bl	8000720 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3770      	adds	r7, #112	; 0x70
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	58024800 	.word	0x58024800

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <MX_GPIO_Init+0xc8>)
 8000664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000668:	4a2a      	ldr	r2, [pc, #168]	; (8000714 <MX_GPIO_Init+0xc8>)
 800066a:	f043 0302 	orr.w	r3, r3, #2
 800066e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000672:	4b28      	ldr	r3, [pc, #160]	; (8000714 <MX_GPIO_Init+0xc8>)
 8000674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000678:	f003 0302 	and.w	r3, r3, #2
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <MX_GPIO_Init+0xc8>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000686:	4a23      	ldr	r2, [pc, #140]	; (8000714 <MX_GPIO_Init+0xc8>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <MX_GPIO_Init+0xc8>)
 8000692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_GPIO_Init+0xc8>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a4:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <MX_GPIO_Init+0xc8>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_GPIO_Init+0xc8>)
 80006b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b4:	f003 0310 	and.w	r3, r3, #16
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f244 0101 	movw	r1, #16385	; 0x4001
 80006c2:	4815      	ldr	r0, [pc, #84]	; (8000718 <MX_GPIO_Init+0xcc>)
 80006c4:	f000 fd56 	bl	8001174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2102      	movs	r1, #2
 80006cc:	4813      	ldr	r0, [pc, #76]	; (800071c <MX_GPIO_Init+0xd0>)
 80006ce:	f000 fd51 	bl	8001174 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 80006d2:	f244 0301 	movw	r3, #16385	; 0x4001
 80006d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	4619      	mov	r1, r3
 80006ea:	480b      	ldr	r0, [pc, #44]	; (8000718 <MX_GPIO_Init+0xcc>)
 80006ec:	f000 fb9a 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006f0:	2302      	movs	r3, #2
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	4619      	mov	r1, r3
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_GPIO_Init+0xd0>)
 8000708:	f000 fb8c 	bl	8000e24 <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	58024400 	.word	0x58024400
 8000718:	58020400 	.word	0x58020400
 800071c:	58021000 	.word	0x58021000

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	e7fe      	b.n	8000728 <Error_Handler+0x8>
	...

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <HAL_MspInit+0x30>)
 8000734:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000738:	4a08      	ldr	r2, [pc, #32]	; (800075c <HAL_MspInit+0x30>)
 800073a:	f043 0302 	orr.w	r3, r3, #2
 800073e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_MspInit+0x30>)
 8000744:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000748:	f003 0302 	and.w	r3, r3, #2
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	58024400 	.word	0x58024400

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ac:	f000 f9e6 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80007b8:	4802      	ldr	r0, [pc, #8]	; (80007c4 <OTG_HS_IRQHandler+0x10>)
 80007ba:	f000 fe65 	bl	8001488 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	24002ae4 	.word	0x24002ae4

080007c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
	return 1;
 80007cc:	2301      	movs	r3, #1
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <_kill>:

int _kill(int pid, int sig)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80007e2:	f008 f8d5 	bl	8008990 <__errno>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2216      	movs	r2, #22
 80007ea:	601a      	str	r2, [r3, #0]
	return -1;
 80007ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <_exit>:

void _exit (int status)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000800:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ffe7 	bl	80007d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800080a:	e7fe      	b.n	800080a <_exit+0x12>

0800080c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	e00a      	b.n	8000834 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800081e:	f3af 8000 	nop.w
 8000822:	4601      	mov	r1, r0
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	60ba      	str	r2, [r7, #8]
 800082a:	b2ca      	uxtb	r2, r1
 800082c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	3301      	adds	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	429a      	cmp	r2, r3
 800083a:	dbf0      	blt.n	800081e <_read+0x12>
	}

return len;
 800083c:	687b      	ldr	r3, [r7, #4]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af00      	add	r7, sp, #0
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	e009      	b.n	800086c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	60ba      	str	r2, [r7, #8]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	3301      	adds	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	dbf1      	blt.n	8000858 <_write+0x12>
	}
	return len;
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_close>:

int _close(int file)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
	return -1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
 800089e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a6:	605a      	str	r2, [r3, #4]
	return 0;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <_isatty>:

int _isatty(int file)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
	return 1;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
	return 0;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f0:	4a14      	ldr	r2, [pc, #80]	; (8000944 <_sbrk+0x5c>)
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <_sbrk+0x60>)
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d102      	bne.n	800090a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <_sbrk+0x64>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <_sbrk+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	429a      	cmp	r2, r3
 8000916:	d207      	bcs.n	8000928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000918:	f008 f83a 	bl	8008990 <__errno>
 800091c:	4603      	mov	r3, r0
 800091e:	220c      	movs	r2, #12
 8000920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000926:	e009      	b.n	800093c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <_sbrk+0x64>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	4a05      	ldr	r2, [pc, #20]	; (800094c <_sbrk+0x64>)
 8000938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	24050000 	.word	0x24050000
 8000948:	00000400 	.word	0x00000400
 800094c:	240015fc 	.word	0x240015fc
 8000950:	24003220 	.word	0x24003220

08000954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000958:	4b32      	ldr	r3, [pc, #200]	; (8000a24 <SystemInit+0xd0>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095e:	4a31      	ldr	r2, [pc, #196]	; (8000a24 <SystemInit+0xd0>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000968:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <SystemInit+0xd4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f003 030f 	and.w	r3, r3, #15
 8000970:	2b06      	cmp	r3, #6
 8000972:	d807      	bhi.n	8000984 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000974:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <SystemInit+0xd4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f023 030f 	bic.w	r3, r3, #15
 800097c:	4a2a      	ldr	r2, [pc, #168]	; (8000a28 <SystemInit+0xd4>)
 800097e:	f043 0307 	orr.w	r3, r3, #7
 8000982:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <SystemInit+0xd8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a28      	ldr	r2, [pc, #160]	; (8000a2c <SystemInit+0xd8>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <SystemInit+0xd8>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000996:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <SystemInit+0xd8>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4924      	ldr	r1, [pc, #144]	; (8000a2c <SystemInit+0xd8>)
 800099c:	4b24      	ldr	r3, [pc, #144]	; (8000a30 <SystemInit+0xdc>)
 800099e:	4013      	ands	r3, r2
 80009a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <SystemInit+0xd4>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ae:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <SystemInit+0xd4>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f023 030f 	bic.w	r3, r3, #15
 80009b6:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <SystemInit+0xd4>)
 80009b8:	f043 0307 	orr.w	r3, r3, #7
 80009bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <SystemInit+0xd8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <SystemInit+0xd8>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <SystemInit+0xd8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <SystemInit+0xd8>)
 80009d2:	4a18      	ldr	r2, [pc, #96]	; (8000a34 <SystemInit+0xe0>)
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <SystemInit+0xd8>)
 80009d8:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <SystemInit+0xe4>)
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <SystemInit+0xd8>)
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <SystemInit+0xe8>)
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <SystemInit+0xd8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <SystemInit+0xd8>)
 80009ea:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <SystemInit+0xe8>)
 80009ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <SystemInit+0xd8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <SystemInit+0xd8>)
 80009f6:	4a11      	ldr	r2, [pc, #68]	; (8000a3c <SystemInit+0xe8>)
 80009f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <SystemInit+0xd8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <SystemInit+0xd8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <SystemInit+0xd8>)
 8000a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <SystemInit+0xd8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <SystemInit+0xec>)
 8000a14:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00
 8000a28:	52002000 	.word	0x52002000
 8000a2c:	58024400 	.word	0x58024400
 8000a30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a34:	02020200 	.word	0x02020200
 8000a38:	01ff0000 	.word	0x01ff0000
 8000a3c:	01010280 	.word	0x01010280
 8000a40:	52004000 	.word	0x52004000

08000a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a48:	f7ff ff84 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a4e:	490d      	ldr	r1, [pc, #52]	; (8000a84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a50:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a64:	4c0a      	ldr	r4, [pc, #40]	; (8000a90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a72:	f007 ff93 	bl	800899c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a76:	f7ff fcab 	bl	80003d0 <main>
  bx  lr
 8000a7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a7c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000a80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a84:	2400018c 	.word	0x2400018c
  ldr r2, =_sidata
 8000a88:	0800a038 	.word	0x0800a038
  ldr r2, =_sbss
 8000a8c:	2400018c 	.word	0x2400018c
  ldr r4, =_ebss
 8000a90:	24003220 	.word	0x24003220

08000a94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC3_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9e:	2003      	movs	r0, #3
 8000aa0:	f000 f980 	bl	8000da4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000aa4:	f002 fc1c 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_Init+0x68>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	0a1b      	lsrs	r3, r3, #8
 8000ab0:	f003 030f 	and.w	r3, r3, #15
 8000ab4:	4913      	ldr	r1, [pc, #76]	; (8000b04 <HAL_Init+0x6c>)
 8000ab6:	5ccb      	ldrb	r3, [r1, r3]
 8000ab8:	f003 031f 	and.w	r3, r3, #31
 8000abc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ac0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_Init+0x68>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <HAL_Init+0x6c>)
 8000acc:	5cd3      	ldrb	r3, [r2, r3]
 8000ace:	f003 031f 	and.w	r3, r3, #31
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad8:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <HAL_Init+0x70>)
 8000ada:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000adc:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <HAL_Init+0x74>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae2:	200f      	movs	r0, #15
 8000ae4:	f000 f814 	bl	8000b10 <HAL_InitTick>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e002      	b.n	8000af8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000af2:	f7ff fe1b 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	58024400 	.word	0x58024400
 8000b04:	08009ed8 	.word	0x08009ed8
 8000b08:	2400002c 	.word	0x2400002c
 8000b0c:	24000028 	.word	0x24000028

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_InitTick+0x60>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	e021      	b.n	8000b68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <HAL_InitTick+0x64>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <HAL_InitTick+0x60>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f965 	bl	8000e0a <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00e      	b.n	8000b68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d80a      	bhi.n	8000b66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b58:	f000 f92f 	bl	8000dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <HAL_InitTick+0x68>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	24000034 	.word	0x24000034
 8000b74:	24000028 	.word	0x24000028
 8000b78:	24000030 	.word	0x24000030

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x20>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	24000034 	.word	0x24000034
 8000ba0:	24001600 	.word	0x24001600

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <HAL_GetTick+0x14>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	24001600 	.word	0x24001600

08000bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc4:	f7ff ffee 	bl	8000ba4 <HAL_GetTick>
 8000bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bd4:	d005      	beq.n	8000be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_Delay+0x44>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000be2:	bf00      	nop
 8000be4:	f7ff ffde 	bl	8000ba4 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d8f7      	bhi.n	8000be4 <HAL_Delay+0x28>
  {
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	24000034 	.word	0x24000034

08000c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <__NVIC_SetPriorityGrouping+0x40>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c32:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <__NVIC_SetPriorityGrouping+0x40>)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	60d3      	str	r3, [r2, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00
 8000c48:	05fa0000 	.word	0x05fa0000

08000c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <__NVIC_GetPriorityGrouping+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f003 0307 	and.w	r3, r3, #7
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db0b      	blt.n	8000c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	f003 021f 	and.w	r2, r3, #31
 8000c80:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <__NVIC_EnableIRQ+0x38>)
 8000c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	2001      	movs	r0, #1
 8000c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000e100 	.word	0xe000e100

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db0a      	blt.n	8000cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <__NVIC_SetPriority+0x4c>)
 8000cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ccc:	e00a      	b.n	8000ce4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <__NVIC_SetPriority+0x50>)
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	0112      	lsls	r2, r2, #4
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	761a      	strb	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f1c3 0307 	rsb	r3, r3, #7
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	bf28      	it	cs
 8000d16:	2304      	movcs	r3, #4
 8000d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d902      	bls.n	8000d28 <NVIC_EncodePriority+0x30>
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3b03      	subs	r3, #3
 8000d26:	e000      	b.n	8000d2a <NVIC_EncodePriority+0x32>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43da      	mvns	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43d9      	mvns	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	4313      	orrs	r3, r2
         );
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3724      	adds	r7, #36	; 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d70:	d301      	bcc.n	8000d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00f      	b.n	8000d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <SysTick_Config+0x40>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7e:	210f      	movs	r1, #15
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d84:	f7ff ff8e 	bl	8000ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <SysTick_Config+0x40>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8e:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <SysTick_Config+0x40>)
 8000d90:	2207      	movs	r2, #7
 8000d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	e000e010 	.word	0xe000e010

08000da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ff29 	bl	8000c04 <__NVIC_SetPriorityGrouping>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc8:	f7ff ff40 	bl	8000c4c <__NVIC_GetPriorityGrouping>
 8000dcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ff90 	bl	8000cf8 <NVIC_EncodePriority>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff5f 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff33 	bl	8000c68 <__NVIC_EnableIRQ>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffa4 	bl	8000d60 <SysTick_Config>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000e32:	4b86      	ldr	r3, [pc, #536]	; (800104c <HAL_GPIO_Init+0x228>)
 8000e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e36:	e18c      	b.n	8001152 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 817e 	beq.w	800114c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d005      	beq.n	8000e68 <HAL_GPIO_Init+0x44>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d130      	bne.n	8000eca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	f003 0201 	and.w	r2, r3, #1
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d017      	beq.n	8000f06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d123      	bne.n	8000f5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	08da      	lsrs	r2, r3, #3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3208      	adds	r2, #8
 8000f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	220f      	movs	r2, #15
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	08da      	lsrs	r2, r3, #3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3208      	adds	r2, #8
 8000f54:	69b9      	ldr	r1, [r7, #24]
 8000f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	2203      	movs	r2, #3
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0203 	and.w	r2, r3, #3
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 80d8 	beq.w	800114c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <HAL_GPIO_Init+0x22c>)
 8000f9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fa2:	4a2b      	ldr	r2, [pc, #172]	; (8001050 <HAL_GPIO_Init+0x22c>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fac:	4b28      	ldr	r3, [pc, #160]	; (8001050 <HAL_GPIO_Init+0x22c>)
 8000fae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fba:	4a26      	ldr	r2, [pc, #152]	; (8001054 <HAL_GPIO_Init+0x230>)
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <HAL_GPIO_Init+0x234>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d04a      	beq.n	800107c <HAL_GPIO_Init+0x258>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a1c      	ldr	r2, [pc, #112]	; (800105c <HAL_GPIO_Init+0x238>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d02b      	beq.n	8001046 <HAL_GPIO_Init+0x222>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <HAL_GPIO_Init+0x23c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d025      	beq.n	8001042 <HAL_GPIO_Init+0x21e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <HAL_GPIO_Init+0x240>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d01f      	beq.n	800103e <HAL_GPIO_Init+0x21a>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a19      	ldr	r2, [pc, #100]	; (8001068 <HAL_GPIO_Init+0x244>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d019      	beq.n	800103a <HAL_GPIO_Init+0x216>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a18      	ldr	r2, [pc, #96]	; (800106c <HAL_GPIO_Init+0x248>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x212>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_GPIO_Init+0x24c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x20e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a16      	ldr	r2, [pc, #88]	; (8001074 <HAL_GPIO_Init+0x250>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x20a>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a15      	ldr	r2, [pc, #84]	; (8001078 <HAL_GPIO_Init+0x254>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x206>
 8001026:	2309      	movs	r3, #9
 8001028:	e029      	b.n	800107e <HAL_GPIO_Init+0x25a>
 800102a:	230a      	movs	r3, #10
 800102c:	e027      	b.n	800107e <HAL_GPIO_Init+0x25a>
 800102e:	2307      	movs	r3, #7
 8001030:	e025      	b.n	800107e <HAL_GPIO_Init+0x25a>
 8001032:	2306      	movs	r3, #6
 8001034:	e023      	b.n	800107e <HAL_GPIO_Init+0x25a>
 8001036:	2305      	movs	r3, #5
 8001038:	e021      	b.n	800107e <HAL_GPIO_Init+0x25a>
 800103a:	2304      	movs	r3, #4
 800103c:	e01f      	b.n	800107e <HAL_GPIO_Init+0x25a>
 800103e:	2303      	movs	r3, #3
 8001040:	e01d      	b.n	800107e <HAL_GPIO_Init+0x25a>
 8001042:	2302      	movs	r3, #2
 8001044:	e01b      	b.n	800107e <HAL_GPIO_Init+0x25a>
 8001046:	2301      	movs	r3, #1
 8001048:	e019      	b.n	800107e <HAL_GPIO_Init+0x25a>
 800104a:	bf00      	nop
 800104c:	58000080 	.word	0x58000080
 8001050:	58024400 	.word	0x58024400
 8001054:	58000400 	.word	0x58000400
 8001058:	58020000 	.word	0x58020000
 800105c:	58020400 	.word	0x58020400
 8001060:	58020800 	.word	0x58020800
 8001064:	58020c00 	.word	0x58020c00
 8001068:	58021000 	.word	0x58021000
 800106c:	58021400 	.word	0x58021400
 8001070:	58021800 	.word	0x58021800
 8001074:	58021c00 	.word	0x58021c00
 8001078:	58022400 	.word	0x58022400
 800107c:	2300      	movs	r3, #0
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	f002 0203 	and.w	r2, r2, #3
 8001084:	0092      	lsls	r2, r2, #2
 8001086:	4093      	lsls	r3, r2
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800108e:	4938      	ldr	r1, [pc, #224]	; (8001170 <HAL_GPIO_Init+0x34c>)
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800109c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80010c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80010f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	3301      	adds	r3, #1
 8001150:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa22 f303 	lsr.w	r3, r2, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	f47f ae6b 	bne.w	8000e38 <HAL_GPIO_Init+0x14>
  }
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	3724      	adds	r7, #36	; 0x24
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	58000400 	.word	0x58000400

08001174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	807b      	strh	r3, [r7, #2]
 8001180:	4613      	mov	r3, r2
 8001182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001184:	787b      	ldrb	r3, [r7, #1]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001190:	e003      	b.n	800119a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	041a      	lsls	r2, r3, #16
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	619a      	str	r2, [r3, #24]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b085      	sub	sp, #20
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	460b      	mov	r3, r1
 80011b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b8:	887a      	ldrh	r2, [r7, #2]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4013      	ands	r3, r2
 80011be:	041a      	lsls	r2, r3, #16
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	887b      	ldrh	r3, [r7, #2]
 80011c6:	400b      	ands	r3, r1
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	619a      	str	r2, [r3, #24]
}
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011dc:	b08f      	sub	sp, #60	; 0x3c
 80011de:	af0a      	add	r7, sp, #40	; 0x28
 80011e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e116      	b.n	800141a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d106      	bne.n	800120c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f007 f8ba 	bl	8008380 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2203      	movs	r2, #3
 8001210:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f003 fb81 	bl	8004932 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	687e      	ldr	r6, [r7, #4]
 8001238:	466d      	mov	r5, sp
 800123a:	f106 0410 	add.w	r4, r6, #16
 800123e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001246:	e894 0003 	ldmia.w	r4, {r0, r1}
 800124a:	e885 0003 	stmia.w	r5, {r0, r1}
 800124e:	1d33      	adds	r3, r6, #4
 8001250:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001252:	6838      	ldr	r0, [r7, #0]
 8001254:	f003 fa4c 	bl	80046f0 <USB_CoreInit>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d005      	beq.n	800126a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2202      	movs	r2, #2
 8001262:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e0d7      	b.n	800141a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f003 fb6f 	bl	8004954 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	73fb      	strb	r3, [r7, #15]
 800127a:	e04a      	b.n	8001312 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	333d      	adds	r3, #61	; 0x3d
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4413      	add	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	333c      	adds	r3, #60	; 0x3c
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	b298      	uxth	r0, r3
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	3344      	adds	r3, #68	; 0x44
 80012b8:	4602      	mov	r2, r0
 80012ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	3340      	adds	r3, #64	; 0x40
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	3348      	adds	r3, #72	; 0x48
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012e4:	7bfa      	ldrb	r2, [r7, #15]
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	334c      	adds	r3, #76	; 0x4c
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	3354      	adds	r3, #84	; 0x54
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	3301      	adds	r3, #1
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	7bfa      	ldrb	r2, [r7, #15]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	429a      	cmp	r2, r3
 800131a:	d3af      	bcc.n	800127c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e044      	b.n	80013ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	3301      	adds	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d3b5      	bcc.n	8001322 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	687e      	ldr	r6, [r7, #4]
 80013be:	466d      	mov	r5, sp
 80013c0:	f106 0410 	add.w	r4, r6, #16
 80013c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80013d4:	1d33      	adds	r3, r6, #4
 80013d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d8:	6838      	ldr	r0, [r7, #0]
 80013da:	f003 fb07 	bl	80049ec <USB_DevInit>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2202      	movs	r2, #2
 80013e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e014      	b.n	800141a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	2b01      	cmp	r3, #1
 8001406:	d102      	bne.n	800140e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f001 f98b 	bl	8002724 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f004 fc55 	bl	8005cc2 <USB_DevDisconnect>

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001422 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001436:	2b01      	cmp	r3, #1
 8001438:	d101      	bne.n	800143e <HAL_PCD_Start+0x1c>
 800143a:	2302      	movs	r3, #2
 800143c:	e020      	b.n	8001480 <HAL_PCD_Start+0x5e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	2b01      	cmp	r3, #1
 800144c:	d109      	bne.n	8001462 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001452:	2b01      	cmp	r3, #1
 8001454:	d005      	beq.n	8001462 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fa52 	bl	8004910 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f004 fc05 	bl	8005c80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b08d      	sub	sp, #52	; 0x34
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f004 fcc3 	bl	8005e2a <USB_GetMode>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f040 84b7 	bne.w	8001e1a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f004 fc27 	bl	8005d04 <USB_ReadInterrupts>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 84ad 	beq.w	8001e18 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f004 fc14 	bl	8005d04 <USB_ReadInterrupts>
 80014dc:	4603      	mov	r3, r0
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d107      	bne.n	80014f6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f002 0202 	and.w	r2, r2, #2
 80014f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f004 fc02 	bl	8005d04 <USB_ReadInterrupts>
 8001500:	4603      	mov	r3, r0
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	2b10      	cmp	r3, #16
 8001508:	d161      	bne.n	80015ce <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	699a      	ldr	r2, [r3, #24]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0210 	bic.w	r2, r2, #16
 8001518:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	f003 020f 	and.w	r2, r3, #15
 8001526:	4613      	mov	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	3304      	adds	r3, #4
 8001538:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	0c5b      	lsrs	r3, r3, #17
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	2b02      	cmp	r3, #2
 8001544:	d124      	bne.n	8001590 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800154c:	4013      	ands	r3, r2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d035      	beq.n	80015be <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800155c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001560:	b29b      	uxth	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	6a38      	ldr	r0, [r7, #32]
 8001566:	f004 fa39 	bl	80059dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001576:	441a      	add	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	6a1a      	ldr	r2, [r3, #32]
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	091b      	lsrs	r3, r3, #4
 8001584:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001588:	441a      	add	r2, r3
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	621a      	str	r2, [r3, #32]
 800158e:	e016      	b.n	80015be <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	0c5b      	lsrs	r3, r3, #17
 8001594:	f003 030f 	and.w	r3, r3, #15
 8001598:	2b06      	cmp	r3, #6
 800159a:	d110      	bne.n	80015be <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80015a2:	2208      	movs	r2, #8
 80015a4:	4619      	mov	r1, r3
 80015a6:	6a38      	ldr	r0, [r7, #32]
 80015a8:	f004 fa18 	bl	80059dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	6a1a      	ldr	r2, [r3, #32]
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	091b      	lsrs	r3, r3, #4
 80015b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015b8:	441a      	add	r2, r3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	699a      	ldr	r2, [r3, #24]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f042 0210 	orr.w	r2, r2, #16
 80015cc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f004 fb96 	bl	8005d04 <USB_ReadInterrupts>
 80015d8:	4603      	mov	r3, r0
 80015da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015e2:	f040 80a7 	bne.w	8001734 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f004 fb9b 	bl	8005d2a <USB_ReadDevAllOutEpInterrupt>
 80015f4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80015f6:	e099      	b.n	800172c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 808e 	beq.w	8001720 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	4611      	mov	r1, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f004 fbbf 	bl	8005d92 <USB_ReadDevOutEPInterrupt>
 8001614:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00c      	beq.n	800163a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	015a      	lsls	r2, r3, #5
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	4413      	add	r3, r2
 8001628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800162c:	461a      	mov	r2, r3
 800162e:	2301      	movs	r3, #1
 8001630:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001632:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 feef 	bl	8002418 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00c      	beq.n	800165e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	015a      	lsls	r2, r3, #5
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	4413      	add	r3, r2
 800164c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001650:	461a      	mov	r2, r3
 8001652:	2308      	movs	r3, #8
 8001654:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001656:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 ffc5 	bl	80025e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b00      	cmp	r3, #0
 8001666:	d008      	beq.n	800167a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	015a      	lsls	r2, r3, #5
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	4413      	add	r3, r2
 8001670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001674:	461a      	mov	r2, r3
 8001676:	2310      	movs	r3, #16
 8001678:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d030      	beq.n	80016e6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168c:	2b80      	cmp	r3, #128	; 0x80
 800168e:	d109      	bne.n	80016a4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800169e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016a2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80016a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4413      	add	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	3304      	adds	r3, #4
 80016b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	78db      	ldrb	r3, [r3, #3]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d108      	bne.n	80016d4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2200      	movs	r2, #0
 80016c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	4619      	mov	r1, r3
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f006 ff4a 	bl	8008568 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e0:	461a      	mov	r2, r3
 80016e2:	2302      	movs	r3, #2
 80016e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	f003 0320 	and.w	r3, r3, #32
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	015a      	lsls	r2, r3, #5
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016fc:	461a      	mov	r2, r3
 80016fe:	2320      	movs	r3, #32
 8001700:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d009      	beq.n	8001720 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	015a      	lsls	r2, r3, #5
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	4413      	add	r3, r2
 8001714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001718:	461a      	mov	r2, r3
 800171a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800171e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	3301      	adds	r3, #1
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001728:	085b      	lsrs	r3, r3, #1
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800172c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172e:	2b00      	cmp	r3, #0
 8001730:	f47f af62 	bne.w	80015f8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f004 fae3 	bl	8005d04 <USB_ReadInterrupts>
 800173e:	4603      	mov	r3, r0
 8001740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001744:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001748:	f040 80db 	bne.w	8001902 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f004 fb04 	bl	8005d5e <USB_ReadDevAllInEpInterrupt>
 8001756:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800175c:	e0cd      	b.n	80018fa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800175e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80c2 	beq.w	80018ee <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f004 fb2a 	bl	8005dce <USB_ReadDevInEPInterrupt>
 800177a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d057      	beq.n	8001836 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	2201      	movs	r2, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800179a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	43db      	mvns	r3, r3
 80017a0:	69f9      	ldr	r1, [r7, #28]
 80017a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80017a6:	4013      	ands	r3, r2
 80017a8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017b6:	461a      	mov	r2, r3
 80017b8:	2301      	movs	r3, #1
 80017ba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d132      	bne.n	800182a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c8:	4613      	mov	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4413      	add	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	334c      	adds	r3, #76	; 0x4c
 80017d4:	6819      	ldr	r1, [r3, #0]
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017da:	4613      	mov	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4403      	add	r3, r0
 80017e4:	3348      	adds	r3, #72	; 0x48
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4419      	add	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ee:	4613      	mov	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4403      	add	r3, r0
 80017f8:	334c      	adds	r3, #76	; 0x4c
 80017fa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d113      	bne.n	800182a <HAL_PCD_IRQHandler+0x3a2>
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001806:	4613      	mov	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	3354      	adds	r3, #84	; 0x54
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d108      	bne.n	800182a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001822:	461a      	mov	r2, r3
 8001824:	2101      	movs	r1, #1
 8001826:	f004 fb33 	bl	8005e90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4619      	mov	r1, r3
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f006 fe14 	bl	800845e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	015a      	lsls	r2, r3, #5
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	4413      	add	r3, r2
 8001848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800184c:	461a      	mov	r2, r3
 800184e:	2308      	movs	r3, #8
 8001850:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	015a      	lsls	r2, r3, #5
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	4413      	add	r3, r2
 8001864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001868:	461a      	mov	r2, r3
 800186a:	2310      	movs	r3, #16
 800186c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	015a      	lsls	r2, r3, #5
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	4413      	add	r3, r2
 8001880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001884:	461a      	mov	r2, r3
 8001886:	2340      	movs	r3, #64	; 0x40
 8001888:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d023      	beq.n	80018dc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001896:	6a38      	ldr	r0, [r7, #32]
 8001898:	f003 fa06 	bl	8004ca8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800189c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189e:	4613      	mov	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	3338      	adds	r3, #56	; 0x38
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	3304      	adds	r3, #4
 80018ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	78db      	ldrb	r3, [r3, #3]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d108      	bne.n	80018ca <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2200      	movs	r2, #0
 80018bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4619      	mov	r1, r3
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f006 fe61 	bl	800858c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	015a      	lsls	r2, r3, #5
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018d6:	461a      	mov	r2, r3
 80018d8:	2302      	movs	r3, #2
 80018da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80018e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 fd08 	bl	80022fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	3301      	adds	r3, #1
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f6:	085b      	lsrs	r3, r3, #1
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f47f af2e 	bne.w	800175e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f004 f9fc 	bl	8005d04 <USB_ReadInterrupts>
 800190c:	4603      	mov	r3, r0
 800190e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001916:	d122      	bne.n	800195e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001932:	2b01      	cmp	r3, #1
 8001934:	d108      	bne.n	8001948 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800193e:	2100      	movs	r1, #0
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 ff13 	bl	800276c <HAL_PCDEx_LPM_Callback>
 8001946:	e002      	b.n	800194e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f006 fdff 	bl	800854c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	695a      	ldr	r2, [r3, #20]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800195c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f004 f9ce 	bl	8005d04 <USB_ReadInterrupts>
 8001968:	4603      	mov	r3, r0
 800196a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800196e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001972:	d112      	bne.n	800199a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b01      	cmp	r3, #1
 8001982:	d102      	bne.n	800198a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f006 fdbb 	bl	8008500 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001998:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f004 f9b0 	bl	8005d04 <USB_ReadInterrupts>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80019ae:	d121      	bne.n	80019f4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80019be:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d111      	bne.n	80019ee <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	f003 020f 	and.w	r2, r3, #15
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80019e4:	2101      	movs	r1, #1
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 fec0 	bl	800276c <HAL_PCDEx_LPM_Callback>
 80019ec:	e002      	b.n	80019f4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f006 fd86 	bl	8008500 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f004 f983 	bl	8005d04 <USB_ReadInterrupts>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a08:	f040 80b7 	bne.w	8001b7a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a1a:	f023 0301 	bic.w	r3, r3, #1
 8001a1e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2110      	movs	r1, #16
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 f93e 	bl	8004ca8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a30:	e046      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a34:	015a      	lsls	r2, r3, #5
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a44:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a48:	015a      	lsls	r2, r3, #5
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a56:	0151      	lsls	r1, r2, #5
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	440a      	add	r2, r1
 8001a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a68:	015a      	lsls	r2, r3, #5
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a72:	461a      	mov	r2, r3
 8001a74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a78:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7c:	015a      	lsls	r2, r3, #5
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	4413      	add	r3, r2
 8001a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a8a:	0151      	lsls	r1, r2, #5
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	440a      	add	r2, r1
 8001a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9c:	015a      	lsls	r2, r3, #5
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aaa:	0151      	lsls	r1, r2, #5
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	440a      	add	r2, r1
 8001ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ab4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ab8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abc:	3301      	adds	r3, #1
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d3b3      	bcc.n	8001a32 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ad8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001adc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d016      	beq.n	8001b14 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001af6:	f043 030b 	orr.w	r3, r3, #11
 8001afa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b0c:	f043 030b 	orr.w	r3, r3, #11
 8001b10:	6453      	str	r3, [r2, #68]	; 0x44
 8001b12:	e015      	b.n	8001b40 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b22:	4619      	mov	r1, r3
 8001b24:	f242 032b 	movw	r3, #8235	; 0x202b
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b3a:	f043 030b 	orr.w	r3, r3, #11
 8001b3e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b4e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b52:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b64:	461a      	mov	r2, r3
 8001b66:	f004 f993 	bl	8005e90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695a      	ldr	r2, [r3, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f004 f8c0 	bl	8005d04 <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b8e:	d124      	bne.n	8001bda <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f004 f957 	bl	8005e48 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 f8ff 	bl	8004da2 <USB_GetDevSpeed>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681c      	ldr	r4, [r3, #0]
 8001bb0:	f001 fd10 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 8001bb4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f002 fe04 	bl	80047cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f006 fc72 	bl	80084ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f004 f890 	bl	8005d04 <USB_ReadInterrupts>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d10a      	bne.n	8001c04 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f006 fc4f 	bl	8008492 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	695a      	ldr	r2, [r3, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f002 0208 	and.w	r2, r2, #8
 8001c02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f004 f87b 	bl	8005d04 <USB_ReadInterrupts>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c14:	2b80      	cmp	r3, #128	; 0x80
 8001c16:	d122      	bne.n	8001c5e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c24:	2301      	movs	r3, #1
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
 8001c28:	e014      	b.n	8001c54 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2e:	4613      	mov	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d105      	bne.n	8001c4e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	4619      	mov	r1, r3
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 fb27 	bl	800229c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	3301      	adds	r3, #1
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d3e5      	bcc.n	8001c2a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 f84e 	bl	8005d04 <USB_ReadInterrupts>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c72:	d13b      	bne.n	8001cec <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c74:	2301      	movs	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
 8001c78:	e02b      	b.n	8001cd2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	015a      	lsls	r2, r3, #5
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8e:	4613      	mov	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	3340      	adds	r3, #64	; 0x40
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d115      	bne.n	8001ccc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ca0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da12      	bge.n	8001ccc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	333f      	adds	r3, #63	; 0x3f
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 fae8 	bl	800229c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	3301      	adds	r3, #1
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d3ce      	bcc.n	8001c7a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f004 f807 	bl	8005d04 <USB_ReadInterrupts>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d00:	d155      	bne.n	8001dae <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d02:	2301      	movs	r3, #1
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
 8001d06:	e045      	b.n	8001d94 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	015a      	lsls	r2, r3, #5
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	4413      	add	r3, r2
 8001d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d12e      	bne.n	8001d8e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d30:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da2b      	bge.n	8001d8e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001d42:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d121      	bne.n	8001d8e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4e:	4613      	mov	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10a      	bne.n	8001d8e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	69fa      	ldr	r2, [r7, #28]
 8001d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8a:	6053      	str	r3, [r2, #4]
            break;
 8001d8c:	e007      	b.n	8001d9e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	3301      	adds	r3, #1
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d3b4      	bcc.n	8001d08 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001dac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 ffa6 	bl	8005d04 <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc2:	d10a      	bne.n	8001dda <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f006 fbf3 	bl	80085b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f003 ff90 	bl	8005d04 <USB_ReadInterrupts>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d115      	bne.n	8001e1a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f006 fbe3 	bl	80085cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	e000      	b.n	8001e1a <HAL_PCD_IRQHandler+0x992>
      return;
 8001e18:	bf00      	nop
    }
  }
}
 8001e1a:	3734      	adds	r7, #52	; 0x34
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd90      	pop	{r4, r7, pc}

08001e20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_PCD_SetAddress+0x1a>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e013      	b.n	8001e62 <HAL_PCD_SetAddress+0x42>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	78fa      	ldrb	r2, [r7, #3]
 8001e50:	4611      	mov	r1, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f003 feee 	bl	8005c34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	4608      	mov	r0, r1
 8001e74:	4611      	mov	r1, r2
 8001e76:	461a      	mov	r2, r3
 8001e78:	4603      	mov	r3, r0
 8001e7a:	70fb      	strb	r3, [r7, #3]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	803b      	strh	r3, [r7, #0]
 8001e80:	4613      	mov	r3, r2
 8001e82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	da0f      	bge.n	8001eb0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	f003 020f 	and.w	r2, r3, #15
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	3338      	adds	r3, #56	; 0x38
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	705a      	strb	r2, [r3, #1]
 8001eae:	e00f      	b.n	8001ed0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	f003 020f 	and.w	r2, r3, #15
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001edc:	883a      	ldrh	r2, [r7, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	78ba      	ldrb	r2, [r7, #2]
 8001ee6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	785b      	ldrb	r3, [r3, #1]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d004      	beq.n	8001efa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001efa:	78bb      	ldrb	r3, [r7, #2]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d102      	bne.n	8001f06 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_PCD_EP_Open+0xaa>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e00e      	b.n	8001f32 <HAL_PCD_EP_Open+0xc8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68f9      	ldr	r1, [r7, #12]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f002 ff62 	bl	8004dec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001f30:	7afb      	ldrb	r3, [r7, #11]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	da0f      	bge.n	8001f6e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	f003 020f 	and.w	r2, r3, #15
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	3338      	adds	r3, #56	; 0x38
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	3304      	adds	r3, #4
 8001f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	705a      	strb	r2, [r3, #1]
 8001f6c:	e00f      	b.n	8001f8e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	f003 020f 	and.w	r2, r3, #15
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	3304      	adds	r3, #4
 8001f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_PCD_EP_Close+0x6e>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e00e      	b.n	8001fc6 <HAL_PCD_EP_Close+0x8c>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68f9      	ldr	r1, [r7, #12]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f002 ffa0 	bl	8004efc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fde:	7afb      	ldrb	r3, [r7, #11]
 8001fe0:	f003 020f 	and.w	r2, r3, #15
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2200      	movs	r2, #0
 8002008:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2200      	movs	r2, #0
 800200e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	b2da      	uxtb	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d102      	bne.n	800202a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800202a:	7afb      	ldrb	r3, [r7, #11]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	2b00      	cmp	r3, #0
 8002032:	d109      	bne.n	8002048 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	6979      	ldr	r1, [r7, #20]
 8002042:	f003 fa87 	bl	8005554 <USB_EP0StartXfer>
 8002046:	e008      	b.n	800205a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	6979      	ldr	r1, [r7, #20]
 8002056:	f003 f82d 	bl	80050b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	f003 020f 	and.w	r2, r3, #15
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	460b      	mov	r3, r1
 80020a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020a4:	7afb      	ldrb	r3, [r7, #11]
 80020a6:	f003 020f 	and.w	r2, r3, #15
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	3338      	adds	r3, #56	; 0x38
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	3304      	adds	r3, #4
 80020ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2200      	movs	r2, #0
 80020cc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2201      	movs	r2, #1
 80020d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020d4:	7afb      	ldrb	r3, [r7, #11]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d102      	bne.n	80020ee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ee:	7afb      	ldrb	r3, [r7, #11]
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d109      	bne.n	800210c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	461a      	mov	r2, r3
 8002104:	6979      	ldr	r1, [r7, #20]
 8002106:	f003 fa25 	bl	8005554 <USB_EP0StartXfer>
 800210a:	e008      	b.n	800211e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	6979      	ldr	r1, [r7, #20]
 800211a:	f002 ffcb 	bl	80050b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	f003 020f 	and.w	r2, r3, #15
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	d901      	bls.n	8002146 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e050      	b.n	80021e8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002146:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800214a:	2b00      	cmp	r3, #0
 800214c:	da0f      	bge.n	800216e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	f003 020f 	and.w	r2, r3, #15
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	3338      	adds	r3, #56	; 0x38
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	3304      	adds	r3, #4
 8002164:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2201      	movs	r2, #1
 800216a:	705a      	strb	r2, [r3, #1]
 800216c:	e00d      	b.n	800218a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800216e:	78fa      	ldrb	r2, [r7, #3]
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	3304      	adds	r3, #4
 8002182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2201      	movs	r2, #1
 800218e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	b2da      	uxtb	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_PCD_EP_SetStall+0x82>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e01e      	b.n	80021e8 <HAL_PCD_EP_SetStall+0xc0>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68f9      	ldr	r1, [r7, #12]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f003 fc67 	bl	8005a8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10a      	bne.n	80021de <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	b2d9      	uxtb	r1, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021d8:	461a      	mov	r2, r3
 80021da:	f003 fe59 	bl	8005e90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	f003 020f 	and.w	r2, r3, #15
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	429a      	cmp	r2, r3
 8002208:	d901      	bls.n	800220e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e042      	b.n	8002294 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800220e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002212:	2b00      	cmp	r3, #0
 8002214:	da0f      	bge.n	8002236 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	f003 020f 	and.w	r2, r3, #15
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	3338      	adds	r3, #56	; 0x38
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	3304      	adds	r3, #4
 800222c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	705a      	strb	r2, [r3, #1]
 8002234:	e00f      	b.n	8002256 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	f003 020f 	and.w	r2, r3, #15
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	3304      	adds	r3, #4
 800224e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	b2da      	uxtb	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_PCD_EP_ClrStall+0x86>
 8002272:	2302      	movs	r3, #2
 8002274:	e00e      	b.n	8002294 <HAL_PCD_EP_ClrStall+0xa4>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68f9      	ldr	r1, [r7, #12]
 8002284:	4618      	mov	r0, r3
 8002286:	f003 fc6f 	bl	8005b68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80022a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	da0c      	bge.n	80022ca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	f003 020f 	and.w	r2, r3, #15
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	3338      	adds	r3, #56	; 0x38
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4413      	add	r3, r2
 80022c4:	3304      	adds	r3, #4
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e00c      	b.n	80022e4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	f003 020f 	and.w	r2, r3, #15
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4413      	add	r3, r2
 80022e0:	3304      	adds	r3, #4
 80022e2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68f9      	ldr	r1, [r7, #12]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 fa8e 	bl	800580c <USB_EPStopXfer>
 80022f0:	4603      	mov	r3, r0
 80022f2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80022f4:	7afb      	ldrb	r3, [r7, #11]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b08a      	sub	sp, #40	; 0x28
 8002302:	af02      	add	r7, sp, #8
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	3338      	adds	r3, #56	; 0x38
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	3304      	adds	r3, #4
 8002324:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6a1a      	ldr	r2, [r3, #32]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	429a      	cmp	r2, r3
 8002330:	d901      	bls.n	8002336 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e06c      	b.n	8002410 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	429a      	cmp	r2, r3
 800234a:	d902      	bls.n	8002352 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3303      	adds	r3, #3
 8002356:	089b      	lsrs	r3, r3, #2
 8002358:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800235a:	e02b      	b.n	80023b4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	699a      	ldr	r2, [r3, #24]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	429a      	cmp	r2, r3
 8002370:	d902      	bls.n	8002378 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	3303      	adds	r3, #3
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6919      	ldr	r1, [r3, #16]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002390:	b2db      	uxtb	r3, r3
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	4603      	mov	r3, r0
 8002396:	6978      	ldr	r0, [r7, #20]
 8002398:	f003 fae2 	bl	8005960 <USB_WritePacket>

    ep->xfer_buff  += len;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	441a      	add	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a1a      	ldr	r2, [r3, #32]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	441a      	add	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d809      	bhi.n	80023de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a1a      	ldr	r2, [r3, #32]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d203      	bcs.n	80023de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1be      	bne.n	800235c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	699a      	ldr	r2, [r3, #24]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d811      	bhi.n	800240e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	2201      	movs	r2, #1
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	43db      	mvns	r3, r3
 8002404:	6939      	ldr	r1, [r7, #16]
 8002406:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800240a:	4013      	ands	r3, r2
 800240c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	333c      	adds	r3, #60	; 0x3c
 8002430:	3304      	adds	r3, #4
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	4413      	add	r3, r2
 800243e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d17b      	bne.n	8002546 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d015      	beq.n	8002484 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	4a61      	ldr	r2, [pc, #388]	; (80025e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	f240 80b9 	bls.w	80025d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80b3 	beq.w	80025d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800247a:	461a      	mov	r2, r3
 800247c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002480:	6093      	str	r3, [r2, #8]
 8002482:	e0a7      	b.n	80025d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d009      	beq.n	80024a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	4413      	add	r3, r2
 8002496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249a:	461a      	mov	r2, r3
 800249c:	2320      	movs	r3, #32
 800249e:	6093      	str	r3, [r2, #8]
 80024a0:	e098      	b.n	80025d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f040 8093 	bne.w	80025d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	4a4b      	ldr	r2, [pc, #300]	; (80025e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d90f      	bls.n	80024d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024cc:	461a      	mov	r2, r3
 80024ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024d2:	6093      	str	r3, [r2, #8]
 80024d4:	e07e      	b.n	80025d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	4413      	add	r3, r2
 80024e8:	3304      	adds	r3, #4
 80024ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	0159      	lsls	r1, r3, #5
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	440b      	add	r3, r1
 80024f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002502:	1ad2      	subs	r2, r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d114      	bne.n	8002538 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002520:	461a      	mov	r2, r3
 8002522:	2101      	movs	r1, #1
 8002524:	f003 fcb4 	bl	8005e90 <USB_EP0_OutStart>
 8002528:	e006      	b.n	8002538 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	441a      	add	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	4619      	mov	r1, r3
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f005 ff72 	bl	8008428 <HAL_PCD_DataOutStageCallback>
 8002544:	e046      	b.n	80025d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	4a26      	ldr	r2, [pc, #152]	; (80025e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d124      	bne.n	8002598 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	4413      	add	r3, r2
 8002560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002564:	461a      	mov	r2, r3
 8002566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800256a:	6093      	str	r3, [r2, #8]
 800256c:	e032      	b.n	80025d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	4413      	add	r3, r2
 8002580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002584:	461a      	mov	r2, r3
 8002586:	2320      	movs	r3, #32
 8002588:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	4619      	mov	r1, r3
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f005 ff49 	bl	8008428 <HAL_PCD_DataOutStageCallback>
 8002596:	e01d      	b.n	80025d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d114      	bne.n	80025c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d108      	bne.n	80025c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025c0:	461a      	mov	r2, r3
 80025c2:	2100      	movs	r1, #0
 80025c4:	f003 fc64 	bl	8005e90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	4619      	mov	r1, r3
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f005 ff2a 	bl	8008428 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3720      	adds	r7, #32
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	4f54300a 	.word	0x4f54300a
 80025e4:	4f54310a 	.word	0x4f54310a

080025e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	333c      	adds	r3, #60	; 0x3c
 8002600:	3304      	adds	r3, #4
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4413      	add	r3, r2
 800260e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4a15      	ldr	r2, [pc, #84]	; (8002670 <PCD_EP_OutSetupPacket_int+0x88>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d90e      	bls.n	800263c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002624:	2b00      	cmp	r3, #0
 8002626:	d009      	beq.n	800263c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002634:	461a      	mov	r2, r3
 8002636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800263a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f005 fee1 	bl	8008404 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <PCD_EP_OutSetupPacket_int+0x88>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d90c      	bls.n	8002664 <PCD_EP_OutSetupPacket_int+0x7c>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d108      	bne.n	8002664 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800265c:	461a      	mov	r2, r3
 800265e:	2101      	movs	r1, #1
 8002660:	f003 fc16 	bl	8005e90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	4f54300a 	.word	0x4f54300a

08002674 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	70fb      	strb	r3, [r7, #3]
 8002680:	4613      	mov	r3, r2
 8002682:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d107      	bne.n	80026a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002692:	883b      	ldrh	r3, [r7, #0]
 8002694:	0419      	lsls	r1, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	430a      	orrs	r2, r1
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
 80026a0:	e028      	b.n	80026f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	0c1b      	lsrs	r3, r3, #16
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	4413      	add	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
 80026b4:	e00d      	b.n	80026d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	3340      	adds	r3, #64	; 0x40
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	0c1b      	lsrs	r3, r3, #16
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	4413      	add	r3, r2
 80026ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	3301      	adds	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	429a      	cmp	r2, r3
 80026da:	d3ec      	bcc.n	80026b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026dc:	883b      	ldrh	r3, [r7, #0]
 80026de:	0418      	lsls	r0, r3, #16
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6819      	ldr	r1, [r3, #0]
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	4302      	orrs	r2, r0
 80026ec:	3340      	adds	r3, #64	; 0x40
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	887a      	ldrh	r2, [r7, #2]
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_PCDEx_ActivateLPM+0x44>)
 8002754:	4313      	orrs	r3, r2
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	10000003 	.word	0x10000003

0800276c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_PWREx_ConfigSupply+0x70>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b04      	cmp	r3, #4
 8002796:	d00a      	beq.n	80027ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002798:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <HAL_PWREx_ConfigSupply+0x70>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d001      	beq.n	80027aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e01f      	b.n	80027ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e01d      	b.n	80027ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <HAL_PWREx_ConfigSupply+0x70>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f023 0207 	bic.w	r2, r3, #7
 80027b6:	490f      	ldr	r1, [pc, #60]	; (80027f4 <HAL_PWREx_ConfigSupply+0x70>)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80027be:	f7fe f9f1 	bl	8000ba4 <HAL_GetTick>
 80027c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027c4:	e009      	b.n	80027da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027c6:	f7fe f9ed 	bl	8000ba4 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027d4:	d901      	bls.n	80027da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e007      	b.n	80027ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_PWREx_ConfigSupply+0x70>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e6:	d1ee      	bne.n	80027c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	58024800 	.word	0x58024800

080027f8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4a04      	ldr	r2, [pc, #16]	; (8002814 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002806:	60d3      	str	r3, [r2, #12]
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	58024800 	.word	0x58024800

08002818 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	; 0x30
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e39d      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8087 	beq.w	8002946 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002838:	4b88      	ldr	r3, [pc, #544]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002842:	4b86      	ldr	r3, [pc, #536]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 8002844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284a:	2b10      	cmp	r3, #16
 800284c:	d007      	beq.n	800285e <HAL_RCC_OscConfig+0x46>
 800284e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002850:	2b18      	cmp	r3, #24
 8002852:	d110      	bne.n	8002876 <HAL_RCC_OscConfig+0x5e>
 8002854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d10b      	bne.n	8002876 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285e:	4b7f      	ldr	r3, [pc, #508]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d06c      	beq.n	8002944 <HAL_RCC_OscConfig+0x12c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d168      	bne.n	8002944 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e377      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x76>
 8002880:	4b76      	ldr	r3, [pc, #472]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a75      	ldr	r2, [pc, #468]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 8002886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	e02e      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x98>
 8002896:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a70      	ldr	r2, [pc, #448]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 800289c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b6e      	ldr	r3, [pc, #440]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6d      	ldr	r2, [pc, #436]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 80028a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e01d      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0xbc>
 80028ba:	4b68      	ldr	r3, [pc, #416]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a67      	ldr	r2, [pc, #412]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b65      	ldr	r3, [pc, #404]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a64      	ldr	r2, [pc, #400]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 80028d4:	4b61      	ldr	r3, [pc, #388]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a60      	ldr	r2, [pc, #384]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 80028da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b5e      	ldr	r3, [pc, #376]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a5d      	ldr	r2, [pc, #372]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe f956 	bl	8000ba4 <HAL_GetTick>
 80028f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fc:	f7fe f952 	bl	8000ba4 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e32b      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800290e:	4b53      	ldr	r3, [pc, #332]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0xe4>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7fe f942 	bl	8000ba4 <HAL_GetTick>
 8002920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002924:	f7fe f93e 	bl	8000ba4 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e317      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002936:	4b49      	ldr	r3, [pc, #292]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x10c>
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 808c 	beq.w	8002a6c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002954:	4b41      	ldr	r3, [pc, #260]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800295c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800295e:	4b3f      	ldr	r3, [pc, #252]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d007      	beq.n	800297a <HAL_RCC_OscConfig+0x162>
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	2b18      	cmp	r3, #24
 800296e:	d137      	bne.n	80029e0 <HAL_RCC_OscConfig+0x1c8>
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d132      	bne.n	80029e0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_RCC_OscConfig+0x17a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e2e9      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002992:	4b32      	ldr	r3, [pc, #200]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 0219 	bic.w	r2, r3, #25
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	492f      	ldr	r1, [pc, #188]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029a4:	f7fe f8fe 	bl	8000ba4 <HAL_GetTick>
 80029a8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ac:	f7fe f8fa 	bl	8000ba4 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e2d3      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029be:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ca:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	061b      	lsls	r3, r3, #24
 80029d8:	4920      	ldr	r1, [pc, #128]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029de:	e045      	b.n	8002a6c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d026      	beq.n	8002a36 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029e8:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 0219 	bic.w	r2, r3, #25
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4919      	ldr	r1, [pc, #100]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7fe f8d3 	bl	8000ba4 <HAL_GetTick>
 80029fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a02:	f7fe f8cf 	bl	8000ba4 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e2a8      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	490b      	ldr	r1, [pc, #44]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
 8002a34:	e01a      	b.n	8002a6c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a08      	ldr	r2, [pc, #32]	; (8002a5c <HAL_RCC_OscConfig+0x244>)
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7fe f8af 	bl	8000ba4 <HAL_GetTick>
 8002a46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a48:	e00a      	b.n	8002a60 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a4a:	f7fe f8ab 	bl	8000ba4 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d903      	bls.n	8002a60 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e284      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
 8002a5c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a60:	4b96      	ldr	r3, [pc, #600]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1ee      	bne.n	8002a4a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d06a      	beq.n	8002b4e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a78:	4b90      	ldr	r3, [pc, #576]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a80:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a82:	4b8e      	ldr	r3, [pc, #568]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d007      	beq.n	8002a9e <HAL_RCC_OscConfig+0x286>
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	2b18      	cmp	r3, #24
 8002a92:	d11b      	bne.n	8002acc <HAL_RCC_OscConfig+0x2b4>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d116      	bne.n	8002acc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a9e:	4b87      	ldr	r3, [pc, #540]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x29e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	2b80      	cmp	r3, #128	; 0x80
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e257      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ab6:	4b81      	ldr	r3, [pc, #516]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	061b      	lsls	r3, r3, #24
 8002ac4:	497d      	ldr	r1, [pc, #500]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002aca:	e040      	b.n	8002b4e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d023      	beq.n	8002b1c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ad4:	4b79      	ldr	r3, [pc, #484]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a78      	ldr	r2, [pc, #480]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fe f860 	bl	8000ba4 <HAL_GetTick>
 8002ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ae8:	f7fe f85c 	bl	8000ba4 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e235      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002afa:	4b70      	ldr	r3, [pc, #448]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b06:	4b6d      	ldr	r3, [pc, #436]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	061b      	lsls	r3, r3, #24
 8002b14:	4969      	ldr	r1, [pc, #420]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60cb      	str	r3, [r1, #12]
 8002b1a:	e018      	b.n	8002b4e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b1c:	4b67      	ldr	r3, [pc, #412]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a66      	ldr	r2, [pc, #408]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7fe f83c 	bl	8000ba4 <HAL_GetTick>
 8002b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b30:	f7fe f838 	bl	8000ba4 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e211      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b42:	4b5e      	ldr	r3, [pc, #376]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d036      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d019      	beq.n	8002b96 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b62:	4b56      	ldr	r3, [pc, #344]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b66:	4a55      	ldr	r2, [pc, #340]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6e:	f7fe f819 	bl	8000ba4 <HAL_GetTick>
 8002b72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b76:	f7fe f815 	bl	8000ba4 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e1ee      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b88:	4b4c      	ldr	r3, [pc, #304]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x35e>
 8002b94:	e018      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b96:	4b49      	ldr	r3, [pc, #292]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9a:	4a48      	ldr	r2, [pc, #288]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002b9c:	f023 0301 	bic.w	r3, r3, #1
 8002ba0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba2:	f7fd ffff 	bl	8000ba4 <HAL_GetTick>
 8002ba6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002baa:	f7fd fffb 	bl	8000ba4 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e1d4      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bbc:	4b3f      	ldr	r3, [pc, #252]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f0      	bne.n	8002baa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d036      	beq.n	8002c42 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d019      	beq.n	8002c10 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bdc:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a36      	ldr	r2, [pc, #216]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002be2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002be6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002be8:	f7fd ffdc 	bl	8000ba4 <HAL_GetTick>
 8002bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bf0:	f7fd ffd8 	bl	8000ba4 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e1b1      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c02:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x3d8>
 8002c0e:	e018      	b.n	8002c42 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c10:	4b2a      	ldr	r3, [pc, #168]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a29      	ldr	r2, [pc, #164]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002c16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c1c:	f7fd ffc2 	bl	8000ba4 <HAL_GetTick>
 8002c20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c24:	f7fd ffbe 	bl	8000ba4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e197      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c36:	4b21      	ldr	r3, [pc, #132]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8086 	beq.w	8002d5c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_RCC_OscConfig+0x4a8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1a      	ldr	r2, [pc, #104]	; (8002cc0 <HAL_RCC_OscConfig+0x4a8>)
 8002c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c5c:	f7fd ffa2 	bl	8000ba4 <HAL_GetTick>
 8002c60:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c64:	f7fd ff9e 	bl	8000ba4 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	; 0x64
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e177      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c76:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_RCC_OscConfig+0x4a8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d106      	bne.n	8002c98 <HAL_RCC_OscConfig+0x480>
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	4a0b      	ldr	r2, [pc, #44]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6713      	str	r3, [r2, #112]	; 0x70
 8002c96:	e032      	b.n	8002cfe <HAL_RCC_OscConfig+0x4e6>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d111      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x4ac>
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	4a05      	ldr	r2, [pc, #20]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	4a02      	ldr	r2, [pc, #8]	; (8002cbc <HAL_RCC_OscConfig+0x4a4>)
 8002cb2:	f023 0304 	bic.w	r3, r3, #4
 8002cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb8:	e021      	b.n	8002cfe <HAL_RCC_OscConfig+0x4e6>
 8002cba:	bf00      	nop
 8002cbc:	58024400 	.word	0x58024400
 8002cc0:	58024800 	.word	0x58024800
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b05      	cmp	r3, #5
 8002cca:	d10c      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x4ce>
 8002ccc:	4b83      	ldr	r3, [pc, #524]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	4a82      	ldr	r2, [pc, #520]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002cd2:	f043 0304 	orr.w	r3, r3, #4
 8002cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd8:	4b80      	ldr	r3, [pc, #512]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	4a7f      	ldr	r2, [pc, #508]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce4:	e00b      	b.n	8002cfe <HAL_RCC_OscConfig+0x4e6>
 8002ce6:	4b7d      	ldr	r3, [pc, #500]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	4a7c      	ldr	r2, [pc, #496]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf2:	4b7a      	ldr	r3, [pc, #488]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	4a79      	ldr	r2, [pc, #484]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002cf8:	f023 0304 	bic.w	r3, r3, #4
 8002cfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d015      	beq.n	8002d32 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fd ff4d 	bl	8000ba4 <HAL_GetTick>
 8002d0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fd ff49 	bl	8000ba4 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e120      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d24:	4b6d      	ldr	r3, [pc, #436]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0ee      	beq.n	8002d0e <HAL_RCC_OscConfig+0x4f6>
 8002d30:	e014      	b.n	8002d5c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d32:	f7fd ff37 	bl	8000ba4 <HAL_GetTick>
 8002d36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d38:	e00a      	b.n	8002d50 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d3a:	f7fd ff33 	bl	8000ba4 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e10a      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d50:	4b62      	ldr	r3, [pc, #392]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1ee      	bne.n	8002d3a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80ff 	beq.w	8002f64 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d66:	4b5d      	ldr	r3, [pc, #372]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d6e:	2b18      	cmp	r3, #24
 8002d70:	f000 80ba 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	f040 8095 	bne.w	8002ea8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7e:	4b57      	ldr	r3, [pc, #348]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a56      	ldr	r2, [pc, #344]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002d84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fd ff0b 	bl	8000ba4 <HAL_GetTick>
 8002d8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fd ff07 	bl	8000ba4 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e0e0      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002da4:	4b4d      	ldr	r3, [pc, #308]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002db0:	4b4a      	ldr	r3, [pc, #296]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002db2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002db4:	4b4a      	ldr	r3, [pc, #296]	; (8002ee0 <HAL_RCC_OscConfig+0x6c8>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002dc0:	0112      	lsls	r2, r2, #4
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	4945      	ldr	r1, [pc, #276]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	628b      	str	r3, [r1, #40]	; 0x28
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	025b      	lsls	r3, r3, #9
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	3b01      	subs	r3, #1
 8002de6:	041b      	lsls	r3, r3, #16
 8002de8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	3b01      	subs	r3, #1
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002dfa:	4938      	ldr	r1, [pc, #224]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002e00:	4b36      	ldr	r3, [pc, #216]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	4a35      	ldr	r2, [pc, #212]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e0c:	4b33      	ldr	r3, [pc, #204]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e10:	4b34      	ldr	r3, [pc, #208]	; (8002ee4 <HAL_RCC_OscConfig+0x6cc>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e18:	00d2      	lsls	r2, r2, #3
 8002e1a:	4930      	ldr	r1, [pc, #192]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e20:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	f023 020c 	bic.w	r2, r3, #12
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	492b      	ldr	r1, [pc, #172]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e32:	4b2a      	ldr	r3, [pc, #168]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e36:	f023 0202 	bic.w	r2, r3, #2
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	4927      	ldr	r1, [pc, #156]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e44:	4b25      	ldr	r3, [pc, #148]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	4a24      	ldr	r2, [pc, #144]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e50:	4b22      	ldr	r3, [pc, #136]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	4a21      	ldr	r2, [pc, #132]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e5c:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	4a1e      	ldr	r2, [pc, #120]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002e68:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	4a1b      	ldr	r2, [pc, #108]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e74:	4b19      	ldr	r3, [pc, #100]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a18      	ldr	r2, [pc, #96]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fd fe90 	bl	8000ba4 <HAL_GetTick>
 8002e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fd fe8c 	bl	8000ba4 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e065      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x670>
 8002ea6:	e05d      	b.n	8002f64 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0b      	ldr	r2, [pc, #44]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fd fe76 	bl	8000ba4 <HAL_GetTick>
 8002eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7fd fe72 	bl	8000ba4 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e04b      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ece:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_RCC_OscConfig+0x6c4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x6a4>
 8002eda:	e043      	b.n	8002f64 <HAL_RCC_OscConfig+0x74c>
 8002edc:	58024400 	.word	0x58024400
 8002ee0:	fffffc0c 	.word	0xfffffc0c
 8002ee4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ee8:	4b21      	ldr	r3, [pc, #132]	; (8002f70 <HAL_RCC_OscConfig+0x758>)
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002eee:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <HAL_RCC_OscConfig+0x758>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d031      	beq.n	8002f60 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f003 0203 	and.w	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d12a      	bne.n	8002f60 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d122      	bne.n	8002f60 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d11a      	bne.n	8002f60 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	0a5b      	lsrs	r3, r3, #9
 8002f2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f36:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d111      	bne.n	8002f60 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	0c1b      	lsrs	r3, r3, #16
 8002f40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d108      	bne.n	8002f60 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	0e1b      	lsrs	r3, r3, #24
 8002f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3730      	adds	r7, #48	; 0x30
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	58024400 	.word	0x58024400

08002f74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e19c      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b8a      	ldr	r3, [pc, #552]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d910      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b87      	ldr	r3, [pc, #540]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 020f 	bic.w	r2, r3, #15
 8002f9e:	4985      	ldr	r1, [pc, #532]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b83      	ldr	r3, [pc, #524]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e184      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d010      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	4b7b      	ldr	r3, [pc, #492]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d908      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fd4:	4b78      	ldr	r3, [pc, #480]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	4975      	ldr	r1, [pc, #468]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d010      	beq.n	8003014 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	4b70      	ldr	r3, [pc, #448]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d908      	bls.n	8003014 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003002:	4b6d      	ldr	r3, [pc, #436]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	496a      	ldr	r1, [pc, #424]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003010:	4313      	orrs	r3, r2
 8003012:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	d010      	beq.n	8003042 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699a      	ldr	r2, [r3, #24]
 8003024:	4b64      	ldr	r3, [pc, #400]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800302c:	429a      	cmp	r2, r3
 800302e:	d908      	bls.n	8003042 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003030:	4b61      	ldr	r3, [pc, #388]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	495e      	ldr	r1, [pc, #376]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 800303e:	4313      	orrs	r3, r2
 8003040:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	d010      	beq.n	8003070 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	4b59      	ldr	r3, [pc, #356]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800305a:	429a      	cmp	r2, r3
 800305c:	d908      	bls.n	8003070 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800305e:	4b56      	ldr	r3, [pc, #344]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	4953      	ldr	r1, [pc, #332]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 800306c:	4313      	orrs	r3, r2
 800306e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d010      	beq.n	800309e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	4b4d      	ldr	r3, [pc, #308]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	429a      	cmp	r2, r3
 800308a:	d908      	bls.n	800309e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308c:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f023 020f 	bic.w	r2, r3, #15
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4947      	ldr	r1, [pc, #284]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 800309a:	4313      	orrs	r3, r2
 800309c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d055      	beq.n	8003156 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030aa:	4b43      	ldr	r3, [pc, #268]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	4940      	ldr	r1, [pc, #256]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d107      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030c4:	4b3c      	ldr	r3, [pc, #240]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d121      	bne.n	8003114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0f6      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d107      	bne.n	80030ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030dc:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d115      	bne.n	8003114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0ea      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030f4:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d109      	bne.n	8003114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0de      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003104:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0d6      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003114:	4b28      	ldr	r3, [pc, #160]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f023 0207 	bic.w	r2, r3, #7
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4925      	ldr	r1, [pc, #148]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003122:	4313      	orrs	r3, r2
 8003124:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003126:	f7fd fd3d 	bl	8000ba4 <HAL_GetTick>
 800312a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312c:	e00a      	b.n	8003144 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312e:	f7fd fd39 	bl	8000ba4 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	f241 3288 	movw	r2, #5000	; 0x1388
 800313c:	4293      	cmp	r3, r2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e0be      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003144:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	429a      	cmp	r2, r3
 8003154:	d1eb      	bne.n	800312e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d010      	beq.n	8003184 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	429a      	cmp	r2, r3
 8003170:	d208      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f023 020f 	bic.w	r2, r3, #15
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	490e      	ldr	r1, [pc, #56]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003180:	4313      	orrs	r3, r2
 8003182:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d214      	bcs.n	80031bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 020f 	bic.w	r2, r3, #15
 800319a:	4906      	ldr	r1, [pc, #24]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	4313      	orrs	r3, r2
 80031a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b04      	ldr	r3, [pc, #16]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e086      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
 80031b4:	52002000 	.word	0x52002000
 80031b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d010      	beq.n	80031ea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	4b3f      	ldr	r3, [pc, #252]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d208      	bcs.n	80031ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031d8:	4b3c      	ldr	r3, [pc, #240]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	4939      	ldr	r1, [pc, #228]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d010      	beq.n	8003218 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003202:	429a      	cmp	r2, r3
 8003204:	d208      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003206:	4b31      	ldr	r3, [pc, #196]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	492e      	ldr	r1, [pc, #184]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003214:	4313      	orrs	r3, r2
 8003216:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b00      	cmp	r3, #0
 8003222:	d010      	beq.n	8003246 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	4b28      	ldr	r3, [pc, #160]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003230:	429a      	cmp	r2, r3
 8003232:	d208      	bcs.n	8003246 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003234:	4b25      	ldr	r3, [pc, #148]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	4922      	ldr	r1, [pc, #136]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003242:	4313      	orrs	r3, r2
 8003244:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d010      	beq.n	8003274 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69da      	ldr	r2, [r3, #28]
 8003256:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800325e:	429a      	cmp	r2, r3
 8003260:	d208      	bcs.n	8003274 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	4917      	ldr	r1, [pc, #92]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003270:	4313      	orrs	r3, r2
 8003272:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003274:	f000 f834 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b14      	ldr	r3, [pc, #80]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	4912      	ldr	r1, [pc, #72]	; (80032d0 <HAL_RCC_ClockConfig+0x35c>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
 8003290:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <HAL_RCC_ClockConfig+0x35c>)
 800329c:	5cd3      	ldrb	r3, [r2, r3]
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	fa22 f303 	lsr.w	r3, r2, r3
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <HAL_RCC_ClockConfig+0x360>)
 80032aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032ac:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <HAL_RCC_ClockConfig+0x364>)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <HAL_RCC_ClockConfig+0x368>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd fc2a 	bl	8000b10 <HAL_InitTick>
 80032bc:	4603      	mov	r3, r0
 80032be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	58024400 	.word	0x58024400
 80032d0:	08009ed8 	.word	0x08009ed8
 80032d4:	2400002c 	.word	0x2400002c
 80032d8:	24000028 	.word	0x24000028
 80032dc:	24000030 	.word	0x24000030

080032e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	; 0x24
 80032e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e6:	4bb3      	ldr	r3, [pc, #716]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032ee:	2b18      	cmp	r3, #24
 80032f0:	f200 8155 	bhi.w	800359e <HAL_RCC_GetSysClockFreq+0x2be>
 80032f4:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	08003361 	.word	0x08003361
 8003300:	0800359f 	.word	0x0800359f
 8003304:	0800359f 	.word	0x0800359f
 8003308:	0800359f 	.word	0x0800359f
 800330c:	0800359f 	.word	0x0800359f
 8003310:	0800359f 	.word	0x0800359f
 8003314:	0800359f 	.word	0x0800359f
 8003318:	0800359f 	.word	0x0800359f
 800331c:	08003387 	.word	0x08003387
 8003320:	0800359f 	.word	0x0800359f
 8003324:	0800359f 	.word	0x0800359f
 8003328:	0800359f 	.word	0x0800359f
 800332c:	0800359f 	.word	0x0800359f
 8003330:	0800359f 	.word	0x0800359f
 8003334:	0800359f 	.word	0x0800359f
 8003338:	0800359f 	.word	0x0800359f
 800333c:	0800338d 	.word	0x0800338d
 8003340:	0800359f 	.word	0x0800359f
 8003344:	0800359f 	.word	0x0800359f
 8003348:	0800359f 	.word	0x0800359f
 800334c:	0800359f 	.word	0x0800359f
 8003350:	0800359f 	.word	0x0800359f
 8003354:	0800359f 	.word	0x0800359f
 8003358:	0800359f 	.word	0x0800359f
 800335c:	08003393 	.word	0x08003393
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003360:	4b94      	ldr	r3, [pc, #592]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d009      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800336c:	4b91      	ldr	r3, [pc, #580]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	08db      	lsrs	r3, r3, #3
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	4a90      	ldr	r2, [pc, #576]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
 800337c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800337e:	e111      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003380:	4b8d      	ldr	r3, [pc, #564]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003382:	61bb      	str	r3, [r7, #24]
    break;
 8003384:	e10e      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003386:	4b8d      	ldr	r3, [pc, #564]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003388:	61bb      	str	r3, [r7, #24]
    break;
 800338a:	e10b      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800338c:	4b8c      	ldr	r3, [pc, #560]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800338e:	61bb      	str	r3, [r7, #24]
    break;
 8003390:	e108      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003392:	4b88      	ldr	r3, [pc, #544]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800339c:	4b85      	ldr	r3, [pc, #532]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033a8:	4b82      	ldr	r3, [pc, #520]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80033b2:	4b80      	ldr	r3, [pc, #512]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b6:	08db      	lsrs	r3, r3, #3
 80033b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	ee07 3a90 	vmov	s15, r3
 80033c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80e1 	beq.w	8003598 <HAL_RCC_GetSysClockFreq+0x2b8>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	f000 8083 	beq.w	80034e4 <HAL_RCC_GetSysClockFreq+0x204>
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	f200 80a1 	bhi.w	8003528 <HAL_RCC_GetSysClockFreq+0x248>
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x114>
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d056      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033f2:	e099      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033f4:	4b6f      	ldr	r3, [pc, #444]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d02d      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003400:	4b6c      	ldr	r3, [pc, #432]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	08db      	lsrs	r3, r3, #3
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	4a6b      	ldr	r2, [pc, #428]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
 8003410:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	ee07 3a90 	vmov	s15, r3
 8003418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800342a:	4b62      	ldr	r3, [pc, #392]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343a:	ed97 6a02 	vldr	s12, [r7, #8]
 800343e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80035c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800344a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800344e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003456:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800345a:	e087      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003466:	eddf 6a58 	vldr	s13, [pc, #352]	; 80035c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800346a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800346e:	4b51      	ldr	r3, [pc, #324]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003476:	ee07 3a90 	vmov	s15, r3
 800347a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800347e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003482:	eddf 5a50 	vldr	s11, [pc, #320]	; 80035c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800348a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800348e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800349e:	e065      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80035cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80034ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034b2:	4b40      	ldr	r3, [pc, #256]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ba:	ee07 3a90 	vmov	s15, r3
 80034be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80035c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034e2:	e043      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80035d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034f6:	4b2f      	ldr	r3, [pc, #188]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034fe:	ee07 3a90 	vmov	s15, r3
 8003502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003506:	ed97 6a02 	vldr	s12, [r7, #8]
 800350a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80035c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800350e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800351a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800351e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003526:	e021      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003532:	eddf 6a26 	vldr	s13, [pc, #152]	; 80035cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800353a:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003542:	ee07 3a90 	vmov	s15, r3
 8003546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800354a:	ed97 6a02 	vldr	s12, [r7, #8]
 800354e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80035c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800355a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800355e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800356a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800356c:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	0a5b      	lsrs	r3, r3, #9
 8003572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003576:	3301      	adds	r3, #1
 8003578:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	ee07 3a90 	vmov	s15, r3
 8003580:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003584:	edd7 6a07 	vldr	s13, [r7, #28]
 8003588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800358c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003590:	ee17 3a90 	vmov	r3, s15
 8003594:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003596:	e005      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	61bb      	str	r3, [r7, #24]
    break;
 800359c:	e002      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035a0:	61bb      	str	r3, [r7, #24]
    break;
 80035a2:	bf00      	nop
  }

  return sysclockfreq;
 80035a4:	69bb      	ldr	r3, [r7, #24]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3724      	adds	r7, #36	; 0x24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	58024400 	.word	0x58024400
 80035b8:	03d09000 	.word	0x03d09000
 80035bc:	003d0900 	.word	0x003d0900
 80035c0:	017d7840 	.word	0x017d7840
 80035c4:	46000000 	.word	0x46000000
 80035c8:	4c742400 	.word	0x4c742400
 80035cc:	4a742400 	.word	0x4a742400
 80035d0:	4bbebc20 	.word	0x4bbebc20

080035d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035da:	f7ff fe81 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 80035de:	4602      	mov	r2, r0
 80035e0:	4b10      	ldr	r3, [pc, #64]	; (8003624 <HAL_RCC_GetHCLKFreq+0x50>)
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	490f      	ldr	r1, [pc, #60]	; (8003628 <HAL_RCC_GetHCLKFreq+0x54>)
 80035ec:	5ccb      	ldrb	r3, [r1, r3]
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	fa22 f303 	lsr.w	r3, r2, r3
 80035f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <HAL_RCC_GetHCLKFreq+0x50>)
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	4a09      	ldr	r2, [pc, #36]	; (8003628 <HAL_RCC_GetHCLKFreq+0x54>)
 8003602:	5cd3      	ldrb	r3, [r2, r3]
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	fa22 f303 	lsr.w	r3, r2, r3
 800360e:	4a07      	ldr	r2, [pc, #28]	; (800362c <HAL_RCC_GetHCLKFreq+0x58>)
 8003610:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003612:	4a07      	ldr	r2, [pc, #28]	; (8003630 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003618:	4b04      	ldr	r3, [pc, #16]	; (800362c <HAL_RCC_GetHCLKFreq+0x58>)
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	58024400 	.word	0x58024400
 8003628:	08009ed8 	.word	0x08009ed8
 800362c:	2400002c 	.word	0x2400002c
 8003630:	24000028 	.word	0x24000028

08003634 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800363c:	2300      	movs	r3, #0
 800363e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003640:	2300      	movs	r3, #0
 8003642:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d03f      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003654:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003658:	d02a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800365a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800365e:	d824      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003660:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003664:	d018      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800366a:	d81e      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003674:	d007      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003676:	e018      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003678:	4ba4      	ldr	r3, [pc, #656]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	4aa3      	ldr	r2, [pc, #652]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800367e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003682:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003684:	e015      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3304      	adds	r3, #4
 800368a:	2102      	movs	r1, #2
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fecb 	bl	8004428 <RCCEx_PLL2_Config>
 8003692:	4603      	mov	r3, r0
 8003694:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003696:	e00c      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3324      	adds	r3, #36	; 0x24
 800369c:	2102      	movs	r1, #2
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 ff74 	bl	800458c <RCCEx_PLL3_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036a8:	e003      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	75fb      	strb	r3, [r7, #23]
      break;
 80036ae:	e000      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d109      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036b8:	4b94      	ldr	r3, [pc, #592]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80036ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c4:	4991      	ldr	r1, [pc, #580]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	650b      	str	r3, [r1, #80]	; 0x50
 80036ca:	e001      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
 80036ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d03d      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d826      	bhi.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036e4:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	08003701 	.word	0x08003701
 80036f0:	0800370f 	.word	0x0800370f
 80036f4:	08003721 	.word	0x08003721
 80036f8:	08003739 	.word	0x08003739
 80036fc:	08003739 	.word	0x08003739
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003700:	4b82      	ldr	r3, [pc, #520]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	4a81      	ldr	r2, [pc, #516]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800370c:	e015      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3304      	adds	r3, #4
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fe87 	bl	8004428 <RCCEx_PLL2_Config>
 800371a:	4603      	mov	r3, r0
 800371c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800371e:	e00c      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3324      	adds	r3, #36	; 0x24
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f000 ff30 	bl	800458c <RCCEx_PLL3_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003730:	e003      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	75fb      	strb	r3, [r7, #23]
      break;
 8003736:	e000      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800373a:	7dfb      	ldrb	r3, [r7, #23]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d109      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003740:	4b72      	ldr	r3, [pc, #456]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003744:	f023 0207 	bic.w	r2, r3, #7
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374c:	496f      	ldr	r1, [pc, #444]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800374e:	4313      	orrs	r3, r2
 8003750:	650b      	str	r3, [r1, #80]	; 0x50
 8003752:	e001      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003754:	7dfb      	ldrb	r3, [r7, #23]
 8003756:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	2b00      	cmp	r3, #0
 8003762:	d051      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800376a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800376e:	d036      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003770:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003774:	d830      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003776:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800377a:	d032      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800377c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003780:	d82a      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003782:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003786:	d02e      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003788:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800378c:	d824      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800378e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003792:	d018      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003798:	d81e      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800379e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037a2:	d007      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80037a4:	e018      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a6:	4b59      	ldr	r3, [pc, #356]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	4a58      	ldr	r2, [pc, #352]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80037ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037b2:	e019      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	2100      	movs	r1, #0
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fe34 	bl	8004428 <RCCEx_PLL2_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037c4:	e010      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3324      	adds	r3, #36	; 0x24
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fedd 	bl	800458c <RCCEx_PLL3_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037d6:	e007      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	75fb      	strb	r3, [r7, #23]
      break;
 80037dc:	e004      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80037de:	bf00      	nop
 80037e0:	e002      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80037e2:	bf00      	nop
 80037e4:	e000      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80037e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037e8:	7dfb      	ldrb	r3, [r7, #23]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10a      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037ee:	4b47      	ldr	r3, [pc, #284]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80037f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037fc:	4943      	ldr	r1, [pc, #268]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	658b      	str	r3, [r1, #88]	; 0x58
 8003802:	e001      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003810:	2b00      	cmp	r3, #0
 8003812:	d051      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800381a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800381e:	d036      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003820:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003824:	d830      	bhi.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003826:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800382a:	d032      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800382c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003830:	d82a      	bhi.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003832:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003836:	d02e      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003838:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800383c:	d824      	bhi.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800383e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003842:	d018      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003844:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003848:	d81e      	bhi.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800384e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003852:	d007      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003854:	e018      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003856:	4b2d      	ldr	r3, [pc, #180]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	4a2c      	ldr	r2, [pc, #176]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800385c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003860:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003862:	e019      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3304      	adds	r3, #4
 8003868:	2100      	movs	r1, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fddc 	bl	8004428 <RCCEx_PLL2_Config>
 8003870:	4603      	mov	r3, r0
 8003872:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003874:	e010      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3324      	adds	r3, #36	; 0x24
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fe85 	bl	800458c <RCCEx_PLL3_Config>
 8003882:	4603      	mov	r3, r0
 8003884:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003886:	e007      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	75fb      	strb	r3, [r7, #23]
      break;
 800388c:	e004      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800388e:	bf00      	nop
 8003890:	e002      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003892:	bf00      	nop
 8003894:	e000      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003898:	7dfb      	ldrb	r3, [r7, #23]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10a      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800389e:	4b1b      	ldr	r3, [pc, #108]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038ac:	4917      	ldr	r1, [pc, #92]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	658b      	str	r3, [r1, #88]	; 0x58
 80038b2:	e001      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d035      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c8:	2b30      	cmp	r3, #48	; 0x30
 80038ca:	d01c      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038cc:	2b30      	cmp	r3, #48	; 0x30
 80038ce:	d817      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d00c      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d813      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d019      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d10f      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	4a09      	ldr	r2, [pc, #36]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80038e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80038ec:	e011      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3304      	adds	r3, #4
 80038f2:	2102      	movs	r1, #2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fd97 	bl	8004428 <RCCEx_PLL2_Config>
 80038fa:	4603      	mov	r3, r0
 80038fc:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80038fe:	e008      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	75fb      	strb	r3, [r7, #23]
      break;
 8003904:	e005      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8003906:	bf00      	nop
 8003908:	e003      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800390a:	bf00      	nop
 800390c:	58024400 	.word	0x58024400
      break;
 8003910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003912:	7dfb      	ldrb	r3, [r7, #23]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d109      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003918:	4ba3      	ldr	r3, [pc, #652]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800391a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003924:	49a0      	ldr	r1, [pc, #640]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003926:	4313      	orrs	r3, r2
 8003928:	64cb      	str	r3, [r1, #76]	; 0x4c
 800392a:	e001      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d047      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003944:	d030      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003946:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800394a:	d82a      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800394c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003950:	d02c      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003952:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003956:	d824      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800395c:	d018      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800395e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003962:	d81e      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396c:	d007      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800396e:	e018      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003970:	4b8d      	ldr	r3, [pc, #564]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	4a8c      	ldr	r2, [pc, #560]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800397a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800397c:	e017      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3304      	adds	r3, #4
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fd4f 	bl	8004428 <RCCEx_PLL2_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800398e:	e00e      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3324      	adds	r3, #36	; 0x24
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fdf8 	bl	800458c <RCCEx_PLL3_Config>
 800399c:	4603      	mov	r3, r0
 800399e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039a0:	e005      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	75fb      	strb	r3, [r7, #23]
      break;
 80039a6:	e002      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80039a8:	bf00      	nop
 80039aa:	e000      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80039ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d109      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039b4:	4b7c      	ldr	r3, [pc, #496]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80039b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	4979      	ldr	r1, [pc, #484]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	650b      	str	r3, [r1, #80]	; 0x50
 80039c6:	e001      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c8:	7dfb      	ldrb	r3, [r7, #23]
 80039ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d049      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e0:	d02e      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80039e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e6:	d828      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039ec:	d02a      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80039ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039f2:	d822      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039f8:	d026      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80039fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039fe:	d81c      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003a00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a04:	d010      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003a06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a0a:	d816      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01d      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a14:	d111      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fd03 	bl	8004428 <RCCEx_PLL2_Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a26:	e012      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3324      	adds	r3, #36	; 0x24
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fdac 	bl	800458c <RCCEx_PLL3_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a38:	e009      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a3e:	e006      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a40:	bf00      	nop
 8003a42:	e004      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a44:	bf00      	nop
 8003a46:	e002      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a48:	bf00      	nop
 8003a4a:	e000      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d109      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a54:	4b54      	ldr	r3, [pc, #336]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a58:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a60:	4951      	ldr	r1, [pc, #324]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	650b      	str	r3, [r1, #80]	; 0x50
 8003a66:	e001      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
 8003a6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d04b      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a82:	d02e      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a88:	d828      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8e:	d02a      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a94:	d822      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a9a:	d026      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003a9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aa0:	d81c      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa6:	d010      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aac:	d816      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d01d      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003ab2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ab6:	d111      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3304      	adds	r3, #4
 8003abc:	2101      	movs	r1, #1
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fcb2 	bl	8004428 <RCCEx_PLL2_Config>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ac8:	e012      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3324      	adds	r3, #36	; 0x24
 8003ace:	2101      	movs	r1, #1
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fd5b 	bl	800458c <RCCEx_PLL3_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ada:	e009      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	75fb      	strb	r3, [r7, #23]
      break;
 8003ae0:	e006      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e004      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e002      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003aea:	bf00      	nop
 8003aec:	e000      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003aee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003af0:	7dfb      	ldrb	r3, [r7, #23]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10a      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003af6:	4b2c      	ldr	r3, [pc, #176]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b04:	4928      	ldr	r1, [pc, #160]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	658b      	str	r3, [r1, #88]	; 0x58
 8003b0a:	e001      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
 8003b0e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d02f      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b24:	d00e      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b2a:	d814      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d015      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b34:	d10f      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b36:	4b1c      	ldr	r3, [pc, #112]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	4a1b      	ldr	r2, [pc, #108]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b42:	e00c      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	2101      	movs	r1, #1
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fc6c 	bl	8004428 <RCCEx_PLL2_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b54:	e003      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
      break;
 8003b5a:	e000      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b5e:	7dfb      	ldrb	r3, [r7, #23]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d109      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b64:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b70:	490d      	ldr	r1, [pc, #52]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	650b      	str	r3, [r1, #80]	; 0x50
 8003b76:	e001      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
 8003b7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d034      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d81d      	bhi.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003b90:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003bd3 	.word	0x08003bd3
 8003b9c:	08003bad 	.word	0x08003bad
 8003ba0:	08003bbb 	.word	0x08003bbb
 8003ba4:	08003bd3 	.word	0x08003bd3
 8003ba8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bac:	4bb1      	ldr	r3, [pc, #708]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	4ab0      	ldr	r2, [pc, #704]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003bb8:	e00c      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	2102      	movs	r1, #2
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fc31 	bl	8004428 <RCCEx_PLL2_Config>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003bca:	e003      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8003bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bda:	4ba6      	ldr	r3, [pc, #664]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	f023 0203 	bic.w	r2, r3, #3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	49a3      	ldr	r1, [pc, #652]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003bec:	e001      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bee:	7dfb      	ldrb	r3, [r7, #23]
 8003bf0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 8086 	beq.w	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c00:	4b9d      	ldr	r3, [pc, #628]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a9c      	ldr	r2, [pc, #624]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c0c:	f7fc ffca 	bl	8000ba4 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c12:	e009      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c14:	f7fc ffc6 	bl	8000ba4 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b64      	cmp	r3, #100	; 0x64
 8003c20:	d902      	bls.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	75fb      	strb	r3, [r7, #23]
        break;
 8003c26:	e005      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c28:	4b93      	ldr	r3, [pc, #588]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0ef      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d166      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c3a:	4b8e      	ldr	r3, [pc, #568]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c44:	4053      	eors	r3, r2
 8003c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d013      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c4e:	4b89      	ldr	r3, [pc, #548]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c56:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c58:	4b86      	ldr	r3, [pc, #536]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4a85      	ldr	r2, [pc, #532]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c62:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c64:	4b83      	ldr	r3, [pc, #524]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c68:	4a82      	ldr	r2, [pc, #520]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c70:	4a80      	ldr	r2, [pc, #512]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c80:	d115      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c82:	f7fc ff8f 	bl	8000ba4 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c88:	e00b      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8a:	f7fc ff8b 	bl	8000ba4 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d902      	bls.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	75fb      	strb	r3, [r7, #23]
            break;
 8003ca0:	e005      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ca2:	4b74      	ldr	r3, [pc, #464]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0ed      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d126      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cc2:	d10d      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003cc4:	4b6b      	ldr	r3, [pc, #428]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cd2:	0919      	lsrs	r1, r3, #4
 8003cd4:	4b69      	ldr	r3, [pc, #420]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cd6:	400b      	ands	r3, r1
 8003cd8:	4966      	ldr	r1, [pc, #408]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	610b      	str	r3, [r1, #16]
 8003cde:	e005      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003ce0:	4b64      	ldr	r3, [pc, #400]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	4a63      	ldr	r2, [pc, #396]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ce6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cea:	6113      	str	r3, [r2, #16]
 8003cec:	4b61      	ldr	r3, [pc, #388]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfa:	495e      	ldr	r1, [pc, #376]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	670b      	str	r3, [r1, #112]	; 0x70
 8003d00:	e004      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
 8003d04:	75bb      	strb	r3, [r7, #22]
 8003d06:	e001      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d07e      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1c:	2b28      	cmp	r3, #40	; 0x28
 8003d1e:	d867      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003d20:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d26:	bf00      	nop
 8003d28:	08003df7 	.word	0x08003df7
 8003d2c:	08003df1 	.word	0x08003df1
 8003d30:	08003df1 	.word	0x08003df1
 8003d34:	08003df1 	.word	0x08003df1
 8003d38:	08003df1 	.word	0x08003df1
 8003d3c:	08003df1 	.word	0x08003df1
 8003d40:	08003df1 	.word	0x08003df1
 8003d44:	08003df1 	.word	0x08003df1
 8003d48:	08003dcd 	.word	0x08003dcd
 8003d4c:	08003df1 	.word	0x08003df1
 8003d50:	08003df1 	.word	0x08003df1
 8003d54:	08003df1 	.word	0x08003df1
 8003d58:	08003df1 	.word	0x08003df1
 8003d5c:	08003df1 	.word	0x08003df1
 8003d60:	08003df1 	.word	0x08003df1
 8003d64:	08003df1 	.word	0x08003df1
 8003d68:	08003ddf 	.word	0x08003ddf
 8003d6c:	08003df1 	.word	0x08003df1
 8003d70:	08003df1 	.word	0x08003df1
 8003d74:	08003df1 	.word	0x08003df1
 8003d78:	08003df1 	.word	0x08003df1
 8003d7c:	08003df1 	.word	0x08003df1
 8003d80:	08003df1 	.word	0x08003df1
 8003d84:	08003df1 	.word	0x08003df1
 8003d88:	08003df7 	.word	0x08003df7
 8003d8c:	08003df1 	.word	0x08003df1
 8003d90:	08003df1 	.word	0x08003df1
 8003d94:	08003df1 	.word	0x08003df1
 8003d98:	08003df1 	.word	0x08003df1
 8003d9c:	08003df1 	.word	0x08003df1
 8003da0:	08003df1 	.word	0x08003df1
 8003da4:	08003df1 	.word	0x08003df1
 8003da8:	08003df7 	.word	0x08003df7
 8003dac:	08003df1 	.word	0x08003df1
 8003db0:	08003df1 	.word	0x08003df1
 8003db4:	08003df1 	.word	0x08003df1
 8003db8:	08003df1 	.word	0x08003df1
 8003dbc:	08003df1 	.word	0x08003df1
 8003dc0:	08003df1 	.word	0x08003df1
 8003dc4:	08003df1 	.word	0x08003df1
 8003dc8:	08003df7 	.word	0x08003df7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fb28 	bl	8004428 <RCCEx_PLL2_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ddc:	e00c      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3324      	adds	r3, #36	; 0x24
 8003de2:	2101      	movs	r1, #1
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fbd1 	bl	800458c <RCCEx_PLL3_Config>
 8003dea:	4603      	mov	r3, r0
 8003dec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003dee:	e003      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	75fb      	strb	r3, [r7, #23]
      break;
 8003df4:	e000      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d109      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e02:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0a:	491a      	ldr	r1, [pc, #104]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	654b      	str	r3, [r1, #84]	; 0x54
 8003e10:	e001      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e12:	7dfb      	ldrb	r3, [r7, #23]
 8003e14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d03e      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	2b05      	cmp	r3, #5
 8003e28:	d820      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003e2a:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8003e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e30:	08003e81 	.word	0x08003e81
 8003e34:	08003e49 	.word	0x08003e49
 8003e38:	08003e5b 	.word	0x08003e5b
 8003e3c:	08003e81 	.word	0x08003e81
 8003e40:	08003e81 	.word	0x08003e81
 8003e44:	08003e81 	.word	0x08003e81
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 faea 	bl	8004428 <RCCEx_PLL2_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e58:	e013      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3324      	adds	r3, #36	; 0x24
 8003e5e:	2101      	movs	r1, #1
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fb93 	bl	800458c <RCCEx_PLL3_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e70:	e007      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8003e72:	bf00      	nop
 8003e74:	58024400 	.word	0x58024400
 8003e78:	58024800 	.word	0x58024800
 8003e7c:	00ffffcf 	.word	0x00ffffcf
      break;
 8003e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e82:	7dfb      	ldrb	r3, [r7, #23]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d109      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e88:	4b9f      	ldr	r3, [pc, #636]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8c:	f023 0207 	bic.w	r2, r3, #7
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	499c      	ldr	r1, [pc, #624]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	654b      	str	r3, [r1, #84]	; 0x54
 8003e9a:	e001      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d039      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d820      	bhi.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8003eb6:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	08003eff 	.word	0x08003eff
 8003ec0:	08003ed5 	.word	0x08003ed5
 8003ec4:	08003ee7 	.word	0x08003ee7
 8003ec8:	08003eff 	.word	0x08003eff
 8003ecc:	08003eff 	.word	0x08003eff
 8003ed0:	08003eff 	.word	0x08003eff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	2101      	movs	r1, #1
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 faa4 	bl	8004428 <RCCEx_PLL2_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ee4:	e00c      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3324      	adds	r3, #36	; 0x24
 8003eea:	2101      	movs	r1, #1
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fb4d 	bl	800458c <RCCEx_PLL3_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ef6:	e003      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	75fb      	strb	r3, [r7, #23]
      break;
 8003efc:	e000      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8003efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f06:	4b80      	ldr	r3, [pc, #512]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0a:	f023 0207 	bic.w	r2, r3, #7
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f14:	497c      	ldr	r1, [pc, #496]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	658b      	str	r3, [r1, #88]	; 0x58
 8003f1a:	e001      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d04b      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f36:	d02e      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8003f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f3c:	d828      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f42:	d02a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f48:	d822      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f4e:	d026      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003f50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f54:	d81c      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f5a:	d010      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f60:	d816      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d01d      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003f66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f6a:	d111      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	2100      	movs	r1, #0
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fa58 	bl	8004428 <RCCEx_PLL2_Config>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f7c:	e012      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3324      	adds	r3, #36	; 0x24
 8003f82:	2102      	movs	r1, #2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fb01 	bl	800458c <RCCEx_PLL3_Config>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f8e:	e009      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	75fb      	strb	r3, [r7, #23]
      break;
 8003f94:	e006      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f96:	bf00      	nop
 8003f98:	e004      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f9a:	bf00      	nop
 8003f9c:	e002      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f9e:	bf00      	nop
 8003fa0:	e000      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fa4:	7dfb      	ldrb	r3, [r7, #23]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10a      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003faa:	4b57      	ldr	r3, [pc, #348]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb8:	4953      	ldr	r1, [pc, #332]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	654b      	str	r3, [r1, #84]	; 0x54
 8003fbe:	e001      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
 8003fc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d04b      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fda:	d02e      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003fdc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fe0:	d828      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe6:	d02a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fec:	d822      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ff2:	d026      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003ff4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ff8:	d81c      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffe:	d010      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8004000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004004:	d816      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004006:	2b00      	cmp	r3, #0
 8004008:	d01d      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800400a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400e:	d111      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fa06 	bl	8004428 <RCCEx_PLL2_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004020:	e012      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3324      	adds	r3, #36	; 0x24
 8004026:	2102      	movs	r1, #2
 8004028:	4618      	mov	r0, r3
 800402a:	f000 faaf 	bl	800458c <RCCEx_PLL3_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004032:	e009      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	75fb      	strb	r3, [r7, #23]
      break;
 8004038:	e006      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800403a:	bf00      	nop
 800403c:	e004      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800403e:	bf00      	nop
 8004040:	e002      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004042:	bf00      	nop
 8004044:	e000      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004046:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004048:	7dfb      	ldrb	r3, [r7, #23]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800404e:	4b2e      	ldr	r3, [pc, #184]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004052:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800405c:	492a      	ldr	r1, [pc, #168]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800405e:	4313      	orrs	r3, r2
 8004060:	658b      	str	r3, [r1, #88]	; 0x58
 8004062:	e001      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004064:	7dfb      	ldrb	r3, [r7, #23]
 8004066:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004070:	2b00      	cmp	r3, #0
 8004072:	d04d      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800407a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800407e:	d02e      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004080:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004084:	d828      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408a:	d02a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800408c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004090:	d822      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004092:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004096:	d026      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004098:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800409c:	d81c      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800409e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a2:	d010      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80040a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a8:	d816      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01d      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80040ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b2:	d111      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	2100      	movs	r1, #0
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f9b4 	bl	8004428 <RCCEx_PLL2_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040c4:	e012      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3324      	adds	r3, #36	; 0x24
 80040ca:	2102      	movs	r1, #2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fa5d 	bl	800458c <RCCEx_PLL3_Config>
 80040d2:	4603      	mov	r3, r0
 80040d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040d6:	e009      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	75fb      	strb	r3, [r7, #23]
      break;
 80040dc:	e006      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040de:	bf00      	nop
 80040e0:	e004      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040e2:	bf00      	nop
 80040e4:	e002      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040e6:	bf00      	nop
 80040e8:	e000      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10c      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040f2:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004100:	4901      	ldr	r1, [pc, #4]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004102:	4313      	orrs	r3, r2
 8004104:	658b      	str	r3, [r1, #88]	; 0x58
 8004106:	e003      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004108:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410c:	7dfb      	ldrb	r3, [r7, #23]
 800410e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d018      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004124:	d10a      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3324      	adds	r3, #36	; 0x24
 800412a:	2102      	movs	r1, #2
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fa2d 	bl	800458c <RCCEx_PLL3_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800413c:	4b8a      	ldr	r3, [pc, #552]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800413e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004140:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004148:	4987      	ldr	r1, [pc, #540]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800414a:	4313      	orrs	r3, r2
 800414c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	d01a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004164:	d10a      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3324      	adds	r3, #36	; 0x24
 800416a:	2102      	movs	r1, #2
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fa0d 	bl	800458c <RCCEx_PLL3_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800417c:	4b7a      	ldr	r3, [pc, #488]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800417e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	4977      	ldr	r1, [pc, #476]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800418c:	4313      	orrs	r3, r2
 800418e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d034      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041a6:	d01d      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80041a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041ac:	d817      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80041b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b6:	d009      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80041b8:	e011      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3304      	adds	r3, #4
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 f931 	bl	8004428 <RCCEx_PLL2_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041ca:	e00c      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3324      	adds	r3, #36	; 0x24
 80041d0:	2102      	movs	r1, #2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 f9da 	bl	800458c <RCCEx_PLL3_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041dc:	e003      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	75fb      	strb	r3, [r7, #23]
      break;
 80041e2:	e000      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80041e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041ec:	4b5e      	ldr	r3, [pc, #376]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80041ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041fa:	495b      	ldr	r1, [pc, #364]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	658b      	str	r3, [r1, #88]	; 0x58
 8004200:	e001      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004202:	7dfb      	ldrb	r3, [r7, #23]
 8004204:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d033      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004218:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800421c:	d01c      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800421e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004222:	d816      	bhi.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004228:	d003      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800422a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800422e:	d007      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004230:	e00f      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004232:	4b4d      	ldr	r3, [pc, #308]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	4a4c      	ldr	r2, [pc, #304]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800423c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800423e:	e00c      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3324      	adds	r3, #36	; 0x24
 8004244:	2101      	movs	r1, #1
 8004246:	4618      	mov	r0, r3
 8004248:	f000 f9a0 	bl	800458c <RCCEx_PLL3_Config>
 800424c:	4603      	mov	r3, r0
 800424e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004250:	e003      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	75fb      	strb	r3, [r7, #23]
      break;
 8004256:	e000      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800425a:	7dfb      	ldrb	r3, [r7, #23]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004260:	4b41      	ldr	r3, [pc, #260]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004264:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800426e:	493e      	ldr	r1, [pc, #248]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004270:	4313      	orrs	r3, r2
 8004272:	654b      	str	r3, [r1, #84]	; 0x54
 8004274:	e001      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004276:	7dfb      	ldrb	r3, [r7, #23]
 8004278:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d029      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800428e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004292:	d007      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004294:	e00f      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004296:	4b34      	ldr	r3, [pc, #208]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	4a33      	ldr	r2, [pc, #204]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800429c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042a2:	e00b      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	2102      	movs	r1, #2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f8bc 	bl	8004428 <RCCEx_PLL2_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042b4:	e002      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	75fb      	strb	r3, [r7, #23]
      break;
 80042ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042c2:	4b29      	ldr	r3, [pc, #164]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80042c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ce:	4926      	ldr	r1, [pc, #152]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042d4:	e001      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
 80042d8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3324      	adds	r3, #36	; 0x24
 80042ea:	2102      	movs	r1, #2
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 f94d 	bl	800458c <RCCEx_PLL3_Config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d033      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800430c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004310:	d017      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004312:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004316:	d811      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800431c:	d013      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800431e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004322:	d80b      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004324:	2b00      	cmp	r3, #0
 8004326:	d010      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8004328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432c:	d106      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800432e:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	4a0d      	ldr	r2, [pc, #52]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004338:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800433a:	e007      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	75fb      	strb	r3, [r7, #23]
      break;
 8004340:	e004      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004342:	bf00      	nop
 8004344:	e002      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004346:	bf00      	nop
 8004348:	e000      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800434a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800434c:	7dfb      	ldrb	r3, [r7, #23]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10c      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004352:	4b05      	ldr	r3, [pc, #20]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004356:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800435e:	4902      	ldr	r1, [pc, #8]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004360:	4313      	orrs	r3, r2
 8004362:	654b      	str	r3, [r1, #84]	; 0x54
 8004364:	e004      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8004366:	bf00      	nop
 8004368:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800437c:	4b29      	ldr	r3, [pc, #164]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800437e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004380:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004388:	4926      	ldr	r1, [pc, #152]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800438a:	4313      	orrs	r3, r2
 800438c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800439a:	4b22      	ldr	r3, [pc, #136]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800439c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043a6:	491f      	ldr	r1, [pc, #124]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00d      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043b8:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	4a19      	ldr	r2, [pc, #100]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043c2:	6113      	str	r3, [r2, #16]
 80043c4:	4b17      	ldr	r3, [pc, #92]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043ce:	4915      	ldr	r1, [pc, #84]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	da08      	bge.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80043dc:	4b11      	ldr	r3, [pc, #68]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e8:	490e      	ldr	r1, [pc, #56]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d009      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043fa:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004408:	4906      	ldr	r1, [pc, #24]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800440a:	4313      	orrs	r3, r2
 800440c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800440e:	7dbb      	ldrb	r3, [r7, #22]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	e000      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	58024400 	.word	0x58024400

08004428 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004436:	4b53      	ldr	r3, [pc, #332]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b03      	cmp	r3, #3
 8004440:	d101      	bne.n	8004446 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e099      	b.n	800457a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004446:	4b4f      	ldr	r3, [pc, #316]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a4e      	ldr	r2, [pc, #312]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800444c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004452:	f7fc fba7 	bl	8000ba4 <HAL_GetTick>
 8004456:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004458:	e008      	b.n	800446c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800445a:	f7fc fba3 	bl	8000ba4 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e086      	b.n	800457a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800446c:	4b45      	ldr	r3, [pc, #276]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f0      	bne.n	800445a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004478:	4b42      	ldr	r3, [pc, #264]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	031b      	lsls	r3, r3, #12
 8004486:	493f      	ldr	r1, [pc, #252]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 8004488:	4313      	orrs	r3, r2
 800448a:	628b      	str	r3, [r1, #40]	; 0x28
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	3b01      	subs	r3, #1
 8004492:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	3b01      	subs	r3, #1
 800449c:	025b      	lsls	r3, r3, #9
 800449e:	b29b      	uxth	r3, r3
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	041b      	lsls	r3, r3, #16
 80044aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	061b      	lsls	r3, r3, #24
 80044b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044bc:	4931      	ldr	r1, [pc, #196]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80044c2:	4b30      	ldr	r3, [pc, #192]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	492d      	ldr	r1, [pc, #180]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80044d4:	4b2b      	ldr	r3, [pc, #172]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	f023 0220 	bic.w	r2, r3, #32
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	4928      	ldr	r1, [pc, #160]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044e6:	4b27      	ldr	r3, [pc, #156]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	4a26      	ldr	r2, [pc, #152]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 80044ec:	f023 0310 	bic.w	r3, r3, #16
 80044f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044f2:	4b24      	ldr	r3, [pc, #144]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 80044f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f6:	4b24      	ldr	r3, [pc, #144]	; (8004588 <RCCEx_PLL2_Config+0x160>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	69d2      	ldr	r2, [r2, #28]
 80044fe:	00d2      	lsls	r2, r2, #3
 8004500:	4920      	ldr	r1, [pc, #128]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 8004502:	4313      	orrs	r3, r2
 8004504:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004506:	4b1f      	ldr	r3, [pc, #124]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	4a1e      	ldr	r2, [pc, #120]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800450c:	f043 0310 	orr.w	r3, r3, #16
 8004510:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d106      	bne.n	8004526 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004518:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	4a19      	ldr	r2, [pc, #100]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800451e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004522:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004524:	e00f      	b.n	8004546 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d106      	bne.n	800453a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800452c:	4b15      	ldr	r3, [pc, #84]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	4a14      	ldr	r2, [pc, #80]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 8004532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004536:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004538:	e005      	b.n	8004546 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800453a:	4b12      	ldr	r3, [pc, #72]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	4a11      	ldr	r2, [pc, #68]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 8004540:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004544:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004546:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a0e      	ldr	r2, [pc, #56]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800454c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004552:	f7fc fb27 	bl	8000ba4 <HAL_GetTick>
 8004556:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004558:	e008      	b.n	800456c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800455a:	f7fc fb23 	bl	8000ba4 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e006      	b.n	800457a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <RCCEx_PLL2_Config+0x15c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0f0      	beq.n	800455a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004578:	7bfb      	ldrb	r3, [r7, #15]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	58024400 	.word	0x58024400
 8004588:	ffff0007 	.word	0xffff0007

0800458c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800459a:	4b53      	ldr	r3, [pc, #332]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d101      	bne.n	80045aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e099      	b.n	80046de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80045aa:	4b4f      	ldr	r3, [pc, #316]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a4e      	ldr	r2, [pc, #312]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80045b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b6:	f7fc faf5 	bl	8000ba4 <HAL_GetTick>
 80045ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045bc:	e008      	b.n	80045d0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80045be:	f7fc faf1 	bl	8000ba4 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e086      	b.n	80046de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045d0:	4b45      	ldr	r3, [pc, #276]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1f0      	bne.n	80045be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80045dc:	4b42      	ldr	r3, [pc, #264]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	051b      	lsls	r3, r3, #20
 80045ea:	493f      	ldr	r1, [pc, #252]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	628b      	str	r3, [r1, #40]	; 0x28
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	3b01      	subs	r3, #1
 8004600:	025b      	lsls	r3, r3, #9
 8004602:	b29b      	uxth	r3, r3
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	3b01      	subs	r3, #1
 800460c:	041b      	lsls	r3, r3, #16
 800460e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	3b01      	subs	r3, #1
 800461a:	061b      	lsls	r3, r3, #24
 800461c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004620:	4931      	ldr	r1, [pc, #196]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004622:	4313      	orrs	r3, r2
 8004624:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004626:	4b30      	ldr	r3, [pc, #192]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	492d      	ldr	r1, [pc, #180]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004634:	4313      	orrs	r3, r2
 8004636:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004638:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	4928      	ldr	r1, [pc, #160]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004646:	4313      	orrs	r3, r2
 8004648:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800464a:	4b27      	ldr	r3, [pc, #156]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	4a26      	ldr	r2, [pc, #152]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004654:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004656:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800465a:	4b24      	ldr	r3, [pc, #144]	; (80046ec <RCCEx_PLL3_Config+0x160>)
 800465c:	4013      	ands	r3, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	69d2      	ldr	r2, [r2, #28]
 8004662:	00d2      	lsls	r2, r2, #3
 8004664:	4920      	ldr	r1, [pc, #128]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004666:	4313      	orrs	r3, r2
 8004668:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800466a:	4b1f      	ldr	r3, [pc, #124]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	4a1e      	ldr	r2, [pc, #120]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004674:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d106      	bne.n	800468a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800467c:	4b1a      	ldr	r3, [pc, #104]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	4a19      	ldr	r2, [pc, #100]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004682:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004686:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004688:	e00f      	b.n	80046aa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d106      	bne.n	800469e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004690:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 8004696:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800469a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800469c:	e005      	b.n	80046aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800469e:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	4a11      	ldr	r2, [pc, #68]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80046a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80046aa:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a0e      	ldr	r2, [pc, #56]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80046b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b6:	f7fc fa75 	bl	8000ba4 <HAL_GetTick>
 80046ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046bc:	e008      	b.n	80046d0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80046be:	f7fc fa71 	bl	8000ba4 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e006      	b.n	80046de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <RCCEx_PLL3_Config+0x15c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	58024400 	.word	0x58024400
 80046ec:	ffff0007 	.word	0xffff0007

080046f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046f0:	b084      	sub	sp, #16
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	f107 001c 	add.w	r0, r7, #28
 80046fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	2b01      	cmp	r3, #1
 8004706:	d120      	bne.n	800474a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	4b2a      	ldr	r3, [pc, #168]	; (80047c4 <USB_CoreInit+0xd4>)
 800471a:	4013      	ands	r3, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800472c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800472e:	2b01      	cmp	r3, #1
 8004730:	d105      	bne.n	800473e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f001 fc04 	bl	8005f4c <USB_CoreReset>
 8004744:	4603      	mov	r3, r0
 8004746:	73fb      	strb	r3, [r7, #15]
 8004748:	e01a      	b.n	8004780 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f001 fbf8 	bl	8005f4c <USB_CoreReset>
 800475c:	4603      	mov	r3, r0
 800475e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	639a      	str	r2, [r3, #56]	; 0x38
 8004772:	e005      	b.n	8004780 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004778:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004782:	2b01      	cmp	r3, #1
 8004784:	d116      	bne.n	80047b4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478a:	b29a      	uxth	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004794:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <USB_CoreInit+0xd8>)
 8004796:	4313      	orrs	r3, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f043 0206 	orr.w	r2, r3, #6
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f043 0220 	orr.w	r2, r3, #32
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047c0:	b004      	add	sp, #16
 80047c2:	4770      	bx	lr
 80047c4:	ffbdffbf 	.word	0xffbdffbf
 80047c8:	03ee0000 	.word	0x03ee0000

080047cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	4613      	mov	r3, r2
 80047d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d165      	bne.n	80048ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4a41      	ldr	r2, [pc, #260]	; (80048e8 <USB_SetTurnaroundTime+0x11c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d906      	bls.n	80047f6 <USB_SetTurnaroundTime+0x2a>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4a40      	ldr	r2, [pc, #256]	; (80048ec <USB_SetTurnaroundTime+0x120>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d202      	bcs.n	80047f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80047f0:	230f      	movs	r3, #15
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	e062      	b.n	80048bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4a3c      	ldr	r2, [pc, #240]	; (80048ec <USB_SetTurnaroundTime+0x120>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d306      	bcc.n	800480c <USB_SetTurnaroundTime+0x40>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4a3b      	ldr	r2, [pc, #236]	; (80048f0 <USB_SetTurnaroundTime+0x124>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d202      	bcs.n	800480c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004806:	230e      	movs	r3, #14
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	e057      	b.n	80048bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4a38      	ldr	r2, [pc, #224]	; (80048f0 <USB_SetTurnaroundTime+0x124>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d306      	bcc.n	8004822 <USB_SetTurnaroundTime+0x56>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4a37      	ldr	r2, [pc, #220]	; (80048f4 <USB_SetTurnaroundTime+0x128>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d202      	bcs.n	8004822 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800481c:	230d      	movs	r3, #13
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	e04c      	b.n	80048bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4a33      	ldr	r2, [pc, #204]	; (80048f4 <USB_SetTurnaroundTime+0x128>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d306      	bcc.n	8004838 <USB_SetTurnaroundTime+0x6c>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4a32      	ldr	r2, [pc, #200]	; (80048f8 <USB_SetTurnaroundTime+0x12c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d802      	bhi.n	8004838 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004832:	230c      	movs	r3, #12
 8004834:	617b      	str	r3, [r7, #20]
 8004836:	e041      	b.n	80048bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4a2f      	ldr	r2, [pc, #188]	; (80048f8 <USB_SetTurnaroundTime+0x12c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d906      	bls.n	800484e <USB_SetTurnaroundTime+0x82>
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4a2e      	ldr	r2, [pc, #184]	; (80048fc <USB_SetTurnaroundTime+0x130>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d802      	bhi.n	800484e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004848:	230b      	movs	r3, #11
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	e036      	b.n	80048bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4a2a      	ldr	r2, [pc, #168]	; (80048fc <USB_SetTurnaroundTime+0x130>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d906      	bls.n	8004864 <USB_SetTurnaroundTime+0x98>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4a29      	ldr	r2, [pc, #164]	; (8004900 <USB_SetTurnaroundTime+0x134>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d802      	bhi.n	8004864 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800485e:	230a      	movs	r3, #10
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	e02b      	b.n	80048bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4a26      	ldr	r2, [pc, #152]	; (8004900 <USB_SetTurnaroundTime+0x134>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d906      	bls.n	800487a <USB_SetTurnaroundTime+0xae>
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4a25      	ldr	r2, [pc, #148]	; (8004904 <USB_SetTurnaroundTime+0x138>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d202      	bcs.n	800487a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004874:	2309      	movs	r3, #9
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	e020      	b.n	80048bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4a21      	ldr	r2, [pc, #132]	; (8004904 <USB_SetTurnaroundTime+0x138>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d306      	bcc.n	8004890 <USB_SetTurnaroundTime+0xc4>
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	4a20      	ldr	r2, [pc, #128]	; (8004908 <USB_SetTurnaroundTime+0x13c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d802      	bhi.n	8004890 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800488a:	2308      	movs	r3, #8
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	e015      	b.n	80048bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	4a1d      	ldr	r2, [pc, #116]	; (8004908 <USB_SetTurnaroundTime+0x13c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d906      	bls.n	80048a6 <USB_SetTurnaroundTime+0xda>
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4a1c      	ldr	r2, [pc, #112]	; (800490c <USB_SetTurnaroundTime+0x140>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d202      	bcs.n	80048a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80048a0:	2307      	movs	r3, #7
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	e00a      	b.n	80048bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80048a6:	2306      	movs	r3, #6
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	e007      	b.n	80048bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80048ac:	79fb      	ldrb	r3, [r7, #7]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d102      	bne.n	80048b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80048b2:	2309      	movs	r3, #9
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	e001      	b.n	80048bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80048b8:	2309      	movs	r3, #9
 80048ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	029b      	lsls	r3, r3, #10
 80048d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80048d4:	431a      	orrs	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	00d8acbf 	.word	0x00d8acbf
 80048ec:	00e4e1c0 	.word	0x00e4e1c0
 80048f0:	00f42400 	.word	0x00f42400
 80048f4:	01067380 	.word	0x01067380
 80048f8:	011a499f 	.word	0x011a499f
 80048fc:	01312cff 	.word	0x01312cff
 8004900:	014ca43f 	.word	0x014ca43f
 8004904:	016e3600 	.word	0x016e3600
 8004908:	01a6ab1f 	.word	0x01a6ab1f
 800490c:	01e84800 	.word	0x01e84800

08004910 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f043 0201 	orr.w	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f023 0201 	bic.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d115      	bne.n	80049a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004982:	2001      	movs	r0, #1
 8004984:	f7fc f91a 	bl	8000bbc <HAL_Delay>
      ms++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3301      	adds	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f001 fa4b 	bl	8005e2a <USB_GetMode>
 8004994:	4603      	mov	r3, r0
 8004996:	2b01      	cmp	r3, #1
 8004998:	d01e      	beq.n	80049d8 <USB_SetCurrentMode+0x84>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b31      	cmp	r3, #49	; 0x31
 800499e:	d9f0      	bls.n	8004982 <USB_SetCurrentMode+0x2e>
 80049a0:	e01a      	b.n	80049d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d115      	bne.n	80049d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80049b4:	2001      	movs	r0, #1
 80049b6:	f7fc f901 	bl	8000bbc <HAL_Delay>
      ms++;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3301      	adds	r3, #1
 80049be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f001 fa32 	bl	8005e2a <USB_GetMode>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <USB_SetCurrentMode+0x84>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b31      	cmp	r3, #49	; 0x31
 80049d0:	d9f0      	bls.n	80049b4 <USB_SetCurrentMode+0x60>
 80049d2:	e001      	b.n	80049d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e005      	b.n	80049e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b32      	cmp	r3, #50	; 0x32
 80049dc:	d101      	bne.n	80049e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049ec:	b084      	sub	sp, #16
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b086      	sub	sp, #24
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	e009      	b.n	8004a20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	3340      	adds	r3, #64	; 0x40
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	2200      	movs	r2, #0
 8004a18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2b0e      	cmp	r3, #14
 8004a24:	d9f2      	bls.n	8004a0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d11c      	bne.n	8004a66 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a3a:	f043 0302 	orr.w	r3, r3, #2
 8004a3e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	e005      	b.n	8004a72 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a78:	461a      	mov	r2, r3
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a84:	4619      	mov	r1, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	680b      	ldr	r3, [r1, #0]
 8004a90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d10c      	bne.n	8004ab2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d104      	bne.n	8004aa8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f965 	bl	8004d70 <USB_SetDevSpeed>
 8004aa6:	e008      	b.n	8004aba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f960 	bl	8004d70 <USB_SetDevSpeed>
 8004ab0:	e003      	b.n	8004aba <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ab2:	2103      	movs	r1, #3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f95b 	bl	8004d70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004aba:	2110      	movs	r1, #16
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f8f3 	bl	8004ca8 <USB_FlushTxFifo>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f91f 	bl	8004d10 <USB_FlushRxFifo>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aee:	461a      	mov	r2, r3
 8004af0:	2300      	movs	r3, #0
 8004af2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afa:	461a      	mov	r2, r3
 8004afc:	2300      	movs	r3, #0
 8004afe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b00:	2300      	movs	r3, #0
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	e043      	b.n	8004b8e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b1c:	d118      	bne.n	8004b50 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	461a      	mov	r2, r3
 8004b32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	e013      	b.n	8004b62 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b46:	461a      	mov	r2, r3
 8004b48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e008      	b.n	8004b62 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	2300      	movs	r3, #0
 8004b60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6e:	461a      	mov	r2, r3
 8004b70:	2300      	movs	r3, #0
 8004b72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b80:	461a      	mov	r2, r3
 8004b82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d3b7      	bcc.n	8004b06 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b96:	2300      	movs	r3, #0
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	e043      	b.n	8004c24 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bb2:	d118      	bne.n	8004be6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10a      	bne.n	8004bd0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	e013      	b.n	8004bf8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	e008      	b.n	8004bf8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c04:	461a      	mov	r2, r3
 8004c06:	2300      	movs	r3, #0
 8004c08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	461a      	mov	r2, r3
 8004c18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	3301      	adds	r3, #1
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d3b7      	bcc.n	8004b9c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d105      	bne.n	8004c60 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	f043 0210 	orr.w	r2, r3, #16
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699a      	ldr	r2, [r3, #24]
 8004c64:	4b0e      	ldr	r3, [pc, #56]	; (8004ca0 <USB_DevInit+0x2b4>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f043 0208 	orr.w	r2, r3, #8
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d105      	bne.n	8004c90 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699a      	ldr	r2, [r3, #24]
 8004c88:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <USB_DevInit+0x2b8>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c9c:	b004      	add	sp, #16
 8004c9e:	4770      	bx	lr
 8004ca0:	803c3800 	.word	0x803c3800
 8004ca4:	40000004 	.word	0x40000004

08004ca8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4a13      	ldr	r2, [pc, #76]	; (8004d0c <USB_FlushTxFifo+0x64>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d901      	bls.n	8004cc8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e01b      	b.n	8004d00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	daf2      	bge.n	8004cb6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	019b      	lsls	r3, r3, #6
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4a08      	ldr	r2, [pc, #32]	; (8004d0c <USB_FlushTxFifo+0x64>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d901      	bls.n	8004cf2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e006      	b.n	8004d00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	2b20      	cmp	r3, #32
 8004cfc:	d0f0      	beq.n	8004ce0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	00030d40 	.word	0x00030d40

08004d10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4a11      	ldr	r2, [pc, #68]	; (8004d6c <USB_FlushRxFifo+0x5c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d901      	bls.n	8004d2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e018      	b.n	8004d60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	daf2      	bge.n	8004d1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2210      	movs	r2, #16
 8004d3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3301      	adds	r3, #1
 8004d44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4a08      	ldr	r2, [pc, #32]	; (8004d6c <USB_FlushRxFifo+0x5c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d901      	bls.n	8004d52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e006      	b.n	8004d60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	2b10      	cmp	r3, #16
 8004d5c:	d0f0      	beq.n	8004d40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	00030d40 	.word	0x00030d40

08004d70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	78fb      	ldrb	r3, [r7, #3]
 8004d8a:	68f9      	ldr	r1, [r7, #12]
 8004d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d90:	4313      	orrs	r3, r2
 8004d92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b087      	sub	sp, #28
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 0306 	and.w	r3, r3, #6
 8004dba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d102      	bne.n	8004dc8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	75fb      	strb	r3, [r7, #23]
 8004dc6:	e00a      	b.n	8004dde <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d002      	beq.n	8004dd4 <USB_GetDevSpeed+0x32>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b06      	cmp	r3, #6
 8004dd2:	d102      	bne.n	8004dda <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	75fb      	strb	r3, [r7, #23]
 8004dd8:	e001      	b.n	8004dde <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004dda:	230f      	movs	r3, #15
 8004ddc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	785b      	ldrb	r3, [r3, #1]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d139      	bne.n	8004e7c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	f003 030f 	and.w	r3, r3, #15
 8004e18:	2101      	movs	r1, #1
 8004e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	68f9      	ldr	r1, [r7, #12]
 8004e22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e26:	4313      	orrs	r3, r2
 8004e28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d153      	bne.n	8004ee8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	791b      	ldrb	r3, [r3, #4]
 8004e5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	059b      	lsls	r3, r3, #22
 8004e62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e64:	431a      	orrs	r2, r3
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	0159      	lsls	r1, r3, #5
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	440b      	add	r3, r1
 8004e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e72:	4619      	mov	r1, r3
 8004e74:	4b20      	ldr	r3, [pc, #128]	; (8004ef8 <USB_ActivateEndpoint+0x10c>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	600b      	str	r3, [r1, #0]
 8004e7a:	e035      	b.n	8004ee8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e92:	041b      	lsls	r3, r3, #16
 8004e94:	68f9      	ldr	r1, [r7, #12]
 8004e96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d119      	bne.n	8004ee8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	791b      	ldrb	r3, [r3, #4]
 8004ece:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	0159      	lsls	r1, r3, #5
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	440b      	add	r3, r1
 8004edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <USB_ActivateEndpoint+0x10c>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	10008000 	.word	0x10008000

08004efc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	785b      	ldrb	r3, [r3, #1]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d161      	bne.n	8004fdc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f2e:	d11f      	bne.n	8004f70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	0151      	lsls	r1, r2, #5
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	440a      	add	r2, r1
 8004f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	0151      	lsls	r1, r2, #5
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	440a      	add	r2, r1
 8004f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	2101      	movs	r1, #1
 8004f82:	fa01 f303 	lsl.w	r3, r1, r3
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	68f9      	ldr	r1, [r7, #12]
 8004f8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f90:	4013      	ands	r3, r2
 8004f92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	43db      	mvns	r3, r3
 8004fae:	68f9      	ldr	r1, [r7, #12]
 8004fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	0159      	lsls	r1, r3, #5
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	440b      	add	r3, r1
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4b35      	ldr	r3, [pc, #212]	; (80050ac <USB_DeactivateEndpoint+0x1b0>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	600b      	str	r3, [r1, #0]
 8004fda:	e060      	b.n	800509e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ff2:	d11f      	bne.n	8005034 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	440a      	add	r2, r1
 800500a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800500e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005012:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	0151      	lsls	r1, r2, #5
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	440a      	add	r2, r1
 800502a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800502e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005032:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	2101      	movs	r1, #1
 8005046:	fa01 f303 	lsl.w	r3, r1, r3
 800504a:	041b      	lsls	r3, r3, #16
 800504c:	43db      	mvns	r3, r3
 800504e:	68f9      	ldr	r1, [r7, #12]
 8005050:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005054:	4013      	ands	r3, r2
 8005056:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505e:	69da      	ldr	r2, [r3, #28]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	2101      	movs	r1, #1
 800506a:	fa01 f303 	lsl.w	r3, r1, r3
 800506e:	041b      	lsls	r3, r3, #16
 8005070:	43db      	mvns	r3, r3
 8005072:	68f9      	ldr	r1, [r7, #12]
 8005074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005078:	4013      	ands	r3, r2
 800507a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	0159      	lsls	r1, r3, #5
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	440b      	add	r3, r1
 8005092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005096:	4619      	mov	r1, r3
 8005098:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <USB_DeactivateEndpoint+0x1b4>)
 800509a:	4013      	ands	r3, r2
 800509c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	ec337800 	.word	0xec337800
 80050b0:	eff37800 	.word	0xeff37800

080050b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	; 0x28
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	4613      	mov	r3, r2
 80050c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	785b      	ldrb	r3, [r3, #1]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	f040 8163 	bne.w	800539c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d132      	bne.n	8005144 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	0159      	lsls	r1, r3, #5
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	440b      	add	r3, r1
 80050f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f8:	4619      	mov	r1, r3
 80050fa:	4ba5      	ldr	r3, [pc, #660]	; (8005390 <USB_EPStartXfer+0x2dc>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	440a      	add	r2, r1
 8005116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800511e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	0159      	lsls	r1, r3, #5
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	440b      	add	r3, r1
 8005136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513a:	4619      	mov	r1, r3
 800513c:	4b95      	ldr	r3, [pc, #596]	; (8005394 <USB_EPStartXfer+0x2e0>)
 800513e:	4013      	ands	r3, r2
 8005140:	610b      	str	r3, [r1, #16]
 8005142:	e074      	b.n	800522e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	0159      	lsls	r1, r3, #5
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	440b      	add	r3, r1
 800515a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515e:	4619      	mov	r1, r3
 8005160:	4b8c      	ldr	r3, [pc, #560]	; (8005394 <USB_EPStartXfer+0x2e0>)
 8005162:	4013      	ands	r3, r2
 8005164:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	0159      	lsls	r1, r3, #5
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	440b      	add	r3, r1
 800517c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005180:	4619      	mov	r1, r3
 8005182:	4b83      	ldr	r3, [pc, #524]	; (8005390 <USB_EPStartXfer+0x2dc>)
 8005184:	4013      	ands	r3, r2
 8005186:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005194:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	6999      	ldr	r1, [r3, #24]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	440b      	add	r3, r1
 80051a0:	1e59      	subs	r1, r3, #1
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80051aa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80051ac:	4b7a      	ldr	r3, [pc, #488]	; (8005398 <USB_EPStartXfer+0x2e4>)
 80051ae:	400b      	ands	r3, r1
 80051b0:	69b9      	ldr	r1, [r7, #24]
 80051b2:	0148      	lsls	r0, r1, #5
 80051b4:	69f9      	ldr	r1, [r7, #28]
 80051b6:	4401      	add	r1, r0
 80051b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051bc:	4313      	orrs	r3, r2
 80051be:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051cc:	691a      	ldr	r2, [r3, #16]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051d6:	69b9      	ldr	r1, [r7, #24]
 80051d8:	0148      	lsls	r0, r1, #5
 80051da:	69f9      	ldr	r1, [r7, #28]
 80051dc:	4401      	add	r1, r0
 80051de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051e2:	4313      	orrs	r3, r2
 80051e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	791b      	ldrb	r3, [r3, #4]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d11f      	bne.n	800522e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	0151      	lsls	r1, r2, #5
 8005200:	69fa      	ldr	r2, [r7, #28]
 8005202:	440a      	add	r2, r1
 8005204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005208:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800520c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	0151      	lsls	r1, r2, #5
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	440a      	add	r2, r1
 8005224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005228:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800522c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d14b      	bne.n	80052cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d009      	beq.n	8005250 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005248:	461a      	mov	r2, r3
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	791b      	ldrb	r3, [r3, #4]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d128      	bne.n	80052aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d110      	bne.n	800528a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	440a      	add	r2, r1
 800527e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005282:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	e00f      	b.n	80052aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	e137      	b.n	800553c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	791b      	ldrb	r3, [r3, #4]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d015      	beq.n	8005320 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 811f 	beq.w	800553c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	2101      	movs	r1, #1
 8005310:	fa01 f303 	lsl.w	r3, r1, r3
 8005314:	69f9      	ldr	r1, [r7, #28]
 8005316:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800531a:	4313      	orrs	r3, r2
 800531c:	634b      	str	r3, [r1, #52]	; 0x34
 800531e:	e10d      	b.n	800553c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532c:	2b00      	cmp	r3, #0
 800532e:	d110      	bne.n	8005352 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	0151      	lsls	r1, r2, #5
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	440a      	add	r2, r1
 8005346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800534a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	e00f      	b.n	8005372 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	0151      	lsls	r1, r2, #5
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	440a      	add	r2, r1
 8005368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800536c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005370:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	6919      	ldr	r1, [r3, #16]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	781a      	ldrb	r2, [r3, #0]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	b298      	uxth	r0, r3
 8005380:	79fb      	ldrb	r3, [r7, #7]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	4603      	mov	r3, r0
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 faea 	bl	8005960 <USB_WritePacket>
 800538c:	e0d6      	b.n	800553c <USB_EPStartXfer+0x488>
 800538e:	bf00      	nop
 8005390:	e007ffff 	.word	0xe007ffff
 8005394:	fff80000 	.word	0xfff80000
 8005398:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	0159      	lsls	r1, r3, #5
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	440b      	add	r3, r1
 80053b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b6:	4619      	mov	r1, r3
 80053b8:	4b63      	ldr	r3, [pc, #396]	; (8005548 <USB_EPStartXfer+0x494>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ca:	691a      	ldr	r2, [r3, #16]
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	0159      	lsls	r1, r3, #5
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	440b      	add	r3, r1
 80053d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d8:	4619      	mov	r1, r3
 80053da:	4b5c      	ldr	r3, [pc, #368]	; (800554c <USB_EPStartXfer+0x498>)
 80053dc:	4013      	ands	r3, r2
 80053de:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d123      	bne.n	8005430 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053fe:	69b9      	ldr	r1, [r7, #24]
 8005400:	0148      	lsls	r0, r1, #5
 8005402:	69f9      	ldr	r1, [r7, #28]
 8005404:	4401      	add	r1, r0
 8005406:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800540a:	4313      	orrs	r3, r2
 800540c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	440a      	add	r2, r1
 8005424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005428:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800542c:	6113      	str	r3, [r2, #16]
 800542e:	e037      	b.n	80054a0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	699a      	ldr	r2, [r3, #24]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	4413      	add	r3, r2
 800543a:	1e5a      	subs	r2, r3, #1
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	fbb2 f3f3 	udiv	r3, r2, r3
 8005444:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	8afa      	ldrh	r2, [r7, #22]
 800544c:	fb03 f202 	mul.w	r2, r3, r2
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005460:	691a      	ldr	r2, [r3, #16]
 8005462:	8afb      	ldrh	r3, [r7, #22]
 8005464:	04d9      	lsls	r1, r3, #19
 8005466:	4b3a      	ldr	r3, [pc, #232]	; (8005550 <USB_EPStartXfer+0x49c>)
 8005468:	400b      	ands	r3, r1
 800546a:	69b9      	ldr	r1, [r7, #24]
 800546c:	0148      	lsls	r0, r1, #5
 800546e:	69f9      	ldr	r1, [r7, #28]
 8005470:	4401      	add	r1, r0
 8005472:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005476:	4313      	orrs	r3, r2
 8005478:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005490:	69b9      	ldr	r1, [r7, #24]
 8005492:	0148      	lsls	r0, r1, #5
 8005494:	69f9      	ldr	r1, [r7, #28]
 8005496:	4401      	add	r1, r0
 8005498:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800549c:	4313      	orrs	r3, r2
 800549e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80054a0:	79fb      	ldrb	r3, [r7, #7]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d10d      	bne.n	80054c2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	6919      	ldr	r1, [r3, #16]
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054be:	460a      	mov	r2, r1
 80054c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	791b      	ldrb	r3, [r3, #4]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d128      	bne.n	800551c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d110      	bne.n	80054fc <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	69fa      	ldr	r2, [r7, #28]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	e00f      	b.n	800551c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	69fa      	ldr	r2, [r7, #28]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	0151      	lsls	r1, r2, #5
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	440a      	add	r2, r1
 8005532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005536:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800553a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3720      	adds	r7, #32
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	fff80000 	.word	0xfff80000
 800554c:	e007ffff 	.word	0xe007ffff
 8005550:	1ff80000 	.word	0x1ff80000

08005554 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	4613      	mov	r3, r2
 8005560:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	2b01      	cmp	r3, #1
 8005572:	f040 80ce 	bne.w	8005712 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d132      	bne.n	80055e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558a:	691a      	ldr	r2, [r3, #16]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	0159      	lsls	r1, r3, #5
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	440b      	add	r3, r1
 8005594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005598:	4619      	mov	r1, r3
 800559a:	4b9a      	ldr	r3, [pc, #616]	; (8005804 <USB_EP0StartXfer+0x2b0>)
 800559c:	4013      	ands	r3, r2
 800559e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	0151      	lsls	r1, r2, #5
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	440a      	add	r2, r1
 80055b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	0159      	lsls	r1, r3, #5
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	440b      	add	r3, r1
 80055d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055da:	4619      	mov	r1, r3
 80055dc:	4b8a      	ldr	r3, [pc, #552]	; (8005808 <USB_EP0StartXfer+0x2b4>)
 80055de:	4013      	ands	r3, r2
 80055e0:	610b      	str	r3, [r1, #16]
 80055e2:	e04e      	b.n	8005682 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	0159      	lsls	r1, r3, #5
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	440b      	add	r3, r1
 80055fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fe:	4619      	mov	r1, r3
 8005600:	4b81      	ldr	r3, [pc, #516]	; (8005808 <USB_EP0StartXfer+0x2b4>)
 8005602:	4013      	ands	r3, r2
 8005604:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	0159      	lsls	r1, r3, #5
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	440b      	add	r3, r1
 800561c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005620:	4619      	mov	r1, r3
 8005622:	4b78      	ldr	r3, [pc, #480]	; (8005804 <USB_EP0StartXfer+0x2b0>)
 8005624:	4013      	ands	r3, r2
 8005626:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	699a      	ldr	r2, [r3, #24]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	429a      	cmp	r2, r3
 8005632:	d903      	bls.n	800563c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	0151      	lsls	r1, r2, #5
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	440a      	add	r2, r1
 8005652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005656:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800565a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005672:	6939      	ldr	r1, [r7, #16]
 8005674:	0148      	lsls	r0, r1, #5
 8005676:	6979      	ldr	r1, [r7, #20]
 8005678:	4401      	add	r1, r0
 800567a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800567e:	4313      	orrs	r3, r2
 8005680:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d11e      	bne.n	80056c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d009      	beq.n	80056a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569c:	461a      	mov	r2, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	0151      	lsls	r1, r2, #5
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	440a      	add	r2, r1
 80056ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	e097      	b.n	80057f6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 8083 	beq.w	80057f6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	2101      	movs	r1, #1
 8005702:	fa01 f303 	lsl.w	r3, r1, r3
 8005706:	6979      	ldr	r1, [r7, #20]
 8005708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800570c:	4313      	orrs	r3, r2
 800570e:	634b      	str	r3, [r1, #52]	; 0x34
 8005710:	e071      	b.n	80057f6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	0159      	lsls	r1, r3, #5
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	440b      	add	r3, r1
 8005728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572c:	4619      	mov	r1, r3
 800572e:	4b36      	ldr	r3, [pc, #216]	; (8005808 <USB_EP0StartXfer+0x2b4>)
 8005730:	4013      	ands	r3, r2
 8005732:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	0159      	lsls	r1, r3, #5
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	440b      	add	r3, r1
 800574a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574e:	4619      	mov	r1, r3
 8005750:	4b2c      	ldr	r3, [pc, #176]	; (8005804 <USB_EP0StartXfer+0x2b0>)
 8005752:	4013      	ands	r3, r2
 8005754:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	0151      	lsls	r1, r2, #5
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	440a      	add	r2, r1
 8005784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800578c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057a4:	6939      	ldr	r1, [r7, #16]
 80057a6:	0148      	lsls	r0, r1, #5
 80057a8:	6979      	ldr	r1, [r7, #20]
 80057aa:	4401      	add	r1, r0
 80057ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057b0:	4313      	orrs	r3, r2
 80057b2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80057b4:	79fb      	ldrb	r3, [r7, #7]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d10d      	bne.n	80057d6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d009      	beq.n	80057d6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	6919      	ldr	r1, [r3, #16]
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d2:	460a      	mov	r2, r1
 80057d4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	0151      	lsls	r1, r2, #5
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	440a      	add	r2, r1
 80057ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	371c      	adds	r7, #28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	e007ffff 	.word	0xe007ffff
 8005808:	fff80000 	.word	0xfff80000

0800580c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	785b      	ldrb	r3, [r3, #1]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d14a      	bne.n	80058c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800583e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005842:	f040 8086 	bne.w	8005952 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	7812      	ldrb	r2, [r2, #0]
 800585a:	0151      	lsls	r1, r2, #5
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	440a      	add	r2, r1
 8005860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005864:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005868:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	7812      	ldrb	r2, [r2, #0]
 800587e:	0151      	lsls	r1, r2, #5
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	440a      	add	r2, r1
 8005884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005888:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800588c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3301      	adds	r3, #1
 8005892:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f242 7210 	movw	r2, #10000	; 0x2710
 800589a:	4293      	cmp	r3, r2
 800589c:	d902      	bls.n	80058a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	75fb      	strb	r3, [r7, #23]
          break;
 80058a2:	e056      	b.n	8005952 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058bc:	d0e7      	beq.n	800588e <USB_EPStopXfer+0x82>
 80058be:	e048      	b.n	8005952 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058d8:	d13b      	bne.n	8005952 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	7812      	ldrb	r2, [r2, #0]
 80058ee:	0151      	lsls	r1, r2, #5
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	440a      	add	r2, r1
 80058f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	7812      	ldrb	r2, [r2, #0]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	440a      	add	r2, r1
 8005918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800591c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005920:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3301      	adds	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f242 7210 	movw	r2, #10000	; 0x2710
 800592e:	4293      	cmp	r3, r2
 8005930:	d902      	bls.n	8005938 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	75fb      	strb	r3, [r7, #23]
          break;
 8005936:	e00c      	b.n	8005952 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800594c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005950:	d0e7      	beq.n	8005922 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005952:	7dfb      	ldrb	r3, [r7, #23]
}
 8005954:	4618      	mov	r0, r3
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005960:	b480      	push	{r7}
 8005962:	b089      	sub	sp, #36	; 0x24
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	4611      	mov	r1, r2
 800596c:	461a      	mov	r2, r3
 800596e:	460b      	mov	r3, r1
 8005970:	71fb      	strb	r3, [r7, #7]
 8005972:	4613      	mov	r3, r2
 8005974:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800597e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005982:	2b00      	cmp	r3, #0
 8005984:	d123      	bne.n	80059ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005986:	88bb      	ldrh	r3, [r7, #4]
 8005988:	3303      	adds	r3, #3
 800598a:	089b      	lsrs	r3, r3, #2
 800598c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800598e:	2300      	movs	r3, #0
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	e018      	b.n	80059c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	031a      	lsls	r2, r3, #12
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	4413      	add	r3, r2
 800599c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059a0:	461a      	mov	r2, r3
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	3301      	adds	r3, #1
 80059ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	3301      	adds	r3, #1
 80059b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	3301      	adds	r3, #1
 80059b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	3301      	adds	r3, #1
 80059be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	3301      	adds	r3, #1
 80059c4:	61bb      	str	r3, [r7, #24]
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d3e2      	bcc.n	8005994 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3724      	adds	r7, #36	; 0x24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059dc:	b480      	push	{r7}
 80059de:	b08b      	sub	sp, #44	; 0x2c
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	4613      	mov	r3, r2
 80059e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80059f2:	88fb      	ldrh	r3, [r7, #6]
 80059f4:	089b      	lsrs	r3, r3, #2
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80059fa:	88fb      	ldrh	r3, [r7, #6]
 80059fc:	f003 0303 	and.w	r3, r3, #3
 8005a00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a02:	2300      	movs	r3, #0
 8005a04:	623b      	str	r3, [r7, #32]
 8005a06:	e014      	b.n	8005a32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	3301      	adds	r3, #1
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	3301      	adds	r3, #1
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	3301      	adds	r3, #1
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	623b      	str	r3, [r7, #32]
 8005a32:	6a3a      	ldr	r2, [r7, #32]
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d3e6      	bcc.n	8005a08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a3a:	8bfb      	ldrh	r3, [r7, #30]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01e      	beq.n	8005a7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f107 0310 	add.w	r3, r7, #16
 8005a50:	6812      	ldr	r2, [r2, #0]
 8005a52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	701a      	strb	r2, [r3, #0]
      i++;
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	3301      	adds	r3, #1
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005a72:	8bfb      	ldrh	r3, [r7, #30]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a78:	8bfb      	ldrh	r3, [r7, #30]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1ea      	bne.n	8005a54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	372c      	adds	r7, #44	; 0x2c
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d12c      	bne.n	8005b02 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	db12      	blt.n	8005ae0 <USB_EPSetStall+0x54>
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00f      	beq.n	8005ae0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	0151      	lsls	r1, r2, #5
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	440a      	add	r2, r1
 8005ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ada:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ade:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	0151      	lsls	r1, r2, #5
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	440a      	add	r2, r1
 8005af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005afa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	e02b      	b.n	8005b5a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	db12      	blt.n	8005b3a <USB_EPSetStall+0xae>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00f      	beq.n	8005b3a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	0151      	lsls	r1, r2, #5
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	440a      	add	r2, r1
 8005b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b38:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	0151      	lsls	r1, r2, #5
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	440a      	add	r2, r1
 8005b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d128      	bne.n	8005bd6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ba2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	791b      	ldrb	r3, [r3, #4]
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d003      	beq.n	8005bb4 <USB_EPClearStall+0x4c>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	791b      	ldrb	r3, [r3, #4]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d138      	bne.n	8005c26 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	e027      	b.n	8005c26 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bf4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	791b      	ldrb	r3, [r3, #4]
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d003      	beq.n	8005c06 <USB_EPClearStall+0x9e>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	791b      	ldrb	r3, [r3, #4]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d10f      	bne.n	8005c26 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c24:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c56:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005c68:	68f9      	ldr	r1, [r7, #12]
 8005c6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c9a:	f023 0303 	bic.w	r3, r3, #3
 8005c9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cae:	f023 0302 	bic.w	r3, r3, #2
 8005cb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b085      	sub	sp, #20
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cdc:	f023 0303 	bic.w	r3, r3, #3
 8005ce0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cf0:	f043 0302 	orr.w	r3, r3, #2
 8005cf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	0c1b      	lsrs	r3, r3, #16
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b085      	sub	sp, #20
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	b29b      	uxth	r3, r3
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b085      	sub	sp, #20
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005da2:	78fb      	ldrb	r3, [r7, #3]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b087      	sub	sp, #28
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	f003 030f 	and.w	r3, r3, #15
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfe:	01db      	lsls	r3, r3, #7
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	f003 0301 	and.w	r3, r3, #1
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
	...

08005e48 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e62:	4619      	mov	r1, r3
 8005e64:	4b09      	ldr	r3, [pc, #36]	; (8005e8c <USB_ActivateSetup+0x44>)
 8005e66:	4013      	ands	r3, r2
 8005e68:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	fffff800 	.word	0xfffff800

08005e90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	333c      	adds	r3, #60	; 0x3c
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	4a26      	ldr	r2, [pc, #152]	; (8005f48 <USB_EP0_OutStart+0xb8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d90a      	bls.n	8005eca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ec4:	d101      	bne.n	8005eca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	e037      	b.n	8005f3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ee8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef8:	f043 0318 	orr.w	r3, r3, #24
 8005efc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005f10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f12:	7afb      	ldrb	r3, [r7, #11]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d10f      	bne.n	8005f38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1e:	461a      	mov	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f32:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	4f54300a 	.word	0x4f54300a

08005f4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4a13      	ldr	r2, [pc, #76]	; (8005fb0 <USB_CoreReset+0x64>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d901      	bls.n	8005f6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e01b      	b.n	8005fa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	daf2      	bge.n	8005f58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f043 0201 	orr.w	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3301      	adds	r3, #1
 8005f86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <USB_CoreReset+0x64>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d901      	bls.n	8005f94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e006      	b.n	8005fa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d0f0      	beq.n	8005f82 <USB_CoreReset+0x36>

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	00030d40 	.word	0x00030d40

08005fb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fc0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005fc4:	f002 fca0 	bl	8008908 <USBD_static_malloc>
 8005fc8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d109      	bne.n	8005fe4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	32b0      	adds	r2, #176	; 0xb0
 8005fda:	2100      	movs	r1, #0
 8005fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e0d4      	b.n	800618e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005fe4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005fe8:	2100      	movs	r1, #0
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f002 fd08 	bl	8008a00 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	32b0      	adds	r2, #176	; 0xb0
 8005ffa:	68f9      	ldr	r1, [r7, #12]
 8005ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	32b0      	adds	r2, #176	; 0xb0
 800600a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	7c1b      	ldrb	r3, [r3, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d138      	bne.n	800608e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800601c:	4b5e      	ldr	r3, [pc, #376]	; (8006198 <USBD_CDC_Init+0x1e4>)
 800601e:	7819      	ldrb	r1, [r3, #0]
 8006020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006024:	2202      	movs	r2, #2
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f002 fb4b 	bl	80086c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800602c:	4b5a      	ldr	r3, [pc, #360]	; (8006198 <USBD_CDC_Init+0x1e4>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	f003 020f 	and.w	r2, r3, #15
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	440b      	add	r3, r1
 8006040:	3324      	adds	r3, #36	; 0x24
 8006042:	2201      	movs	r2, #1
 8006044:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006046:	4b55      	ldr	r3, [pc, #340]	; (800619c <USBD_CDC_Init+0x1e8>)
 8006048:	7819      	ldrb	r1, [r3, #0]
 800604a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800604e:	2202      	movs	r2, #2
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f002 fb36 	bl	80086c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006056:	4b51      	ldr	r3, [pc, #324]	; (800619c <USBD_CDC_Init+0x1e8>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	f003 020f 	and.w	r2, r3, #15
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	4613      	mov	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	440b      	add	r3, r1
 800606a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800606e:	2201      	movs	r2, #1
 8006070:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006072:	4b4b      	ldr	r3, [pc, #300]	; (80061a0 <USBD_CDC_Init+0x1ec>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	f003 020f 	and.w	r2, r3, #15
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	3326      	adds	r3, #38	; 0x26
 8006088:	2210      	movs	r2, #16
 800608a:	801a      	strh	r2, [r3, #0]
 800608c:	e035      	b.n	80060fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800608e:	4b42      	ldr	r3, [pc, #264]	; (8006198 <USBD_CDC_Init+0x1e4>)
 8006090:	7819      	ldrb	r1, [r3, #0]
 8006092:	2340      	movs	r3, #64	; 0x40
 8006094:	2202      	movs	r2, #2
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f002 fb13 	bl	80086c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800609c:	4b3e      	ldr	r3, [pc, #248]	; (8006198 <USBD_CDC_Init+0x1e4>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	f003 020f 	and.w	r2, r3, #15
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	440b      	add	r3, r1
 80060b0:	3324      	adds	r3, #36	; 0x24
 80060b2:	2201      	movs	r2, #1
 80060b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80060b6:	4b39      	ldr	r3, [pc, #228]	; (800619c <USBD_CDC_Init+0x1e8>)
 80060b8:	7819      	ldrb	r1, [r3, #0]
 80060ba:	2340      	movs	r3, #64	; 0x40
 80060bc:	2202      	movs	r2, #2
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f002 faff 	bl	80086c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80060c4:	4b35      	ldr	r3, [pc, #212]	; (800619c <USBD_CDC_Init+0x1e8>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	f003 020f 	and.w	r2, r3, #15
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	4613      	mov	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	440b      	add	r3, r1
 80060d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060dc:	2201      	movs	r2, #1
 80060de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80060e0:	4b2f      	ldr	r3, [pc, #188]	; (80061a0 <USBD_CDC_Init+0x1ec>)
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	f003 020f 	and.w	r2, r3, #15
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	440b      	add	r3, r1
 80060f4:	3326      	adds	r3, #38	; 0x26
 80060f6:	2210      	movs	r2, #16
 80060f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80060fa:	4b29      	ldr	r3, [pc, #164]	; (80061a0 <USBD_CDC_Init+0x1ec>)
 80060fc:	7819      	ldrb	r1, [r3, #0]
 80060fe:	2308      	movs	r3, #8
 8006100:	2203      	movs	r2, #3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f002 fadd 	bl	80086c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006108:	4b25      	ldr	r3, [pc, #148]	; (80061a0 <USBD_CDC_Init+0x1ec>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	f003 020f 	and.w	r2, r3, #15
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	4613      	mov	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	440b      	add	r3, r1
 800611c:	3324      	adds	r3, #36	; 0x24
 800611e:	2201      	movs	r2, #1
 8006120:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	33b0      	adds	r3, #176	; 0xb0
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006158:	2302      	movs	r3, #2
 800615a:	e018      	b.n	800618e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	7c1b      	ldrb	r3, [r3, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006164:	4b0d      	ldr	r3, [pc, #52]	; (800619c <USBD_CDC_Init+0x1e8>)
 8006166:	7819      	ldrb	r1, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800616e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f002 fb94 	bl	80088a0 <USBD_LL_PrepareReceive>
 8006178:	e008      	b.n	800618c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800617a:	4b08      	ldr	r3, [pc, #32]	; (800619c <USBD_CDC_Init+0x1e8>)
 800617c:	7819      	ldrb	r1, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006184:	2340      	movs	r3, #64	; 0x40
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f002 fb8a 	bl	80088a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	240000bf 	.word	0x240000bf
 800619c:	240000c0 	.word	0x240000c0
 80061a0:	240000c1 	.word	0x240000c1

080061a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80061b0:	4b3a      	ldr	r3, [pc, #232]	; (800629c <USBD_CDC_DeInit+0xf8>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	4619      	mov	r1, r3
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f002 faa9 	bl	800870e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80061bc:	4b37      	ldr	r3, [pc, #220]	; (800629c <USBD_CDC_DeInit+0xf8>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	f003 020f 	and.w	r2, r3, #15
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	4613      	mov	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	440b      	add	r3, r1
 80061d0:	3324      	adds	r3, #36	; 0x24
 80061d2:	2200      	movs	r2, #0
 80061d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80061d6:	4b32      	ldr	r3, [pc, #200]	; (80062a0 <USBD_CDC_DeInit+0xfc>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f002 fa96 	bl	800870e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80061e2:	4b2f      	ldr	r3, [pc, #188]	; (80062a0 <USBD_CDC_DeInit+0xfc>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	f003 020f 	and.w	r2, r3, #15
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	440b      	add	r3, r1
 80061f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061fa:	2200      	movs	r2, #0
 80061fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80061fe:	4b29      	ldr	r3, [pc, #164]	; (80062a4 <USBD_CDC_DeInit+0x100>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f002 fa82 	bl	800870e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800620a:	4b26      	ldr	r3, [pc, #152]	; (80062a4 <USBD_CDC_DeInit+0x100>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	f003 020f 	and.w	r2, r3, #15
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	3324      	adds	r3, #36	; 0x24
 8006220:	2200      	movs	r2, #0
 8006222:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006224:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <USBD_CDC_DeInit+0x100>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	f003 020f 	and.w	r2, r3, #15
 800622c:	6879      	ldr	r1, [r7, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	440b      	add	r3, r1
 8006238:	3326      	adds	r3, #38	; 0x26
 800623a:	2200      	movs	r2, #0
 800623c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	32b0      	adds	r2, #176	; 0xb0
 8006248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d01f      	beq.n	8006290 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	33b0      	adds	r3, #176	; 0xb0
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	32b0      	adds	r2, #176	; 0xb0
 800626e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006272:	4618      	mov	r0, r3
 8006274:	f002 fb56 	bl	8008924 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	32b0      	adds	r2, #176	; 0xb0
 8006282:	2100      	movs	r1, #0
 8006284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	240000bf 	.word	0x240000bf
 80062a0:	240000c0 	.word	0x240000c0
 80062a4:	240000c1 	.word	0x240000c1

080062a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	32b0      	adds	r2, #176	; 0xb0
 80062bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e0bf      	b.n	8006458 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d050      	beq.n	8006386 <USBD_CDC_Setup+0xde>
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	f040 80af 	bne.w	8006448 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	88db      	ldrh	r3, [r3, #6]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d03a      	beq.n	8006368 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	b25b      	sxtb	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	da1b      	bge.n	8006334 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	33b0      	adds	r3, #176	; 0xb0
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006312:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	88d2      	ldrh	r2, [r2, #6]
 8006318:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	88db      	ldrh	r3, [r3, #6]
 800631e:	2b07      	cmp	r3, #7
 8006320:	bf28      	it	cs
 8006322:	2307      	movcs	r3, #7
 8006324:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	89fa      	ldrh	r2, [r7, #14]
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 fd89 	bl	8007e44 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006332:	e090      	b.n	8006456 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	785a      	ldrb	r2, [r3, #1]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	88db      	ldrh	r3, [r3, #6]
 8006342:	2b3f      	cmp	r3, #63	; 0x3f
 8006344:	d803      	bhi.n	800634e <USBD_CDC_Setup+0xa6>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	88db      	ldrh	r3, [r3, #6]
 800634a:	b2da      	uxtb	r2, r3
 800634c:	e000      	b.n	8006350 <USBD_CDC_Setup+0xa8>
 800634e:	2240      	movs	r2, #64	; 0x40
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006356:	6939      	ldr	r1, [r7, #16]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800635e:	461a      	mov	r2, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 fd9b 	bl	8007e9c <USBD_CtlPrepareRx>
      break;
 8006366:	e076      	b.n	8006456 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	33b0      	adds	r3, #176	; 0xb0
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	7850      	ldrb	r0, [r2, #1]
 800637e:	2200      	movs	r2, #0
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	4798      	blx	r3
      break;
 8006384:	e067      	b.n	8006456 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	785b      	ldrb	r3, [r3, #1]
 800638a:	2b0b      	cmp	r3, #11
 800638c:	d851      	bhi.n	8006432 <USBD_CDC_Setup+0x18a>
 800638e:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <USBD_CDC_Setup+0xec>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	080063c5 	.word	0x080063c5
 8006398:	08006441 	.word	0x08006441
 800639c:	08006433 	.word	0x08006433
 80063a0:	08006433 	.word	0x08006433
 80063a4:	08006433 	.word	0x08006433
 80063a8:	08006433 	.word	0x08006433
 80063ac:	08006433 	.word	0x08006433
 80063b0:	08006433 	.word	0x08006433
 80063b4:	08006433 	.word	0x08006433
 80063b8:	08006433 	.word	0x08006433
 80063bc:	080063ef 	.word	0x080063ef
 80063c0:	08006419 	.word	0x08006419
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d107      	bne.n	80063e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80063d0:	f107 030a 	add.w	r3, r7, #10
 80063d4:	2202      	movs	r2, #2
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f001 fd33 	bl	8007e44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063de:	e032      	b.n	8006446 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 fcbd 	bl	8007d62 <USBD_CtlError>
            ret = USBD_FAIL;
 80063e8:	2303      	movs	r3, #3
 80063ea:	75fb      	strb	r3, [r7, #23]
          break;
 80063ec:	e02b      	b.n	8006446 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d107      	bne.n	800640a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80063fa:	f107 030d 	add.w	r3, r7, #13
 80063fe:	2201      	movs	r2, #1
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 fd1e 	bl	8007e44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006408:	e01d      	b.n	8006446 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f001 fca8 	bl	8007d62 <USBD_CtlError>
            ret = USBD_FAIL;
 8006412:	2303      	movs	r3, #3
 8006414:	75fb      	strb	r3, [r7, #23]
          break;
 8006416:	e016      	b.n	8006446 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b03      	cmp	r3, #3
 8006422:	d00f      	beq.n	8006444 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fc9b 	bl	8007d62 <USBD_CtlError>
            ret = USBD_FAIL;
 800642c:	2303      	movs	r3, #3
 800642e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006430:	e008      	b.n	8006444 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 fc94 	bl	8007d62 <USBD_CtlError>
          ret = USBD_FAIL;
 800643a:	2303      	movs	r3, #3
 800643c:	75fb      	strb	r3, [r7, #23]
          break;
 800643e:	e002      	b.n	8006446 <USBD_CDC_Setup+0x19e>
          break;
 8006440:	bf00      	nop
 8006442:	e008      	b.n	8006456 <USBD_CDC_Setup+0x1ae>
          break;
 8006444:	bf00      	nop
      }
      break;
 8006446:	e006      	b.n	8006456 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 fc89 	bl	8007d62 <USBD_CtlError>
      ret = USBD_FAIL;
 8006450:	2303      	movs	r3, #3
 8006452:	75fb      	strb	r3, [r7, #23]
      break;
 8006454:	bf00      	nop
  }

  return (uint8_t)ret;
 8006456:	7dfb      	ldrb	r3, [r7, #23]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006472:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	32b0      	adds	r2, #176	; 0xb0
 800647e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006486:	2303      	movs	r3, #3
 8006488:	e065      	b.n	8006556 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	32b0      	adds	r2, #176	; 0xb0
 8006494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006498:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	f003 020f 	and.w	r2, r3, #15
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	440b      	add	r3, r1
 80064ac:	3318      	adds	r3, #24
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d02f      	beq.n	8006514 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	f003 020f 	and.w	r2, r3, #15
 80064ba:	6879      	ldr	r1, [r7, #4]
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	3318      	adds	r3, #24
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	78fb      	ldrb	r3, [r7, #3]
 80064cc:	f003 010f 	and.w	r1, r3, #15
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	460b      	mov	r3, r1
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	440b      	add	r3, r1
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4403      	add	r3, r0
 80064dc:	3348      	adds	r3, #72	; 0x48
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80064e4:	fb01 f303 	mul.w	r3, r1, r3
 80064e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d112      	bne.n	8006514 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80064ee:	78fb      	ldrb	r3, [r7, #3]
 80064f0:	f003 020f 	and.w	r2, r3, #15
 80064f4:	6879      	ldr	r1, [r7, #4]
 80064f6:	4613      	mov	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	440b      	add	r3, r1
 8006500:	3318      	adds	r3, #24
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006506:	78f9      	ldrb	r1, [r7, #3]
 8006508:	2300      	movs	r3, #0
 800650a:	2200      	movs	r2, #0
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f002 f9a6 	bl	800885e <USBD_LL_Transmit>
 8006512:	e01f      	b.n	8006554 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2200      	movs	r2, #0
 8006518:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	33b0      	adds	r3, #176	; 0xb0
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d010      	beq.n	8006554 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	33b0      	adds	r3, #176	; 0xb0
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006550:	78fa      	ldrb	r2, [r7, #3]
 8006552:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	460b      	mov	r3, r1
 8006568:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	32b0      	adds	r2, #176	; 0xb0
 8006574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006578:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	32b0      	adds	r2, #176	; 0xb0
 8006584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800658c:	2303      	movs	r3, #3
 800658e:	e01a      	b.n	80065c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f002 f9a4 	bl	80088e2 <USBD_LL_GetRxDataSize>
 800659a:	4602      	mov	r2, r0
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	33b0      	adds	r3, #176	; 0xb0
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80065c0:	4611      	mov	r1, r2
 80065c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	32b0      	adds	r2, #176	; 0xb0
 80065e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e025      	b.n	800663c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	33b0      	adds	r3, #176	; 0xb0
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01a      	beq.n	800663a <USBD_CDC_EP0_RxReady+0x6c>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800660a:	2bff      	cmp	r3, #255	; 0xff
 800660c:	d015      	beq.n	800663a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	33b0      	adds	r3, #176	; 0xb0
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006626:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800662e:	b292      	uxth	r2, r2
 8006630:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	22ff      	movs	r2, #255	; 0xff
 8006636:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800664c:	2182      	movs	r1, #130	; 0x82
 800664e:	4818      	ldr	r0, [pc, #96]	; (80066b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006650:	f000 fd4f 	bl	80070f2 <USBD_GetEpDesc>
 8006654:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006656:	2101      	movs	r1, #1
 8006658:	4815      	ldr	r0, [pc, #84]	; (80066b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800665a:	f000 fd4a 	bl	80070f2 <USBD_GetEpDesc>
 800665e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006660:	2181      	movs	r1, #129	; 0x81
 8006662:	4813      	ldr	r0, [pc, #76]	; (80066b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006664:	f000 fd45 	bl	80070f2 <USBD_GetEpDesc>
 8006668:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2210      	movs	r2, #16
 8006674:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d006      	beq.n	800668a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	2200      	movs	r2, #0
 8006680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006684:	711a      	strb	r2, [r3, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d006      	beq.n	800669e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006698:	711a      	strb	r2, [r3, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2243      	movs	r2, #67	; 0x43
 80066a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80066a4:	4b02      	ldr	r3, [pc, #8]	; (80066b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	2400007c 	.word	0x2400007c

080066b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066bc:	2182      	movs	r1, #130	; 0x82
 80066be:	4818      	ldr	r0, [pc, #96]	; (8006720 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066c0:	f000 fd17 	bl	80070f2 <USBD_GetEpDesc>
 80066c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80066c6:	2101      	movs	r1, #1
 80066c8:	4815      	ldr	r0, [pc, #84]	; (8006720 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066ca:	f000 fd12 	bl	80070f2 <USBD_GetEpDesc>
 80066ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066d0:	2181      	movs	r1, #129	; 0x81
 80066d2:	4813      	ldr	r0, [pc, #76]	; (8006720 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066d4:	f000 fd0d 	bl	80070f2 <USBD_GetEpDesc>
 80066d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2210      	movs	r2, #16
 80066e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d006      	beq.n	80066fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	2200      	movs	r2, #0
 80066f0:	711a      	strb	r2, [r3, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f042 0202 	orr.w	r2, r2, #2
 80066f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d006      	beq.n	800670e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	711a      	strb	r2, [r3, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f042 0202 	orr.w	r2, r2, #2
 800670c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2243      	movs	r2, #67	; 0x43
 8006712:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006714:	4b02      	ldr	r3, [pc, #8]	; (8006720 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	2400007c 	.word	0x2400007c

08006724 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800672c:	2182      	movs	r1, #130	; 0x82
 800672e:	4818      	ldr	r0, [pc, #96]	; (8006790 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006730:	f000 fcdf 	bl	80070f2 <USBD_GetEpDesc>
 8006734:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006736:	2101      	movs	r1, #1
 8006738:	4815      	ldr	r0, [pc, #84]	; (8006790 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800673a:	f000 fcda 	bl	80070f2 <USBD_GetEpDesc>
 800673e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006740:	2181      	movs	r1, #129	; 0x81
 8006742:	4813      	ldr	r0, [pc, #76]	; (8006790 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006744:	f000 fcd5 	bl	80070f2 <USBD_GetEpDesc>
 8006748:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2210      	movs	r2, #16
 8006754:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d006      	beq.n	800676a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	2200      	movs	r2, #0
 8006760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006764:	711a      	strb	r2, [r3, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d006      	beq.n	800677e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006778:	711a      	strb	r2, [r3, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2243      	movs	r2, #67	; 0x43
 8006782:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006784:	4b02      	ldr	r3, [pc, #8]	; (8006790 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	2400007c 	.word	0x2400007c

08006794 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	220a      	movs	r2, #10
 80067a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80067a2:	4b03      	ldr	r3, [pc, #12]	; (80067b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	24000038 	.word	0x24000038

080067b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e009      	b.n	80067dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	33b0      	adds	r3, #176	; 0xb0
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	32b0      	adds	r2, #176	; 0xb0
 80067fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006802:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800680a:	2303      	movs	r3, #3
 800680c:	e008      	b.n	8006820 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	32b0      	adds	r2, #176	; 0xb0
 8006840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006844:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800684c:	2303      	movs	r3, #3
 800684e:	e004      	b.n	800685a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
	...

08006868 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	32b0      	adds	r2, #176	; 0xb0
 800687a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006880:	2301      	movs	r3, #1
 8006882:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	32b0      	adds	r2, #176	; 0xb0
 800688e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006896:	2303      	movs	r3, #3
 8006898:	e025      	b.n	80068e6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d11f      	bne.n	80068e4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80068ac:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <USBD_CDC_TransmitPacket+0x88>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	f003 020f 	and.w	r2, r3, #15
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4403      	add	r3, r0
 80068c6:	3318      	adds	r3, #24
 80068c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80068ca:	4b09      	ldr	r3, [pc, #36]	; (80068f0 <USBD_CDC_TransmitPacket+0x88>)
 80068cc:	7819      	ldrb	r1, [r3, #0]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 ffbf 	bl	800885e <USBD_LL_Transmit>

    ret = USBD_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	240000bf 	.word	0x240000bf

080068f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	32b0      	adds	r2, #176	; 0xb0
 8006906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	32b0      	adds	r2, #176	; 0xb0
 8006916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800691e:	2303      	movs	r3, #3
 8006920:	e018      	b.n	8006954 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	7c1b      	ldrb	r3, [r3, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10a      	bne.n	8006940 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800692a:	4b0c      	ldr	r3, [pc, #48]	; (800695c <USBD_CDC_ReceivePacket+0x68>)
 800692c:	7819      	ldrb	r1, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f001 ffb1 	bl	80088a0 <USBD_LL_PrepareReceive>
 800693e:	e008      	b.n	8006952 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006940:	4b06      	ldr	r3, [pc, #24]	; (800695c <USBD_CDC_ReceivePacket+0x68>)
 8006942:	7819      	ldrb	r1, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800694a:	2340      	movs	r3, #64	; 0x40
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 ffa7 	bl	80088a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	240000c0 	.word	0x240000c0

08006960 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	4613      	mov	r3, r2
 800696c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006974:	2303      	movs	r3, #3
 8006976:	e01f      	b.n	80069b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	79fa      	ldrb	r2, [r7, #7]
 80069aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f001 fe1b 	bl	80085e8 <USBD_LL_Init>
 80069b2:	4603      	mov	r3, r0
 80069b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e025      	b.n	8006a24 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	32ae      	adds	r2, #174	; 0xae
 80069ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00f      	beq.n	8006a14 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	32ae      	adds	r2, #174	; 0xae
 80069fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	f107 020e 	add.w	r2, r7, #14
 8006a08:	4610      	mov	r0, r2
 8006a0a:	4798      	blx	r3
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 fe29 	bl	800868c <USBD_LL_Start>
 8006a3a:	4603      	mov	r3, r0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a4c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	460b      	mov	r3, r1
 8006a64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d009      	beq.n	8006a88 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	78fa      	ldrb	r2, [r7, #3]
 8006a7e:	4611      	mov	r1, r2
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	4798      	blx	r3
 8006a84:	4603      	mov	r3, r0
 8006a86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b084      	sub	sp, #16
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	78fa      	ldrb	r2, [r7, #3]
 8006aac:	4611      	mov	r1, r2
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	4798      	blx	r3
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b084      	sub	sp, #16
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 f908 	bl	8007cee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006aec:	461a      	mov	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006afa:	f003 031f 	and.w	r3, r3, #31
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d01a      	beq.n	8006b38 <USBD_LL_SetupStage+0x72>
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d822      	bhi.n	8006b4c <USBD_LL_SetupStage+0x86>
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <USBD_LL_SetupStage+0x4a>
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d00a      	beq.n	8006b24 <USBD_LL_SetupStage+0x5e>
 8006b0e:	e01d      	b.n	8006b4c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fb5f 	bl	80071dc <USBD_StdDevReq>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	73fb      	strb	r3, [r7, #15]
      break;
 8006b22:	e020      	b.n	8006b66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fbc7 	bl	80072c0 <USBD_StdItfReq>
 8006b32:	4603      	mov	r3, r0
 8006b34:	73fb      	strb	r3, [r7, #15]
      break;
 8006b36:	e016      	b.n	8006b66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fc29 	bl	8007398 <USBD_StdEPReq>
 8006b46:	4603      	mov	r3, r0
 8006b48:	73fb      	strb	r3, [r7, #15]
      break;
 8006b4a:	e00c      	b.n	8006b66 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 fdf6 	bl	800874c <USBD_LL_StallEP>
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]
      break;
 8006b64:	bf00      	nop
  }

  return ret;
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	607a      	str	r2, [r7, #4]
 8006b7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006b82:	7afb      	ldrb	r3, [r7, #11]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d16e      	bne.n	8006c66 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	f040 8098 	bne.w	8006ccc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d913      	bls.n	8006bd0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	1ad2      	subs	r2, r2, r3
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	bf28      	it	cs
 8006bc2:	4613      	movcs	r3, r2
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6879      	ldr	r1, [r7, #4]
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f001 f984 	bl	8007ed6 <USBD_CtlContinueRx>
 8006bce:	e07d      	b.n	8006ccc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006bd6:	f003 031f 	and.w	r3, r3, #31
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d014      	beq.n	8006c08 <USBD_LL_DataOutStage+0x98>
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d81d      	bhi.n	8006c1e <USBD_LL_DataOutStage+0xae>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <USBD_LL_DataOutStage+0x7c>
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d003      	beq.n	8006bf2 <USBD_LL_DataOutStage+0x82>
 8006bea:	e018      	b.n	8006c1e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	75bb      	strb	r3, [r7, #22]
            break;
 8006bf0:	e018      	b.n	8006c24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 fa5e 	bl	80070be <USBD_CoreFindIF>
 8006c02:	4603      	mov	r3, r0
 8006c04:	75bb      	strb	r3, [r7, #22]
            break;
 8006c06:	e00d      	b.n	8006c24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	4619      	mov	r1, r3
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 fa60 	bl	80070d8 <USBD_CoreFindEP>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	75bb      	strb	r3, [r7, #22]
            break;
 8006c1c:	e002      	b.n	8006c24 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	75bb      	strb	r3, [r7, #22]
            break;
 8006c22:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006c24:	7dbb      	ldrb	r3, [r7, #22]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d119      	bne.n	8006c5e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d113      	bne.n	8006c5e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006c36:	7dba      	ldrb	r2, [r7, #22]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	32ae      	adds	r2, #174	; 0xae
 8006c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00b      	beq.n	8006c5e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006c46:	7dba      	ldrb	r2, [r7, #22]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006c4e:	7dba      	ldrb	r2, [r7, #22]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	32ae      	adds	r2, #174	; 0xae
 8006c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f001 f94a 	bl	8007ef8 <USBD_CtlSendStatus>
 8006c64:	e032      	b.n	8006ccc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006c66:	7afb      	ldrb	r3, [r7, #11]
 8006c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	4619      	mov	r1, r3
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 fa31 	bl	80070d8 <USBD_CoreFindEP>
 8006c76:	4603      	mov	r3, r0
 8006c78:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c7a:	7dbb      	ldrb	r3, [r7, #22]
 8006c7c:	2bff      	cmp	r3, #255	; 0xff
 8006c7e:	d025      	beq.n	8006ccc <USBD_LL_DataOutStage+0x15c>
 8006c80:	7dbb      	ldrb	r3, [r7, #22]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d122      	bne.n	8006ccc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d117      	bne.n	8006cc2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006c92:	7dba      	ldrb	r2, [r7, #22]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	32ae      	adds	r2, #174	; 0xae
 8006c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00f      	beq.n	8006cc2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006ca2:	7dba      	ldrb	r2, [r7, #22]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006caa:	7dba      	ldrb	r2, [r7, #22]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	32ae      	adds	r2, #174	; 0xae
 8006cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	7afa      	ldrb	r2, [r7, #11]
 8006cb8:	4611      	mov	r1, r2
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	4798      	blx	r3
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	e000      	b.n	8006cce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b086      	sub	sp, #24
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	607a      	str	r2, [r7, #4]
 8006ce2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ce4:	7afb      	ldrb	r3, [r7, #11]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d16f      	bne.n	8006dca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3314      	adds	r3, #20
 8006cee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d15a      	bne.n	8006db0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	689a      	ldr	r2, [r3, #8]
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d914      	bls.n	8006d30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	1ad2      	subs	r2, r2, r3
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	6879      	ldr	r1, [r7, #4]
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f001 f8ac 	bl	8007e7a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d22:	2300      	movs	r3, #0
 8006d24:	2200      	movs	r2, #0
 8006d26:	2100      	movs	r1, #0
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f001 fdb9 	bl	80088a0 <USBD_LL_PrepareReceive>
 8006d2e:	e03f      	b.n	8006db0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d11c      	bne.n	8006d76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d316      	bcc.n	8006d76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d20f      	bcs.n	8006d76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d56:	2200      	movs	r2, #0
 8006d58:	2100      	movs	r1, #0
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f001 f88d 	bl	8007e7a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d68:	2300      	movs	r3, #0
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f001 fd96 	bl	80088a0 <USBD_LL_PrepareReceive>
 8006d74:	e01c      	b.n	8006db0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d10f      	bne.n	8006da2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d009      	beq.n	8006da2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006da2:	2180      	movs	r1, #128	; 0x80
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f001 fcd1 	bl	800874c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f001 f8b7 	bl	8007f1e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d03a      	beq.n	8006e30 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f7ff fe42 	bl	8006a44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006dc8:	e032      	b.n	8006e30 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006dca:	7afb      	ldrb	r3, [r7, #11]
 8006dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 f97f 	bl	80070d8 <USBD_CoreFindEP>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dde:	7dfb      	ldrb	r3, [r7, #23]
 8006de0:	2bff      	cmp	r3, #255	; 0xff
 8006de2:	d025      	beq.n	8006e30 <USBD_LL_DataInStage+0x15a>
 8006de4:	7dfb      	ldrb	r3, [r7, #23]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d122      	bne.n	8006e30 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d11c      	bne.n	8006e30 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006df6:	7dfa      	ldrb	r2, [r7, #23]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	32ae      	adds	r2, #174	; 0xae
 8006dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d014      	beq.n	8006e30 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006e06:	7dfa      	ldrb	r2, [r7, #23]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006e0e:	7dfa      	ldrb	r2, [r7, #23]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	32ae      	adds	r2, #174	; 0xae
 8006e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	7afa      	ldrb	r2, [r7, #11]
 8006e1c:	4611      	mov	r1, r2
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	4798      	blx	r3
 8006e22:	4603      	mov	r3, r0
 8006e24:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006e26:	7dbb      	ldrb	r3, [r7, #22]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006e2c:	7dbb      	ldrb	r3, [r7, #22]
 8006e2e:	e000      	b.n	8006e32 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b084      	sub	sp, #16
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d014      	beq.n	8006ea0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00e      	beq.n	8006ea0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6852      	ldr	r2, [r2, #4]
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	4611      	mov	r1, r2
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ea0:	2340      	movs	r3, #64	; 0x40
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f001 fc0b 	bl	80086c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2240      	movs	r2, #64	; 0x40
 8006eb8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ebc:	2340      	movs	r3, #64	; 0x40
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	2180      	movs	r1, #128	; 0x80
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f001 fbfd 	bl	80086c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2240      	movs	r2, #64	; 0x40
 8006ed2:	621a      	str	r2, [r3, #32]

  return ret;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b083      	sub	sp, #12
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	78fa      	ldrb	r2, [r7, #3]
 8006eee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2204      	movs	r2, #4
 8006f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d106      	bne.n	8006f4c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b082      	sub	sp, #8
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d110      	bne.n	8006f90 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	32ae      	adds	r2, #174	; 0xae
 8006fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e01c      	b.n	8006ff6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d115      	bne.n	8006ff4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	32ae      	adds	r2, #174	; 0xae
 8006fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00b      	beq.n	8006ff4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	32ae      	adds	r2, #174	; 0xae
 8006fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	78fa      	ldrb	r2, [r7, #3]
 8006fee:	4611      	mov	r1, r2
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b082      	sub	sp, #8
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	460b      	mov	r3, r1
 8007008:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	32ae      	adds	r2, #174	; 0xae
 8007014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800701c:	2303      	movs	r3, #3
 800701e:	e01c      	b.n	800705a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b03      	cmp	r3, #3
 800702a:	d115      	bne.n	8007058 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	32ae      	adds	r2, #174	; 0xae
 8007036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00b      	beq.n	8007058 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	32ae      	adds	r2, #174	; 0xae
 800704a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	78fa      	ldrb	r2, [r7, #3]
 8007052:	4611      	mov	r1, r2
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00e      	beq.n	80070b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	6852      	ldr	r2, [r2, #4]
 80070a2:	b2d2      	uxtb	r2, r2
 80070a4:	4611      	mov	r1, r2
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	4798      	blx	r3
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d001      	beq.n	80070b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80070b0:	2303      	movs	r3, #3
 80070b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	460b      	mov	r3, r1
 80070c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80070ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80070e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	460b      	mov	r3, r1
 80070fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007106:	2300      	movs	r3, #0
 8007108:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	885b      	ldrh	r3, [r3, #2]
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	429a      	cmp	r2, r3
 8007118:	d920      	bls.n	800715c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	b29b      	uxth	r3, r3
 8007120:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007122:	e013      	b.n	800714c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007124:	f107 030a 	add.w	r3, r7, #10
 8007128:	4619      	mov	r1, r3
 800712a:	6978      	ldr	r0, [r7, #20]
 800712c:	f000 f81b 	bl	8007166 <USBD_GetNextDesc>
 8007130:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	785b      	ldrb	r3, [r3, #1]
 8007136:	2b05      	cmp	r3, #5
 8007138:	d108      	bne.n	800714c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	789b      	ldrb	r3, [r3, #2]
 8007142:	78fa      	ldrb	r2, [r7, #3]
 8007144:	429a      	cmp	r2, r3
 8007146:	d008      	beq.n	800715a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007148:	2300      	movs	r3, #0
 800714a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	885b      	ldrh	r3, [r3, #2]
 8007150:	b29a      	uxth	r2, r3
 8007152:	897b      	ldrh	r3, [r7, #10]
 8007154:	429a      	cmp	r2, r3
 8007156:	d8e5      	bhi.n	8007124 <USBD_GetEpDesc+0x32>
 8007158:	e000      	b.n	800715c <USBD_GetEpDesc+0x6a>
          break;
 800715a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800715c:	693b      	ldr	r3, [r7, #16]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007166:	b480      	push	{r7}
 8007168:	b085      	sub	sp, #20
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	881a      	ldrh	r2, [r3, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	4413      	add	r3, r2
 8007180:	b29a      	uxth	r2, r3
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4413      	add	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007192:	68fb      	ldr	r3, [r7, #12]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	3301      	adds	r3, #1
 80071b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80071be:	8a3b      	ldrh	r3, [r7, #16]
 80071c0:	021b      	lsls	r3, r3, #8
 80071c2:	b21a      	sxth	r2, r3
 80071c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	b21b      	sxth	r3, r3
 80071cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80071ce:	89fb      	ldrh	r3, [r7, #14]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	371c      	adds	r7, #28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071f2:	2b40      	cmp	r3, #64	; 0x40
 80071f4:	d005      	beq.n	8007202 <USBD_StdDevReq+0x26>
 80071f6:	2b40      	cmp	r3, #64	; 0x40
 80071f8:	d857      	bhi.n	80072aa <USBD_StdDevReq+0xce>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00f      	beq.n	800721e <USBD_StdDevReq+0x42>
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d153      	bne.n	80072aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	32ae      	adds	r2, #174	; 0xae
 800720c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	4798      	blx	r3
 8007218:	4603      	mov	r3, r0
 800721a:	73fb      	strb	r3, [r7, #15]
      break;
 800721c:	e04a      	b.n	80072b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	785b      	ldrb	r3, [r3, #1]
 8007222:	2b09      	cmp	r3, #9
 8007224:	d83b      	bhi.n	800729e <USBD_StdDevReq+0xc2>
 8007226:	a201      	add	r2, pc, #4	; (adr r2, 800722c <USBD_StdDevReq+0x50>)
 8007228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722c:	08007281 	.word	0x08007281
 8007230:	08007295 	.word	0x08007295
 8007234:	0800729f 	.word	0x0800729f
 8007238:	0800728b 	.word	0x0800728b
 800723c:	0800729f 	.word	0x0800729f
 8007240:	0800725f 	.word	0x0800725f
 8007244:	08007255 	.word	0x08007255
 8007248:	0800729f 	.word	0x0800729f
 800724c:	08007277 	.word	0x08007277
 8007250:	08007269 	.word	0x08007269
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fa3c 	bl	80076d4 <USBD_GetDescriptor>
          break;
 800725c:	e024      	b.n	80072a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fba1 	bl	80079a8 <USBD_SetAddress>
          break;
 8007266:	e01f      	b.n	80072a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fbe0 	bl	8007a30 <USBD_SetConfig>
 8007270:	4603      	mov	r3, r0
 8007272:	73fb      	strb	r3, [r7, #15]
          break;
 8007274:	e018      	b.n	80072a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fc83 	bl	8007b84 <USBD_GetConfig>
          break;
 800727e:	e013      	b.n	80072a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fcb4 	bl	8007bf0 <USBD_GetStatus>
          break;
 8007288:	e00e      	b.n	80072a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fce3 	bl	8007c58 <USBD_SetFeature>
          break;
 8007292:	e009      	b.n	80072a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fd07 	bl	8007caa <USBD_ClrFeature>
          break;
 800729c:	e004      	b.n	80072a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fd5e 	bl	8007d62 <USBD_CtlError>
          break;
 80072a6:	bf00      	nop
      }
      break;
 80072a8:	e004      	b.n	80072b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fd58 	bl	8007d62 <USBD_CtlError>
      break;
 80072b2:	bf00      	nop
  }

  return ret;
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop

080072c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072d6:	2b40      	cmp	r3, #64	; 0x40
 80072d8:	d005      	beq.n	80072e6 <USBD_StdItfReq+0x26>
 80072da:	2b40      	cmp	r3, #64	; 0x40
 80072dc:	d852      	bhi.n	8007384 <USBD_StdItfReq+0xc4>
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <USBD_StdItfReq+0x26>
 80072e2:	2b20      	cmp	r3, #32
 80072e4:	d14e      	bne.n	8007384 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	3b01      	subs	r3, #1
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d840      	bhi.n	8007376 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	889b      	ldrh	r3, [r3, #4]
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d836      	bhi.n	800736c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	889b      	ldrh	r3, [r3, #4]
 8007302:	b2db      	uxtb	r3, r3
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7ff fed9 	bl	80070be <USBD_CoreFindIF>
 800730c:	4603      	mov	r3, r0
 800730e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	2bff      	cmp	r3, #255	; 0xff
 8007314:	d01d      	beq.n	8007352 <USBD_StdItfReq+0x92>
 8007316:	7bbb      	ldrb	r3, [r7, #14]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d11a      	bne.n	8007352 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800731c:	7bba      	ldrb	r2, [r7, #14]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	32ae      	adds	r2, #174	; 0xae
 8007322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00f      	beq.n	800734c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800732c:	7bba      	ldrb	r2, [r7, #14]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007334:	7bba      	ldrb	r2, [r7, #14]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	32ae      	adds	r2, #174	; 0xae
 800733a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4798      	blx	r3
 8007346:	4603      	mov	r3, r0
 8007348:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800734a:	e004      	b.n	8007356 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800734c:	2303      	movs	r3, #3
 800734e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007350:	e001      	b.n	8007356 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007352:	2303      	movs	r3, #3
 8007354:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	88db      	ldrh	r3, [r3, #6]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d110      	bne.n	8007380 <USBD_StdItfReq+0xc0>
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10d      	bne.n	8007380 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fdc7 	bl	8007ef8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800736a:	e009      	b.n	8007380 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fcf7 	bl	8007d62 <USBD_CtlError>
          break;
 8007374:	e004      	b.n	8007380 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fcf2 	bl	8007d62 <USBD_CtlError>
          break;
 800737e:	e000      	b.n	8007382 <USBD_StdItfReq+0xc2>
          break;
 8007380:	bf00      	nop
      }
      break;
 8007382:	e004      	b.n	800738e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fceb 	bl	8007d62 <USBD_CtlError>
      break;
 800738c:	bf00      	nop
  }

  return ret;
 800738e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	889b      	ldrh	r3, [r3, #4]
 80073aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073b4:	2b40      	cmp	r3, #64	; 0x40
 80073b6:	d007      	beq.n	80073c8 <USBD_StdEPReq+0x30>
 80073b8:	2b40      	cmp	r3, #64	; 0x40
 80073ba:	f200 817f 	bhi.w	80076bc <USBD_StdEPReq+0x324>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d02a      	beq.n	8007418 <USBD_StdEPReq+0x80>
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	f040 817a 	bne.w	80076bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff fe83 	bl	80070d8 <USBD_CoreFindEP>
 80073d2:	4603      	mov	r3, r0
 80073d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073d6:	7b7b      	ldrb	r3, [r7, #13]
 80073d8:	2bff      	cmp	r3, #255	; 0xff
 80073da:	f000 8174 	beq.w	80076c6 <USBD_StdEPReq+0x32e>
 80073de:	7b7b      	ldrb	r3, [r7, #13]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f040 8170 	bne.w	80076c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80073e6:	7b7a      	ldrb	r2, [r7, #13]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80073ee:	7b7a      	ldrb	r2, [r7, #13]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	32ae      	adds	r2, #174	; 0xae
 80073f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 8163 	beq.w	80076c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007400:	7b7a      	ldrb	r2, [r7, #13]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	32ae      	adds	r2, #174	; 0xae
 8007406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	4798      	blx	r3
 8007412:	4603      	mov	r3, r0
 8007414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007416:	e156      	b.n	80076c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	785b      	ldrb	r3, [r3, #1]
 800741c:	2b03      	cmp	r3, #3
 800741e:	d008      	beq.n	8007432 <USBD_StdEPReq+0x9a>
 8007420:	2b03      	cmp	r3, #3
 8007422:	f300 8145 	bgt.w	80076b0 <USBD_StdEPReq+0x318>
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 809b 	beq.w	8007562 <USBD_StdEPReq+0x1ca>
 800742c:	2b01      	cmp	r3, #1
 800742e:	d03c      	beq.n	80074aa <USBD_StdEPReq+0x112>
 8007430:	e13e      	b.n	80076b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b02      	cmp	r3, #2
 800743c:	d002      	beq.n	8007444 <USBD_StdEPReq+0xac>
 800743e:	2b03      	cmp	r3, #3
 8007440:	d016      	beq.n	8007470 <USBD_StdEPReq+0xd8>
 8007442:	e02c      	b.n	800749e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00d      	beq.n	8007466 <USBD_StdEPReq+0xce>
 800744a:	7bbb      	ldrb	r3, [r7, #14]
 800744c:	2b80      	cmp	r3, #128	; 0x80
 800744e:	d00a      	beq.n	8007466 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f001 f979 	bl	800874c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800745a:	2180      	movs	r1, #128	; 0x80
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 f975 	bl	800874c <USBD_LL_StallEP>
 8007462:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007464:	e020      	b.n	80074a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fc7a 	bl	8007d62 <USBD_CtlError>
              break;
 800746e:	e01b      	b.n	80074a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	885b      	ldrh	r3, [r3, #2]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10e      	bne.n	8007496 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00b      	beq.n	8007496 <USBD_StdEPReq+0xfe>
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	2b80      	cmp	r3, #128	; 0x80
 8007482:	d008      	beq.n	8007496 <USBD_StdEPReq+0xfe>
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	88db      	ldrh	r3, [r3, #6]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d104      	bne.n	8007496 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800748c:	7bbb      	ldrb	r3, [r7, #14]
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f001 f95b 	bl	800874c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fd2e 	bl	8007ef8 <USBD_CtlSendStatus>

              break;
 800749c:	e004      	b.n	80074a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fc5e 	bl	8007d62 <USBD_CtlError>
              break;
 80074a6:	bf00      	nop
          }
          break;
 80074a8:	e107      	b.n	80076ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d002      	beq.n	80074bc <USBD_StdEPReq+0x124>
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d016      	beq.n	80074e8 <USBD_StdEPReq+0x150>
 80074ba:	e04b      	b.n	8007554 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00d      	beq.n	80074de <USBD_StdEPReq+0x146>
 80074c2:	7bbb      	ldrb	r3, [r7, #14]
 80074c4:	2b80      	cmp	r3, #128	; 0x80
 80074c6:	d00a      	beq.n	80074de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f001 f93d 	bl	800874c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074d2:	2180      	movs	r1, #128	; 0x80
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f001 f939 	bl	800874c <USBD_LL_StallEP>
 80074da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074dc:	e040      	b.n	8007560 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fc3e 	bl	8007d62 <USBD_CtlError>
              break;
 80074e6:	e03b      	b.n	8007560 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	885b      	ldrh	r3, [r3, #2]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d136      	bne.n	800755e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d004      	beq.n	8007504 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f001 f943 	bl	800878a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fcf7 	bl	8007ef8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff fde2 	bl	80070d8 <USBD_CoreFindEP>
 8007514:	4603      	mov	r3, r0
 8007516:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007518:	7b7b      	ldrb	r3, [r7, #13]
 800751a:	2bff      	cmp	r3, #255	; 0xff
 800751c:	d01f      	beq.n	800755e <USBD_StdEPReq+0x1c6>
 800751e:	7b7b      	ldrb	r3, [r7, #13]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d11c      	bne.n	800755e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007524:	7b7a      	ldrb	r2, [r7, #13]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800752c:	7b7a      	ldrb	r2, [r7, #13]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	32ae      	adds	r2, #174	; 0xae
 8007532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d010      	beq.n	800755e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800753c:	7b7a      	ldrb	r2, [r7, #13]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	32ae      	adds	r2, #174	; 0xae
 8007542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	4798      	blx	r3
 800754e:	4603      	mov	r3, r0
 8007550:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007552:	e004      	b.n	800755e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fc03 	bl	8007d62 <USBD_CtlError>
              break;
 800755c:	e000      	b.n	8007560 <USBD_StdEPReq+0x1c8>
              break;
 800755e:	bf00      	nop
          }
          break;
 8007560:	e0ab      	b.n	80076ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b02      	cmp	r3, #2
 800756c:	d002      	beq.n	8007574 <USBD_StdEPReq+0x1dc>
 800756e:	2b03      	cmp	r3, #3
 8007570:	d032      	beq.n	80075d8 <USBD_StdEPReq+0x240>
 8007572:	e097      	b.n	80076a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d007      	beq.n	800758a <USBD_StdEPReq+0x1f2>
 800757a:	7bbb      	ldrb	r3, [r7, #14]
 800757c:	2b80      	cmp	r3, #128	; 0x80
 800757e:	d004      	beq.n	800758a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fbed 	bl	8007d62 <USBD_CtlError>
                break;
 8007588:	e091      	b.n	80076ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800758a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800758e:	2b00      	cmp	r3, #0
 8007590:	da0b      	bge.n	80075aa <USBD_StdEPReq+0x212>
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007598:	4613      	mov	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	3310      	adds	r3, #16
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	4413      	add	r3, r2
 80075a6:	3304      	adds	r3, #4
 80075a8:	e00b      	b.n	80075c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075aa:	7bbb      	ldrb	r3, [r7, #14]
 80075ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075b0:	4613      	mov	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	4413      	add	r3, r2
 80075c0:	3304      	adds	r3, #4
 80075c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2200      	movs	r2, #0
 80075c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2202      	movs	r2, #2
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fc37 	bl	8007e44 <USBD_CtlSendData>
              break;
 80075d6:	e06a      	b.n	80076ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80075d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	da11      	bge.n	8007604 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075e0:	7bbb      	ldrb	r3, [r7, #14]
 80075e2:	f003 020f 	and.w	r2, r3, #15
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	4613      	mov	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	3324      	adds	r3, #36	; 0x24
 80075f4:	881b      	ldrh	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d117      	bne.n	800762a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fbb0 	bl	8007d62 <USBD_CtlError>
                  break;
 8007602:	e054      	b.n	80076ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007604:	7bbb      	ldrb	r3, [r7, #14]
 8007606:	f003 020f 	and.w	r2, r3, #15
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	440b      	add	r3, r1
 8007616:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800761a:	881b      	ldrh	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d104      	bne.n	800762a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fb9d 	bl	8007d62 <USBD_CtlError>
                  break;
 8007628:	e041      	b.n	80076ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800762a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800762e:	2b00      	cmp	r3, #0
 8007630:	da0b      	bge.n	800764a <USBD_StdEPReq+0x2b2>
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007638:	4613      	mov	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	3310      	adds	r3, #16
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	4413      	add	r3, r2
 8007646:	3304      	adds	r3, #4
 8007648:	e00b      	b.n	8007662 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800764a:	7bbb      	ldrb	r3, [r7, #14]
 800764c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007650:	4613      	mov	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	4413      	add	r3, r2
 8007660:	3304      	adds	r3, #4
 8007662:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007664:	7bbb      	ldrb	r3, [r7, #14]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <USBD_StdEPReq+0x2d8>
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	2b80      	cmp	r3, #128	; 0x80
 800766e:	d103      	bne.n	8007678 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	e00e      	b.n	8007696 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007678:	7bbb      	ldrb	r3, [r7, #14]
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 f8a3 	bl	80087c8 <USBD_LL_IsStallEP>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2201      	movs	r2, #1
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	e002      	b.n	8007696 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2202      	movs	r2, #2
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fbd1 	bl	8007e44 <USBD_CtlSendData>
              break;
 80076a2:	e004      	b.n	80076ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fb5b 	bl	8007d62 <USBD_CtlError>
              break;
 80076ac:	bf00      	nop
          }
          break;
 80076ae:	e004      	b.n	80076ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fb55 	bl	8007d62 <USBD_CtlError>
          break;
 80076b8:	bf00      	nop
      }
      break;
 80076ba:	e005      	b.n	80076c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fb4f 	bl	8007d62 <USBD_CtlError>
      break;
 80076c4:	e000      	b.n	80076c8 <USBD_StdEPReq+0x330>
      break;
 80076c6:	bf00      	nop
  }

  return ret;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	885b      	ldrh	r3, [r3, #2]
 80076ee:	0a1b      	lsrs	r3, r3, #8
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	3b01      	subs	r3, #1
 80076f4:	2b06      	cmp	r3, #6
 80076f6:	f200 8128 	bhi.w	800794a <USBD_GetDescriptor+0x276>
 80076fa:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <USBD_GetDescriptor+0x2c>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	0800771d 	.word	0x0800771d
 8007704:	08007735 	.word	0x08007735
 8007708:	08007775 	.word	0x08007775
 800770c:	0800794b 	.word	0x0800794b
 8007710:	0800794b 	.word	0x0800794b
 8007714:	080078eb 	.word	0x080078eb
 8007718:	08007917 	.word	0x08007917
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	7c12      	ldrb	r2, [r2, #16]
 8007728:	f107 0108 	add.w	r1, r7, #8
 800772c:	4610      	mov	r0, r2
 800772e:	4798      	blx	r3
 8007730:	60f8      	str	r0, [r7, #12]
      break;
 8007732:	e112      	b.n	800795a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	7c1b      	ldrb	r3, [r3, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10d      	bne.n	8007758 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007744:	f107 0208 	add.w	r2, r7, #8
 8007748:	4610      	mov	r0, r2
 800774a:	4798      	blx	r3
 800774c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3301      	adds	r3, #1
 8007752:	2202      	movs	r2, #2
 8007754:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007756:	e100      	b.n	800795a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	f107 0208 	add.w	r2, r7, #8
 8007764:	4610      	mov	r0, r2
 8007766:	4798      	blx	r3
 8007768:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3301      	adds	r3, #1
 800776e:	2202      	movs	r2, #2
 8007770:	701a      	strb	r2, [r3, #0]
      break;
 8007772:	e0f2      	b.n	800795a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	885b      	ldrh	r3, [r3, #2]
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b05      	cmp	r3, #5
 800777c:	f200 80ac 	bhi.w	80078d8 <USBD_GetDescriptor+0x204>
 8007780:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <USBD_GetDescriptor+0xb4>)
 8007782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007786:	bf00      	nop
 8007788:	080077a1 	.word	0x080077a1
 800778c:	080077d5 	.word	0x080077d5
 8007790:	08007809 	.word	0x08007809
 8007794:	0800783d 	.word	0x0800783d
 8007798:	08007871 	.word	0x08007871
 800779c:	080078a5 	.word	0x080078a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00b      	beq.n	80077c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	7c12      	ldrb	r2, [r2, #16]
 80077b8:	f107 0108 	add.w	r1, r7, #8
 80077bc:	4610      	mov	r0, r2
 80077be:	4798      	blx	r3
 80077c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077c2:	e091      	b.n	80078e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 facb 	bl	8007d62 <USBD_CtlError>
            err++;
 80077cc:	7afb      	ldrb	r3, [r7, #11]
 80077ce:	3301      	adds	r3, #1
 80077d0:	72fb      	strb	r3, [r7, #11]
          break;
 80077d2:	e089      	b.n	80078e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00b      	beq.n	80077f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	7c12      	ldrb	r2, [r2, #16]
 80077ec:	f107 0108 	add.w	r1, r7, #8
 80077f0:	4610      	mov	r0, r2
 80077f2:	4798      	blx	r3
 80077f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077f6:	e077      	b.n	80078e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fab1 	bl	8007d62 <USBD_CtlError>
            err++;
 8007800:	7afb      	ldrb	r3, [r7, #11]
 8007802:	3301      	adds	r3, #1
 8007804:	72fb      	strb	r3, [r7, #11]
          break;
 8007806:	e06f      	b.n	80078e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00b      	beq.n	800782c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	7c12      	ldrb	r2, [r2, #16]
 8007820:	f107 0108 	add.w	r1, r7, #8
 8007824:	4610      	mov	r0, r2
 8007826:	4798      	blx	r3
 8007828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800782a:	e05d      	b.n	80078e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fa97 	bl	8007d62 <USBD_CtlError>
            err++;
 8007834:	7afb      	ldrb	r3, [r7, #11]
 8007836:	3301      	adds	r3, #1
 8007838:	72fb      	strb	r3, [r7, #11]
          break;
 800783a:	e055      	b.n	80078e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00b      	beq.n	8007860 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	7c12      	ldrb	r2, [r2, #16]
 8007854:	f107 0108 	add.w	r1, r7, #8
 8007858:	4610      	mov	r0, r2
 800785a:	4798      	blx	r3
 800785c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800785e:	e043      	b.n	80078e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fa7d 	bl	8007d62 <USBD_CtlError>
            err++;
 8007868:	7afb      	ldrb	r3, [r7, #11]
 800786a:	3301      	adds	r3, #1
 800786c:	72fb      	strb	r3, [r7, #11]
          break;
 800786e:	e03b      	b.n	80078e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00b      	beq.n	8007894 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	7c12      	ldrb	r2, [r2, #16]
 8007888:	f107 0108 	add.w	r1, r7, #8
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
 8007890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007892:	e029      	b.n	80078e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fa63 	bl	8007d62 <USBD_CtlError>
            err++;
 800789c:	7afb      	ldrb	r3, [r7, #11]
 800789e:	3301      	adds	r3, #1
 80078a0:	72fb      	strb	r3, [r7, #11]
          break;
 80078a2:	e021      	b.n	80078e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00b      	beq.n	80078c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	7c12      	ldrb	r2, [r2, #16]
 80078bc:	f107 0108 	add.w	r1, r7, #8
 80078c0:	4610      	mov	r0, r2
 80078c2:	4798      	blx	r3
 80078c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078c6:	e00f      	b.n	80078e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fa49 	bl	8007d62 <USBD_CtlError>
            err++;
 80078d0:	7afb      	ldrb	r3, [r7, #11]
 80078d2:	3301      	adds	r3, #1
 80078d4:	72fb      	strb	r3, [r7, #11]
          break;
 80078d6:	e007      	b.n	80078e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fa41 	bl	8007d62 <USBD_CtlError>
          err++;
 80078e0:	7afb      	ldrb	r3, [r7, #11]
 80078e2:	3301      	adds	r3, #1
 80078e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80078e6:	bf00      	nop
      }
      break;
 80078e8:	e037      	b.n	800795a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	7c1b      	ldrb	r3, [r3, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d109      	bne.n	8007906 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fa:	f107 0208 	add.w	r2, r7, #8
 80078fe:	4610      	mov	r0, r2
 8007900:	4798      	blx	r3
 8007902:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007904:	e029      	b.n	800795a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fa2a 	bl	8007d62 <USBD_CtlError>
        err++;
 800790e:	7afb      	ldrb	r3, [r7, #11]
 8007910:	3301      	adds	r3, #1
 8007912:	72fb      	strb	r3, [r7, #11]
      break;
 8007914:	e021      	b.n	800795a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	7c1b      	ldrb	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10d      	bne.n	800793a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007926:	f107 0208 	add.w	r2, r7, #8
 800792a:	4610      	mov	r0, r2
 800792c:	4798      	blx	r3
 800792e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3301      	adds	r3, #1
 8007934:	2207      	movs	r2, #7
 8007936:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007938:	e00f      	b.n	800795a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fa10 	bl	8007d62 <USBD_CtlError>
        err++;
 8007942:	7afb      	ldrb	r3, [r7, #11]
 8007944:	3301      	adds	r3, #1
 8007946:	72fb      	strb	r3, [r7, #11]
      break;
 8007948:	e007      	b.n	800795a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fa08 	bl	8007d62 <USBD_CtlError>
      err++;
 8007952:	7afb      	ldrb	r3, [r7, #11]
 8007954:	3301      	adds	r3, #1
 8007956:	72fb      	strb	r3, [r7, #11]
      break;
 8007958:	bf00      	nop
  }

  if (err != 0U)
 800795a:	7afb      	ldrb	r3, [r7, #11]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d11e      	bne.n	800799e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	88db      	ldrh	r3, [r3, #6]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d016      	beq.n	8007996 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007968:	893b      	ldrh	r3, [r7, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00e      	beq.n	800798c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	88da      	ldrh	r2, [r3, #6]
 8007972:	893b      	ldrh	r3, [r7, #8]
 8007974:	4293      	cmp	r3, r2
 8007976:	bf28      	it	cs
 8007978:	4613      	movcs	r3, r2
 800797a:	b29b      	uxth	r3, r3
 800797c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800797e:	893b      	ldrh	r3, [r7, #8]
 8007980:	461a      	mov	r2, r3
 8007982:	68f9      	ldr	r1, [r7, #12]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fa5d 	bl	8007e44 <USBD_CtlSendData>
 800798a:	e009      	b.n	80079a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f9e7 	bl	8007d62 <USBD_CtlError>
 8007994:	e004      	b.n	80079a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 faae 	bl	8007ef8 <USBD_CtlSendStatus>
 800799c:	e000      	b.n	80079a0 <USBD_GetDescriptor+0x2cc>
    return;
 800799e:	bf00      	nop
  }
}
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop

080079a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	889b      	ldrh	r3, [r3, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d131      	bne.n	8007a1e <USBD_SetAddress+0x76>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	88db      	ldrh	r3, [r3, #6]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d12d      	bne.n	8007a1e <USBD_SetAddress+0x76>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	885b      	ldrh	r3, [r3, #2]
 80079c6:	2b7f      	cmp	r3, #127	; 0x7f
 80079c8:	d829      	bhi.n	8007a1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	885b      	ldrh	r3, [r3, #2]
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d104      	bne.n	80079ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f9bc 	bl	8007d62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ea:	e01d      	b.n	8007a28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	7bfa      	ldrb	r2, [r7, #15]
 80079f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 ff11 	bl	8008820 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fa7a 	bl	8007ef8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d004      	beq.n	8007a14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a12:	e009      	b.n	8007a28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a1c:	e004      	b.n	8007a28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f99e 	bl	8007d62 <USBD_CtlError>
  }
}
 8007a26:	bf00      	nop
 8007a28:	bf00      	nop
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	885b      	ldrh	r3, [r3, #2]
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	4b4e      	ldr	r3, [pc, #312]	; (8007b80 <USBD_SetConfig+0x150>)
 8007a46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a48:	4b4d      	ldr	r3, [pc, #308]	; (8007b80 <USBD_SetConfig+0x150>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d905      	bls.n	8007a5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f985 	bl	8007d62 <USBD_CtlError>
    return USBD_FAIL;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e08c      	b.n	8007b76 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d002      	beq.n	8007a6e <USBD_SetConfig+0x3e>
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	d029      	beq.n	8007ac0 <USBD_SetConfig+0x90>
 8007a6c:	e075      	b.n	8007b5a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a6e:	4b44      	ldr	r3, [pc, #272]	; (8007b80 <USBD_SetConfig+0x150>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d020      	beq.n	8007ab8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007a76:	4b42      	ldr	r3, [pc, #264]	; (8007b80 <USBD_SetConfig+0x150>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a80:	4b3f      	ldr	r3, [pc, #252]	; (8007b80 <USBD_SetConfig+0x150>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7fe ffe7 	bl	8006a5a <USBD_SetClassConfig>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d008      	beq.n	8007aa8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f962 	bl	8007d62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007aa6:	e065      	b.n	8007b74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fa25 	bl	8007ef8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2203      	movs	r2, #3
 8007ab2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ab6:	e05d      	b.n	8007b74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fa1d 	bl	8007ef8 <USBD_CtlSendStatus>
      break;
 8007abe:	e059      	b.n	8007b74 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ac0:	4b2f      	ldr	r3, [pc, #188]	; (8007b80 <USBD_SetConfig+0x150>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d112      	bne.n	8007aee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2202      	movs	r2, #2
 8007acc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ad0:	4b2b      	ldr	r3, [pc, #172]	; (8007b80 <USBD_SetConfig+0x150>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ada:	4b29      	ldr	r3, [pc, #164]	; (8007b80 <USBD_SetConfig+0x150>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7fe ffd6 	bl	8006a92 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa06 	bl	8007ef8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007aec:	e042      	b.n	8007b74 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007aee:	4b24      	ldr	r3, [pc, #144]	; (8007b80 <USBD_SetConfig+0x150>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d02a      	beq.n	8007b52 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7fe ffc4 	bl	8006a92 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b0a:	4b1d      	ldr	r3, [pc, #116]	; (8007b80 <USBD_SetConfig+0x150>)
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b14:	4b1a      	ldr	r3, [pc, #104]	; (8007b80 <USBD_SetConfig+0x150>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7fe ff9d 	bl	8006a5a <USBD_SetClassConfig>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00f      	beq.n	8007b4a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f918 	bl	8007d62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7fe ffa9 	bl	8006a92 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b48:	e014      	b.n	8007b74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f9d4 	bl	8007ef8 <USBD_CtlSendStatus>
      break;
 8007b50:	e010      	b.n	8007b74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f9d0 	bl	8007ef8 <USBD_CtlSendStatus>
      break;
 8007b58:	e00c      	b.n	8007b74 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f900 	bl	8007d62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b62:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <USBD_SetConfig+0x150>)
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7fe ff92 	bl	8006a92 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	73fb      	strb	r3, [r7, #15]
      break;
 8007b72:	bf00      	nop
  }

  return ret;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	24001604 	.word	0x24001604

08007b84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	88db      	ldrh	r3, [r3, #6]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d004      	beq.n	8007ba0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f8e2 	bl	8007d62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b9e:	e023      	b.n	8007be8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	dc02      	bgt.n	8007bb2 <USBD_GetConfig+0x2e>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dc03      	bgt.n	8007bb8 <USBD_GetConfig+0x34>
 8007bb0:	e015      	b.n	8007bde <USBD_GetConfig+0x5a>
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d00b      	beq.n	8007bce <USBD_GetConfig+0x4a>
 8007bb6:	e012      	b.n	8007bde <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f93c 	bl	8007e44 <USBD_CtlSendData>
        break;
 8007bcc:	e00c      	b.n	8007be8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f934 	bl	8007e44 <USBD_CtlSendData>
        break;
 8007bdc:	e004      	b.n	8007be8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f8be 	bl	8007d62 <USBD_CtlError>
        break;
 8007be6:	bf00      	nop
}
 8007be8:	bf00      	nop
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d81e      	bhi.n	8007c46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	88db      	ldrh	r3, [r3, #6]
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d004      	beq.n	8007c1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f8a5 	bl	8007d62 <USBD_CtlError>
        break;
 8007c18:	e01a      	b.n	8007c50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d005      	beq.n	8007c36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f043 0202 	orr.w	r2, r3, #2
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	330c      	adds	r3, #12
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f900 	bl	8007e44 <USBD_CtlSendData>
      break;
 8007c44:	e004      	b.n	8007c50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f88a 	bl	8007d62 <USBD_CtlError>
      break;
 8007c4e:	bf00      	nop
  }
}
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	885b      	ldrh	r3, [r3, #2]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d107      	bne.n	8007c7a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f940 	bl	8007ef8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007c78:	e013      	b.n	8007ca2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	885b      	ldrh	r3, [r3, #2]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d10b      	bne.n	8007c9a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	889b      	ldrh	r3, [r3, #4]
 8007c86:	0a1b      	lsrs	r3, r3, #8
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f930 	bl	8007ef8 <USBD_CtlSendStatus>
}
 8007c98:	e003      	b.n	8007ca2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f860 	bl	8007d62 <USBD_CtlError>
}
 8007ca2:	bf00      	nop
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d80b      	bhi.n	8007cda <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	885b      	ldrh	r3, [r3, #2]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d10c      	bne.n	8007ce4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f910 	bl	8007ef8 <USBD_CtlSendStatus>
      }
      break;
 8007cd8:	e004      	b.n	8007ce4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f840 	bl	8007d62 <USBD_CtlError>
      break;
 8007ce2:	e000      	b.n	8007ce6 <USBD_ClrFeature+0x3c>
      break;
 8007ce4:	bf00      	nop
  }
}
 8007ce6:	bf00      	nop
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	781a      	ldrb	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3301      	adds	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	781a      	ldrb	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	3301      	adds	r3, #1
 8007d16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f7ff fa41 	bl	80071a0 <SWAPBYTE>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	461a      	mov	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f7ff fa34 	bl	80071a0 <SWAPBYTE>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	3301      	adds	r3, #1
 8007d44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7ff fa27 	bl	80071a0 <SWAPBYTE>
 8007d52:	4603      	mov	r3, r0
 8007d54:	461a      	mov	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	80da      	strh	r2, [r3, #6]
}
 8007d5a:	bf00      	nop
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d6c:	2180      	movs	r1, #128	; 0x80
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fcec 	bl	800874c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d74:	2100      	movs	r1, #0
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fce8 	bl	800874c <USBD_LL_StallEP>
}
 8007d7c:	bf00      	nop
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d90:	2300      	movs	r3, #0
 8007d92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d036      	beq.n	8007e08 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007d9e:	6938      	ldr	r0, [r7, #16]
 8007da0:	f000 f836 	bl	8007e10 <USBD_GetLen>
 8007da4:	4603      	mov	r3, r0
 8007da6:	3301      	adds	r3, #1
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	005b      	lsls	r3, r3, #1
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	4413      	add	r3, r2
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	7812      	ldrb	r2, [r2, #0]
 8007dbc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	4413      	add	r3, r2
 8007dca:	2203      	movs	r2, #3
 8007dcc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007dce:	7dfb      	ldrb	r3, [r7, #23]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007dd4:	e013      	b.n	8007dfe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	4413      	add	r3, r2
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	7812      	ldrb	r2, [r2, #0]
 8007de0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	3301      	adds	r3, #1
 8007de6:	613b      	str	r3, [r7, #16]
    idx++;
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	3301      	adds	r3, #1
 8007dec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	4413      	add	r3, r2
 8007df4:	2200      	movs	r2, #0
 8007df6:	701a      	strb	r2, [r3, #0]
    idx++;
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e7      	bne.n	8007dd6 <USBD_GetString+0x52>
 8007e06:	e000      	b.n	8007e0a <USBD_GetString+0x86>
    return;
 8007e08:	bf00      	nop
  }
}
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e20:	e005      	b.n	8007e2e <USBD_GetLen+0x1e>
  {
    len++;
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
 8007e24:	3301      	adds	r3, #1
 8007e26:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1f5      	bne.n	8007e22 <USBD_GetLen+0x12>
  }

  return len;
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2202      	movs	r2, #2
 8007e54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	2100      	movs	r1, #0
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f000 fcf7 	bl	800885e <USBD_LL_Transmit>

  return USBD_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	60f8      	str	r0, [r7, #12]
 8007e82:	60b9      	str	r1, [r7, #8]
 8007e84:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 fce6 	bl	800885e <USBD_LL_Transmit>

  return USBD_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2203      	movs	r2, #3
 8007eac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f000 fcea 	bl	80088a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 fcd9 	bl	80088a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2204      	movs	r2, #4
 8007f04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f08:	2300      	movs	r3, #0
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fca5 	bl	800885e <USBD_LL_Transmit>

  return USBD_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2205      	movs	r2, #5
 8007f2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f2e:	2300      	movs	r3, #0
 8007f30:	2200      	movs	r2, #0
 8007f32:	2100      	movs	r1, #0
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fcb3 	bl	80088a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8007f48:	2201      	movs	r2, #1
 8007f4a:	4913      	ldr	r1, [pc, #76]	; (8007f98 <MX_USB_DEVICE_Init+0x54>)
 8007f4c:	4813      	ldr	r0, [pc, #76]	; (8007f9c <MX_USB_DEVICE_Init+0x58>)
 8007f4e:	f7fe fd07 	bl	8006960 <USBD_Init>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f58:	f7f8 fbe2 	bl	8000720 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8007f5c:	4910      	ldr	r1, [pc, #64]	; (8007fa0 <MX_USB_DEVICE_Init+0x5c>)
 8007f5e:	480f      	ldr	r0, [pc, #60]	; (8007f9c <MX_USB_DEVICE_Init+0x58>)
 8007f60:	f7fe fd2e 	bl	80069c0 <USBD_RegisterClass>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f6a:	f7f8 fbd9 	bl	8000720 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8007f6e:	490d      	ldr	r1, [pc, #52]	; (8007fa4 <MX_USB_DEVICE_Init+0x60>)
 8007f70:	480a      	ldr	r0, [pc, #40]	; (8007f9c <MX_USB_DEVICE_Init+0x58>)
 8007f72:	f7fe fc1f 	bl	80067b4 <USBD_CDC_RegisterInterface>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f7c:	f7f8 fbd0 	bl	8000720 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8007f80:	4806      	ldr	r0, [pc, #24]	; (8007f9c <MX_USB_DEVICE_Init+0x58>)
 8007f82:	f7fe fd53 	bl	8006a2c <USBD_Start>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f8c:	f7f8 fbc8 	bl	8000720 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8007f90:	f7fa fc32 	bl	80027f8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f94:	bf00      	nop
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	240000d8 	.word	0x240000d8
 8007f9c:	24001608 	.word	0x24001608
 8007fa0:	24000044 	.word	0x24000044
 8007fa4:	240000c4 	.word	0x240000c4

08007fa8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8007fac:	2200      	movs	r2, #0
 8007fae:	4905      	ldr	r1, [pc, #20]	; (8007fc4 <CDC_Init_HS+0x1c>)
 8007fb0:	4805      	ldr	r0, [pc, #20]	; (8007fc8 <CDC_Init_HS+0x20>)
 8007fb2:	f7fe fc19 	bl	80067e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8007fb6:	4905      	ldr	r1, [pc, #20]	; (8007fcc <CDC_Init_HS+0x24>)
 8007fb8:	4803      	ldr	r0, [pc, #12]	; (8007fc8 <CDC_Init_HS+0x20>)
 8007fba:	f7fe fc37 	bl	800682c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007fbe:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	240020e4 	.word	0x240020e4
 8007fc8:	24001608 	.word	0x24001608
 8007fcc:	240018e4 	.word	0x240018e4

08007fd0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8007fd4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	6039      	str	r1, [r7, #0]
 8007fea:	71fb      	strb	r3, [r7, #7]
 8007fec:	4613      	mov	r3, r2
 8007fee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8007ff0:	79fb      	ldrb	r3, [r7, #7]
 8007ff2:	2b23      	cmp	r3, #35	; 0x23
 8007ff4:	d84a      	bhi.n	800808c <CDC_Control_HS+0xac>
 8007ff6:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <CDC_Control_HS+0x1c>)
 8007ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffc:	0800808d 	.word	0x0800808d
 8008000:	0800808d 	.word	0x0800808d
 8008004:	0800808d 	.word	0x0800808d
 8008008:	0800808d 	.word	0x0800808d
 800800c:	0800808d 	.word	0x0800808d
 8008010:	0800808d 	.word	0x0800808d
 8008014:	0800808d 	.word	0x0800808d
 8008018:	0800808d 	.word	0x0800808d
 800801c:	0800808d 	.word	0x0800808d
 8008020:	0800808d 	.word	0x0800808d
 8008024:	0800808d 	.word	0x0800808d
 8008028:	0800808d 	.word	0x0800808d
 800802c:	0800808d 	.word	0x0800808d
 8008030:	0800808d 	.word	0x0800808d
 8008034:	0800808d 	.word	0x0800808d
 8008038:	0800808d 	.word	0x0800808d
 800803c:	0800808d 	.word	0x0800808d
 8008040:	0800808d 	.word	0x0800808d
 8008044:	0800808d 	.word	0x0800808d
 8008048:	0800808d 	.word	0x0800808d
 800804c:	0800808d 	.word	0x0800808d
 8008050:	0800808d 	.word	0x0800808d
 8008054:	0800808d 	.word	0x0800808d
 8008058:	0800808d 	.word	0x0800808d
 800805c:	0800808d 	.word	0x0800808d
 8008060:	0800808d 	.word	0x0800808d
 8008064:	0800808d 	.word	0x0800808d
 8008068:	0800808d 	.word	0x0800808d
 800806c:	0800808d 	.word	0x0800808d
 8008070:	0800808d 	.word	0x0800808d
 8008074:	0800808d 	.word	0x0800808d
 8008078:	0800808d 	.word	0x0800808d
 800807c:	0800808d 	.word	0x0800808d
 8008080:	0800808d 	.word	0x0800808d
 8008084:	0800808d 	.word	0x0800808d
 8008088:	0800808d 	.word	0x0800808d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800808c:	bf00      	nop
  }

  return (USBD_OK);
 800808e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8008090:	4618      	mov	r0, r3
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	480f      	ldr	r0, [pc, #60]	; (80080e8 <CDC_Receive_HS+0x4c>)
 80080aa:	f7fe fbbf 	bl	800682c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80080ae:	480e      	ldr	r0, [pc, #56]	; (80080e8 <CDC_Receive_HS+0x4c>)
 80080b0:	f7fe fc20 	bl	80068f4 <USBD_CDC_ReceivePacket>

  memset (bufferVCP_Rx, '\0', 64);  // clear the buffer
 80080b4:	2240      	movs	r2, #64	; 0x40
 80080b6:	2100      	movs	r1, #0
 80080b8:	480c      	ldr	r0, [pc, #48]	; (80080ec <CDC_Receive_HS+0x50>)
 80080ba:	f000 fca1 	bl	8008a00 <memset>
  uint8_t len = (uint8_t)*Len;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	73fb      	strb	r3, [r7, #15]
  memcpy(bufferVCP_Rx, Buf, len);  // copy the data to the buffer
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
 80080c6:	461a      	mov	r2, r3
 80080c8:	6879      	ldr	r1, [r7, #4]
 80080ca:	4808      	ldr	r0, [pc, #32]	; (80080ec <CDC_Receive_HS+0x50>)
 80080cc:	f000 fc8a 	bl	80089e4 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
 80080d2:	461a      	mov	r2, r3
 80080d4:	2100      	movs	r1, #0
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fc92 	bl	8008a00 <memset>

  return (USBD_OK);
 80080dc:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	24001608 	.word	0x24001608
 80080ec:	24001598 	.word	0x24001598

080080f0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	460b      	mov	r3, r1
 80080fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8008100:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <CDC_Transmit_HS+0x48>)
 8008102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008106:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8008112:	2301      	movs	r3, #1
 8008114:	e00b      	b.n	800812e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8008116:	887b      	ldrh	r3, [r7, #2]
 8008118:	461a      	mov	r2, r3
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	4806      	ldr	r0, [pc, #24]	; (8008138 <CDC_Transmit_HS+0x48>)
 800811e:	f7fe fb63 	bl	80067e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8008122:	4805      	ldr	r0, [pc, #20]	; (8008138 <CDC_Transmit_HS+0x48>)
 8008124:	f7fe fba0 	bl	8006868 <USBD_CDC_TransmitPacket>
 8008128:	4603      	mov	r3, r0
 800812a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800812c:	7bfb      	ldrb	r3, [r7, #15]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	24001608 	.word	0x24001608

0800813c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	4613      	mov	r3, r2
 8008148:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800814e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008152:	4618      	mov	r0, r3
 8008154:	371c      	adds	r7, #28
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
	...

08008160 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	4603      	mov	r3, r0
 8008168:	6039      	str	r1, [r7, #0]
 800816a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2212      	movs	r2, #18
 8008170:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8008172:	4b03      	ldr	r3, [pc, #12]	; (8008180 <USBD_HS_DeviceDescriptor+0x20>)
}
 8008174:	4618      	mov	r0, r3
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	240000f4 	.word	0x240000f4

08008184 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	4603      	mov	r3, r0
 800818c:	6039      	str	r1, [r7, #0]
 800818e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2204      	movs	r2, #4
 8008194:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008196:	4b03      	ldr	r3, [pc, #12]	; (80081a4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8008198:	4618      	mov	r0, r3
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	24000108 	.word	0x24000108

080081a8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	4603      	mov	r3, r0
 80081b0:	6039      	str	r1, [r7, #0]
 80081b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081b4:	79fb      	ldrb	r3, [r7, #7]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d105      	bne.n	80081c6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	4907      	ldr	r1, [pc, #28]	; (80081dc <USBD_HS_ProductStrDescriptor+0x34>)
 80081be:	4808      	ldr	r0, [pc, #32]	; (80081e0 <USBD_HS_ProductStrDescriptor+0x38>)
 80081c0:	f7ff fde0 	bl	8007d84 <USBD_GetString>
 80081c4:	e004      	b.n	80081d0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	4904      	ldr	r1, [pc, #16]	; (80081dc <USBD_HS_ProductStrDescriptor+0x34>)
 80081ca:	4805      	ldr	r0, [pc, #20]	; (80081e0 <USBD_HS_ProductStrDescriptor+0x38>)
 80081cc:	f7ff fdda 	bl	8007d84 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081d0:	4b02      	ldr	r3, [pc, #8]	; (80081dc <USBD_HS_ProductStrDescriptor+0x34>)
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	240028e4 	.word	0x240028e4
 80081e0:	08009e90 	.word	0x08009e90

080081e4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	4603      	mov	r3, r0
 80081ec:	6039      	str	r1, [r7, #0]
 80081ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	4904      	ldr	r1, [pc, #16]	; (8008204 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80081f4:	4804      	ldr	r0, [pc, #16]	; (8008208 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80081f6:	f7ff fdc5 	bl	8007d84 <USBD_GetString>
  return USBD_StrDesc;
 80081fa:	4b02      	ldr	r3, [pc, #8]	; (8008204 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	240028e4 	.word	0x240028e4
 8008208:	08009ea8 	.word	0x08009ea8

0800820c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	6039      	str	r1, [r7, #0]
 8008216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	221a      	movs	r2, #26
 800821c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800821e:	f000 f843 	bl	80082a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008222:	4b02      	ldr	r3, [pc, #8]	; (800822c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	2400010c 	.word	0x2400010c

08008230 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	6039      	str	r1, [r7, #0]
 800823a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800823c:	79fb      	ldrb	r3, [r7, #7]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d105      	bne.n	800824e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	4907      	ldr	r1, [pc, #28]	; (8008264 <USBD_HS_ConfigStrDescriptor+0x34>)
 8008246:	4808      	ldr	r0, [pc, #32]	; (8008268 <USBD_HS_ConfigStrDescriptor+0x38>)
 8008248:	f7ff fd9c 	bl	8007d84 <USBD_GetString>
 800824c:	e004      	b.n	8008258 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	4904      	ldr	r1, [pc, #16]	; (8008264 <USBD_HS_ConfigStrDescriptor+0x34>)
 8008252:	4805      	ldr	r0, [pc, #20]	; (8008268 <USBD_HS_ConfigStrDescriptor+0x38>)
 8008254:	f7ff fd96 	bl	8007d84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008258:	4b02      	ldr	r3, [pc, #8]	; (8008264 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	240028e4 	.word	0x240028e4
 8008268:	08009ebc 	.word	0x08009ebc

0800826c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	4603      	mov	r3, r0
 8008274:	6039      	str	r1, [r7, #0]
 8008276:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008278:	79fb      	ldrb	r3, [r7, #7]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d105      	bne.n	800828a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	4907      	ldr	r1, [pc, #28]	; (80082a0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8008282:	4808      	ldr	r0, [pc, #32]	; (80082a4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008284:	f7ff fd7e 	bl	8007d84 <USBD_GetString>
 8008288:	e004      	b.n	8008294 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	4904      	ldr	r1, [pc, #16]	; (80082a0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800828e:	4805      	ldr	r0, [pc, #20]	; (80082a4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008290:	f7ff fd78 	bl	8007d84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008294:	4b02      	ldr	r3, [pc, #8]	; (80082a0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8008296:	4618      	mov	r0, r3
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	240028e4 	.word	0x240028e4
 80082a4:	08009ec8 	.word	0x08009ec8

080082a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80082ae:	4b0f      	ldr	r3, [pc, #60]	; (80082ec <Get_SerialNum+0x44>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80082b4:	4b0e      	ldr	r3, [pc, #56]	; (80082f0 <Get_SerialNum+0x48>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80082ba:	4b0e      	ldr	r3, [pc, #56]	; (80082f4 <Get_SerialNum+0x4c>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4413      	add	r3, r2
 80082c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d009      	beq.n	80082e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80082ce:	2208      	movs	r2, #8
 80082d0:	4909      	ldr	r1, [pc, #36]	; (80082f8 <Get_SerialNum+0x50>)
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 f814 	bl	8008300 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80082d8:	2204      	movs	r2, #4
 80082da:	4908      	ldr	r1, [pc, #32]	; (80082fc <Get_SerialNum+0x54>)
 80082dc:	68b8      	ldr	r0, [r7, #8]
 80082de:	f000 f80f 	bl	8008300 <IntToUnicode>
  }
}
 80082e2:	bf00      	nop
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	1ff1e800 	.word	0x1ff1e800
 80082f0:	1ff1e804 	.word	0x1ff1e804
 80082f4:	1ff1e808 	.word	0x1ff1e808
 80082f8:	2400010e 	.word	0x2400010e
 80082fc:	2400011e 	.word	0x2400011e

08008300 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008300:	b480      	push	{r7}
 8008302:	b087      	sub	sp, #28
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	4613      	mov	r3, r2
 800830c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008312:	2300      	movs	r3, #0
 8008314:	75fb      	strb	r3, [r7, #23]
 8008316:	e027      	b.n	8008368 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	0f1b      	lsrs	r3, r3, #28
 800831c:	2b09      	cmp	r3, #9
 800831e:	d80b      	bhi.n	8008338 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	0f1b      	lsrs	r3, r3, #28
 8008324:	b2da      	uxtb	r2, r3
 8008326:	7dfb      	ldrb	r3, [r7, #23]
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	4619      	mov	r1, r3
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	440b      	add	r3, r1
 8008330:	3230      	adds	r2, #48	; 0x30
 8008332:	b2d2      	uxtb	r2, r2
 8008334:	701a      	strb	r2, [r3, #0]
 8008336:	e00a      	b.n	800834e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	0f1b      	lsrs	r3, r3, #28
 800833c:	b2da      	uxtb	r2, r3
 800833e:	7dfb      	ldrb	r3, [r7, #23]
 8008340:	005b      	lsls	r3, r3, #1
 8008342:	4619      	mov	r1, r3
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	440b      	add	r3, r1
 8008348:	3237      	adds	r2, #55	; 0x37
 800834a:	b2d2      	uxtb	r2, r2
 800834c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	011b      	lsls	r3, r3, #4
 8008352:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008354:	7dfb      	ldrb	r3, [r7, #23]
 8008356:	005b      	lsls	r3, r3, #1
 8008358:	3301      	adds	r3, #1
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	4413      	add	r3, r2
 800835e:	2200      	movs	r2, #0
 8008360:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008362:	7dfb      	ldrb	r3, [r7, #23]
 8008364:	3301      	adds	r3, #1
 8008366:	75fb      	strb	r3, [r7, #23]
 8008368:	7dfa      	ldrb	r2, [r7, #23]
 800836a:	79fb      	ldrb	r3, [r7, #7]
 800836c:	429a      	cmp	r2, r3
 800836e:	d3d3      	bcc.n	8008318 <IntToUnicode+0x18>
  }
}
 8008370:	bf00      	nop
 8008372:	bf00      	nop
 8008374:	371c      	adds	r7, #28
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
	...

08008380 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b0b0      	sub	sp, #192	; 0xc0
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008388:	f107 030c 	add.w	r3, r7, #12
 800838c:	22b4      	movs	r2, #180	; 0xb4
 800838e:	2100      	movs	r1, #0
 8008390:	4618      	mov	r0, r3
 8008392:	f000 fb35 	bl	8008a00 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a18      	ldr	r2, [pc, #96]	; (80083fc <HAL_PCD_MspInit+0x7c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d129      	bne.n	80083f4 <HAL_PCD_MspInit+0x74>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80083a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80083a4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80083a6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80083aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80083ae:	f107 030c 	add.w	r3, r7, #12
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fb f93e 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 80083be:	f7f8 f9af 	bl	8000720 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80083c2:	f7fa fa19 	bl	80027f8 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80083c6:	4b0e      	ldr	r3, [pc, #56]	; (8008400 <HAL_PCD_MspInit+0x80>)
 80083c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80083cc:	4a0c      	ldr	r2, [pc, #48]	; (8008400 <HAL_PCD_MspInit+0x80>)
 80083ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80083d6:	4b0a      	ldr	r3, [pc, #40]	; (8008400 <HAL_PCD_MspInit+0x80>)
 80083d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80083dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083e0:	60bb      	str	r3, [r7, #8]
 80083e2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80083e4:	2200      	movs	r2, #0
 80083e6:	2100      	movs	r1, #0
 80083e8:	204d      	movs	r0, #77	; 0x4d
 80083ea:	f7f8 fce6 	bl	8000dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80083ee:	204d      	movs	r0, #77	; 0x4d
 80083f0:	f7f8 fcfd 	bl	8000dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80083f4:	bf00      	nop
 80083f6:	37c0      	adds	r7, #192	; 0xc0
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	40040000 	.word	0x40040000
 8008400:	58024400 	.word	0x58024400

08008404 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008418:	4619      	mov	r1, r3
 800841a:	4610      	mov	r0, r2
 800841c:	f7fe fb53 	bl	8006ac6 <USBD_LL_SetupStage>
}
 8008420:	bf00      	nop
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	460b      	mov	r3, r1
 8008432:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800843a:	78fa      	ldrb	r2, [r7, #3]
 800843c:	6879      	ldr	r1, [r7, #4]
 800843e:	4613      	mov	r3, r2
 8008440:	00db      	lsls	r3, r3, #3
 8008442:	4413      	add	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	440b      	add	r3, r1
 8008448:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	78fb      	ldrb	r3, [r7, #3]
 8008450:	4619      	mov	r1, r3
 8008452:	f7fe fb8d 	bl	8006b70 <USBD_LL_DataOutStage>
}
 8008456:	bf00      	nop
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	460b      	mov	r3, r1
 8008468:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008470:	78fa      	ldrb	r2, [r7, #3]
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	4613      	mov	r3, r2
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	4413      	add	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	440b      	add	r3, r1
 800847e:	334c      	adds	r3, #76	; 0x4c
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	78fb      	ldrb	r3, [r7, #3]
 8008484:	4619      	mov	r1, r3
 8008486:	f7fe fc26 	bl	8006cd6 <USBD_LL_DataInStage>
}
 800848a:	bf00      	nop
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b082      	sub	sp, #8
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe fd5a 	bl	8006f5a <USBD_LL_SOF>
}
 80084a6:	bf00      	nop
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b084      	sub	sp, #16
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084b6:	2301      	movs	r3, #1
 80084b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d102      	bne.n	80084c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80084c2:	2300      	movs	r3, #0
 80084c4:	73fb      	strb	r3, [r7, #15]
 80084c6:	e008      	b.n	80084da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d102      	bne.n	80084d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80084d0:	2301      	movs	r3, #1
 80084d2:	73fb      	strb	r3, [r7, #15]
 80084d4:	e001      	b.n	80084da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80084d6:	f7f8 f923 	bl	8000720 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084e0:	7bfa      	ldrb	r2, [r7, #15]
 80084e2:	4611      	mov	r1, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fe fcfa 	bl	8006ede <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fe fca2 	bl	8006e3a <USBD_LL_Reset>
}
 80084f6:	bf00      	nop
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800850e:	4618      	mov	r0, r3
 8008510:	f7fe fcf5 	bl	8006efe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	6812      	ldr	r2, [r2, #0]
 8008522:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008526:	f043 0301 	orr.w	r3, r3, #1
 800852a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d005      	beq.n	8008540 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008534:	4b04      	ldr	r3, [pc, #16]	; (8008548 <HAL_PCD_SuspendCallback+0x48>)
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	4a03      	ldr	r2, [pc, #12]	; (8008548 <HAL_PCD_SuspendCallback+0x48>)
 800853a:	f043 0306 	orr.w	r3, r3, #6
 800853e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	e000ed00 	.word	0xe000ed00

0800854c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe fce5 	bl	8006f2a <USBD_LL_Resume>
}
 8008560:	bf00      	nop
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	460b      	mov	r3, r1
 8008572:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800857a:	78fa      	ldrb	r2, [r7, #3]
 800857c:	4611      	mov	r1, r2
 800857e:	4618      	mov	r0, r3
 8008580:	f7fe fd3d 	bl	8006ffe <USBD_LL_IsoOUTIncomplete>
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800859e:	78fa      	ldrb	r2, [r7, #3]
 80085a0:	4611      	mov	r1, r2
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe fcf9 	bl	8006f9a <USBD_LL_IsoINIncomplete>
}
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fe fd4f 	bl	8007062 <USBD_LL_DevConnected>
}
 80085c4:	bf00      	nop
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe fd4c 	bl	8007078 <USBD_LL_DevDisconnected>
}
 80085e0:	bf00      	nop
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d140      	bne.n	800867a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80085f8:	4a22      	ldr	r2, [pc, #136]	; (8008684 <USBD_LL_Init+0x9c>)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a20      	ldr	r2, [pc, #128]	; (8008684 <USBD_LL_Init+0x9c>)
 8008604:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008608:	4b1e      	ldr	r3, [pc, #120]	; (8008684 <USBD_LL_Init+0x9c>)
 800860a:	4a1f      	ldr	r2, [pc, #124]	; (8008688 <USBD_LL_Init+0xa0>)
 800860c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800860e:	4b1d      	ldr	r3, [pc, #116]	; (8008684 <USBD_LL_Init+0x9c>)
 8008610:	2209      	movs	r2, #9
 8008612:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8008614:	4b1b      	ldr	r3, [pc, #108]	; (8008684 <USBD_LL_Init+0x9c>)
 8008616:	2202      	movs	r2, #2
 8008618:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800861a:	4b1a      	ldr	r3, [pc, #104]	; (8008684 <USBD_LL_Init+0x9c>)
 800861c:	2200      	movs	r2, #0
 800861e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008620:	4b18      	ldr	r3, [pc, #96]	; (8008684 <USBD_LL_Init+0x9c>)
 8008622:	2202      	movs	r2, #2
 8008624:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8008626:	4b17      	ldr	r3, [pc, #92]	; (8008684 <USBD_LL_Init+0x9c>)
 8008628:	2200      	movs	r2, #0
 800862a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800862c:	4b15      	ldr	r3, [pc, #84]	; (8008684 <USBD_LL_Init+0x9c>)
 800862e:	2200      	movs	r2, #0
 8008630:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8008632:	4b14      	ldr	r3, [pc, #80]	; (8008684 <USBD_LL_Init+0x9c>)
 8008634:	2200      	movs	r2, #0
 8008636:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8008638:	4b12      	ldr	r3, [pc, #72]	; (8008684 <USBD_LL_Init+0x9c>)
 800863a:	2200      	movs	r2, #0
 800863c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800863e:	4b11      	ldr	r3, [pc, #68]	; (8008684 <USBD_LL_Init+0x9c>)
 8008640:	2200      	movs	r2, #0
 8008642:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008644:	4b0f      	ldr	r3, [pc, #60]	; (8008684 <USBD_LL_Init+0x9c>)
 8008646:	2200      	movs	r2, #0
 8008648:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800864a:	480e      	ldr	r0, [pc, #56]	; (8008684 <USBD_LL_Init+0x9c>)
 800864c:	f7f8 fdc5 	bl	80011da <HAL_PCD_Init>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8008656:	f7f8 f863 	bl	8000720 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800865a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800865e:	4809      	ldr	r0, [pc, #36]	; (8008684 <USBD_LL_Init+0x9c>)
 8008660:	f7fa f84f 	bl	8002702 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8008664:	2280      	movs	r2, #128	; 0x80
 8008666:	2100      	movs	r1, #0
 8008668:	4806      	ldr	r0, [pc, #24]	; (8008684 <USBD_LL_Init+0x9c>)
 800866a:	f7fa f803 	bl	8002674 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800866e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8008672:	2101      	movs	r1, #1
 8008674:	4803      	ldr	r0, [pc, #12]	; (8008684 <USBD_LL_Init+0x9c>)
 8008676:	f7f9 fffd 	bl	8002674 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	24002ae4 	.word	0x24002ae4
 8008688:	40040000 	.word	0x40040000

0800868c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7f8 febd 	bl	8001422 <HAL_PCD_Start>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 f942 	bl	8008938 <USBD_Get_USB_Status>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b084      	sub	sp, #16
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	4608      	mov	r0, r1
 80086cc:	4611      	mov	r1, r2
 80086ce:	461a      	mov	r2, r3
 80086d0:	4603      	mov	r3, r0
 80086d2:	70fb      	strb	r3, [r7, #3]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70bb      	strb	r3, [r7, #2]
 80086d8:	4613      	mov	r3, r2
 80086da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80086ea:	78bb      	ldrb	r3, [r7, #2]
 80086ec:	883a      	ldrh	r2, [r7, #0]
 80086ee:	78f9      	ldrb	r1, [r7, #3]
 80086f0:	f7f9 fbbb 	bl	8001e6a <HAL_PCD_EP_Open>
 80086f4:	4603      	mov	r3, r0
 80086f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 f91c 	bl	8008938 <USBD_Get_USB_Status>
 8008700:	4603      	mov	r3, r0
 8008702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008704:	7bbb      	ldrb	r3, [r7, #14]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	460b      	mov	r3, r1
 8008718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008728:	78fa      	ldrb	r2, [r7, #3]
 800872a:	4611      	mov	r1, r2
 800872c:	4618      	mov	r0, r3
 800872e:	f7f9 fc04 	bl	8001f3a <HAL_PCD_EP_Close>
 8008732:	4603      	mov	r3, r0
 8008734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008736:	7bfb      	ldrb	r3, [r7, #15]
 8008738:	4618      	mov	r0, r3
 800873a:	f000 f8fd 	bl	8008938 <USBD_Get_USB_Status>
 800873e:	4603      	mov	r3, r0
 8008740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008742:	7bbb      	ldrb	r3, [r7, #14]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008766:	78fa      	ldrb	r2, [r7, #3]
 8008768:	4611      	mov	r1, r2
 800876a:	4618      	mov	r0, r3
 800876c:	f7f9 fcdc 	bl	8002128 <HAL_PCD_EP_SetStall>
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	4618      	mov	r0, r3
 8008778:	f000 f8de 	bl	8008938 <USBD_Get_USB_Status>
 800877c:	4603      	mov	r3, r0
 800877e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008780:	7bbb      	ldrb	r3, [r7, #14]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b084      	sub	sp, #16
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	460b      	mov	r3, r1
 8008794:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087a4:	78fa      	ldrb	r2, [r7, #3]
 80087a6:	4611      	mov	r1, r2
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7f9 fd21 	bl	80021f0 <HAL_PCD_EP_ClrStall>
 80087ae:	4603      	mov	r3, r0
 80087b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f000 f8bf 	bl	8008938 <USBD_Get_USB_Status>
 80087ba:	4603      	mov	r3, r0
 80087bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087be:	7bbb      	ldrb	r3, [r7, #14]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80087dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	da0b      	bge.n	80087fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80087e4:	78fb      	ldrb	r3, [r7, #3]
 80087e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087ea:	68f9      	ldr	r1, [r7, #12]
 80087ec:	4613      	mov	r3, r2
 80087ee:	00db      	lsls	r3, r3, #3
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	440b      	add	r3, r1
 80087f6:	333e      	adds	r3, #62	; 0x3e
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	e00b      	b.n	8008814 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087fc:	78fb      	ldrb	r3, [r7, #3]
 80087fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008802:	68f9      	ldr	r1, [r7, #12]
 8008804:	4613      	mov	r3, r2
 8008806:	00db      	lsls	r3, r3, #3
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	440b      	add	r3, r1
 800880e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008812:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008814:	4618      	mov	r0, r3
 8008816:	3714      	adds	r7, #20
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800882c:	2300      	movs	r3, #0
 800882e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008830:	2300      	movs	r3, #0
 8008832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800883a:	78fa      	ldrb	r2, [r7, #3]
 800883c:	4611      	mov	r1, r2
 800883e:	4618      	mov	r0, r3
 8008840:	f7f9 faee 	bl	8001e20 <HAL_PCD_SetAddress>
 8008844:	4603      	mov	r3, r0
 8008846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008848:	7bfb      	ldrb	r3, [r7, #15]
 800884a:	4618      	mov	r0, r3
 800884c:	f000 f874 	bl	8008938 <USBD_Get_USB_Status>
 8008850:	4603      	mov	r3, r0
 8008852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008854:	7bbb      	ldrb	r3, [r7, #14]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b086      	sub	sp, #24
 8008862:	af00      	add	r7, sp, #0
 8008864:	60f8      	str	r0, [r7, #12]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
 800886a:	460b      	mov	r3, r1
 800886c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800887c:	7af9      	ldrb	r1, [r7, #11]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	f7f9 fc07 	bl	8002094 <HAL_PCD_EP_Transmit>
 8008886:	4603      	mov	r3, r0
 8008888:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800888a:	7dfb      	ldrb	r3, [r7, #23]
 800888c:	4618      	mov	r0, r3
 800888e:	f000 f853 	bl	8008938 <USBD_Get_USB_Status>
 8008892:	4603      	mov	r3, r0
 8008894:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008896:	7dbb      	ldrb	r3, [r7, #22]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3718      	adds	r7, #24
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	607a      	str	r2, [r7, #4]
 80088aa:	603b      	str	r3, [r7, #0]
 80088ac:	460b      	mov	r3, r1
 80088ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80088be:	7af9      	ldrb	r1, [r7, #11]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	f7f9 fb83 	bl	8001fce <HAL_PCD_EP_Receive>
 80088c8:	4603      	mov	r3, r0
 80088ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088cc:	7dfb      	ldrb	r3, [r7, #23]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 f832 	bl	8008938 <USBD_Get_USB_Status>
 80088d4:	4603      	mov	r3, r0
 80088d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3718      	adds	r7, #24
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b082      	sub	sp, #8
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	460b      	mov	r3, r1
 80088ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088f4:	78fa      	ldrb	r2, [r7, #3]
 80088f6:	4611      	mov	r1, r2
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7f9 fbb3 	bl	8002064 <HAL_PCD_EP_GetRxCount>
 80088fe:	4603      	mov	r3, r0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008910:	4b03      	ldr	r3, [pc, #12]	; (8008920 <USBD_static_malloc+0x18>)
}
 8008912:	4618      	mov	r0, r3
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	24002ff0 	.word	0x24002ff0

08008924 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]

}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	4603      	mov	r3, r0
 8008940:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008946:	79fb      	ldrb	r3, [r7, #7]
 8008948:	2b03      	cmp	r3, #3
 800894a:	d817      	bhi.n	800897c <USBD_Get_USB_Status+0x44>
 800894c:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <USBD_Get_USB_Status+0x1c>)
 800894e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008952:	bf00      	nop
 8008954:	08008965 	.word	0x08008965
 8008958:	0800896b 	.word	0x0800896b
 800895c:	08008971 	.word	0x08008971
 8008960:	08008977 	.word	0x08008977
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008964:	2300      	movs	r3, #0
 8008966:	73fb      	strb	r3, [r7, #15]
    break;
 8008968:	e00b      	b.n	8008982 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800896a:	2303      	movs	r3, #3
 800896c:	73fb      	strb	r3, [r7, #15]
    break;
 800896e:	e008      	b.n	8008982 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008970:	2301      	movs	r3, #1
 8008972:	73fb      	strb	r3, [r7, #15]
    break;
 8008974:	e005      	b.n	8008982 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008976:	2303      	movs	r3, #3
 8008978:	73fb      	strb	r3, [r7, #15]
    break;
 800897a:	e002      	b.n	8008982 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800897c:	2303      	movs	r3, #3
 800897e:	73fb      	strb	r3, [r7, #15]
    break;
 8008980:	bf00      	nop
  }
  return usb_status;
 8008982:	7bfb      	ldrb	r3, [r7, #15]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <__errno>:
 8008990:	4b01      	ldr	r3, [pc, #4]	; (8008998 <__errno+0x8>)
 8008992:	6818      	ldr	r0, [r3, #0]
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	24000128 	.word	0x24000128

0800899c <__libc_init_array>:
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	4d0d      	ldr	r5, [pc, #52]	; (80089d4 <__libc_init_array+0x38>)
 80089a0:	4c0d      	ldr	r4, [pc, #52]	; (80089d8 <__libc_init_array+0x3c>)
 80089a2:	1b64      	subs	r4, r4, r5
 80089a4:	10a4      	asrs	r4, r4, #2
 80089a6:	2600      	movs	r6, #0
 80089a8:	42a6      	cmp	r6, r4
 80089aa:	d109      	bne.n	80089c0 <__libc_init_array+0x24>
 80089ac:	4d0b      	ldr	r5, [pc, #44]	; (80089dc <__libc_init_array+0x40>)
 80089ae:	4c0c      	ldr	r4, [pc, #48]	; (80089e0 <__libc_init_array+0x44>)
 80089b0:	f001 fa52 	bl	8009e58 <_init>
 80089b4:	1b64      	subs	r4, r4, r5
 80089b6:	10a4      	asrs	r4, r4, #2
 80089b8:	2600      	movs	r6, #0
 80089ba:	42a6      	cmp	r6, r4
 80089bc:	d105      	bne.n	80089ca <__libc_init_array+0x2e>
 80089be:	bd70      	pop	{r4, r5, r6, pc}
 80089c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089c4:	4798      	blx	r3
 80089c6:	3601      	adds	r6, #1
 80089c8:	e7ee      	b.n	80089a8 <__libc_init_array+0xc>
 80089ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ce:	4798      	blx	r3
 80089d0:	3601      	adds	r6, #1
 80089d2:	e7f2      	b.n	80089ba <__libc_init_array+0x1e>
 80089d4:	0800a030 	.word	0x0800a030
 80089d8:	0800a030 	.word	0x0800a030
 80089dc:	0800a030 	.word	0x0800a030
 80089e0:	0800a034 	.word	0x0800a034

080089e4 <memcpy>:
 80089e4:	440a      	add	r2, r1
 80089e6:	4291      	cmp	r1, r2
 80089e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80089ec:	d100      	bne.n	80089f0 <memcpy+0xc>
 80089ee:	4770      	bx	lr
 80089f0:	b510      	push	{r4, lr}
 80089f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089fa:	4291      	cmp	r1, r2
 80089fc:	d1f9      	bne.n	80089f2 <memcpy+0xe>
 80089fe:	bd10      	pop	{r4, pc}

08008a00 <memset>:
 8008a00:	4402      	add	r2, r0
 8008a02:	4603      	mov	r3, r0
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d100      	bne.n	8008a0a <memset+0xa>
 8008a08:	4770      	bx	lr
 8008a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a0e:	e7f9      	b.n	8008a04 <memset+0x4>

08008a10 <siprintf>:
 8008a10:	b40e      	push	{r1, r2, r3}
 8008a12:	b500      	push	{lr}
 8008a14:	b09c      	sub	sp, #112	; 0x70
 8008a16:	ab1d      	add	r3, sp, #116	; 0x74
 8008a18:	9002      	str	r0, [sp, #8]
 8008a1a:	9006      	str	r0, [sp, #24]
 8008a1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a20:	4809      	ldr	r0, [pc, #36]	; (8008a48 <siprintf+0x38>)
 8008a22:	9107      	str	r1, [sp, #28]
 8008a24:	9104      	str	r1, [sp, #16]
 8008a26:	4909      	ldr	r1, [pc, #36]	; (8008a4c <siprintf+0x3c>)
 8008a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a2c:	9105      	str	r1, [sp, #20]
 8008a2e:	6800      	ldr	r0, [r0, #0]
 8008a30:	9301      	str	r3, [sp, #4]
 8008a32:	a902      	add	r1, sp, #8
 8008a34:	f000 f9dc 	bl	8008df0 <_svfiprintf_r>
 8008a38:	9b02      	ldr	r3, [sp, #8]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	701a      	strb	r2, [r3, #0]
 8008a3e:	b01c      	add	sp, #112	; 0x70
 8008a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a44:	b003      	add	sp, #12
 8008a46:	4770      	bx	lr
 8008a48:	24000128 	.word	0x24000128
 8008a4c:	ffff0208 	.word	0xffff0208

08008a50 <strtok>:
 8008a50:	4b16      	ldr	r3, [pc, #88]	; (8008aac <strtok+0x5c>)
 8008a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a54:	681e      	ldr	r6, [r3, #0]
 8008a56:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8008a58:	4605      	mov	r5, r0
 8008a5a:	b9fc      	cbnz	r4, 8008a9c <strtok+0x4c>
 8008a5c:	2050      	movs	r0, #80	; 0x50
 8008a5e:	9101      	str	r1, [sp, #4]
 8008a60:	f000 f882 	bl	8008b68 <malloc>
 8008a64:	9901      	ldr	r1, [sp, #4]
 8008a66:	65b0      	str	r0, [r6, #88]	; 0x58
 8008a68:	4602      	mov	r2, r0
 8008a6a:	b920      	cbnz	r0, 8008a76 <strtok+0x26>
 8008a6c:	4b10      	ldr	r3, [pc, #64]	; (8008ab0 <strtok+0x60>)
 8008a6e:	4811      	ldr	r0, [pc, #68]	; (8008ab4 <strtok+0x64>)
 8008a70:	2157      	movs	r1, #87	; 0x57
 8008a72:	f000 f849 	bl	8008b08 <__assert_func>
 8008a76:	e9c0 4400 	strd	r4, r4, [r0]
 8008a7a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008a7e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008a82:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008a86:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008a8a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008a8e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008a92:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008a96:	6184      	str	r4, [r0, #24]
 8008a98:	7704      	strb	r4, [r0, #28]
 8008a9a:	6244      	str	r4, [r0, #36]	; 0x24
 8008a9c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	b002      	add	sp, #8
 8008aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008aa8:	f000 b806 	b.w	8008ab8 <__strtok_r>
 8008aac:	24000128 	.word	0x24000128
 8008ab0:	08009eec 	.word	0x08009eec
 8008ab4:	08009f03 	.word	0x08009f03

08008ab8 <__strtok_r>:
 8008ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aba:	b908      	cbnz	r0, 8008ac0 <__strtok_r+0x8>
 8008abc:	6810      	ldr	r0, [r2, #0]
 8008abe:	b188      	cbz	r0, 8008ae4 <__strtok_r+0x2c>
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008ac8:	460f      	mov	r7, r1
 8008aca:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008ace:	b91e      	cbnz	r6, 8008ad8 <__strtok_r+0x20>
 8008ad0:	b965      	cbnz	r5, 8008aec <__strtok_r+0x34>
 8008ad2:	6015      	str	r5, [r2, #0]
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	e005      	b.n	8008ae4 <__strtok_r+0x2c>
 8008ad8:	42b5      	cmp	r5, r6
 8008ada:	d1f6      	bne.n	8008aca <__strtok_r+0x12>
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1f0      	bne.n	8008ac2 <__strtok_r+0xa>
 8008ae0:	6014      	str	r4, [r2, #0]
 8008ae2:	7003      	strb	r3, [r0, #0]
 8008ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ae6:	461c      	mov	r4, r3
 8008ae8:	e00c      	b.n	8008b04 <__strtok_r+0x4c>
 8008aea:	b915      	cbnz	r5, 8008af2 <__strtok_r+0x3a>
 8008aec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008af0:	460e      	mov	r6, r1
 8008af2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008af6:	42ab      	cmp	r3, r5
 8008af8:	d1f7      	bne.n	8008aea <__strtok_r+0x32>
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d0f3      	beq.n	8008ae6 <__strtok_r+0x2e>
 8008afe:	2300      	movs	r3, #0
 8008b00:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008b04:	6014      	str	r4, [r2, #0]
 8008b06:	e7ed      	b.n	8008ae4 <__strtok_r+0x2c>

08008b08 <__assert_func>:
 8008b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b0a:	4614      	mov	r4, r2
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	4b09      	ldr	r3, [pc, #36]	; (8008b34 <__assert_func+0x2c>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4605      	mov	r5, r0
 8008b14:	68d8      	ldr	r0, [r3, #12]
 8008b16:	b14c      	cbz	r4, 8008b2c <__assert_func+0x24>
 8008b18:	4b07      	ldr	r3, [pc, #28]	; (8008b38 <__assert_func+0x30>)
 8008b1a:	9100      	str	r1, [sp, #0]
 8008b1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b20:	4906      	ldr	r1, [pc, #24]	; (8008b3c <__assert_func+0x34>)
 8008b22:	462b      	mov	r3, r5
 8008b24:	f000 f80e 	bl	8008b44 <fiprintf>
 8008b28:	f000 fe20 	bl	800976c <abort>
 8008b2c:	4b04      	ldr	r3, [pc, #16]	; (8008b40 <__assert_func+0x38>)
 8008b2e:	461c      	mov	r4, r3
 8008b30:	e7f3      	b.n	8008b1a <__assert_func+0x12>
 8008b32:	bf00      	nop
 8008b34:	24000128 	.word	0x24000128
 8008b38:	08009f60 	.word	0x08009f60
 8008b3c:	08009f6d 	.word	0x08009f6d
 8008b40:	08009f9b 	.word	0x08009f9b

08008b44 <fiprintf>:
 8008b44:	b40e      	push	{r1, r2, r3}
 8008b46:	b503      	push	{r0, r1, lr}
 8008b48:	4601      	mov	r1, r0
 8008b4a:	ab03      	add	r3, sp, #12
 8008b4c:	4805      	ldr	r0, [pc, #20]	; (8008b64 <fiprintf+0x20>)
 8008b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b52:	6800      	ldr	r0, [r0, #0]
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	f000 fa75 	bl	8009044 <_vfiprintf_r>
 8008b5a:	b002      	add	sp, #8
 8008b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b60:	b003      	add	sp, #12
 8008b62:	4770      	bx	lr
 8008b64:	24000128 	.word	0x24000128

08008b68 <malloc>:
 8008b68:	4b02      	ldr	r3, [pc, #8]	; (8008b74 <malloc+0xc>)
 8008b6a:	4601      	mov	r1, r0
 8008b6c:	6818      	ldr	r0, [r3, #0]
 8008b6e:	f000 b86f 	b.w	8008c50 <_malloc_r>
 8008b72:	bf00      	nop
 8008b74:	24000128 	.word	0x24000128

08008b78 <_free_r>:
 8008b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b7a:	2900      	cmp	r1, #0
 8008b7c:	d044      	beq.n	8008c08 <_free_r+0x90>
 8008b7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b82:	9001      	str	r0, [sp, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f1a1 0404 	sub.w	r4, r1, #4
 8008b8a:	bfb8      	it	lt
 8008b8c:	18e4      	addlt	r4, r4, r3
 8008b8e:	f001 f82f 	bl	8009bf0 <__malloc_lock>
 8008b92:	4a1e      	ldr	r2, [pc, #120]	; (8008c0c <_free_r+0x94>)
 8008b94:	9801      	ldr	r0, [sp, #4]
 8008b96:	6813      	ldr	r3, [r2, #0]
 8008b98:	b933      	cbnz	r3, 8008ba8 <_free_r+0x30>
 8008b9a:	6063      	str	r3, [r4, #4]
 8008b9c:	6014      	str	r4, [r2, #0]
 8008b9e:	b003      	add	sp, #12
 8008ba0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ba4:	f001 b82a 	b.w	8009bfc <__malloc_unlock>
 8008ba8:	42a3      	cmp	r3, r4
 8008baa:	d908      	bls.n	8008bbe <_free_r+0x46>
 8008bac:	6825      	ldr	r5, [r4, #0]
 8008bae:	1961      	adds	r1, r4, r5
 8008bb0:	428b      	cmp	r3, r1
 8008bb2:	bf01      	itttt	eq
 8008bb4:	6819      	ldreq	r1, [r3, #0]
 8008bb6:	685b      	ldreq	r3, [r3, #4]
 8008bb8:	1949      	addeq	r1, r1, r5
 8008bba:	6021      	streq	r1, [r4, #0]
 8008bbc:	e7ed      	b.n	8008b9a <_free_r+0x22>
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	b10b      	cbz	r3, 8008bc8 <_free_r+0x50>
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	d9fa      	bls.n	8008bbe <_free_r+0x46>
 8008bc8:	6811      	ldr	r1, [r2, #0]
 8008bca:	1855      	adds	r5, r2, r1
 8008bcc:	42a5      	cmp	r5, r4
 8008bce:	d10b      	bne.n	8008be8 <_free_r+0x70>
 8008bd0:	6824      	ldr	r4, [r4, #0]
 8008bd2:	4421      	add	r1, r4
 8008bd4:	1854      	adds	r4, r2, r1
 8008bd6:	42a3      	cmp	r3, r4
 8008bd8:	6011      	str	r1, [r2, #0]
 8008bda:	d1e0      	bne.n	8008b9e <_free_r+0x26>
 8008bdc:	681c      	ldr	r4, [r3, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	6053      	str	r3, [r2, #4]
 8008be2:	4421      	add	r1, r4
 8008be4:	6011      	str	r1, [r2, #0]
 8008be6:	e7da      	b.n	8008b9e <_free_r+0x26>
 8008be8:	d902      	bls.n	8008bf0 <_free_r+0x78>
 8008bea:	230c      	movs	r3, #12
 8008bec:	6003      	str	r3, [r0, #0]
 8008bee:	e7d6      	b.n	8008b9e <_free_r+0x26>
 8008bf0:	6825      	ldr	r5, [r4, #0]
 8008bf2:	1961      	adds	r1, r4, r5
 8008bf4:	428b      	cmp	r3, r1
 8008bf6:	bf04      	itt	eq
 8008bf8:	6819      	ldreq	r1, [r3, #0]
 8008bfa:	685b      	ldreq	r3, [r3, #4]
 8008bfc:	6063      	str	r3, [r4, #4]
 8008bfe:	bf04      	itt	eq
 8008c00:	1949      	addeq	r1, r1, r5
 8008c02:	6021      	streq	r1, [r4, #0]
 8008c04:	6054      	str	r4, [r2, #4]
 8008c06:	e7ca      	b.n	8008b9e <_free_r+0x26>
 8008c08:	b003      	add	sp, #12
 8008c0a:	bd30      	pop	{r4, r5, pc}
 8008c0c:	24003210 	.word	0x24003210

08008c10 <sbrk_aligned>:
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	4e0e      	ldr	r6, [pc, #56]	; (8008c4c <sbrk_aligned+0x3c>)
 8008c14:	460c      	mov	r4, r1
 8008c16:	6831      	ldr	r1, [r6, #0]
 8008c18:	4605      	mov	r5, r0
 8008c1a:	b911      	cbnz	r1, 8008c22 <sbrk_aligned+0x12>
 8008c1c:	f000 fcd6 	bl	80095cc <_sbrk_r>
 8008c20:	6030      	str	r0, [r6, #0]
 8008c22:	4621      	mov	r1, r4
 8008c24:	4628      	mov	r0, r5
 8008c26:	f000 fcd1 	bl	80095cc <_sbrk_r>
 8008c2a:	1c43      	adds	r3, r0, #1
 8008c2c:	d00a      	beq.n	8008c44 <sbrk_aligned+0x34>
 8008c2e:	1cc4      	adds	r4, r0, #3
 8008c30:	f024 0403 	bic.w	r4, r4, #3
 8008c34:	42a0      	cmp	r0, r4
 8008c36:	d007      	beq.n	8008c48 <sbrk_aligned+0x38>
 8008c38:	1a21      	subs	r1, r4, r0
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	f000 fcc6 	bl	80095cc <_sbrk_r>
 8008c40:	3001      	adds	r0, #1
 8008c42:	d101      	bne.n	8008c48 <sbrk_aligned+0x38>
 8008c44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008c48:	4620      	mov	r0, r4
 8008c4a:	bd70      	pop	{r4, r5, r6, pc}
 8008c4c:	24003214 	.word	0x24003214

08008c50 <_malloc_r>:
 8008c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c54:	1ccd      	adds	r5, r1, #3
 8008c56:	f025 0503 	bic.w	r5, r5, #3
 8008c5a:	3508      	adds	r5, #8
 8008c5c:	2d0c      	cmp	r5, #12
 8008c5e:	bf38      	it	cc
 8008c60:	250c      	movcc	r5, #12
 8008c62:	2d00      	cmp	r5, #0
 8008c64:	4607      	mov	r7, r0
 8008c66:	db01      	blt.n	8008c6c <_malloc_r+0x1c>
 8008c68:	42a9      	cmp	r1, r5
 8008c6a:	d905      	bls.n	8008c78 <_malloc_r+0x28>
 8008c6c:	230c      	movs	r3, #12
 8008c6e:	603b      	str	r3, [r7, #0]
 8008c70:	2600      	movs	r6, #0
 8008c72:	4630      	mov	r0, r6
 8008c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c78:	4e2e      	ldr	r6, [pc, #184]	; (8008d34 <_malloc_r+0xe4>)
 8008c7a:	f000 ffb9 	bl	8009bf0 <__malloc_lock>
 8008c7e:	6833      	ldr	r3, [r6, #0]
 8008c80:	461c      	mov	r4, r3
 8008c82:	bb34      	cbnz	r4, 8008cd2 <_malloc_r+0x82>
 8008c84:	4629      	mov	r1, r5
 8008c86:	4638      	mov	r0, r7
 8008c88:	f7ff ffc2 	bl	8008c10 <sbrk_aligned>
 8008c8c:	1c43      	adds	r3, r0, #1
 8008c8e:	4604      	mov	r4, r0
 8008c90:	d14d      	bne.n	8008d2e <_malloc_r+0xde>
 8008c92:	6834      	ldr	r4, [r6, #0]
 8008c94:	4626      	mov	r6, r4
 8008c96:	2e00      	cmp	r6, #0
 8008c98:	d140      	bne.n	8008d1c <_malloc_r+0xcc>
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	eb04 0803 	add.w	r8, r4, r3
 8008ca4:	f000 fc92 	bl	80095cc <_sbrk_r>
 8008ca8:	4580      	cmp	r8, r0
 8008caa:	d13a      	bne.n	8008d22 <_malloc_r+0xd2>
 8008cac:	6821      	ldr	r1, [r4, #0]
 8008cae:	3503      	adds	r5, #3
 8008cb0:	1a6d      	subs	r5, r5, r1
 8008cb2:	f025 0503 	bic.w	r5, r5, #3
 8008cb6:	3508      	adds	r5, #8
 8008cb8:	2d0c      	cmp	r5, #12
 8008cba:	bf38      	it	cc
 8008cbc:	250c      	movcc	r5, #12
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	4638      	mov	r0, r7
 8008cc2:	f7ff ffa5 	bl	8008c10 <sbrk_aligned>
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	d02b      	beq.n	8008d22 <_malloc_r+0xd2>
 8008cca:	6823      	ldr	r3, [r4, #0]
 8008ccc:	442b      	add	r3, r5
 8008cce:	6023      	str	r3, [r4, #0]
 8008cd0:	e00e      	b.n	8008cf0 <_malloc_r+0xa0>
 8008cd2:	6822      	ldr	r2, [r4, #0]
 8008cd4:	1b52      	subs	r2, r2, r5
 8008cd6:	d41e      	bmi.n	8008d16 <_malloc_r+0xc6>
 8008cd8:	2a0b      	cmp	r2, #11
 8008cda:	d916      	bls.n	8008d0a <_malloc_r+0xba>
 8008cdc:	1961      	adds	r1, r4, r5
 8008cde:	42a3      	cmp	r3, r4
 8008ce0:	6025      	str	r5, [r4, #0]
 8008ce2:	bf18      	it	ne
 8008ce4:	6059      	strne	r1, [r3, #4]
 8008ce6:	6863      	ldr	r3, [r4, #4]
 8008ce8:	bf08      	it	eq
 8008cea:	6031      	streq	r1, [r6, #0]
 8008cec:	5162      	str	r2, [r4, r5]
 8008cee:	604b      	str	r3, [r1, #4]
 8008cf0:	4638      	mov	r0, r7
 8008cf2:	f104 060b 	add.w	r6, r4, #11
 8008cf6:	f000 ff81 	bl	8009bfc <__malloc_unlock>
 8008cfa:	f026 0607 	bic.w	r6, r6, #7
 8008cfe:	1d23      	adds	r3, r4, #4
 8008d00:	1af2      	subs	r2, r6, r3
 8008d02:	d0b6      	beq.n	8008c72 <_malloc_r+0x22>
 8008d04:	1b9b      	subs	r3, r3, r6
 8008d06:	50a3      	str	r3, [r4, r2]
 8008d08:	e7b3      	b.n	8008c72 <_malloc_r+0x22>
 8008d0a:	6862      	ldr	r2, [r4, #4]
 8008d0c:	42a3      	cmp	r3, r4
 8008d0e:	bf0c      	ite	eq
 8008d10:	6032      	streq	r2, [r6, #0]
 8008d12:	605a      	strne	r2, [r3, #4]
 8008d14:	e7ec      	b.n	8008cf0 <_malloc_r+0xa0>
 8008d16:	4623      	mov	r3, r4
 8008d18:	6864      	ldr	r4, [r4, #4]
 8008d1a:	e7b2      	b.n	8008c82 <_malloc_r+0x32>
 8008d1c:	4634      	mov	r4, r6
 8008d1e:	6876      	ldr	r6, [r6, #4]
 8008d20:	e7b9      	b.n	8008c96 <_malloc_r+0x46>
 8008d22:	230c      	movs	r3, #12
 8008d24:	603b      	str	r3, [r7, #0]
 8008d26:	4638      	mov	r0, r7
 8008d28:	f000 ff68 	bl	8009bfc <__malloc_unlock>
 8008d2c:	e7a1      	b.n	8008c72 <_malloc_r+0x22>
 8008d2e:	6025      	str	r5, [r4, #0]
 8008d30:	e7de      	b.n	8008cf0 <_malloc_r+0xa0>
 8008d32:	bf00      	nop
 8008d34:	24003210 	.word	0x24003210

08008d38 <__ssputs_r>:
 8008d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d3c:	688e      	ldr	r6, [r1, #8]
 8008d3e:	429e      	cmp	r6, r3
 8008d40:	4682      	mov	sl, r0
 8008d42:	460c      	mov	r4, r1
 8008d44:	4690      	mov	r8, r2
 8008d46:	461f      	mov	r7, r3
 8008d48:	d838      	bhi.n	8008dbc <__ssputs_r+0x84>
 8008d4a:	898a      	ldrh	r2, [r1, #12]
 8008d4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d50:	d032      	beq.n	8008db8 <__ssputs_r+0x80>
 8008d52:	6825      	ldr	r5, [r4, #0]
 8008d54:	6909      	ldr	r1, [r1, #16]
 8008d56:	eba5 0901 	sub.w	r9, r5, r1
 8008d5a:	6965      	ldr	r5, [r4, #20]
 8008d5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d64:	3301      	adds	r3, #1
 8008d66:	444b      	add	r3, r9
 8008d68:	106d      	asrs	r5, r5, #1
 8008d6a:	429d      	cmp	r5, r3
 8008d6c:	bf38      	it	cc
 8008d6e:	461d      	movcc	r5, r3
 8008d70:	0553      	lsls	r3, r2, #21
 8008d72:	d531      	bpl.n	8008dd8 <__ssputs_r+0xa0>
 8008d74:	4629      	mov	r1, r5
 8008d76:	f7ff ff6b 	bl	8008c50 <_malloc_r>
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	b950      	cbnz	r0, 8008d94 <__ssputs_r+0x5c>
 8008d7e:	230c      	movs	r3, #12
 8008d80:	f8ca 3000 	str.w	r3, [sl]
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d8a:	81a3      	strh	r3, [r4, #12]
 8008d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d94:	6921      	ldr	r1, [r4, #16]
 8008d96:	464a      	mov	r2, r9
 8008d98:	f7ff fe24 	bl	80089e4 <memcpy>
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da6:	81a3      	strh	r3, [r4, #12]
 8008da8:	6126      	str	r6, [r4, #16]
 8008daa:	6165      	str	r5, [r4, #20]
 8008dac:	444e      	add	r6, r9
 8008dae:	eba5 0509 	sub.w	r5, r5, r9
 8008db2:	6026      	str	r6, [r4, #0]
 8008db4:	60a5      	str	r5, [r4, #8]
 8008db6:	463e      	mov	r6, r7
 8008db8:	42be      	cmp	r6, r7
 8008dba:	d900      	bls.n	8008dbe <__ssputs_r+0x86>
 8008dbc:	463e      	mov	r6, r7
 8008dbe:	6820      	ldr	r0, [r4, #0]
 8008dc0:	4632      	mov	r2, r6
 8008dc2:	4641      	mov	r1, r8
 8008dc4:	f000 fefa 	bl	8009bbc <memmove>
 8008dc8:	68a3      	ldr	r3, [r4, #8]
 8008dca:	1b9b      	subs	r3, r3, r6
 8008dcc:	60a3      	str	r3, [r4, #8]
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	4433      	add	r3, r6
 8008dd2:	6023      	str	r3, [r4, #0]
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	e7db      	b.n	8008d90 <__ssputs_r+0x58>
 8008dd8:	462a      	mov	r2, r5
 8008dda:	f000 ff15 	bl	8009c08 <_realloc_r>
 8008dde:	4606      	mov	r6, r0
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d1e1      	bne.n	8008da8 <__ssputs_r+0x70>
 8008de4:	6921      	ldr	r1, [r4, #16]
 8008de6:	4650      	mov	r0, sl
 8008de8:	f7ff fec6 	bl	8008b78 <_free_r>
 8008dec:	e7c7      	b.n	8008d7e <__ssputs_r+0x46>
	...

08008df0 <_svfiprintf_r>:
 8008df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	4698      	mov	r8, r3
 8008df6:	898b      	ldrh	r3, [r1, #12]
 8008df8:	061b      	lsls	r3, r3, #24
 8008dfa:	b09d      	sub	sp, #116	; 0x74
 8008dfc:	4607      	mov	r7, r0
 8008dfe:	460d      	mov	r5, r1
 8008e00:	4614      	mov	r4, r2
 8008e02:	d50e      	bpl.n	8008e22 <_svfiprintf_r+0x32>
 8008e04:	690b      	ldr	r3, [r1, #16]
 8008e06:	b963      	cbnz	r3, 8008e22 <_svfiprintf_r+0x32>
 8008e08:	2140      	movs	r1, #64	; 0x40
 8008e0a:	f7ff ff21 	bl	8008c50 <_malloc_r>
 8008e0e:	6028      	str	r0, [r5, #0]
 8008e10:	6128      	str	r0, [r5, #16]
 8008e12:	b920      	cbnz	r0, 8008e1e <_svfiprintf_r+0x2e>
 8008e14:	230c      	movs	r3, #12
 8008e16:	603b      	str	r3, [r7, #0]
 8008e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e1c:	e0d1      	b.n	8008fc2 <_svfiprintf_r+0x1d2>
 8008e1e:	2340      	movs	r3, #64	; 0x40
 8008e20:	616b      	str	r3, [r5, #20]
 8008e22:	2300      	movs	r3, #0
 8008e24:	9309      	str	r3, [sp, #36]	; 0x24
 8008e26:	2320      	movs	r3, #32
 8008e28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e30:	2330      	movs	r3, #48	; 0x30
 8008e32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008fdc <_svfiprintf_r+0x1ec>
 8008e36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e3a:	f04f 0901 	mov.w	r9, #1
 8008e3e:	4623      	mov	r3, r4
 8008e40:	469a      	mov	sl, r3
 8008e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e46:	b10a      	cbz	r2, 8008e4c <_svfiprintf_r+0x5c>
 8008e48:	2a25      	cmp	r2, #37	; 0x25
 8008e4a:	d1f9      	bne.n	8008e40 <_svfiprintf_r+0x50>
 8008e4c:	ebba 0b04 	subs.w	fp, sl, r4
 8008e50:	d00b      	beq.n	8008e6a <_svfiprintf_r+0x7a>
 8008e52:	465b      	mov	r3, fp
 8008e54:	4622      	mov	r2, r4
 8008e56:	4629      	mov	r1, r5
 8008e58:	4638      	mov	r0, r7
 8008e5a:	f7ff ff6d 	bl	8008d38 <__ssputs_r>
 8008e5e:	3001      	adds	r0, #1
 8008e60:	f000 80aa 	beq.w	8008fb8 <_svfiprintf_r+0x1c8>
 8008e64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e66:	445a      	add	r2, fp
 8008e68:	9209      	str	r2, [sp, #36]	; 0x24
 8008e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 80a2 	beq.w	8008fb8 <_svfiprintf_r+0x1c8>
 8008e74:	2300      	movs	r3, #0
 8008e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e7e:	f10a 0a01 	add.w	sl, sl, #1
 8008e82:	9304      	str	r3, [sp, #16]
 8008e84:	9307      	str	r3, [sp, #28]
 8008e86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e8a:	931a      	str	r3, [sp, #104]	; 0x68
 8008e8c:	4654      	mov	r4, sl
 8008e8e:	2205      	movs	r2, #5
 8008e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e94:	4851      	ldr	r0, [pc, #324]	; (8008fdc <_svfiprintf_r+0x1ec>)
 8008e96:	f7f7 fa4b 	bl	8000330 <memchr>
 8008e9a:	9a04      	ldr	r2, [sp, #16]
 8008e9c:	b9d8      	cbnz	r0, 8008ed6 <_svfiprintf_r+0xe6>
 8008e9e:	06d0      	lsls	r0, r2, #27
 8008ea0:	bf44      	itt	mi
 8008ea2:	2320      	movmi	r3, #32
 8008ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ea8:	0711      	lsls	r1, r2, #28
 8008eaa:	bf44      	itt	mi
 8008eac:	232b      	movmi	r3, #43	; 0x2b
 8008eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8008eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8008eb8:	d015      	beq.n	8008ee6 <_svfiprintf_r+0xf6>
 8008eba:	9a07      	ldr	r2, [sp, #28]
 8008ebc:	4654      	mov	r4, sl
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	f04f 0c0a 	mov.w	ip, #10
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eca:	3b30      	subs	r3, #48	; 0x30
 8008ecc:	2b09      	cmp	r3, #9
 8008ece:	d94e      	bls.n	8008f6e <_svfiprintf_r+0x17e>
 8008ed0:	b1b0      	cbz	r0, 8008f00 <_svfiprintf_r+0x110>
 8008ed2:	9207      	str	r2, [sp, #28]
 8008ed4:	e014      	b.n	8008f00 <_svfiprintf_r+0x110>
 8008ed6:	eba0 0308 	sub.w	r3, r0, r8
 8008eda:	fa09 f303 	lsl.w	r3, r9, r3
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	9304      	str	r3, [sp, #16]
 8008ee2:	46a2      	mov	sl, r4
 8008ee4:	e7d2      	b.n	8008e8c <_svfiprintf_r+0x9c>
 8008ee6:	9b03      	ldr	r3, [sp, #12]
 8008ee8:	1d19      	adds	r1, r3, #4
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	9103      	str	r1, [sp, #12]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	bfbb      	ittet	lt
 8008ef2:	425b      	neglt	r3, r3
 8008ef4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ef8:	9307      	strge	r3, [sp, #28]
 8008efa:	9307      	strlt	r3, [sp, #28]
 8008efc:	bfb8      	it	lt
 8008efe:	9204      	strlt	r2, [sp, #16]
 8008f00:	7823      	ldrb	r3, [r4, #0]
 8008f02:	2b2e      	cmp	r3, #46	; 0x2e
 8008f04:	d10c      	bne.n	8008f20 <_svfiprintf_r+0x130>
 8008f06:	7863      	ldrb	r3, [r4, #1]
 8008f08:	2b2a      	cmp	r3, #42	; 0x2a
 8008f0a:	d135      	bne.n	8008f78 <_svfiprintf_r+0x188>
 8008f0c:	9b03      	ldr	r3, [sp, #12]
 8008f0e:	1d1a      	adds	r2, r3, #4
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	9203      	str	r2, [sp, #12]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	bfb8      	it	lt
 8008f18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f1c:	3402      	adds	r4, #2
 8008f1e:	9305      	str	r3, [sp, #20]
 8008f20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008fec <_svfiprintf_r+0x1fc>
 8008f24:	7821      	ldrb	r1, [r4, #0]
 8008f26:	2203      	movs	r2, #3
 8008f28:	4650      	mov	r0, sl
 8008f2a:	f7f7 fa01 	bl	8000330 <memchr>
 8008f2e:	b140      	cbz	r0, 8008f42 <_svfiprintf_r+0x152>
 8008f30:	2340      	movs	r3, #64	; 0x40
 8008f32:	eba0 000a 	sub.w	r0, r0, sl
 8008f36:	fa03 f000 	lsl.w	r0, r3, r0
 8008f3a:	9b04      	ldr	r3, [sp, #16]
 8008f3c:	4303      	orrs	r3, r0
 8008f3e:	3401      	adds	r4, #1
 8008f40:	9304      	str	r3, [sp, #16]
 8008f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f46:	4826      	ldr	r0, [pc, #152]	; (8008fe0 <_svfiprintf_r+0x1f0>)
 8008f48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f4c:	2206      	movs	r2, #6
 8008f4e:	f7f7 f9ef 	bl	8000330 <memchr>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	d038      	beq.n	8008fc8 <_svfiprintf_r+0x1d8>
 8008f56:	4b23      	ldr	r3, [pc, #140]	; (8008fe4 <_svfiprintf_r+0x1f4>)
 8008f58:	bb1b      	cbnz	r3, 8008fa2 <_svfiprintf_r+0x1b2>
 8008f5a:	9b03      	ldr	r3, [sp, #12]
 8008f5c:	3307      	adds	r3, #7
 8008f5e:	f023 0307 	bic.w	r3, r3, #7
 8008f62:	3308      	adds	r3, #8
 8008f64:	9303      	str	r3, [sp, #12]
 8008f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f68:	4433      	add	r3, r6
 8008f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f6c:	e767      	b.n	8008e3e <_svfiprintf_r+0x4e>
 8008f6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f72:	460c      	mov	r4, r1
 8008f74:	2001      	movs	r0, #1
 8008f76:	e7a5      	b.n	8008ec4 <_svfiprintf_r+0xd4>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	3401      	adds	r4, #1
 8008f7c:	9305      	str	r3, [sp, #20]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	f04f 0c0a 	mov.w	ip, #10
 8008f84:	4620      	mov	r0, r4
 8008f86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f8a:	3a30      	subs	r2, #48	; 0x30
 8008f8c:	2a09      	cmp	r2, #9
 8008f8e:	d903      	bls.n	8008f98 <_svfiprintf_r+0x1a8>
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d0c5      	beq.n	8008f20 <_svfiprintf_r+0x130>
 8008f94:	9105      	str	r1, [sp, #20]
 8008f96:	e7c3      	b.n	8008f20 <_svfiprintf_r+0x130>
 8008f98:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e7f0      	b.n	8008f84 <_svfiprintf_r+0x194>
 8008fa2:	ab03      	add	r3, sp, #12
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	462a      	mov	r2, r5
 8008fa8:	4b0f      	ldr	r3, [pc, #60]	; (8008fe8 <_svfiprintf_r+0x1f8>)
 8008faa:	a904      	add	r1, sp, #16
 8008fac:	4638      	mov	r0, r7
 8008fae:	f3af 8000 	nop.w
 8008fb2:	1c42      	adds	r2, r0, #1
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	d1d6      	bne.n	8008f66 <_svfiprintf_r+0x176>
 8008fb8:	89ab      	ldrh	r3, [r5, #12]
 8008fba:	065b      	lsls	r3, r3, #25
 8008fbc:	f53f af2c 	bmi.w	8008e18 <_svfiprintf_r+0x28>
 8008fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fc2:	b01d      	add	sp, #116	; 0x74
 8008fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc8:	ab03      	add	r3, sp, #12
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	462a      	mov	r2, r5
 8008fce:	4b06      	ldr	r3, [pc, #24]	; (8008fe8 <_svfiprintf_r+0x1f8>)
 8008fd0:	a904      	add	r1, sp, #16
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	f000 f9d4 	bl	8009380 <_printf_i>
 8008fd8:	e7eb      	b.n	8008fb2 <_svfiprintf_r+0x1c2>
 8008fda:	bf00      	nop
 8008fdc:	08009f9c 	.word	0x08009f9c
 8008fe0:	08009fa6 	.word	0x08009fa6
 8008fe4:	00000000 	.word	0x00000000
 8008fe8:	08008d39 	.word	0x08008d39
 8008fec:	08009fa2 	.word	0x08009fa2

08008ff0 <__sfputc_r>:
 8008ff0:	6893      	ldr	r3, [r2, #8]
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	b410      	push	{r4}
 8008ff8:	6093      	str	r3, [r2, #8]
 8008ffa:	da08      	bge.n	800900e <__sfputc_r+0x1e>
 8008ffc:	6994      	ldr	r4, [r2, #24]
 8008ffe:	42a3      	cmp	r3, r4
 8009000:	db01      	blt.n	8009006 <__sfputc_r+0x16>
 8009002:	290a      	cmp	r1, #10
 8009004:	d103      	bne.n	800900e <__sfputc_r+0x1e>
 8009006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800900a:	f000 baef 	b.w	80095ec <__swbuf_r>
 800900e:	6813      	ldr	r3, [r2, #0]
 8009010:	1c58      	adds	r0, r3, #1
 8009012:	6010      	str	r0, [r2, #0]
 8009014:	7019      	strb	r1, [r3, #0]
 8009016:	4608      	mov	r0, r1
 8009018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800901c:	4770      	bx	lr

0800901e <__sfputs_r>:
 800901e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009020:	4606      	mov	r6, r0
 8009022:	460f      	mov	r7, r1
 8009024:	4614      	mov	r4, r2
 8009026:	18d5      	adds	r5, r2, r3
 8009028:	42ac      	cmp	r4, r5
 800902a:	d101      	bne.n	8009030 <__sfputs_r+0x12>
 800902c:	2000      	movs	r0, #0
 800902e:	e007      	b.n	8009040 <__sfputs_r+0x22>
 8009030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009034:	463a      	mov	r2, r7
 8009036:	4630      	mov	r0, r6
 8009038:	f7ff ffda 	bl	8008ff0 <__sfputc_r>
 800903c:	1c43      	adds	r3, r0, #1
 800903e:	d1f3      	bne.n	8009028 <__sfputs_r+0xa>
 8009040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009044 <_vfiprintf_r>:
 8009044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009048:	460d      	mov	r5, r1
 800904a:	b09d      	sub	sp, #116	; 0x74
 800904c:	4614      	mov	r4, r2
 800904e:	4698      	mov	r8, r3
 8009050:	4606      	mov	r6, r0
 8009052:	b118      	cbz	r0, 800905c <_vfiprintf_r+0x18>
 8009054:	6983      	ldr	r3, [r0, #24]
 8009056:	b90b      	cbnz	r3, 800905c <_vfiprintf_r+0x18>
 8009058:	f000 fcaa 	bl	80099b0 <__sinit>
 800905c:	4b89      	ldr	r3, [pc, #548]	; (8009284 <_vfiprintf_r+0x240>)
 800905e:	429d      	cmp	r5, r3
 8009060:	d11b      	bne.n	800909a <_vfiprintf_r+0x56>
 8009062:	6875      	ldr	r5, [r6, #4]
 8009064:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009066:	07d9      	lsls	r1, r3, #31
 8009068:	d405      	bmi.n	8009076 <_vfiprintf_r+0x32>
 800906a:	89ab      	ldrh	r3, [r5, #12]
 800906c:	059a      	lsls	r2, r3, #22
 800906e:	d402      	bmi.n	8009076 <_vfiprintf_r+0x32>
 8009070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009072:	f000 fd3b 	bl	8009aec <__retarget_lock_acquire_recursive>
 8009076:	89ab      	ldrh	r3, [r5, #12]
 8009078:	071b      	lsls	r3, r3, #28
 800907a:	d501      	bpl.n	8009080 <_vfiprintf_r+0x3c>
 800907c:	692b      	ldr	r3, [r5, #16]
 800907e:	b9eb      	cbnz	r3, 80090bc <_vfiprintf_r+0x78>
 8009080:	4629      	mov	r1, r5
 8009082:	4630      	mov	r0, r6
 8009084:	f000 fb04 	bl	8009690 <__swsetup_r>
 8009088:	b1c0      	cbz	r0, 80090bc <_vfiprintf_r+0x78>
 800908a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800908c:	07dc      	lsls	r4, r3, #31
 800908e:	d50e      	bpl.n	80090ae <_vfiprintf_r+0x6a>
 8009090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009094:	b01d      	add	sp, #116	; 0x74
 8009096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909a:	4b7b      	ldr	r3, [pc, #492]	; (8009288 <_vfiprintf_r+0x244>)
 800909c:	429d      	cmp	r5, r3
 800909e:	d101      	bne.n	80090a4 <_vfiprintf_r+0x60>
 80090a0:	68b5      	ldr	r5, [r6, #8]
 80090a2:	e7df      	b.n	8009064 <_vfiprintf_r+0x20>
 80090a4:	4b79      	ldr	r3, [pc, #484]	; (800928c <_vfiprintf_r+0x248>)
 80090a6:	429d      	cmp	r5, r3
 80090a8:	bf08      	it	eq
 80090aa:	68f5      	ldreq	r5, [r6, #12]
 80090ac:	e7da      	b.n	8009064 <_vfiprintf_r+0x20>
 80090ae:	89ab      	ldrh	r3, [r5, #12]
 80090b0:	0598      	lsls	r0, r3, #22
 80090b2:	d4ed      	bmi.n	8009090 <_vfiprintf_r+0x4c>
 80090b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090b6:	f000 fd1a 	bl	8009aee <__retarget_lock_release_recursive>
 80090ba:	e7e9      	b.n	8009090 <_vfiprintf_r+0x4c>
 80090bc:	2300      	movs	r3, #0
 80090be:	9309      	str	r3, [sp, #36]	; 0x24
 80090c0:	2320      	movs	r3, #32
 80090c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80090ca:	2330      	movs	r3, #48	; 0x30
 80090cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009290 <_vfiprintf_r+0x24c>
 80090d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090d4:	f04f 0901 	mov.w	r9, #1
 80090d8:	4623      	mov	r3, r4
 80090da:	469a      	mov	sl, r3
 80090dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090e0:	b10a      	cbz	r2, 80090e6 <_vfiprintf_r+0xa2>
 80090e2:	2a25      	cmp	r2, #37	; 0x25
 80090e4:	d1f9      	bne.n	80090da <_vfiprintf_r+0x96>
 80090e6:	ebba 0b04 	subs.w	fp, sl, r4
 80090ea:	d00b      	beq.n	8009104 <_vfiprintf_r+0xc0>
 80090ec:	465b      	mov	r3, fp
 80090ee:	4622      	mov	r2, r4
 80090f0:	4629      	mov	r1, r5
 80090f2:	4630      	mov	r0, r6
 80090f4:	f7ff ff93 	bl	800901e <__sfputs_r>
 80090f8:	3001      	adds	r0, #1
 80090fa:	f000 80aa 	beq.w	8009252 <_vfiprintf_r+0x20e>
 80090fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009100:	445a      	add	r2, fp
 8009102:	9209      	str	r2, [sp, #36]	; 0x24
 8009104:	f89a 3000 	ldrb.w	r3, [sl]
 8009108:	2b00      	cmp	r3, #0
 800910a:	f000 80a2 	beq.w	8009252 <_vfiprintf_r+0x20e>
 800910e:	2300      	movs	r3, #0
 8009110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009118:	f10a 0a01 	add.w	sl, sl, #1
 800911c:	9304      	str	r3, [sp, #16]
 800911e:	9307      	str	r3, [sp, #28]
 8009120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009124:	931a      	str	r3, [sp, #104]	; 0x68
 8009126:	4654      	mov	r4, sl
 8009128:	2205      	movs	r2, #5
 800912a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800912e:	4858      	ldr	r0, [pc, #352]	; (8009290 <_vfiprintf_r+0x24c>)
 8009130:	f7f7 f8fe 	bl	8000330 <memchr>
 8009134:	9a04      	ldr	r2, [sp, #16]
 8009136:	b9d8      	cbnz	r0, 8009170 <_vfiprintf_r+0x12c>
 8009138:	06d1      	lsls	r1, r2, #27
 800913a:	bf44      	itt	mi
 800913c:	2320      	movmi	r3, #32
 800913e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009142:	0713      	lsls	r3, r2, #28
 8009144:	bf44      	itt	mi
 8009146:	232b      	movmi	r3, #43	; 0x2b
 8009148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800914c:	f89a 3000 	ldrb.w	r3, [sl]
 8009150:	2b2a      	cmp	r3, #42	; 0x2a
 8009152:	d015      	beq.n	8009180 <_vfiprintf_r+0x13c>
 8009154:	9a07      	ldr	r2, [sp, #28]
 8009156:	4654      	mov	r4, sl
 8009158:	2000      	movs	r0, #0
 800915a:	f04f 0c0a 	mov.w	ip, #10
 800915e:	4621      	mov	r1, r4
 8009160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009164:	3b30      	subs	r3, #48	; 0x30
 8009166:	2b09      	cmp	r3, #9
 8009168:	d94e      	bls.n	8009208 <_vfiprintf_r+0x1c4>
 800916a:	b1b0      	cbz	r0, 800919a <_vfiprintf_r+0x156>
 800916c:	9207      	str	r2, [sp, #28]
 800916e:	e014      	b.n	800919a <_vfiprintf_r+0x156>
 8009170:	eba0 0308 	sub.w	r3, r0, r8
 8009174:	fa09 f303 	lsl.w	r3, r9, r3
 8009178:	4313      	orrs	r3, r2
 800917a:	9304      	str	r3, [sp, #16]
 800917c:	46a2      	mov	sl, r4
 800917e:	e7d2      	b.n	8009126 <_vfiprintf_r+0xe2>
 8009180:	9b03      	ldr	r3, [sp, #12]
 8009182:	1d19      	adds	r1, r3, #4
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	9103      	str	r1, [sp, #12]
 8009188:	2b00      	cmp	r3, #0
 800918a:	bfbb      	ittet	lt
 800918c:	425b      	neglt	r3, r3
 800918e:	f042 0202 	orrlt.w	r2, r2, #2
 8009192:	9307      	strge	r3, [sp, #28]
 8009194:	9307      	strlt	r3, [sp, #28]
 8009196:	bfb8      	it	lt
 8009198:	9204      	strlt	r2, [sp, #16]
 800919a:	7823      	ldrb	r3, [r4, #0]
 800919c:	2b2e      	cmp	r3, #46	; 0x2e
 800919e:	d10c      	bne.n	80091ba <_vfiprintf_r+0x176>
 80091a0:	7863      	ldrb	r3, [r4, #1]
 80091a2:	2b2a      	cmp	r3, #42	; 0x2a
 80091a4:	d135      	bne.n	8009212 <_vfiprintf_r+0x1ce>
 80091a6:	9b03      	ldr	r3, [sp, #12]
 80091a8:	1d1a      	adds	r2, r3, #4
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	9203      	str	r2, [sp, #12]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	bfb8      	it	lt
 80091b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80091b6:	3402      	adds	r4, #2
 80091b8:	9305      	str	r3, [sp, #20]
 80091ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80092a0 <_vfiprintf_r+0x25c>
 80091be:	7821      	ldrb	r1, [r4, #0]
 80091c0:	2203      	movs	r2, #3
 80091c2:	4650      	mov	r0, sl
 80091c4:	f7f7 f8b4 	bl	8000330 <memchr>
 80091c8:	b140      	cbz	r0, 80091dc <_vfiprintf_r+0x198>
 80091ca:	2340      	movs	r3, #64	; 0x40
 80091cc:	eba0 000a 	sub.w	r0, r0, sl
 80091d0:	fa03 f000 	lsl.w	r0, r3, r0
 80091d4:	9b04      	ldr	r3, [sp, #16]
 80091d6:	4303      	orrs	r3, r0
 80091d8:	3401      	adds	r4, #1
 80091da:	9304      	str	r3, [sp, #16]
 80091dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e0:	482c      	ldr	r0, [pc, #176]	; (8009294 <_vfiprintf_r+0x250>)
 80091e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091e6:	2206      	movs	r2, #6
 80091e8:	f7f7 f8a2 	bl	8000330 <memchr>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d03f      	beq.n	8009270 <_vfiprintf_r+0x22c>
 80091f0:	4b29      	ldr	r3, [pc, #164]	; (8009298 <_vfiprintf_r+0x254>)
 80091f2:	bb1b      	cbnz	r3, 800923c <_vfiprintf_r+0x1f8>
 80091f4:	9b03      	ldr	r3, [sp, #12]
 80091f6:	3307      	adds	r3, #7
 80091f8:	f023 0307 	bic.w	r3, r3, #7
 80091fc:	3308      	adds	r3, #8
 80091fe:	9303      	str	r3, [sp, #12]
 8009200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009202:	443b      	add	r3, r7
 8009204:	9309      	str	r3, [sp, #36]	; 0x24
 8009206:	e767      	b.n	80090d8 <_vfiprintf_r+0x94>
 8009208:	fb0c 3202 	mla	r2, ip, r2, r3
 800920c:	460c      	mov	r4, r1
 800920e:	2001      	movs	r0, #1
 8009210:	e7a5      	b.n	800915e <_vfiprintf_r+0x11a>
 8009212:	2300      	movs	r3, #0
 8009214:	3401      	adds	r4, #1
 8009216:	9305      	str	r3, [sp, #20]
 8009218:	4619      	mov	r1, r3
 800921a:	f04f 0c0a 	mov.w	ip, #10
 800921e:	4620      	mov	r0, r4
 8009220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009224:	3a30      	subs	r2, #48	; 0x30
 8009226:	2a09      	cmp	r2, #9
 8009228:	d903      	bls.n	8009232 <_vfiprintf_r+0x1ee>
 800922a:	2b00      	cmp	r3, #0
 800922c:	d0c5      	beq.n	80091ba <_vfiprintf_r+0x176>
 800922e:	9105      	str	r1, [sp, #20]
 8009230:	e7c3      	b.n	80091ba <_vfiprintf_r+0x176>
 8009232:	fb0c 2101 	mla	r1, ip, r1, r2
 8009236:	4604      	mov	r4, r0
 8009238:	2301      	movs	r3, #1
 800923a:	e7f0      	b.n	800921e <_vfiprintf_r+0x1da>
 800923c:	ab03      	add	r3, sp, #12
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	462a      	mov	r2, r5
 8009242:	4b16      	ldr	r3, [pc, #88]	; (800929c <_vfiprintf_r+0x258>)
 8009244:	a904      	add	r1, sp, #16
 8009246:	4630      	mov	r0, r6
 8009248:	f3af 8000 	nop.w
 800924c:	4607      	mov	r7, r0
 800924e:	1c78      	adds	r0, r7, #1
 8009250:	d1d6      	bne.n	8009200 <_vfiprintf_r+0x1bc>
 8009252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009254:	07d9      	lsls	r1, r3, #31
 8009256:	d405      	bmi.n	8009264 <_vfiprintf_r+0x220>
 8009258:	89ab      	ldrh	r3, [r5, #12]
 800925a:	059a      	lsls	r2, r3, #22
 800925c:	d402      	bmi.n	8009264 <_vfiprintf_r+0x220>
 800925e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009260:	f000 fc45 	bl	8009aee <__retarget_lock_release_recursive>
 8009264:	89ab      	ldrh	r3, [r5, #12]
 8009266:	065b      	lsls	r3, r3, #25
 8009268:	f53f af12 	bmi.w	8009090 <_vfiprintf_r+0x4c>
 800926c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800926e:	e711      	b.n	8009094 <_vfiprintf_r+0x50>
 8009270:	ab03      	add	r3, sp, #12
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	462a      	mov	r2, r5
 8009276:	4b09      	ldr	r3, [pc, #36]	; (800929c <_vfiprintf_r+0x258>)
 8009278:	a904      	add	r1, sp, #16
 800927a:	4630      	mov	r0, r6
 800927c:	f000 f880 	bl	8009380 <_printf_i>
 8009280:	e7e4      	b.n	800924c <_vfiprintf_r+0x208>
 8009282:	bf00      	nop
 8009284:	08009ff0 	.word	0x08009ff0
 8009288:	0800a010 	.word	0x0800a010
 800928c:	08009fd0 	.word	0x08009fd0
 8009290:	08009f9c 	.word	0x08009f9c
 8009294:	08009fa6 	.word	0x08009fa6
 8009298:	00000000 	.word	0x00000000
 800929c:	0800901f 	.word	0x0800901f
 80092a0:	08009fa2 	.word	0x08009fa2

080092a4 <_printf_common>:
 80092a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a8:	4616      	mov	r6, r2
 80092aa:	4699      	mov	r9, r3
 80092ac:	688a      	ldr	r2, [r1, #8]
 80092ae:	690b      	ldr	r3, [r1, #16]
 80092b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092b4:	4293      	cmp	r3, r2
 80092b6:	bfb8      	it	lt
 80092b8:	4613      	movlt	r3, r2
 80092ba:	6033      	str	r3, [r6, #0]
 80092bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092c0:	4607      	mov	r7, r0
 80092c2:	460c      	mov	r4, r1
 80092c4:	b10a      	cbz	r2, 80092ca <_printf_common+0x26>
 80092c6:	3301      	adds	r3, #1
 80092c8:	6033      	str	r3, [r6, #0]
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	0699      	lsls	r1, r3, #26
 80092ce:	bf42      	ittt	mi
 80092d0:	6833      	ldrmi	r3, [r6, #0]
 80092d2:	3302      	addmi	r3, #2
 80092d4:	6033      	strmi	r3, [r6, #0]
 80092d6:	6825      	ldr	r5, [r4, #0]
 80092d8:	f015 0506 	ands.w	r5, r5, #6
 80092dc:	d106      	bne.n	80092ec <_printf_common+0x48>
 80092de:	f104 0a19 	add.w	sl, r4, #25
 80092e2:	68e3      	ldr	r3, [r4, #12]
 80092e4:	6832      	ldr	r2, [r6, #0]
 80092e6:	1a9b      	subs	r3, r3, r2
 80092e8:	42ab      	cmp	r3, r5
 80092ea:	dc26      	bgt.n	800933a <_printf_common+0x96>
 80092ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092f0:	1e13      	subs	r3, r2, #0
 80092f2:	6822      	ldr	r2, [r4, #0]
 80092f4:	bf18      	it	ne
 80092f6:	2301      	movne	r3, #1
 80092f8:	0692      	lsls	r2, r2, #26
 80092fa:	d42b      	bmi.n	8009354 <_printf_common+0xb0>
 80092fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009300:	4649      	mov	r1, r9
 8009302:	4638      	mov	r0, r7
 8009304:	47c0      	blx	r8
 8009306:	3001      	adds	r0, #1
 8009308:	d01e      	beq.n	8009348 <_printf_common+0xa4>
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	68e5      	ldr	r5, [r4, #12]
 800930e:	6832      	ldr	r2, [r6, #0]
 8009310:	f003 0306 	and.w	r3, r3, #6
 8009314:	2b04      	cmp	r3, #4
 8009316:	bf08      	it	eq
 8009318:	1aad      	subeq	r5, r5, r2
 800931a:	68a3      	ldr	r3, [r4, #8]
 800931c:	6922      	ldr	r2, [r4, #16]
 800931e:	bf0c      	ite	eq
 8009320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009324:	2500      	movne	r5, #0
 8009326:	4293      	cmp	r3, r2
 8009328:	bfc4      	itt	gt
 800932a:	1a9b      	subgt	r3, r3, r2
 800932c:	18ed      	addgt	r5, r5, r3
 800932e:	2600      	movs	r6, #0
 8009330:	341a      	adds	r4, #26
 8009332:	42b5      	cmp	r5, r6
 8009334:	d11a      	bne.n	800936c <_printf_common+0xc8>
 8009336:	2000      	movs	r0, #0
 8009338:	e008      	b.n	800934c <_printf_common+0xa8>
 800933a:	2301      	movs	r3, #1
 800933c:	4652      	mov	r2, sl
 800933e:	4649      	mov	r1, r9
 8009340:	4638      	mov	r0, r7
 8009342:	47c0      	blx	r8
 8009344:	3001      	adds	r0, #1
 8009346:	d103      	bne.n	8009350 <_printf_common+0xac>
 8009348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800934c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009350:	3501      	adds	r5, #1
 8009352:	e7c6      	b.n	80092e2 <_printf_common+0x3e>
 8009354:	18e1      	adds	r1, r4, r3
 8009356:	1c5a      	adds	r2, r3, #1
 8009358:	2030      	movs	r0, #48	; 0x30
 800935a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800935e:	4422      	add	r2, r4
 8009360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009368:	3302      	adds	r3, #2
 800936a:	e7c7      	b.n	80092fc <_printf_common+0x58>
 800936c:	2301      	movs	r3, #1
 800936e:	4622      	mov	r2, r4
 8009370:	4649      	mov	r1, r9
 8009372:	4638      	mov	r0, r7
 8009374:	47c0      	blx	r8
 8009376:	3001      	adds	r0, #1
 8009378:	d0e6      	beq.n	8009348 <_printf_common+0xa4>
 800937a:	3601      	adds	r6, #1
 800937c:	e7d9      	b.n	8009332 <_printf_common+0x8e>
	...

08009380 <_printf_i>:
 8009380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009384:	7e0f      	ldrb	r7, [r1, #24]
 8009386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009388:	2f78      	cmp	r7, #120	; 0x78
 800938a:	4691      	mov	r9, r2
 800938c:	4680      	mov	r8, r0
 800938e:	460c      	mov	r4, r1
 8009390:	469a      	mov	sl, r3
 8009392:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009396:	d807      	bhi.n	80093a8 <_printf_i+0x28>
 8009398:	2f62      	cmp	r7, #98	; 0x62
 800939a:	d80a      	bhi.n	80093b2 <_printf_i+0x32>
 800939c:	2f00      	cmp	r7, #0
 800939e:	f000 80d8 	beq.w	8009552 <_printf_i+0x1d2>
 80093a2:	2f58      	cmp	r7, #88	; 0x58
 80093a4:	f000 80a3 	beq.w	80094ee <_printf_i+0x16e>
 80093a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093b0:	e03a      	b.n	8009428 <_printf_i+0xa8>
 80093b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093b6:	2b15      	cmp	r3, #21
 80093b8:	d8f6      	bhi.n	80093a8 <_printf_i+0x28>
 80093ba:	a101      	add	r1, pc, #4	; (adr r1, 80093c0 <_printf_i+0x40>)
 80093bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093c0:	08009419 	.word	0x08009419
 80093c4:	0800942d 	.word	0x0800942d
 80093c8:	080093a9 	.word	0x080093a9
 80093cc:	080093a9 	.word	0x080093a9
 80093d0:	080093a9 	.word	0x080093a9
 80093d4:	080093a9 	.word	0x080093a9
 80093d8:	0800942d 	.word	0x0800942d
 80093dc:	080093a9 	.word	0x080093a9
 80093e0:	080093a9 	.word	0x080093a9
 80093e4:	080093a9 	.word	0x080093a9
 80093e8:	080093a9 	.word	0x080093a9
 80093ec:	08009539 	.word	0x08009539
 80093f0:	0800945d 	.word	0x0800945d
 80093f4:	0800951b 	.word	0x0800951b
 80093f8:	080093a9 	.word	0x080093a9
 80093fc:	080093a9 	.word	0x080093a9
 8009400:	0800955b 	.word	0x0800955b
 8009404:	080093a9 	.word	0x080093a9
 8009408:	0800945d 	.word	0x0800945d
 800940c:	080093a9 	.word	0x080093a9
 8009410:	080093a9 	.word	0x080093a9
 8009414:	08009523 	.word	0x08009523
 8009418:	682b      	ldr	r3, [r5, #0]
 800941a:	1d1a      	adds	r2, r3, #4
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	602a      	str	r2, [r5, #0]
 8009420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009428:	2301      	movs	r3, #1
 800942a:	e0a3      	b.n	8009574 <_printf_i+0x1f4>
 800942c:	6820      	ldr	r0, [r4, #0]
 800942e:	6829      	ldr	r1, [r5, #0]
 8009430:	0606      	lsls	r6, r0, #24
 8009432:	f101 0304 	add.w	r3, r1, #4
 8009436:	d50a      	bpl.n	800944e <_printf_i+0xce>
 8009438:	680e      	ldr	r6, [r1, #0]
 800943a:	602b      	str	r3, [r5, #0]
 800943c:	2e00      	cmp	r6, #0
 800943e:	da03      	bge.n	8009448 <_printf_i+0xc8>
 8009440:	232d      	movs	r3, #45	; 0x2d
 8009442:	4276      	negs	r6, r6
 8009444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009448:	485e      	ldr	r0, [pc, #376]	; (80095c4 <_printf_i+0x244>)
 800944a:	230a      	movs	r3, #10
 800944c:	e019      	b.n	8009482 <_printf_i+0x102>
 800944e:	680e      	ldr	r6, [r1, #0]
 8009450:	602b      	str	r3, [r5, #0]
 8009452:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009456:	bf18      	it	ne
 8009458:	b236      	sxthne	r6, r6
 800945a:	e7ef      	b.n	800943c <_printf_i+0xbc>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	6820      	ldr	r0, [r4, #0]
 8009460:	1d19      	adds	r1, r3, #4
 8009462:	6029      	str	r1, [r5, #0]
 8009464:	0601      	lsls	r1, r0, #24
 8009466:	d501      	bpl.n	800946c <_printf_i+0xec>
 8009468:	681e      	ldr	r6, [r3, #0]
 800946a:	e002      	b.n	8009472 <_printf_i+0xf2>
 800946c:	0646      	lsls	r6, r0, #25
 800946e:	d5fb      	bpl.n	8009468 <_printf_i+0xe8>
 8009470:	881e      	ldrh	r6, [r3, #0]
 8009472:	4854      	ldr	r0, [pc, #336]	; (80095c4 <_printf_i+0x244>)
 8009474:	2f6f      	cmp	r7, #111	; 0x6f
 8009476:	bf0c      	ite	eq
 8009478:	2308      	moveq	r3, #8
 800947a:	230a      	movne	r3, #10
 800947c:	2100      	movs	r1, #0
 800947e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009482:	6865      	ldr	r5, [r4, #4]
 8009484:	60a5      	str	r5, [r4, #8]
 8009486:	2d00      	cmp	r5, #0
 8009488:	bfa2      	ittt	ge
 800948a:	6821      	ldrge	r1, [r4, #0]
 800948c:	f021 0104 	bicge.w	r1, r1, #4
 8009490:	6021      	strge	r1, [r4, #0]
 8009492:	b90e      	cbnz	r6, 8009498 <_printf_i+0x118>
 8009494:	2d00      	cmp	r5, #0
 8009496:	d04d      	beq.n	8009534 <_printf_i+0x1b4>
 8009498:	4615      	mov	r5, r2
 800949a:	fbb6 f1f3 	udiv	r1, r6, r3
 800949e:	fb03 6711 	mls	r7, r3, r1, r6
 80094a2:	5dc7      	ldrb	r7, [r0, r7]
 80094a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094a8:	4637      	mov	r7, r6
 80094aa:	42bb      	cmp	r3, r7
 80094ac:	460e      	mov	r6, r1
 80094ae:	d9f4      	bls.n	800949a <_printf_i+0x11a>
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	d10b      	bne.n	80094cc <_printf_i+0x14c>
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	07de      	lsls	r6, r3, #31
 80094b8:	d508      	bpl.n	80094cc <_printf_i+0x14c>
 80094ba:	6923      	ldr	r3, [r4, #16]
 80094bc:	6861      	ldr	r1, [r4, #4]
 80094be:	4299      	cmp	r1, r3
 80094c0:	bfde      	ittt	le
 80094c2:	2330      	movle	r3, #48	; 0x30
 80094c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80094cc:	1b52      	subs	r2, r2, r5
 80094ce:	6122      	str	r2, [r4, #16]
 80094d0:	f8cd a000 	str.w	sl, [sp]
 80094d4:	464b      	mov	r3, r9
 80094d6:	aa03      	add	r2, sp, #12
 80094d8:	4621      	mov	r1, r4
 80094da:	4640      	mov	r0, r8
 80094dc:	f7ff fee2 	bl	80092a4 <_printf_common>
 80094e0:	3001      	adds	r0, #1
 80094e2:	d14c      	bne.n	800957e <_printf_i+0x1fe>
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094e8:	b004      	add	sp, #16
 80094ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ee:	4835      	ldr	r0, [pc, #212]	; (80095c4 <_printf_i+0x244>)
 80094f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80094f4:	6829      	ldr	r1, [r5, #0]
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80094fc:	6029      	str	r1, [r5, #0]
 80094fe:	061d      	lsls	r5, r3, #24
 8009500:	d514      	bpl.n	800952c <_printf_i+0x1ac>
 8009502:	07df      	lsls	r7, r3, #31
 8009504:	bf44      	itt	mi
 8009506:	f043 0320 	orrmi.w	r3, r3, #32
 800950a:	6023      	strmi	r3, [r4, #0]
 800950c:	b91e      	cbnz	r6, 8009516 <_printf_i+0x196>
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	f023 0320 	bic.w	r3, r3, #32
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	2310      	movs	r3, #16
 8009518:	e7b0      	b.n	800947c <_printf_i+0xfc>
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	f043 0320 	orr.w	r3, r3, #32
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	2378      	movs	r3, #120	; 0x78
 8009524:	4828      	ldr	r0, [pc, #160]	; (80095c8 <_printf_i+0x248>)
 8009526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800952a:	e7e3      	b.n	80094f4 <_printf_i+0x174>
 800952c:	0659      	lsls	r1, r3, #25
 800952e:	bf48      	it	mi
 8009530:	b2b6      	uxthmi	r6, r6
 8009532:	e7e6      	b.n	8009502 <_printf_i+0x182>
 8009534:	4615      	mov	r5, r2
 8009536:	e7bb      	b.n	80094b0 <_printf_i+0x130>
 8009538:	682b      	ldr	r3, [r5, #0]
 800953a:	6826      	ldr	r6, [r4, #0]
 800953c:	6961      	ldr	r1, [r4, #20]
 800953e:	1d18      	adds	r0, r3, #4
 8009540:	6028      	str	r0, [r5, #0]
 8009542:	0635      	lsls	r5, r6, #24
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	d501      	bpl.n	800954c <_printf_i+0x1cc>
 8009548:	6019      	str	r1, [r3, #0]
 800954a:	e002      	b.n	8009552 <_printf_i+0x1d2>
 800954c:	0670      	lsls	r0, r6, #25
 800954e:	d5fb      	bpl.n	8009548 <_printf_i+0x1c8>
 8009550:	8019      	strh	r1, [r3, #0]
 8009552:	2300      	movs	r3, #0
 8009554:	6123      	str	r3, [r4, #16]
 8009556:	4615      	mov	r5, r2
 8009558:	e7ba      	b.n	80094d0 <_printf_i+0x150>
 800955a:	682b      	ldr	r3, [r5, #0]
 800955c:	1d1a      	adds	r2, r3, #4
 800955e:	602a      	str	r2, [r5, #0]
 8009560:	681d      	ldr	r5, [r3, #0]
 8009562:	6862      	ldr	r2, [r4, #4]
 8009564:	2100      	movs	r1, #0
 8009566:	4628      	mov	r0, r5
 8009568:	f7f6 fee2 	bl	8000330 <memchr>
 800956c:	b108      	cbz	r0, 8009572 <_printf_i+0x1f2>
 800956e:	1b40      	subs	r0, r0, r5
 8009570:	6060      	str	r0, [r4, #4]
 8009572:	6863      	ldr	r3, [r4, #4]
 8009574:	6123      	str	r3, [r4, #16]
 8009576:	2300      	movs	r3, #0
 8009578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800957c:	e7a8      	b.n	80094d0 <_printf_i+0x150>
 800957e:	6923      	ldr	r3, [r4, #16]
 8009580:	462a      	mov	r2, r5
 8009582:	4649      	mov	r1, r9
 8009584:	4640      	mov	r0, r8
 8009586:	47d0      	blx	sl
 8009588:	3001      	adds	r0, #1
 800958a:	d0ab      	beq.n	80094e4 <_printf_i+0x164>
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	079b      	lsls	r3, r3, #30
 8009590:	d413      	bmi.n	80095ba <_printf_i+0x23a>
 8009592:	68e0      	ldr	r0, [r4, #12]
 8009594:	9b03      	ldr	r3, [sp, #12]
 8009596:	4298      	cmp	r0, r3
 8009598:	bfb8      	it	lt
 800959a:	4618      	movlt	r0, r3
 800959c:	e7a4      	b.n	80094e8 <_printf_i+0x168>
 800959e:	2301      	movs	r3, #1
 80095a0:	4632      	mov	r2, r6
 80095a2:	4649      	mov	r1, r9
 80095a4:	4640      	mov	r0, r8
 80095a6:	47d0      	blx	sl
 80095a8:	3001      	adds	r0, #1
 80095aa:	d09b      	beq.n	80094e4 <_printf_i+0x164>
 80095ac:	3501      	adds	r5, #1
 80095ae:	68e3      	ldr	r3, [r4, #12]
 80095b0:	9903      	ldr	r1, [sp, #12]
 80095b2:	1a5b      	subs	r3, r3, r1
 80095b4:	42ab      	cmp	r3, r5
 80095b6:	dcf2      	bgt.n	800959e <_printf_i+0x21e>
 80095b8:	e7eb      	b.n	8009592 <_printf_i+0x212>
 80095ba:	2500      	movs	r5, #0
 80095bc:	f104 0619 	add.w	r6, r4, #25
 80095c0:	e7f5      	b.n	80095ae <_printf_i+0x22e>
 80095c2:	bf00      	nop
 80095c4:	08009fad 	.word	0x08009fad
 80095c8:	08009fbe 	.word	0x08009fbe

080095cc <_sbrk_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4d06      	ldr	r5, [pc, #24]	; (80095e8 <_sbrk_r+0x1c>)
 80095d0:	2300      	movs	r3, #0
 80095d2:	4604      	mov	r4, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	602b      	str	r3, [r5, #0]
 80095d8:	f7f7 f986 	bl	80008e8 <_sbrk>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	d102      	bne.n	80095e6 <_sbrk_r+0x1a>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	b103      	cbz	r3, 80095e6 <_sbrk_r+0x1a>
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	2400321c 	.word	0x2400321c

080095ec <__swbuf_r>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	460e      	mov	r6, r1
 80095f0:	4614      	mov	r4, r2
 80095f2:	4605      	mov	r5, r0
 80095f4:	b118      	cbz	r0, 80095fe <__swbuf_r+0x12>
 80095f6:	6983      	ldr	r3, [r0, #24]
 80095f8:	b90b      	cbnz	r3, 80095fe <__swbuf_r+0x12>
 80095fa:	f000 f9d9 	bl	80099b0 <__sinit>
 80095fe:	4b21      	ldr	r3, [pc, #132]	; (8009684 <__swbuf_r+0x98>)
 8009600:	429c      	cmp	r4, r3
 8009602:	d12b      	bne.n	800965c <__swbuf_r+0x70>
 8009604:	686c      	ldr	r4, [r5, #4]
 8009606:	69a3      	ldr	r3, [r4, #24]
 8009608:	60a3      	str	r3, [r4, #8]
 800960a:	89a3      	ldrh	r3, [r4, #12]
 800960c:	071a      	lsls	r2, r3, #28
 800960e:	d52f      	bpl.n	8009670 <__swbuf_r+0x84>
 8009610:	6923      	ldr	r3, [r4, #16]
 8009612:	b36b      	cbz	r3, 8009670 <__swbuf_r+0x84>
 8009614:	6923      	ldr	r3, [r4, #16]
 8009616:	6820      	ldr	r0, [r4, #0]
 8009618:	1ac0      	subs	r0, r0, r3
 800961a:	6963      	ldr	r3, [r4, #20]
 800961c:	b2f6      	uxtb	r6, r6
 800961e:	4283      	cmp	r3, r0
 8009620:	4637      	mov	r7, r6
 8009622:	dc04      	bgt.n	800962e <__swbuf_r+0x42>
 8009624:	4621      	mov	r1, r4
 8009626:	4628      	mov	r0, r5
 8009628:	f000 f92e 	bl	8009888 <_fflush_r>
 800962c:	bb30      	cbnz	r0, 800967c <__swbuf_r+0x90>
 800962e:	68a3      	ldr	r3, [r4, #8]
 8009630:	3b01      	subs	r3, #1
 8009632:	60a3      	str	r3, [r4, #8]
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	1c5a      	adds	r2, r3, #1
 8009638:	6022      	str	r2, [r4, #0]
 800963a:	701e      	strb	r6, [r3, #0]
 800963c:	6963      	ldr	r3, [r4, #20]
 800963e:	3001      	adds	r0, #1
 8009640:	4283      	cmp	r3, r0
 8009642:	d004      	beq.n	800964e <__swbuf_r+0x62>
 8009644:	89a3      	ldrh	r3, [r4, #12]
 8009646:	07db      	lsls	r3, r3, #31
 8009648:	d506      	bpl.n	8009658 <__swbuf_r+0x6c>
 800964a:	2e0a      	cmp	r6, #10
 800964c:	d104      	bne.n	8009658 <__swbuf_r+0x6c>
 800964e:	4621      	mov	r1, r4
 8009650:	4628      	mov	r0, r5
 8009652:	f000 f919 	bl	8009888 <_fflush_r>
 8009656:	b988      	cbnz	r0, 800967c <__swbuf_r+0x90>
 8009658:	4638      	mov	r0, r7
 800965a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800965c:	4b0a      	ldr	r3, [pc, #40]	; (8009688 <__swbuf_r+0x9c>)
 800965e:	429c      	cmp	r4, r3
 8009660:	d101      	bne.n	8009666 <__swbuf_r+0x7a>
 8009662:	68ac      	ldr	r4, [r5, #8]
 8009664:	e7cf      	b.n	8009606 <__swbuf_r+0x1a>
 8009666:	4b09      	ldr	r3, [pc, #36]	; (800968c <__swbuf_r+0xa0>)
 8009668:	429c      	cmp	r4, r3
 800966a:	bf08      	it	eq
 800966c:	68ec      	ldreq	r4, [r5, #12]
 800966e:	e7ca      	b.n	8009606 <__swbuf_r+0x1a>
 8009670:	4621      	mov	r1, r4
 8009672:	4628      	mov	r0, r5
 8009674:	f000 f80c 	bl	8009690 <__swsetup_r>
 8009678:	2800      	cmp	r0, #0
 800967a:	d0cb      	beq.n	8009614 <__swbuf_r+0x28>
 800967c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009680:	e7ea      	b.n	8009658 <__swbuf_r+0x6c>
 8009682:	bf00      	nop
 8009684:	08009ff0 	.word	0x08009ff0
 8009688:	0800a010 	.word	0x0800a010
 800968c:	08009fd0 	.word	0x08009fd0

08009690 <__swsetup_r>:
 8009690:	4b32      	ldr	r3, [pc, #200]	; (800975c <__swsetup_r+0xcc>)
 8009692:	b570      	push	{r4, r5, r6, lr}
 8009694:	681d      	ldr	r5, [r3, #0]
 8009696:	4606      	mov	r6, r0
 8009698:	460c      	mov	r4, r1
 800969a:	b125      	cbz	r5, 80096a6 <__swsetup_r+0x16>
 800969c:	69ab      	ldr	r3, [r5, #24]
 800969e:	b913      	cbnz	r3, 80096a6 <__swsetup_r+0x16>
 80096a0:	4628      	mov	r0, r5
 80096a2:	f000 f985 	bl	80099b0 <__sinit>
 80096a6:	4b2e      	ldr	r3, [pc, #184]	; (8009760 <__swsetup_r+0xd0>)
 80096a8:	429c      	cmp	r4, r3
 80096aa:	d10f      	bne.n	80096cc <__swsetup_r+0x3c>
 80096ac:	686c      	ldr	r4, [r5, #4]
 80096ae:	89a3      	ldrh	r3, [r4, #12]
 80096b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096b4:	0719      	lsls	r1, r3, #28
 80096b6:	d42c      	bmi.n	8009712 <__swsetup_r+0x82>
 80096b8:	06dd      	lsls	r5, r3, #27
 80096ba:	d411      	bmi.n	80096e0 <__swsetup_r+0x50>
 80096bc:	2309      	movs	r3, #9
 80096be:	6033      	str	r3, [r6, #0]
 80096c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80096c4:	81a3      	strh	r3, [r4, #12]
 80096c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096ca:	e03e      	b.n	800974a <__swsetup_r+0xba>
 80096cc:	4b25      	ldr	r3, [pc, #148]	; (8009764 <__swsetup_r+0xd4>)
 80096ce:	429c      	cmp	r4, r3
 80096d0:	d101      	bne.n	80096d6 <__swsetup_r+0x46>
 80096d2:	68ac      	ldr	r4, [r5, #8]
 80096d4:	e7eb      	b.n	80096ae <__swsetup_r+0x1e>
 80096d6:	4b24      	ldr	r3, [pc, #144]	; (8009768 <__swsetup_r+0xd8>)
 80096d8:	429c      	cmp	r4, r3
 80096da:	bf08      	it	eq
 80096dc:	68ec      	ldreq	r4, [r5, #12]
 80096de:	e7e6      	b.n	80096ae <__swsetup_r+0x1e>
 80096e0:	0758      	lsls	r0, r3, #29
 80096e2:	d512      	bpl.n	800970a <__swsetup_r+0x7a>
 80096e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096e6:	b141      	cbz	r1, 80096fa <__swsetup_r+0x6a>
 80096e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096ec:	4299      	cmp	r1, r3
 80096ee:	d002      	beq.n	80096f6 <__swsetup_r+0x66>
 80096f0:	4630      	mov	r0, r6
 80096f2:	f7ff fa41 	bl	8008b78 <_free_r>
 80096f6:	2300      	movs	r3, #0
 80096f8:	6363      	str	r3, [r4, #52]	; 0x34
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009700:	81a3      	strh	r3, [r4, #12]
 8009702:	2300      	movs	r3, #0
 8009704:	6063      	str	r3, [r4, #4]
 8009706:	6923      	ldr	r3, [r4, #16]
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	f043 0308 	orr.w	r3, r3, #8
 8009710:	81a3      	strh	r3, [r4, #12]
 8009712:	6923      	ldr	r3, [r4, #16]
 8009714:	b94b      	cbnz	r3, 800972a <__swsetup_r+0x9a>
 8009716:	89a3      	ldrh	r3, [r4, #12]
 8009718:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800971c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009720:	d003      	beq.n	800972a <__swsetup_r+0x9a>
 8009722:	4621      	mov	r1, r4
 8009724:	4630      	mov	r0, r6
 8009726:	f000 fa09 	bl	8009b3c <__smakebuf_r>
 800972a:	89a0      	ldrh	r0, [r4, #12]
 800972c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009730:	f010 0301 	ands.w	r3, r0, #1
 8009734:	d00a      	beq.n	800974c <__swsetup_r+0xbc>
 8009736:	2300      	movs	r3, #0
 8009738:	60a3      	str	r3, [r4, #8]
 800973a:	6963      	ldr	r3, [r4, #20]
 800973c:	425b      	negs	r3, r3
 800973e:	61a3      	str	r3, [r4, #24]
 8009740:	6923      	ldr	r3, [r4, #16]
 8009742:	b943      	cbnz	r3, 8009756 <__swsetup_r+0xc6>
 8009744:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009748:	d1ba      	bne.n	80096c0 <__swsetup_r+0x30>
 800974a:	bd70      	pop	{r4, r5, r6, pc}
 800974c:	0781      	lsls	r1, r0, #30
 800974e:	bf58      	it	pl
 8009750:	6963      	ldrpl	r3, [r4, #20]
 8009752:	60a3      	str	r3, [r4, #8]
 8009754:	e7f4      	b.n	8009740 <__swsetup_r+0xb0>
 8009756:	2000      	movs	r0, #0
 8009758:	e7f7      	b.n	800974a <__swsetup_r+0xba>
 800975a:	bf00      	nop
 800975c:	24000128 	.word	0x24000128
 8009760:	08009ff0 	.word	0x08009ff0
 8009764:	0800a010 	.word	0x0800a010
 8009768:	08009fd0 	.word	0x08009fd0

0800976c <abort>:
 800976c:	b508      	push	{r3, lr}
 800976e:	2006      	movs	r0, #6
 8009770:	f000 faa2 	bl	8009cb8 <raise>
 8009774:	2001      	movs	r0, #1
 8009776:	f7f7 f83f 	bl	80007f8 <_exit>
	...

0800977c <__sflush_r>:
 800977c:	898a      	ldrh	r2, [r1, #12]
 800977e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009782:	4605      	mov	r5, r0
 8009784:	0710      	lsls	r0, r2, #28
 8009786:	460c      	mov	r4, r1
 8009788:	d458      	bmi.n	800983c <__sflush_r+0xc0>
 800978a:	684b      	ldr	r3, [r1, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	dc05      	bgt.n	800979c <__sflush_r+0x20>
 8009790:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009792:	2b00      	cmp	r3, #0
 8009794:	dc02      	bgt.n	800979c <__sflush_r+0x20>
 8009796:	2000      	movs	r0, #0
 8009798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800979c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800979e:	2e00      	cmp	r6, #0
 80097a0:	d0f9      	beq.n	8009796 <__sflush_r+0x1a>
 80097a2:	2300      	movs	r3, #0
 80097a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097a8:	682f      	ldr	r7, [r5, #0]
 80097aa:	602b      	str	r3, [r5, #0]
 80097ac:	d032      	beq.n	8009814 <__sflush_r+0x98>
 80097ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097b0:	89a3      	ldrh	r3, [r4, #12]
 80097b2:	075a      	lsls	r2, r3, #29
 80097b4:	d505      	bpl.n	80097c2 <__sflush_r+0x46>
 80097b6:	6863      	ldr	r3, [r4, #4]
 80097b8:	1ac0      	subs	r0, r0, r3
 80097ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097bc:	b10b      	cbz	r3, 80097c2 <__sflush_r+0x46>
 80097be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097c0:	1ac0      	subs	r0, r0, r3
 80097c2:	2300      	movs	r3, #0
 80097c4:	4602      	mov	r2, r0
 80097c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097c8:	6a21      	ldr	r1, [r4, #32]
 80097ca:	4628      	mov	r0, r5
 80097cc:	47b0      	blx	r6
 80097ce:	1c43      	adds	r3, r0, #1
 80097d0:	89a3      	ldrh	r3, [r4, #12]
 80097d2:	d106      	bne.n	80097e2 <__sflush_r+0x66>
 80097d4:	6829      	ldr	r1, [r5, #0]
 80097d6:	291d      	cmp	r1, #29
 80097d8:	d82c      	bhi.n	8009834 <__sflush_r+0xb8>
 80097da:	4a2a      	ldr	r2, [pc, #168]	; (8009884 <__sflush_r+0x108>)
 80097dc:	40ca      	lsrs	r2, r1
 80097de:	07d6      	lsls	r6, r2, #31
 80097e0:	d528      	bpl.n	8009834 <__sflush_r+0xb8>
 80097e2:	2200      	movs	r2, #0
 80097e4:	6062      	str	r2, [r4, #4]
 80097e6:	04d9      	lsls	r1, r3, #19
 80097e8:	6922      	ldr	r2, [r4, #16]
 80097ea:	6022      	str	r2, [r4, #0]
 80097ec:	d504      	bpl.n	80097f8 <__sflush_r+0x7c>
 80097ee:	1c42      	adds	r2, r0, #1
 80097f0:	d101      	bne.n	80097f6 <__sflush_r+0x7a>
 80097f2:	682b      	ldr	r3, [r5, #0]
 80097f4:	b903      	cbnz	r3, 80097f8 <__sflush_r+0x7c>
 80097f6:	6560      	str	r0, [r4, #84]	; 0x54
 80097f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097fa:	602f      	str	r7, [r5, #0]
 80097fc:	2900      	cmp	r1, #0
 80097fe:	d0ca      	beq.n	8009796 <__sflush_r+0x1a>
 8009800:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009804:	4299      	cmp	r1, r3
 8009806:	d002      	beq.n	800980e <__sflush_r+0x92>
 8009808:	4628      	mov	r0, r5
 800980a:	f7ff f9b5 	bl	8008b78 <_free_r>
 800980e:	2000      	movs	r0, #0
 8009810:	6360      	str	r0, [r4, #52]	; 0x34
 8009812:	e7c1      	b.n	8009798 <__sflush_r+0x1c>
 8009814:	6a21      	ldr	r1, [r4, #32]
 8009816:	2301      	movs	r3, #1
 8009818:	4628      	mov	r0, r5
 800981a:	47b0      	blx	r6
 800981c:	1c41      	adds	r1, r0, #1
 800981e:	d1c7      	bne.n	80097b0 <__sflush_r+0x34>
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d0c4      	beq.n	80097b0 <__sflush_r+0x34>
 8009826:	2b1d      	cmp	r3, #29
 8009828:	d001      	beq.n	800982e <__sflush_r+0xb2>
 800982a:	2b16      	cmp	r3, #22
 800982c:	d101      	bne.n	8009832 <__sflush_r+0xb6>
 800982e:	602f      	str	r7, [r5, #0]
 8009830:	e7b1      	b.n	8009796 <__sflush_r+0x1a>
 8009832:	89a3      	ldrh	r3, [r4, #12]
 8009834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009838:	81a3      	strh	r3, [r4, #12]
 800983a:	e7ad      	b.n	8009798 <__sflush_r+0x1c>
 800983c:	690f      	ldr	r7, [r1, #16]
 800983e:	2f00      	cmp	r7, #0
 8009840:	d0a9      	beq.n	8009796 <__sflush_r+0x1a>
 8009842:	0793      	lsls	r3, r2, #30
 8009844:	680e      	ldr	r6, [r1, #0]
 8009846:	bf08      	it	eq
 8009848:	694b      	ldreq	r3, [r1, #20]
 800984a:	600f      	str	r7, [r1, #0]
 800984c:	bf18      	it	ne
 800984e:	2300      	movne	r3, #0
 8009850:	eba6 0807 	sub.w	r8, r6, r7
 8009854:	608b      	str	r3, [r1, #8]
 8009856:	f1b8 0f00 	cmp.w	r8, #0
 800985a:	dd9c      	ble.n	8009796 <__sflush_r+0x1a>
 800985c:	6a21      	ldr	r1, [r4, #32]
 800985e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009860:	4643      	mov	r3, r8
 8009862:	463a      	mov	r2, r7
 8009864:	4628      	mov	r0, r5
 8009866:	47b0      	blx	r6
 8009868:	2800      	cmp	r0, #0
 800986a:	dc06      	bgt.n	800987a <__sflush_r+0xfe>
 800986c:	89a3      	ldrh	r3, [r4, #12]
 800986e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009872:	81a3      	strh	r3, [r4, #12]
 8009874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009878:	e78e      	b.n	8009798 <__sflush_r+0x1c>
 800987a:	4407      	add	r7, r0
 800987c:	eba8 0800 	sub.w	r8, r8, r0
 8009880:	e7e9      	b.n	8009856 <__sflush_r+0xda>
 8009882:	bf00      	nop
 8009884:	20400001 	.word	0x20400001

08009888 <_fflush_r>:
 8009888:	b538      	push	{r3, r4, r5, lr}
 800988a:	690b      	ldr	r3, [r1, #16]
 800988c:	4605      	mov	r5, r0
 800988e:	460c      	mov	r4, r1
 8009890:	b913      	cbnz	r3, 8009898 <_fflush_r+0x10>
 8009892:	2500      	movs	r5, #0
 8009894:	4628      	mov	r0, r5
 8009896:	bd38      	pop	{r3, r4, r5, pc}
 8009898:	b118      	cbz	r0, 80098a2 <_fflush_r+0x1a>
 800989a:	6983      	ldr	r3, [r0, #24]
 800989c:	b90b      	cbnz	r3, 80098a2 <_fflush_r+0x1a>
 800989e:	f000 f887 	bl	80099b0 <__sinit>
 80098a2:	4b14      	ldr	r3, [pc, #80]	; (80098f4 <_fflush_r+0x6c>)
 80098a4:	429c      	cmp	r4, r3
 80098a6:	d11b      	bne.n	80098e0 <_fflush_r+0x58>
 80098a8:	686c      	ldr	r4, [r5, #4]
 80098aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d0ef      	beq.n	8009892 <_fflush_r+0xa>
 80098b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098b4:	07d0      	lsls	r0, r2, #31
 80098b6:	d404      	bmi.n	80098c2 <_fflush_r+0x3a>
 80098b8:	0599      	lsls	r1, r3, #22
 80098ba:	d402      	bmi.n	80098c2 <_fflush_r+0x3a>
 80098bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098be:	f000 f915 	bl	8009aec <__retarget_lock_acquire_recursive>
 80098c2:	4628      	mov	r0, r5
 80098c4:	4621      	mov	r1, r4
 80098c6:	f7ff ff59 	bl	800977c <__sflush_r>
 80098ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098cc:	07da      	lsls	r2, r3, #31
 80098ce:	4605      	mov	r5, r0
 80098d0:	d4e0      	bmi.n	8009894 <_fflush_r+0xc>
 80098d2:	89a3      	ldrh	r3, [r4, #12]
 80098d4:	059b      	lsls	r3, r3, #22
 80098d6:	d4dd      	bmi.n	8009894 <_fflush_r+0xc>
 80098d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098da:	f000 f908 	bl	8009aee <__retarget_lock_release_recursive>
 80098de:	e7d9      	b.n	8009894 <_fflush_r+0xc>
 80098e0:	4b05      	ldr	r3, [pc, #20]	; (80098f8 <_fflush_r+0x70>)
 80098e2:	429c      	cmp	r4, r3
 80098e4:	d101      	bne.n	80098ea <_fflush_r+0x62>
 80098e6:	68ac      	ldr	r4, [r5, #8]
 80098e8:	e7df      	b.n	80098aa <_fflush_r+0x22>
 80098ea:	4b04      	ldr	r3, [pc, #16]	; (80098fc <_fflush_r+0x74>)
 80098ec:	429c      	cmp	r4, r3
 80098ee:	bf08      	it	eq
 80098f0:	68ec      	ldreq	r4, [r5, #12]
 80098f2:	e7da      	b.n	80098aa <_fflush_r+0x22>
 80098f4:	08009ff0 	.word	0x08009ff0
 80098f8:	0800a010 	.word	0x0800a010
 80098fc:	08009fd0 	.word	0x08009fd0

08009900 <std>:
 8009900:	2300      	movs	r3, #0
 8009902:	b510      	push	{r4, lr}
 8009904:	4604      	mov	r4, r0
 8009906:	e9c0 3300 	strd	r3, r3, [r0]
 800990a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800990e:	6083      	str	r3, [r0, #8]
 8009910:	8181      	strh	r1, [r0, #12]
 8009912:	6643      	str	r3, [r0, #100]	; 0x64
 8009914:	81c2      	strh	r2, [r0, #14]
 8009916:	6183      	str	r3, [r0, #24]
 8009918:	4619      	mov	r1, r3
 800991a:	2208      	movs	r2, #8
 800991c:	305c      	adds	r0, #92	; 0x5c
 800991e:	f7ff f86f 	bl	8008a00 <memset>
 8009922:	4b05      	ldr	r3, [pc, #20]	; (8009938 <std+0x38>)
 8009924:	6263      	str	r3, [r4, #36]	; 0x24
 8009926:	4b05      	ldr	r3, [pc, #20]	; (800993c <std+0x3c>)
 8009928:	62a3      	str	r3, [r4, #40]	; 0x28
 800992a:	4b05      	ldr	r3, [pc, #20]	; (8009940 <std+0x40>)
 800992c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800992e:	4b05      	ldr	r3, [pc, #20]	; (8009944 <std+0x44>)
 8009930:	6224      	str	r4, [r4, #32]
 8009932:	6323      	str	r3, [r4, #48]	; 0x30
 8009934:	bd10      	pop	{r4, pc}
 8009936:	bf00      	nop
 8009938:	08009cf1 	.word	0x08009cf1
 800993c:	08009d13 	.word	0x08009d13
 8009940:	08009d4b 	.word	0x08009d4b
 8009944:	08009d6f 	.word	0x08009d6f

08009948 <_cleanup_r>:
 8009948:	4901      	ldr	r1, [pc, #4]	; (8009950 <_cleanup_r+0x8>)
 800994a:	f000 b8af 	b.w	8009aac <_fwalk_reent>
 800994e:	bf00      	nop
 8009950:	08009889 	.word	0x08009889

08009954 <__sfmoreglue>:
 8009954:	b570      	push	{r4, r5, r6, lr}
 8009956:	2268      	movs	r2, #104	; 0x68
 8009958:	1e4d      	subs	r5, r1, #1
 800995a:	4355      	muls	r5, r2
 800995c:	460e      	mov	r6, r1
 800995e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009962:	f7ff f975 	bl	8008c50 <_malloc_r>
 8009966:	4604      	mov	r4, r0
 8009968:	b140      	cbz	r0, 800997c <__sfmoreglue+0x28>
 800996a:	2100      	movs	r1, #0
 800996c:	e9c0 1600 	strd	r1, r6, [r0]
 8009970:	300c      	adds	r0, #12
 8009972:	60a0      	str	r0, [r4, #8]
 8009974:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009978:	f7ff f842 	bl	8008a00 <memset>
 800997c:	4620      	mov	r0, r4
 800997e:	bd70      	pop	{r4, r5, r6, pc}

08009980 <__sfp_lock_acquire>:
 8009980:	4801      	ldr	r0, [pc, #4]	; (8009988 <__sfp_lock_acquire+0x8>)
 8009982:	f000 b8b3 	b.w	8009aec <__retarget_lock_acquire_recursive>
 8009986:	bf00      	nop
 8009988:	24003219 	.word	0x24003219

0800998c <__sfp_lock_release>:
 800998c:	4801      	ldr	r0, [pc, #4]	; (8009994 <__sfp_lock_release+0x8>)
 800998e:	f000 b8ae 	b.w	8009aee <__retarget_lock_release_recursive>
 8009992:	bf00      	nop
 8009994:	24003219 	.word	0x24003219

08009998 <__sinit_lock_acquire>:
 8009998:	4801      	ldr	r0, [pc, #4]	; (80099a0 <__sinit_lock_acquire+0x8>)
 800999a:	f000 b8a7 	b.w	8009aec <__retarget_lock_acquire_recursive>
 800999e:	bf00      	nop
 80099a0:	2400321a 	.word	0x2400321a

080099a4 <__sinit_lock_release>:
 80099a4:	4801      	ldr	r0, [pc, #4]	; (80099ac <__sinit_lock_release+0x8>)
 80099a6:	f000 b8a2 	b.w	8009aee <__retarget_lock_release_recursive>
 80099aa:	bf00      	nop
 80099ac:	2400321a 	.word	0x2400321a

080099b0 <__sinit>:
 80099b0:	b510      	push	{r4, lr}
 80099b2:	4604      	mov	r4, r0
 80099b4:	f7ff fff0 	bl	8009998 <__sinit_lock_acquire>
 80099b8:	69a3      	ldr	r3, [r4, #24]
 80099ba:	b11b      	cbz	r3, 80099c4 <__sinit+0x14>
 80099bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099c0:	f7ff bff0 	b.w	80099a4 <__sinit_lock_release>
 80099c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099c8:	6523      	str	r3, [r4, #80]	; 0x50
 80099ca:	4b13      	ldr	r3, [pc, #76]	; (8009a18 <__sinit+0x68>)
 80099cc:	4a13      	ldr	r2, [pc, #76]	; (8009a1c <__sinit+0x6c>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80099d2:	42a3      	cmp	r3, r4
 80099d4:	bf04      	itt	eq
 80099d6:	2301      	moveq	r3, #1
 80099d8:	61a3      	streq	r3, [r4, #24]
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 f820 	bl	8009a20 <__sfp>
 80099e0:	6060      	str	r0, [r4, #4]
 80099e2:	4620      	mov	r0, r4
 80099e4:	f000 f81c 	bl	8009a20 <__sfp>
 80099e8:	60a0      	str	r0, [r4, #8]
 80099ea:	4620      	mov	r0, r4
 80099ec:	f000 f818 	bl	8009a20 <__sfp>
 80099f0:	2200      	movs	r2, #0
 80099f2:	60e0      	str	r0, [r4, #12]
 80099f4:	2104      	movs	r1, #4
 80099f6:	6860      	ldr	r0, [r4, #4]
 80099f8:	f7ff ff82 	bl	8009900 <std>
 80099fc:	68a0      	ldr	r0, [r4, #8]
 80099fe:	2201      	movs	r2, #1
 8009a00:	2109      	movs	r1, #9
 8009a02:	f7ff ff7d 	bl	8009900 <std>
 8009a06:	68e0      	ldr	r0, [r4, #12]
 8009a08:	2202      	movs	r2, #2
 8009a0a:	2112      	movs	r1, #18
 8009a0c:	f7ff ff78 	bl	8009900 <std>
 8009a10:	2301      	movs	r3, #1
 8009a12:	61a3      	str	r3, [r4, #24]
 8009a14:	e7d2      	b.n	80099bc <__sinit+0xc>
 8009a16:	bf00      	nop
 8009a18:	08009ee8 	.word	0x08009ee8
 8009a1c:	08009949 	.word	0x08009949

08009a20 <__sfp>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	4607      	mov	r7, r0
 8009a24:	f7ff ffac 	bl	8009980 <__sfp_lock_acquire>
 8009a28:	4b1e      	ldr	r3, [pc, #120]	; (8009aa4 <__sfp+0x84>)
 8009a2a:	681e      	ldr	r6, [r3, #0]
 8009a2c:	69b3      	ldr	r3, [r6, #24]
 8009a2e:	b913      	cbnz	r3, 8009a36 <__sfp+0x16>
 8009a30:	4630      	mov	r0, r6
 8009a32:	f7ff ffbd 	bl	80099b0 <__sinit>
 8009a36:	3648      	adds	r6, #72	; 0x48
 8009a38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	d503      	bpl.n	8009a48 <__sfp+0x28>
 8009a40:	6833      	ldr	r3, [r6, #0]
 8009a42:	b30b      	cbz	r3, 8009a88 <__sfp+0x68>
 8009a44:	6836      	ldr	r6, [r6, #0]
 8009a46:	e7f7      	b.n	8009a38 <__sfp+0x18>
 8009a48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a4c:	b9d5      	cbnz	r5, 8009a84 <__sfp+0x64>
 8009a4e:	4b16      	ldr	r3, [pc, #88]	; (8009aa8 <__sfp+0x88>)
 8009a50:	60e3      	str	r3, [r4, #12]
 8009a52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a56:	6665      	str	r5, [r4, #100]	; 0x64
 8009a58:	f000 f847 	bl	8009aea <__retarget_lock_init_recursive>
 8009a5c:	f7ff ff96 	bl	800998c <__sfp_lock_release>
 8009a60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a68:	6025      	str	r5, [r4, #0]
 8009a6a:	61a5      	str	r5, [r4, #24]
 8009a6c:	2208      	movs	r2, #8
 8009a6e:	4629      	mov	r1, r5
 8009a70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a74:	f7fe ffc4 	bl	8008a00 <memset>
 8009a78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a80:	4620      	mov	r0, r4
 8009a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a84:	3468      	adds	r4, #104	; 0x68
 8009a86:	e7d9      	b.n	8009a3c <__sfp+0x1c>
 8009a88:	2104      	movs	r1, #4
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	f7ff ff62 	bl	8009954 <__sfmoreglue>
 8009a90:	4604      	mov	r4, r0
 8009a92:	6030      	str	r0, [r6, #0]
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d1d5      	bne.n	8009a44 <__sfp+0x24>
 8009a98:	f7ff ff78 	bl	800998c <__sfp_lock_release>
 8009a9c:	230c      	movs	r3, #12
 8009a9e:	603b      	str	r3, [r7, #0]
 8009aa0:	e7ee      	b.n	8009a80 <__sfp+0x60>
 8009aa2:	bf00      	nop
 8009aa4:	08009ee8 	.word	0x08009ee8
 8009aa8:	ffff0001 	.word	0xffff0001

08009aac <_fwalk_reent>:
 8009aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab0:	4606      	mov	r6, r0
 8009ab2:	4688      	mov	r8, r1
 8009ab4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ab8:	2700      	movs	r7, #0
 8009aba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009abe:	f1b9 0901 	subs.w	r9, r9, #1
 8009ac2:	d505      	bpl.n	8009ad0 <_fwalk_reent+0x24>
 8009ac4:	6824      	ldr	r4, [r4, #0]
 8009ac6:	2c00      	cmp	r4, #0
 8009ac8:	d1f7      	bne.n	8009aba <_fwalk_reent+0xe>
 8009aca:	4638      	mov	r0, r7
 8009acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ad0:	89ab      	ldrh	r3, [r5, #12]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d907      	bls.n	8009ae6 <_fwalk_reent+0x3a>
 8009ad6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ada:	3301      	adds	r3, #1
 8009adc:	d003      	beq.n	8009ae6 <_fwalk_reent+0x3a>
 8009ade:	4629      	mov	r1, r5
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	47c0      	blx	r8
 8009ae4:	4307      	orrs	r7, r0
 8009ae6:	3568      	adds	r5, #104	; 0x68
 8009ae8:	e7e9      	b.n	8009abe <_fwalk_reent+0x12>

08009aea <__retarget_lock_init_recursive>:
 8009aea:	4770      	bx	lr

08009aec <__retarget_lock_acquire_recursive>:
 8009aec:	4770      	bx	lr

08009aee <__retarget_lock_release_recursive>:
 8009aee:	4770      	bx	lr

08009af0 <__swhatbuf_r>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	460e      	mov	r6, r1
 8009af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af8:	2900      	cmp	r1, #0
 8009afa:	b096      	sub	sp, #88	; 0x58
 8009afc:	4614      	mov	r4, r2
 8009afe:	461d      	mov	r5, r3
 8009b00:	da08      	bge.n	8009b14 <__swhatbuf_r+0x24>
 8009b02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009b06:	2200      	movs	r2, #0
 8009b08:	602a      	str	r2, [r5, #0]
 8009b0a:	061a      	lsls	r2, r3, #24
 8009b0c:	d410      	bmi.n	8009b30 <__swhatbuf_r+0x40>
 8009b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b12:	e00e      	b.n	8009b32 <__swhatbuf_r+0x42>
 8009b14:	466a      	mov	r2, sp
 8009b16:	f000 f951 	bl	8009dbc <_fstat_r>
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	dbf1      	blt.n	8009b02 <__swhatbuf_r+0x12>
 8009b1e:	9a01      	ldr	r2, [sp, #4]
 8009b20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b28:	425a      	negs	r2, r3
 8009b2a:	415a      	adcs	r2, r3
 8009b2c:	602a      	str	r2, [r5, #0]
 8009b2e:	e7ee      	b.n	8009b0e <__swhatbuf_r+0x1e>
 8009b30:	2340      	movs	r3, #64	; 0x40
 8009b32:	2000      	movs	r0, #0
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	b016      	add	sp, #88	; 0x58
 8009b38:	bd70      	pop	{r4, r5, r6, pc}
	...

08009b3c <__smakebuf_r>:
 8009b3c:	898b      	ldrh	r3, [r1, #12]
 8009b3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b40:	079d      	lsls	r5, r3, #30
 8009b42:	4606      	mov	r6, r0
 8009b44:	460c      	mov	r4, r1
 8009b46:	d507      	bpl.n	8009b58 <__smakebuf_r+0x1c>
 8009b48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	6123      	str	r3, [r4, #16]
 8009b50:	2301      	movs	r3, #1
 8009b52:	6163      	str	r3, [r4, #20]
 8009b54:	b002      	add	sp, #8
 8009b56:	bd70      	pop	{r4, r5, r6, pc}
 8009b58:	ab01      	add	r3, sp, #4
 8009b5a:	466a      	mov	r2, sp
 8009b5c:	f7ff ffc8 	bl	8009af0 <__swhatbuf_r>
 8009b60:	9900      	ldr	r1, [sp, #0]
 8009b62:	4605      	mov	r5, r0
 8009b64:	4630      	mov	r0, r6
 8009b66:	f7ff f873 	bl	8008c50 <_malloc_r>
 8009b6a:	b948      	cbnz	r0, 8009b80 <__smakebuf_r+0x44>
 8009b6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b70:	059a      	lsls	r2, r3, #22
 8009b72:	d4ef      	bmi.n	8009b54 <__smakebuf_r+0x18>
 8009b74:	f023 0303 	bic.w	r3, r3, #3
 8009b78:	f043 0302 	orr.w	r3, r3, #2
 8009b7c:	81a3      	strh	r3, [r4, #12]
 8009b7e:	e7e3      	b.n	8009b48 <__smakebuf_r+0xc>
 8009b80:	4b0d      	ldr	r3, [pc, #52]	; (8009bb8 <__smakebuf_r+0x7c>)
 8009b82:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b84:	89a3      	ldrh	r3, [r4, #12]
 8009b86:	6020      	str	r0, [r4, #0]
 8009b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b8c:	81a3      	strh	r3, [r4, #12]
 8009b8e:	9b00      	ldr	r3, [sp, #0]
 8009b90:	6163      	str	r3, [r4, #20]
 8009b92:	9b01      	ldr	r3, [sp, #4]
 8009b94:	6120      	str	r0, [r4, #16]
 8009b96:	b15b      	cbz	r3, 8009bb0 <__smakebuf_r+0x74>
 8009b98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f000 f91f 	bl	8009de0 <_isatty_r>
 8009ba2:	b128      	cbz	r0, 8009bb0 <__smakebuf_r+0x74>
 8009ba4:	89a3      	ldrh	r3, [r4, #12]
 8009ba6:	f023 0303 	bic.w	r3, r3, #3
 8009baa:	f043 0301 	orr.w	r3, r3, #1
 8009bae:	81a3      	strh	r3, [r4, #12]
 8009bb0:	89a0      	ldrh	r0, [r4, #12]
 8009bb2:	4305      	orrs	r5, r0
 8009bb4:	81a5      	strh	r5, [r4, #12]
 8009bb6:	e7cd      	b.n	8009b54 <__smakebuf_r+0x18>
 8009bb8:	08009949 	.word	0x08009949

08009bbc <memmove>:
 8009bbc:	4288      	cmp	r0, r1
 8009bbe:	b510      	push	{r4, lr}
 8009bc0:	eb01 0402 	add.w	r4, r1, r2
 8009bc4:	d902      	bls.n	8009bcc <memmove+0x10>
 8009bc6:	4284      	cmp	r4, r0
 8009bc8:	4623      	mov	r3, r4
 8009bca:	d807      	bhi.n	8009bdc <memmove+0x20>
 8009bcc:	1e43      	subs	r3, r0, #1
 8009bce:	42a1      	cmp	r1, r4
 8009bd0:	d008      	beq.n	8009be4 <memmove+0x28>
 8009bd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bda:	e7f8      	b.n	8009bce <memmove+0x12>
 8009bdc:	4402      	add	r2, r0
 8009bde:	4601      	mov	r1, r0
 8009be0:	428a      	cmp	r2, r1
 8009be2:	d100      	bne.n	8009be6 <memmove+0x2a>
 8009be4:	bd10      	pop	{r4, pc}
 8009be6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bee:	e7f7      	b.n	8009be0 <memmove+0x24>

08009bf0 <__malloc_lock>:
 8009bf0:	4801      	ldr	r0, [pc, #4]	; (8009bf8 <__malloc_lock+0x8>)
 8009bf2:	f7ff bf7b 	b.w	8009aec <__retarget_lock_acquire_recursive>
 8009bf6:	bf00      	nop
 8009bf8:	24003218 	.word	0x24003218

08009bfc <__malloc_unlock>:
 8009bfc:	4801      	ldr	r0, [pc, #4]	; (8009c04 <__malloc_unlock+0x8>)
 8009bfe:	f7ff bf76 	b.w	8009aee <__retarget_lock_release_recursive>
 8009c02:	bf00      	nop
 8009c04:	24003218 	.word	0x24003218

08009c08 <_realloc_r>:
 8009c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c0c:	4680      	mov	r8, r0
 8009c0e:	4614      	mov	r4, r2
 8009c10:	460e      	mov	r6, r1
 8009c12:	b921      	cbnz	r1, 8009c1e <_realloc_r+0x16>
 8009c14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c18:	4611      	mov	r1, r2
 8009c1a:	f7ff b819 	b.w	8008c50 <_malloc_r>
 8009c1e:	b92a      	cbnz	r2, 8009c2c <_realloc_r+0x24>
 8009c20:	f7fe ffaa 	bl	8008b78 <_free_r>
 8009c24:	4625      	mov	r5, r4
 8009c26:	4628      	mov	r0, r5
 8009c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c2c:	f000 f8fa 	bl	8009e24 <_malloc_usable_size_r>
 8009c30:	4284      	cmp	r4, r0
 8009c32:	4607      	mov	r7, r0
 8009c34:	d802      	bhi.n	8009c3c <_realloc_r+0x34>
 8009c36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c3a:	d812      	bhi.n	8009c62 <_realloc_r+0x5a>
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	4640      	mov	r0, r8
 8009c40:	f7ff f806 	bl	8008c50 <_malloc_r>
 8009c44:	4605      	mov	r5, r0
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d0ed      	beq.n	8009c26 <_realloc_r+0x1e>
 8009c4a:	42bc      	cmp	r4, r7
 8009c4c:	4622      	mov	r2, r4
 8009c4e:	4631      	mov	r1, r6
 8009c50:	bf28      	it	cs
 8009c52:	463a      	movcs	r2, r7
 8009c54:	f7fe fec6 	bl	80089e4 <memcpy>
 8009c58:	4631      	mov	r1, r6
 8009c5a:	4640      	mov	r0, r8
 8009c5c:	f7fe ff8c 	bl	8008b78 <_free_r>
 8009c60:	e7e1      	b.n	8009c26 <_realloc_r+0x1e>
 8009c62:	4635      	mov	r5, r6
 8009c64:	e7df      	b.n	8009c26 <_realloc_r+0x1e>

08009c66 <_raise_r>:
 8009c66:	291f      	cmp	r1, #31
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	460d      	mov	r5, r1
 8009c6e:	d904      	bls.n	8009c7a <_raise_r+0x14>
 8009c70:	2316      	movs	r3, #22
 8009c72:	6003      	str	r3, [r0, #0]
 8009c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c78:	bd38      	pop	{r3, r4, r5, pc}
 8009c7a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c7c:	b112      	cbz	r2, 8009c84 <_raise_r+0x1e>
 8009c7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c82:	b94b      	cbnz	r3, 8009c98 <_raise_r+0x32>
 8009c84:	4620      	mov	r0, r4
 8009c86:	f000 f831 	bl	8009cec <_getpid_r>
 8009c8a:	462a      	mov	r2, r5
 8009c8c:	4601      	mov	r1, r0
 8009c8e:	4620      	mov	r0, r4
 8009c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c94:	f000 b818 	b.w	8009cc8 <_kill_r>
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d00a      	beq.n	8009cb2 <_raise_r+0x4c>
 8009c9c:	1c59      	adds	r1, r3, #1
 8009c9e:	d103      	bne.n	8009ca8 <_raise_r+0x42>
 8009ca0:	2316      	movs	r3, #22
 8009ca2:	6003      	str	r3, [r0, #0]
 8009ca4:	2001      	movs	r0, #1
 8009ca6:	e7e7      	b.n	8009c78 <_raise_r+0x12>
 8009ca8:	2400      	movs	r4, #0
 8009caa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009cae:	4628      	mov	r0, r5
 8009cb0:	4798      	blx	r3
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	e7e0      	b.n	8009c78 <_raise_r+0x12>
	...

08009cb8 <raise>:
 8009cb8:	4b02      	ldr	r3, [pc, #8]	; (8009cc4 <raise+0xc>)
 8009cba:	4601      	mov	r1, r0
 8009cbc:	6818      	ldr	r0, [r3, #0]
 8009cbe:	f7ff bfd2 	b.w	8009c66 <_raise_r>
 8009cc2:	bf00      	nop
 8009cc4:	24000128 	.word	0x24000128

08009cc8 <_kill_r>:
 8009cc8:	b538      	push	{r3, r4, r5, lr}
 8009cca:	4d07      	ldr	r5, [pc, #28]	; (8009ce8 <_kill_r+0x20>)
 8009ccc:	2300      	movs	r3, #0
 8009cce:	4604      	mov	r4, r0
 8009cd0:	4608      	mov	r0, r1
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	602b      	str	r3, [r5, #0]
 8009cd6:	f7f6 fd7f 	bl	80007d8 <_kill>
 8009cda:	1c43      	adds	r3, r0, #1
 8009cdc:	d102      	bne.n	8009ce4 <_kill_r+0x1c>
 8009cde:	682b      	ldr	r3, [r5, #0]
 8009ce0:	b103      	cbz	r3, 8009ce4 <_kill_r+0x1c>
 8009ce2:	6023      	str	r3, [r4, #0]
 8009ce4:	bd38      	pop	{r3, r4, r5, pc}
 8009ce6:	bf00      	nop
 8009ce8:	2400321c 	.word	0x2400321c

08009cec <_getpid_r>:
 8009cec:	f7f6 bd6c 	b.w	80007c8 <_getpid>

08009cf0 <__sread>:
 8009cf0:	b510      	push	{r4, lr}
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf8:	f000 f89c 	bl	8009e34 <_read_r>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	bfab      	itete	ge
 8009d00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d02:	89a3      	ldrhlt	r3, [r4, #12]
 8009d04:	181b      	addge	r3, r3, r0
 8009d06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d0a:	bfac      	ite	ge
 8009d0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d0e:	81a3      	strhlt	r3, [r4, #12]
 8009d10:	bd10      	pop	{r4, pc}

08009d12 <__swrite>:
 8009d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d16:	461f      	mov	r7, r3
 8009d18:	898b      	ldrh	r3, [r1, #12]
 8009d1a:	05db      	lsls	r3, r3, #23
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	460c      	mov	r4, r1
 8009d20:	4616      	mov	r6, r2
 8009d22:	d505      	bpl.n	8009d30 <__swrite+0x1e>
 8009d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d28:	2302      	movs	r3, #2
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f000 f868 	bl	8009e00 <_lseek_r>
 8009d30:	89a3      	ldrh	r3, [r4, #12]
 8009d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d3a:	81a3      	strh	r3, [r4, #12]
 8009d3c:	4632      	mov	r2, r6
 8009d3e:	463b      	mov	r3, r7
 8009d40:	4628      	mov	r0, r5
 8009d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d46:	f000 b817 	b.w	8009d78 <_write_r>

08009d4a <__sseek>:
 8009d4a:	b510      	push	{r4, lr}
 8009d4c:	460c      	mov	r4, r1
 8009d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d52:	f000 f855 	bl	8009e00 <_lseek_r>
 8009d56:	1c43      	adds	r3, r0, #1
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	bf15      	itete	ne
 8009d5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d66:	81a3      	strheq	r3, [r4, #12]
 8009d68:	bf18      	it	ne
 8009d6a:	81a3      	strhne	r3, [r4, #12]
 8009d6c:	bd10      	pop	{r4, pc}

08009d6e <__sclose>:
 8009d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d72:	f000 b813 	b.w	8009d9c <_close_r>
	...

08009d78 <_write_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	4d07      	ldr	r5, [pc, #28]	; (8009d98 <_write_r+0x20>)
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	4608      	mov	r0, r1
 8009d80:	4611      	mov	r1, r2
 8009d82:	2200      	movs	r2, #0
 8009d84:	602a      	str	r2, [r5, #0]
 8009d86:	461a      	mov	r2, r3
 8009d88:	f7f6 fd5d 	bl	8000846 <_write>
 8009d8c:	1c43      	adds	r3, r0, #1
 8009d8e:	d102      	bne.n	8009d96 <_write_r+0x1e>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	b103      	cbz	r3, 8009d96 <_write_r+0x1e>
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	bd38      	pop	{r3, r4, r5, pc}
 8009d98:	2400321c 	.word	0x2400321c

08009d9c <_close_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4d06      	ldr	r5, [pc, #24]	; (8009db8 <_close_r+0x1c>)
 8009da0:	2300      	movs	r3, #0
 8009da2:	4604      	mov	r4, r0
 8009da4:	4608      	mov	r0, r1
 8009da6:	602b      	str	r3, [r5, #0]
 8009da8:	f7f6 fd69 	bl	800087e <_close>
 8009dac:	1c43      	adds	r3, r0, #1
 8009dae:	d102      	bne.n	8009db6 <_close_r+0x1a>
 8009db0:	682b      	ldr	r3, [r5, #0]
 8009db2:	b103      	cbz	r3, 8009db6 <_close_r+0x1a>
 8009db4:	6023      	str	r3, [r4, #0]
 8009db6:	bd38      	pop	{r3, r4, r5, pc}
 8009db8:	2400321c 	.word	0x2400321c

08009dbc <_fstat_r>:
 8009dbc:	b538      	push	{r3, r4, r5, lr}
 8009dbe:	4d07      	ldr	r5, [pc, #28]	; (8009ddc <_fstat_r+0x20>)
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	4608      	mov	r0, r1
 8009dc6:	4611      	mov	r1, r2
 8009dc8:	602b      	str	r3, [r5, #0]
 8009dca:	f7f6 fd64 	bl	8000896 <_fstat>
 8009dce:	1c43      	adds	r3, r0, #1
 8009dd0:	d102      	bne.n	8009dd8 <_fstat_r+0x1c>
 8009dd2:	682b      	ldr	r3, [r5, #0]
 8009dd4:	b103      	cbz	r3, 8009dd8 <_fstat_r+0x1c>
 8009dd6:	6023      	str	r3, [r4, #0]
 8009dd8:	bd38      	pop	{r3, r4, r5, pc}
 8009dda:	bf00      	nop
 8009ddc:	2400321c 	.word	0x2400321c

08009de0 <_isatty_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	4d06      	ldr	r5, [pc, #24]	; (8009dfc <_isatty_r+0x1c>)
 8009de4:	2300      	movs	r3, #0
 8009de6:	4604      	mov	r4, r0
 8009de8:	4608      	mov	r0, r1
 8009dea:	602b      	str	r3, [r5, #0]
 8009dec:	f7f6 fd63 	bl	80008b6 <_isatty>
 8009df0:	1c43      	adds	r3, r0, #1
 8009df2:	d102      	bne.n	8009dfa <_isatty_r+0x1a>
 8009df4:	682b      	ldr	r3, [r5, #0]
 8009df6:	b103      	cbz	r3, 8009dfa <_isatty_r+0x1a>
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	bd38      	pop	{r3, r4, r5, pc}
 8009dfc:	2400321c 	.word	0x2400321c

08009e00 <_lseek_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	4d07      	ldr	r5, [pc, #28]	; (8009e20 <_lseek_r+0x20>)
 8009e04:	4604      	mov	r4, r0
 8009e06:	4608      	mov	r0, r1
 8009e08:	4611      	mov	r1, r2
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	602a      	str	r2, [r5, #0]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	f7f6 fd5c 	bl	80008cc <_lseek>
 8009e14:	1c43      	adds	r3, r0, #1
 8009e16:	d102      	bne.n	8009e1e <_lseek_r+0x1e>
 8009e18:	682b      	ldr	r3, [r5, #0]
 8009e1a:	b103      	cbz	r3, 8009e1e <_lseek_r+0x1e>
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	bd38      	pop	{r3, r4, r5, pc}
 8009e20:	2400321c 	.word	0x2400321c

08009e24 <_malloc_usable_size_r>:
 8009e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e28:	1f18      	subs	r0, r3, #4
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	bfbc      	itt	lt
 8009e2e:	580b      	ldrlt	r3, [r1, r0]
 8009e30:	18c0      	addlt	r0, r0, r3
 8009e32:	4770      	bx	lr

08009e34 <_read_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4d07      	ldr	r5, [pc, #28]	; (8009e54 <_read_r+0x20>)
 8009e38:	4604      	mov	r4, r0
 8009e3a:	4608      	mov	r0, r1
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	2200      	movs	r2, #0
 8009e40:	602a      	str	r2, [r5, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	f7f6 fce2 	bl	800080c <_read>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d102      	bne.n	8009e52 <_read_r+0x1e>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	b103      	cbz	r3, 8009e52 <_read_r+0x1e>
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	2400321c 	.word	0x2400321c

08009e58 <_init>:
 8009e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5a:	bf00      	nop
 8009e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5e:	bc08      	pop	{r3}
 8009e60:	469e      	mov	lr, r3
 8009e62:	4770      	bx	lr

08009e64 <_fini>:
 8009e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e66:	bf00      	nop
 8009e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e6a:	bc08      	pop	{r3}
 8009e6c:	469e      	mov	lr, r3
 8009e6e:	4770      	bx	lr
